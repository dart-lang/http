// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface`
class UrlRequestCallbackProxy_UrlRequestCallbackInterface
    extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequestCallbackProxy_UrlRequestCallbackInterface>
      $type;

  @_$jni.internal
  UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface');

  /// The type which includes information such as the signature of this class.
  static const type =
      $UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type();
  static final _id_onRedirectReceived = _class.instanceMethodId(
    r'onRedirectReceived',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V',
  );

  static final _onRedirectReceived = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)`
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    _$jni.JString string,
  ) {
    _onRedirectReceived(
            reference.pointer,
            _id_onRedirectReceived as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_onResponseStarted = _class.instanceMethodId(
    r'onResponseStarted',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onResponseStarted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onResponseStarted(
            reference.pointer,
            _id_onResponseStarted as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onReadCompleted = _class.instanceMethodId(
    r'onReadCompleted',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V',
  );

  static final _onReadCompleted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)`
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    _$jni.JByteBuffer byteBuffer,
  ) {
    _onReadCompleted(
            reference.pointer,
            _id_onReadCompleted as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r'onSucceeded',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onSucceeded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onSucceeded(reference.pointer, _id_onSucceeded as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)`
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    _onFailed(
            reference.pointer,
            _id_onFailed as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            cronetException.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core
      .Map<int, $UrlRequestCallbackProxy_UrlRequestCallbackInterface>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onRedirectReceived(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V') {
        _$impls[$p]!.onRedirectReceived(
          $a[0].as(const $UrlRequest$Type(), releaseOriginal: true),
          $a[1].as(const $UrlResponseInfo$Type(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'onResponseStarted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V') {
        _$impls[$p]!.onResponseStarted(
          $a[0].as(const $UrlRequest$Type(), releaseOriginal: true),
          $a[1].as(const $UrlResponseInfo$Type(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'onReadCompleted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V') {
        _$impls[$p]!.onReadCompleted(
          $a[0].as(const $UrlRequest$Type(), releaseOriginal: true),
          $a[1].as(const $UrlResponseInfo$Type(), releaseOriginal: true),
          $a[2].as(const _$jni.JByteBufferType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'onSucceeded(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V') {
        _$impls[$p]!.onSucceeded(
          $a[0].as(const $UrlRequest$Type(), releaseOriginal: true),
          $a[1].as(const $UrlResponseInfo$Type(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'onFailed(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V') {
        _$impls[$p]!.onFailed(
          $a[0].as(const $UrlRequest$Type(), releaseOriginal: true),
          $a[1].as(const $UrlResponseInfo$Type(), releaseOriginal: true),
          $a[2].as(const $CronetException$Type(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $UrlRequestCallbackProxy_UrlRequestCallbackInterface $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface',
      $p,
      _$invokePointer,
      [
        if ($impl.onRedirectReceived$async)
          r'onRedirectReceived(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V',
        if ($impl.onResponseStarted$async)
          r'onResponseStarted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
        if ($impl.onReadCompleted$async)
          r'onReadCompleted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V',
        if ($impl.onSucceeded$async)
          r'onSucceeded(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
        if ($impl.onFailed$async)
          r'onFailed(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory UrlRequestCallbackProxy_UrlRequestCallbackInterface.implement(
    $UrlRequestCallbackProxy_UrlRequestCallbackInterface $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $UrlRequestCallbackProxy_UrlRequestCallbackInterface {
  factory $UrlRequestCallbackProxy_UrlRequestCallbackInterface({
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, _$jni.JString string)
        onRedirectReceived,
    bool onRedirectReceived$async,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onResponseStarted,
    bool onResponseStarted$async,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, _$jni.JByteBuffer byteBuffer)
        onReadCompleted,
    bool onReadCompleted$async,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onSucceeded,
    bool onSucceeded$async,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, CronetException cronetException)
        onFailed,
    bool onFailed$async,
  }) = _$UrlRequestCallbackProxy_UrlRequestCallbackInterface;

  void onRedirectReceived(UrlRequest urlRequest,
      UrlResponseInfo urlResponseInfo, _$jni.JString string);
  bool get onRedirectReceived$async => false;
  void onResponseStarted(
      UrlRequest urlRequest, UrlResponseInfo urlResponseInfo);
  bool get onResponseStarted$async => false;
  void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      _$jni.JByteBuffer byteBuffer);
  bool get onReadCompleted$async => false;
  void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo);
  bool get onSucceeded$async => false;
  void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException);
  bool get onFailed$async => false;
}

class _$UrlRequestCallbackProxy_UrlRequestCallbackInterface
    implements $UrlRequestCallbackProxy_UrlRequestCallbackInterface {
  _$UrlRequestCallbackProxy_UrlRequestCallbackInterface({
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, _$jni.JString string)
        onRedirectReceived,
    this.onRedirectReceived$async = false,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onResponseStarted,
    this.onResponseStarted$async = false,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, _$jni.JByteBuffer byteBuffer)
        onReadCompleted,
    this.onReadCompleted$async = false,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onSucceeded,
    this.onSucceeded$async = false,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, CronetException cronetException)
        onFailed,
    this.onFailed$async = false,
  })  : _onRedirectReceived = onRedirectReceived,
        _onResponseStarted = onResponseStarted,
        _onReadCompleted = onReadCompleted,
        _onSucceeded = onSucceeded,
        _onFailed = onFailed;

  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      _$jni.JString string) _onRedirectReceived;
  final bool onRedirectReceived$async;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
      _onResponseStarted;
  final bool onResponseStarted$async;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      _$jni.JByteBuffer byteBuffer) _onReadCompleted;
  final bool onReadCompleted$async;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
      _onSucceeded;
  final bool onSucceeded$async;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException) _onFailed;
  final bool onFailed$async;

  void onRedirectReceived(UrlRequest urlRequest,
      UrlResponseInfo urlResponseInfo, _$jni.JString string) {
    return _onRedirectReceived(urlRequest, urlResponseInfo, string);
  }

  void onResponseStarted(
      UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) {
    return _onResponseStarted(urlRequest, urlResponseInfo);
  }

  void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      _$jni.JByteBuffer byteBuffer) {
    return _onReadCompleted(urlRequest, urlResponseInfo, byteBuffer);
  }

  void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) {
    return _onSucceeded(urlRequest, urlResponseInfo);
  }

  void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException) {
    return _onFailed(urlRequest, urlResponseInfo, cronetException);
  }
}

final class $UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type
    extends _$jni
    .JObjType<UrlRequestCallbackProxy_UrlRequestCallbackInterface> {
  @_$jni.internal
  const $UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;';

  @_$jni.internal
  @_$core.override
  UrlRequestCallbackProxy_UrlRequestCallbackInterface fromReference(
          _$jni.JReference reference) =>
      UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromReference(
          reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type) &&
        other is $UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type;
  }
}

/// from: `io.flutter.plugins.cronet_http.UrlRequestCallbackProxy`
class UrlRequestCallbackProxy extends UrlRequest_Callback {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequestCallbackProxy> $type;

  @_$jni.internal
  UrlRequestCallbackProxy.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugins/cronet_http/UrlRequestCallbackProxy');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequestCallbackProxy$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface urlRequestCallbackInterface)`
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlRequestCallbackProxy(
    UrlRequestCallbackProxy_UrlRequestCallbackInterface
        urlRequestCallbackInterface,
  ) {
    return UrlRequestCallbackProxy.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            urlRequestCallbackInterface.reference.pointer)
        .reference);
  }

  static final _id_getCallback = _class.instanceMethodId(
    r'getCallback',
    r'()Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;',
  );

  static final _getCallback = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface getCallback()`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequestCallbackProxy_UrlRequestCallbackInterface getCallback() {
    return _getCallback(
            reference.pointer, _id_getCallback as _$jni.JMethodIDPtr)
        .object(
            const $UrlRequestCallbackProxy_UrlRequestCallbackInterface$Type());
  }

  static final _id_onRedirectReceived = _class.instanceMethodId(
    r'onRedirectReceived',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V',
  );

  static final _onRedirectReceived = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)`
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    _$jni.JString string,
  ) {
    _onRedirectReceived(
            reference.pointer,
            _id_onRedirectReceived as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_onResponseStarted = _class.instanceMethodId(
    r'onResponseStarted',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onResponseStarted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onResponseStarted(
            reference.pointer,
            _id_onResponseStarted as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onReadCompleted = _class.instanceMethodId(
    r'onReadCompleted',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V',
  );

  static final _onReadCompleted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)`
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    _$jni.JByteBuffer byteBuffer,
  ) {
    _onReadCompleted(
            reference.pointer,
            _id_onReadCompleted as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r'onSucceeded',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onSucceeded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onSucceeded(reference.pointer, _id_onSucceeded as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)`
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    _onFailed(
            reference.pointer,
            _id_onFailed as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            cronetException.reference.pointer)
        .check();
  }
}

final class $UrlRequestCallbackProxy$Type
    extends _$jni.JObjType<UrlRequestCallbackProxy> {
  @_$jni.internal
  const $UrlRequestCallbackProxy$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy;';

  @_$jni.internal
  @_$core.override
  UrlRequestCallbackProxy fromReference(_$jni.JReference reference) =>
      UrlRequestCallbackProxy.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const $UrlRequest_Callback$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($UrlRequestCallbackProxy$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequestCallbackProxy$Type) &&
        other is $UrlRequestCallbackProxy$Type;
  }
}

/// from: `java.net.URL`
class URL extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<URL> $type;

  @_$jni.internal
  URL.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'java/net/URL');

  /// The type which includes information such as the signature of this class.
  static const type = $URL$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1, int i, java.lang.String string2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory URL(
    _$jni.JString string,
    _$jni.JString string1,
    int i,
    _$jni.JString string2,
  ) {
    return URL.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            string2.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
  ) {
    return URL.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1, int i, java.lang.String string2, java.net.URLStreamHandler uRLStreamHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new$2(
    _$jni.JString string,
    _$jni.JString string1,
    int i,
    _$jni.JString string2,
    _$jni.JObject uRLStreamHandler,
  ) {
    return URL.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            string2.reference.pointer,
            uRLStreamHandler.reference.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$3 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new$3(
    _$jni.JString string,
  ) {
    return URL.fromReference(_new$3(_class.reference.pointer,
            _id_new$3 as _$jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Ljava/net/URL;Ljava/lang/String;)V',
  );

  static final _new$4 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.net.URL uRL, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new$4(
    URL uRL,
    _$jni.JString string,
  ) {
    return URL.fromReference(_new$4(
            _class.reference.pointer,
            _id_new$4 as _$jni.JMethodIDPtr,
            uRL.reference.pointer,
            string.reference.pointer)
        .reference);
  }

  static final _id_new$5 = _class.constructorId(
    r'(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V',
  );

  static final _new$5 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.net.URL uRL, java.lang.String string, java.net.URLStreamHandler uRLStreamHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new$5(
    URL uRL,
    _$jni.JString string,
    _$jni.JObject uRLStreamHandler,
  ) {
    return URL.fromReference(_new$5(
            _class.reference.pointer,
            _id_new$5 as _$jni.JMethodIDPtr,
            uRL.reference.pointer,
            string.reference.pointer,
            uRLStreamHandler.reference.pointer)
        .reference);
  }

  static final _id_getQuery = _class.instanceMethodId(
    r'getQuery',
    r'()Ljava/lang/String;',
  );

  static final _getQuery = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getQuery() {
    return _getQuery(reference.pointer, _id_getQuery as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getPath = _class.instanceMethodId(
    r'getPath',
    r'()Ljava/lang/String;',
  );

  static final _getPath = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getPath()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getPath() {
    return _getPath(reference.pointer, _id_getPath as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r'getUserInfo',
    r'()Ljava/lang/String;',
  );

  static final _getUserInfo = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUserInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUserInfo() {
    return _getUserInfo(
            reference.pointer, _id_getUserInfo as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getAuthority = _class.instanceMethodId(
    r'getAuthority',
    r'()Ljava/lang/String;',
  );

  static final _getAuthority = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAuthority()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getAuthority() {
    return _getAuthority(
            reference.pointer, _id_getAuthority as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getPort()`
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDefaultPort = _class.instanceMethodId(
    r'getDefaultPort',
    r'()I',
  );

  static final _getDefaultPort = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getDefaultPort()`
  int getDefaultPort() {
    return _getDefaultPort(
            reference.pointer, _id_getDefaultPort as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getProtocol = _class.instanceMethodId(
    r'getProtocol',
    r'()Ljava/lang/String;',
  );

  static final _getProtocol = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getProtocol()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getProtocol() {
    return _getProtocol(
            reference.pointer, _id_getProtocol as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Ljava/lang/String;',
  );

  static final _getHost = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getHost()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getHost() {
    return _getHost(reference.pointer, _id_getHost as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getFile = _class.instanceMethodId(
    r'getFile',
    r'()Ljava/lang/String;',
  );

  static final _getFile = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getFile()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getFile() {
    return _getFile(reference.pointer, _id_getFile as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getRef = _class.instanceMethodId(
    r'getRef',
    r'()Ljava/lang/String;',
  );

  static final _getRef = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getRef()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getRef() {
    return _getRef(reference.pointer, _id_getRef as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_sameFile = _class.instanceMethodId(
    r'sameFile',
    r'(Ljava/net/URL;)Z',
  );

  static final _sameFile = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean sameFile(java.net.URL uRL)`
  bool sameFile(
    URL uRL,
  ) {
    return _sameFile(reference.pointer, _id_sameFile as _$jni.JMethodIDPtr,
            uRL.reference.pointer)
        .boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_toExternalForm = _class.instanceMethodId(
    r'toExternalForm',
    r'()Ljava/lang/String;',
  );

  static final _toExternalForm = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toExternalForm()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toExternalForm() {
    return _toExternalForm(
            reference.pointer, _id_toExternalForm as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r'toURI',
    r'()Ljava/net/URI;',
  );

  static final _toURI = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.net.URI toURI()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject toURI() {
    return _toURI(reference.pointer, _id_toURI as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_openConnection = _class.instanceMethodId(
    r'openConnection',
    r'()Ljava/net/URLConnection;',
  );

  static final _openConnection = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.net.URLConnection openConnection()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openConnection() {
    return _openConnection(
            reference.pointer, _id_openConnection as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_openConnection$1 = _class.instanceMethodId(
    r'openConnection',
    r'(Ljava/net/Proxy;)Ljava/net/URLConnection;',
  );

  static final _openConnection$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.net.URLConnection openConnection(java.net.Proxy proxy)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openConnection$1(
    _$jni.JObject proxy,
  ) {
    return _openConnection$1(reference.pointer,
            _id_openConnection$1 as _$jni.JMethodIDPtr, proxy.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openStream = _class.instanceMethodId(
    r'openStream',
    r'()Ljava/io/InputStream;',
  );

  static final _openStream = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.io.InputStream openStream()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openStream() {
    return _openStream(reference.pointer, _id_openStream as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getContent = _class.instanceMethodId(
    r'getContent',
    r'()Ljava/lang/Object;',
  );

  static final _getContent = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Object getContent()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getContent() {
    return _getContent(reference.pointer, _id_getContent as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getContent$1 = _class.instanceMethodId(
    r'getContent',
    r'([Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getContent$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.lang.Object getContent(java.lang.Class[] classs)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getContent$1(
    _$jni.JArray<_$jni.JObject> classs,
  ) {
    return _getContent$1(reference.pointer,
            _id_getContent$1 as _$jni.JMethodIDPtr, classs.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_setURLStreamHandlerFactory = _class.staticMethodId(
    r'setURLStreamHandlerFactory',
    r'(Ljava/net/URLStreamHandlerFactory;)V',
  );

  static final _setURLStreamHandlerFactory =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory uRLStreamHandlerFactory)`
  static void setURLStreamHandlerFactory(
    _$jni.JObject uRLStreamHandlerFactory,
  ) {
    _setURLStreamHandlerFactory(
            _class.reference.pointer,
            _id_setURLStreamHandlerFactory as _$jni.JMethodIDPtr,
            uRLStreamHandlerFactory.reference.pointer)
        .check();
  }
}

final class $URL$Type extends _$jni.JObjType<URL> {
  @_$jni.internal
  const $URL$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Ljava/net/URL;';

  @_$jni.internal
  @_$core.override
  URL fromReference(_$jni.JReference reference) => URL.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($URL$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($URL$Type) && other is $URL$Type;
  }
}

/// from: `java.util.concurrent.Executors`
class Executors extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Executors> $type;

  @_$jni.internal
  Executors.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'java/util/concurrent/Executors');

  /// The type which includes information such as the signature of this class.
  static const type = $Executors$Type();
  static final _id_newFixedThreadPool = _class.staticMethodId(
    r'newFixedThreadPool',
    r'(I)Ljava/util/concurrent/ExecutorService;',
  );

  static final _newFixedThreadPool = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public java.util.concurrent.ExecutorService newFixedThreadPool(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newFixedThreadPool(
    int i,
  ) {
    return _newFixedThreadPool(_class.reference.pointer,
            _id_newFixedThreadPool as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JObjectType());
  }

  static final _id_newWorkStealingPool = _class.staticMethodId(
    r'newWorkStealingPool',
    r'(I)Ljava/util/concurrent/ExecutorService;',
  );

  static final _newWorkStealingPool = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public java.util.concurrent.ExecutorService newWorkStealingPool(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newWorkStealingPool(
    int i,
  ) {
    return _newWorkStealingPool(_class.reference.pointer,
            _id_newWorkStealingPool as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JObjectType());
  }

  static final _id_newWorkStealingPool$1 = _class.staticMethodId(
    r'newWorkStealingPool',
    r'()Ljava/util/concurrent/ExecutorService;',
  );

  static final _newWorkStealingPool$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.util.concurrent.ExecutorService newWorkStealingPool()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newWorkStealingPool$1() {
    return _newWorkStealingPool$1(_class.reference.pointer,
            _id_newWorkStealingPool$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_newFixedThreadPool$1 = _class.staticMethodId(
    r'newFixedThreadPool',
    r'(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;',
  );

  static final _newFixedThreadPool$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ExecutorService newFixedThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newFixedThreadPool$1(
    int i,
    _$jni.JObject threadFactory,
  ) {
    return _newFixedThreadPool$1(
            _class.reference.pointer,
            _id_newFixedThreadPool$1 as _$jni.JMethodIDPtr,
            i,
            threadFactory.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_newSingleThreadExecutor = _class.staticMethodId(
    r'newSingleThreadExecutor',
    r'()Ljava/util/concurrent/ExecutorService;',
  );

  static final _newSingleThreadExecutor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.util.concurrent.ExecutorService newSingleThreadExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newSingleThreadExecutor() {
    return _newSingleThreadExecutor(_class.reference.pointer,
            _id_newSingleThreadExecutor as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_newSingleThreadExecutor$1 = _class.staticMethodId(
    r'newSingleThreadExecutor',
    r'(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;',
  );

  static final _newSingleThreadExecutor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newSingleThreadExecutor$1(
    _$jni.JObject threadFactory,
  ) {
    return _newSingleThreadExecutor$1(
            _class.reference.pointer,
            _id_newSingleThreadExecutor$1 as _$jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_newCachedThreadPool = _class.staticMethodId(
    r'newCachedThreadPool',
    r'()Ljava/util/concurrent/ExecutorService;',
  );

  static final _newCachedThreadPool = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.util.concurrent.ExecutorService newCachedThreadPool()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newCachedThreadPool() {
    return _newCachedThreadPool(_class.reference.pointer,
            _id_newCachedThreadPool as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_newCachedThreadPool$1 = _class.staticMethodId(
    r'newCachedThreadPool',
    r'(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;',
  );

  static final _newCachedThreadPool$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newCachedThreadPool$1(
    _$jni.JObject threadFactory,
  ) {
    return _newCachedThreadPool$1(
            _class.reference.pointer,
            _id_newCachedThreadPool$1 as _$jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_newSingleThreadScheduledExecutor = _class.staticMethodId(
    r'newSingleThreadScheduledExecutor',
    r'()Ljava/util/concurrent/ScheduledExecutorService;',
  );

  static final _newSingleThreadScheduledExecutor =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newSingleThreadScheduledExecutor() {
    return _newSingleThreadScheduledExecutor(_class.reference.pointer,
            _id_newSingleThreadScheduledExecutor as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_newSingleThreadScheduledExecutor$1 = _class.staticMethodId(
    r'newSingleThreadScheduledExecutor',
    r'(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;',
  );

  static final _newSingleThreadScheduledExecutor$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newSingleThreadScheduledExecutor$1(
    _$jni.JObject threadFactory,
  ) {
    return _newSingleThreadScheduledExecutor$1(
            _class.reference.pointer,
            _id_newSingleThreadScheduledExecutor$1 as _$jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_newScheduledThreadPool = _class.staticMethodId(
    r'newScheduledThreadPool',
    r'(I)Ljava/util/concurrent/ScheduledExecutorService;',
  );

  static final _newScheduledThreadPool = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newScheduledThreadPool(
    int i,
  ) {
    return _newScheduledThreadPool(_class.reference.pointer,
            _id_newScheduledThreadPool as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JObjectType());
  }

  static final _id_newScheduledThreadPool$1 = _class.staticMethodId(
    r'newScheduledThreadPool',
    r'(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;',
  );

  static final _newScheduledThreadPool$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject newScheduledThreadPool$1(
    int i,
    _$jni.JObject threadFactory,
  ) {
    return _newScheduledThreadPool$1(
            _class.reference.pointer,
            _id_newScheduledThreadPool$1 as _$jni.JMethodIDPtr,
            i,
            threadFactory.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_unconfigurableExecutorService = _class.staticMethodId(
    r'unconfigurableExecutorService',
    r'(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;',
  );

  static final _unconfigurableExecutorService =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService executorService)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject unconfigurableExecutorService(
    _$jni.JObject executorService,
  ) {
    return _unconfigurableExecutorService(
            _class.reference.pointer,
            _id_unconfigurableExecutorService as _$jni.JMethodIDPtr,
            executorService.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_unconfigurableScheduledExecutorService =
      _class.staticMethodId(
    r'unconfigurableScheduledExecutorService',
    r'(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;',
  );

  static final _unconfigurableScheduledExecutorService =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService scheduledExecutorService)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject unconfigurableScheduledExecutorService(
    _$jni.JObject scheduledExecutorService,
  ) {
    return _unconfigurableScheduledExecutorService(
            _class.reference.pointer,
            _id_unconfigurableScheduledExecutorService as _$jni.JMethodIDPtr,
            scheduledExecutorService.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_defaultThreadFactory = _class.staticMethodId(
    r'defaultThreadFactory',
    r'()Ljava/util/concurrent/ThreadFactory;',
  );

  static final _defaultThreadFactory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.util.concurrent.ThreadFactory defaultThreadFactory()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject defaultThreadFactory() {
    return _defaultThreadFactory(_class.reference.pointer,
            _id_defaultThreadFactory as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_privilegedThreadFactory = _class.staticMethodId(
    r'privilegedThreadFactory',
    r'()Ljava/util/concurrent/ThreadFactory;',
  );

  static final _privilegedThreadFactory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.util.concurrent.ThreadFactory privilegedThreadFactory()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject privilegedThreadFactory() {
    return _privilegedThreadFactory(_class.reference.pointer,
            _id_privilegedThreadFactory as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_callable = _class.staticMethodId(
    r'callable',
    r'(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;',
  );

  static final _callable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Callable callable(java.lang.Runnable runnable, T object)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject callable<$T extends _$jni.JObject>(
    _$jni.JObject runnable,
    $T object, {
    _$jni.JObjType<$T>? T,
  }) {
    T ??= _$jni.lowestCommonSuperType([
      object.$type,
    ]) as _$jni.JObjType<$T>;
    return _callable(
            _class.reference.pointer,
            _id_callable as _$jni.JMethodIDPtr,
            runnable.reference.pointer,
            object.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_callable$1 = _class.staticMethodId(
    r'callable',
    r'(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;',
  );

  static final _callable$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Callable callable(java.lang.Runnable runnable)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject callable$1(
    _$jni.JObject runnable,
  ) {
    return _callable$1(_class.reference.pointer,
            _id_callable$1 as _$jni.JMethodIDPtr, runnable.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_callable$2 = _class.staticMethodId(
    r'callable',
    r'(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;',
  );

  static final _callable$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Callable callable(java.security.PrivilegedAction privilegedAction)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject callable$2(
    _$jni.JObject privilegedAction,
  ) {
    return _callable$2(
            _class.reference.pointer,
            _id_callable$2 as _$jni.JMethodIDPtr,
            privilegedAction.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_callable$3 = _class.staticMethodId(
    r'callable',
    r'(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;',
  );

  static final _callable$3 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction privilegedExceptionAction)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject callable$3(
    _$jni.JObject privilegedExceptionAction,
  ) {
    return _callable$3(
            _class.reference.pointer,
            _id_callable$3 as _$jni.JMethodIDPtr,
            privilegedExceptionAction.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_privilegedCallable = _class.staticMethodId(
    r'privilegedCallable',
    r'(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;',
  );

  static final _privilegedCallable = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable callable)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject privilegedCallable<$T extends _$jni.JObject>(
    _$jni.JObject callable, {
    required _$jni.JObjType<$T> T,
  }) {
    return _privilegedCallable(
            _class.reference.pointer,
            _id_privilegedCallable as _$jni.JMethodIDPtr,
            callable.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_privilegedCallableUsingCurrentClassLoader =
      _class.staticMethodId(
    r'privilegedCallableUsingCurrentClassLoader',
    r'(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;',
  );

  static final _privilegedCallableUsingCurrentClassLoader =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable callable)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject
      privilegedCallableUsingCurrentClassLoader<$T extends _$jni.JObject>(
    _$jni.JObject callable, {
    required _$jni.JObjType<$T> T,
  }) {
    return _privilegedCallableUsingCurrentClassLoader(
            _class.reference.pointer,
            _id_privilegedCallableUsingCurrentClassLoader as _$jni.JMethodIDPtr,
            callable.reference.pointer)
        .object(const _$jni.JObjectType());
  }
}

final class $Executors$Type extends _$jni.JObjType<Executors> {
  @_$jni.internal
  const $Executors$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Ljava/util/concurrent/Executors;';

  @_$jni.internal
  @_$core.override
  Executors fromReference(_$jni.JReference reference) =>
      Executors.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Executors$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Executors$Type) && other is $Executors$Type;
  }
}

/// from: `org.chromium.net.CronetEngine$Builder$LibraryLoader`
class CronetEngine_Builder_LibraryLoader extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CronetEngine_Builder_LibraryLoader> $type;

  @_$jni.internal
  CronetEngine_Builder_LibraryLoader.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/chromium/net/CronetEngine$Builder$LibraryLoader');

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_Builder_LibraryLoader$Type();
  static final _id_loadLibrary = _class.instanceMethodId(
    r'loadLibrary',
    r'(Ljava/lang/String;)V',
  );

  static final _loadLibrary = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void loadLibrary(java.lang.String string)`
  void loadLibrary(
    _$jni.JString string,
  ) {
    _loadLibrary(reference.pointer, _id_loadLibrary as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $CronetEngine_Builder_LibraryLoader$Type
    extends _$jni.JObjType<CronetEngine_Builder_LibraryLoader> {
  @_$jni.internal
  const $CronetEngine_Builder_LibraryLoader$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/chromium/net/CronetEngine$Builder$LibraryLoader;';

  @_$jni.internal
  @_$core.override
  CronetEngine_Builder_LibraryLoader fromReference(
          _$jni.JReference reference) =>
      CronetEngine_Builder_LibraryLoader.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CronetEngine_Builder_LibraryLoader$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_Builder_LibraryLoader$Type) &&
        other is $CronetEngine_Builder_LibraryLoader$Type;
  }
}

/// from: `org.chromium.net.CronetEngine$Builder`
class CronetEngine_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CronetEngine_Builder> $type;

  @_$jni.internal
  CronetEngine_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/CronetEngine$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_Builder$Type();

  /// from: `static public final int HTTP_CACHE_DISABLED`
  static const HTTP_CACHE_DISABLED = 0;

  /// from: `static public final int HTTP_CACHE_IN_MEMORY`
  static const HTTP_CACHE_IN_MEMORY = 1;

  /// from: `static public final int HTTP_CACHE_DISK_NO_HTTP`
  static const HTTP_CACHE_DISK_NO_HTTP = 2;

  /// from: `static public final int HTTP_CACHE_DISK`
  static const HTTP_CACHE_DISK = 3;
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetEngine_Builder(
    _$jni.JObject context,
  ) {
    return CronetEngine_Builder.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/chromium/net/ICronetEngineBuilder;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.chromium.net.ICronetEngineBuilder iCronetEngineBuilder)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetEngine_Builder.new$1(
    _$jni.JObject iCronetEngineBuilder,
  ) {
    return CronetEngine_Builder.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            iCronetEngineBuilder.reference.pointer)
        .reference);
  }

  static final _id_getDefaultUserAgent = _class.instanceMethodId(
    r'getDefaultUserAgent',
    r'()Ljava/lang/String;',
  );

  static final _getDefaultUserAgent = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getDefaultUserAgent()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getDefaultUserAgent() {
    return _getDefaultUserAgent(
            reference.pointer, _id_getDefaultUserAgent as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setUserAgent = _class.instanceMethodId(
    r'setUserAgent',
    r'(Ljava/lang/String;)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _setUserAgent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.chromium.net.CronetEngine$Builder setUserAgent(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder setUserAgent(
    _$jni.JString string,
  ) {
    return _setUserAgent(reference.pointer,
            _id_setUserAgent as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_setStoragePath = _class.instanceMethodId(
    r'setStoragePath',
    r'(Ljava/lang/String;)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _setStoragePath = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.chromium.net.CronetEngine$Builder setStoragePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder setStoragePath(
    _$jni.JString string,
  ) {
    return _setStoragePath(reference.pointer,
            _id_setStoragePath as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_setLibraryLoader = _class.instanceMethodId(
    r'setLibraryLoader',
    r'(Lorg/chromium/net/CronetEngine$Builder$LibraryLoader;)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _setLibraryLoader = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.chromium.net.CronetEngine$Builder setLibraryLoader(org.chromium.net.CronetEngine$Builder$LibraryLoader libraryLoader)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder setLibraryLoader(
    CronetEngine_Builder_LibraryLoader libraryLoader,
  ) {
    return _setLibraryLoader(
            reference.pointer,
            _id_setLibraryLoader as _$jni.JMethodIDPtr,
            libraryLoader.reference.pointer)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_enableQuic = _class.instanceMethodId(
    r'enableQuic',
    r'(Z)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _enableQuic = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder enableQuic(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableQuic(
    bool z,
  ) {
    return _enableQuic(
            reference.pointer, _id_enableQuic as _$jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_enableHttp2 = _class.instanceMethodId(
    r'enableHttp2',
    r'(Z)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _enableHttp2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder enableHttp2(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableHttp2(
    bool z,
  ) {
    return _enableHttp2(
            reference.pointer, _id_enableHttp2 as _$jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_enableSdch = _class.instanceMethodId(
    r'enableSdch',
    r'(Z)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _enableSdch = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder enableSdch(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableSdch(
    bool z,
  ) {
    return _enableSdch(
            reference.pointer, _id_enableSdch as _$jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_enableBrotli = _class.instanceMethodId(
    r'enableBrotli',
    r'(Z)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _enableBrotli = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder enableBrotli(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableBrotli(
    bool z,
  ) {
    return _enableBrotli(reference.pointer,
            _id_enableBrotli as _$jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_enableHttpCache = _class.instanceMethodId(
    r'enableHttpCache',
    r'(IJ)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _enableHttpCache = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder enableHttpCache(int i, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableHttpCache(
    int i,
    int j,
  ) {
    return _enableHttpCache(
            reference.pointer, _id_enableHttpCache as _$jni.JMethodIDPtr, i, j)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_addQuicHint = _class.instanceMethodId(
    r'addQuicHint',
    r'(Ljava/lang/String;II)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _addQuicHint = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder addQuicHint(java.lang.String string, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder addQuicHint(
    _$jni.JString string,
    int i,
    int i1,
  ) {
    return _addQuicHint(
            reference.pointer,
            _id_addQuicHint as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_addPublicKeyPins = _class.instanceMethodId(
    r'addPublicKeyPins',
    r'(Ljava/lang/String;Ljava/util/Set;ZLjava/util/Date;)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _addPublicKeyPins = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.chromium.net.CronetEngine$Builder addPublicKeyPins(java.lang.String string, java.util.Set set, boolean z, java.util.Date date)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder addPublicKeyPins(
    _$jni.JString string,
    _$jni.JSet<_$jni.JArray<_$jni.jbyte>> set,
    bool z,
    _$jni.JObject date,
  ) {
    return _addPublicKeyPins(
            reference.pointer,
            _id_addPublicKeyPins as _$jni.JMethodIDPtr,
            string.reference.pointer,
            set.reference.pointer,
            z ? 1 : 0,
            date.reference.pointer)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_enablePublicKeyPinningBypassForLocalTrustAnchors =
      _class.instanceMethodId(
    r'enablePublicKeyPinningBypassForLocalTrustAnchors',
    r'(Z)Lorg/chromium/net/CronetEngine$Builder;',
  );

  static final _enablePublicKeyPinningBypassForLocalTrustAnchors =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.chromium.net.CronetEngine$Builder enablePublicKeyPinningBypassForLocalTrustAnchors(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enablePublicKeyPinningBypassForLocalTrustAnchors(
    bool z,
  ) {
    return _enablePublicKeyPinningBypassForLocalTrustAnchors(
            reference.pointer,
            _id_enablePublicKeyPinningBypassForLocalTrustAnchors
                as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .object(const $CronetEngine_Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/chromium/net/CronetEngine;',
  );

  static final _build = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.chromium.net.CronetEngine build()`
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine build() {
    return _build(reference.pointer, _id_build as _$jni.JMethodIDPtr)
        .object(const $CronetEngine$Type());
  }
}

final class $CronetEngine_Builder$Type
    extends _$jni.JObjType<CronetEngine_Builder> {
  @_$jni.internal
  const $CronetEngine_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/CronetEngine$Builder;';

  @_$jni.internal
  @_$core.override
  CronetEngine_Builder fromReference(_$jni.JReference reference) =>
      CronetEngine_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CronetEngine_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_Builder$Type) &&
        other is $CronetEngine_Builder$Type;
  }
}

/// from: `org.chromium.net.CronetEngine`
class CronetEngine extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CronetEngine> $type;

  @_$jni.internal
  CronetEngine.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'org/chromium/net/CronetEngine');

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine$Type();
  static final _id_getVersionString = _class.instanceMethodId(
    r'getVersionString',
    r'()Ljava/lang/String;',
  );

  static final _getVersionString = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getVersionString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getVersionString() {
    return _getVersionString(
            reference.pointer, _id_getVersionString as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_shutdown = _class.instanceMethodId(
    r'shutdown',
    r'()V',
  );

  static final _shutdown = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void shutdown()`
  void shutdown() {
    _shutdown(reference.pointer, _id_shutdown as _$jni.JMethodIDPtr).check();
  }

  static final _id_startNetLogToFile = _class.instanceMethodId(
    r'startNetLogToFile',
    r'(Ljava/lang/String;Z)V',
  );

  static final _startNetLogToFile = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract void startNetLogToFile(java.lang.String string, boolean z)`
  void startNetLogToFile(
    _$jni.JString string,
    bool z,
  ) {
    _startNetLogToFile(
            reference.pointer,
            _id_startNetLogToFile as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_stopNetLog = _class.instanceMethodId(
    r'stopNetLog',
    r'()V',
  );

  static final _stopNetLog = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void stopNetLog()`
  void stopNetLog() {
    _stopNetLog(reference.pointer, _id_stopNetLog as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getGlobalMetricsDeltas = _class.instanceMethodId(
    r'getGlobalMetricsDeltas',
    r'()[B',
  );

  static final _getGlobalMetricsDeltas = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract byte[] getGlobalMetricsDeltas()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jbyte> getGlobalMetricsDeltas() {
    return _getGlobalMetricsDeltas(
            reference.pointer, _id_getGlobalMetricsDeltas as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.jbyteType()));
  }

  static final _id_openConnection = _class.instanceMethodId(
    r'openConnection',
    r'(Ljava/net/URL;)Ljava/net/URLConnection;',
  );

  static final _openConnection = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.net.URLConnection openConnection(java.net.URL uRL)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openConnection(
    URL uRL,
  ) {
    return _openConnection(reference.pointer,
            _id_openConnection as _$jni.JMethodIDPtr, uRL.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_createURLStreamHandlerFactory = _class.instanceMethodId(
    r'createURLStreamHandlerFactory',
    r'()Ljava/net/URLStreamHandlerFactory;',
  );

  static final _createURLStreamHandlerFactory =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract java.net.URLStreamHandlerFactory createURLStreamHandlerFactory()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject createURLStreamHandlerFactory() {
    return _createURLStreamHandlerFactory(reference.pointer,
            _id_createURLStreamHandlerFactory as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_newUrlRequestBuilder = _class.instanceMethodId(
    r'newUrlRequestBuilder',
    r'(Ljava/lang/String;Lorg/chromium/net/UrlRequest$Callback;Ljava/util/concurrent/Executor;)Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _newUrlRequestBuilder = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder newUrlRequestBuilder(java.lang.String string, org.chromium.net.UrlRequest$Callback callback, java.util.concurrent.Executor executor)`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder newUrlRequestBuilder(
    _$jni.JString string,
    UrlRequest_Callback callback,
    _$jni.JObject executor,
  ) {
    return _newUrlRequestBuilder(
            reference.pointer,
            _id_newUrlRequestBuilder as _$jni.JMethodIDPtr,
            string.reference.pointer,
            callback.reference.pointer,
            executor.reference.pointer)
        .object(const $UrlRequest_Builder$Type());
  }
}

final class $CronetEngine$Type extends _$jni.JObjType<CronetEngine> {
  @_$jni.internal
  const $CronetEngine$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/CronetEngine;';

  @_$jni.internal
  @_$core.override
  CronetEngine fromReference(_$jni.JReference reference) =>
      CronetEngine.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CronetEngine$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine$Type) &&
        other is $CronetEngine$Type;
  }
}

/// from: `org.chromium.net.CronetException`
class CronetException extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CronetException> $type;

  @_$jni.internal
  CronetException.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/CronetException');

  /// The type which includes information such as the signature of this class.
  static const type = $CronetException$Type();
}

final class $CronetException$Type extends _$jni.JObjType<CronetException> {
  @_$jni.internal
  const $CronetException$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/CronetException;';

  @_$jni.internal
  @_$core.override
  CronetException fromReference(_$jni.JReference reference) =>
      CronetException.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CronetException$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetException$Type) &&
        other is $CronetException$Type;
  }
}

/// from: `org.chromium.net.UploadDataProviders`
class UploadDataProviders extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UploadDataProviders> $type;

  @_$jni.internal
  UploadDataProviders.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UploadDataProviders');

  /// The type which includes information such as the signature of this class.
  static const type = $UploadDataProviders$Type();
  static final _id_create = _class.staticMethodId(
    r'create',
    r'(Ljava/io/File;)Lorg/chromium/net/UploadDataProvider;',
  );

  static final _create = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.chromium.net.UploadDataProvider create(java.io.File file)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject create(
    _$jni.JObject file,
  ) {
    return _create(_class.reference.pointer, _id_create as _$jni.JMethodIDPtr,
            file.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_create$1 = _class.staticMethodId(
    r'create',
    r'(Landroid/os/ParcelFileDescriptor;)Lorg/chromium/net/UploadDataProvider;',
  );

  static final _create$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.chromium.net.UploadDataProvider create(android.os.ParcelFileDescriptor parcelFileDescriptor)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject create$1(
    _$jni.JObject parcelFileDescriptor,
  ) {
    return _create$1(
            _class.reference.pointer,
            _id_create$1 as _$jni.JMethodIDPtr,
            parcelFileDescriptor.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_create$2 = _class.staticMethodId(
    r'create',
    r'(Ljava/nio/ByteBuffer;)Lorg/chromium/net/UploadDataProvider;',
  );

  static final _create$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.chromium.net.UploadDataProvider create(java.nio.ByteBuffer byteBuffer)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject create$2(
    _$jni.JByteBuffer byteBuffer,
  ) {
    return _create$2(_class.reference.pointer,
            _id_create$2 as _$jni.JMethodIDPtr, byteBuffer.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_create$3 = _class.staticMethodId(
    r'create',
    r'([BII)Lorg/chromium/net/UploadDataProvider;',
  );

  static final _create$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `static public org.chromium.net.UploadDataProvider create(byte[] bs, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject create$3(
    _$jni.JArray<_$jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return _create$3(_class.reference.pointer,
            _id_create$3 as _$jni.JMethodIDPtr, bs.reference.pointer, i, i1)
        .object(const _$jni.JObjectType());
  }

  static final _id_create$4 = _class.staticMethodId(
    r'create',
    r'([B)Lorg/chromium/net/UploadDataProvider;',
  );

  static final _create$4 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.chromium.net.UploadDataProvider create(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject create$4(
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    return _create$4(_class.reference.pointer,
            _id_create$4 as _$jni.JMethodIDPtr, bs.reference.pointer)
        .object(const _$jni.JObjectType());
  }
}

final class $UploadDataProviders$Type
    extends _$jni.JObjType<UploadDataProviders> {
  @_$jni.internal
  const $UploadDataProviders$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UploadDataProviders;';

  @_$jni.internal
  @_$core.override
  UploadDataProviders fromReference(_$jni.JReference reference) =>
      UploadDataProviders.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UploadDataProviders$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UploadDataProviders$Type) &&
        other is $UploadDataProviders$Type;
  }
}

/// from: `org.chromium.net.UrlRequest$Builder`
class UrlRequest_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequest_Builder> $type;

  @_$jni.internal
  UrlRequest_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UrlRequest$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_Builder$Type();

  /// from: `static public final int REQUEST_PRIORITY_IDLE`
  static const REQUEST_PRIORITY_IDLE = 0;

  /// from: `static public final int REQUEST_PRIORITY_LOWEST`
  static const REQUEST_PRIORITY_LOWEST = 1;

  /// from: `static public final int REQUEST_PRIORITY_LOW`
  static const REQUEST_PRIORITY_LOW = 2;

  /// from: `static public final int REQUEST_PRIORITY_MEDIUM`
  static const REQUEST_PRIORITY_MEDIUM = 3;

  /// from: `static public final int REQUEST_PRIORITY_HIGHEST`
  static const REQUEST_PRIORITY_HIGHEST = 4;
  static final _id_setHttpMethod = _class.instanceMethodId(
    r'setHttpMethod',
    r'(Ljava/lang/String;)Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _setHttpMethod = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder setHttpMethod(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder setHttpMethod(
    _$jni.JString string,
  ) {
    return _setHttpMethod(reference.pointer,
            _id_setHttpMethod as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UrlRequest_Builder$Type());
  }

  static final _id_addHeader = _class.instanceMethodId(
    r'addHeader',
    r'(Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _addHeader = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder addHeader(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder addHeader(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _addHeader(reference.pointer, _id_addHeader as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $UrlRequest_Builder$Type());
  }

  static final _id_disableCache = _class.instanceMethodId(
    r'disableCache',
    r'()Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _disableCache = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder disableCache()`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder disableCache() {
    return _disableCache(
            reference.pointer, _id_disableCache as _$jni.JMethodIDPtr)
        .object(const $UrlRequest_Builder$Type());
  }

  static final _id_setPriority = _class.instanceMethodId(
    r'setPriority',
    r'(I)Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _setPriority = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder setPriority(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder setPriority(
    int i,
  ) {
    return _setPriority(
            reference.pointer, _id_setPriority as _$jni.JMethodIDPtr, i)
        .object(const $UrlRequest_Builder$Type());
  }

  static final _id_setUploadDataProvider = _class.instanceMethodId(
    r'setUploadDataProvider',
    r'(Lorg/chromium/net/UploadDataProvider;Ljava/util/concurrent/Executor;)Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _setUploadDataProvider = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder setUploadDataProvider(org.chromium.net.UploadDataProvider uploadDataProvider, java.util.concurrent.Executor executor)`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder setUploadDataProvider(
    _$jni.JObject uploadDataProvider,
    _$jni.JObject executor,
  ) {
    return _setUploadDataProvider(
            reference.pointer,
            _id_setUploadDataProvider as _$jni.JMethodIDPtr,
            uploadDataProvider.reference.pointer,
            executor.reference.pointer)
        .object(const $UrlRequest_Builder$Type());
  }

  static final _id_allowDirectExecutor = _class.instanceMethodId(
    r'allowDirectExecutor',
    r'()Lorg/chromium/net/UrlRequest$Builder;',
  );

  static final _allowDirectExecutor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract org.chromium.net.UrlRequest$Builder allowDirectExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder allowDirectExecutor() {
    return _allowDirectExecutor(
            reference.pointer, _id_allowDirectExecutor as _$jni.JMethodIDPtr)
        .object(const $UrlRequest_Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/chromium/net/UrlRequest;',
  );

  static final _build = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract org.chromium.net.UrlRequest build()`
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest build() {
    return _build(reference.pointer, _id_build as _$jni.JMethodIDPtr)
        .object(const $UrlRequest$Type());
  }
}

final class $UrlRequest_Builder$Type
    extends _$jni.JObjType<UrlRequest_Builder> {
  @_$jni.internal
  const $UrlRequest_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlRequest$Builder;';

  @_$jni.internal
  @_$core.override
  UrlRequest_Builder fromReference(_$jni.JReference reference) =>
      UrlRequest_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlRequest_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_Builder$Type) &&
        other is $UrlRequest_Builder$Type;
  }
}

/// from: `org.chromium.net.UrlRequest$Callback`
class UrlRequest_Callback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequest_Callback> $type;

  @_$jni.internal
  UrlRequest_Callback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UrlRequest$Callback');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_Callback$Type();
  static final _id_onRedirectReceived = _class.instanceMethodId(
    r'onRedirectReceived',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V',
  );

  static final _onRedirectReceived = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)`
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    _$jni.JString string,
  ) {
    _onRedirectReceived(
            reference.pointer,
            _id_onRedirectReceived as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_onResponseStarted = _class.instanceMethodId(
    r'onResponseStarted',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onResponseStarted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onResponseStarted(
            reference.pointer,
            _id_onResponseStarted as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onReadCompleted = _class.instanceMethodId(
    r'onReadCompleted',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V',
  );

  static final _onReadCompleted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)`
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    _$jni.JByteBuffer byteBuffer,
  ) {
    _onReadCompleted(
            reference.pointer,
            _id_onReadCompleted as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r'onSucceeded',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onSucceeded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onSucceeded(reference.pointer, _id_onSucceeded as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)`
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    _onFailed(
            reference.pointer,
            _id_onFailed as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            cronetException.reference.pointer)
        .check();
  }

  static final _id_onCanceled = _class.instanceMethodId(
    r'onCanceled',
    r'(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V',
  );

  static final _onCanceled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onCanceled(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)`
  void onCanceled(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onCanceled(reference.pointer, _id_onCanceled as _$jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }
}

final class $UrlRequest_Callback$Type
    extends _$jni.JObjType<UrlRequest_Callback> {
  @_$jni.internal
  const $UrlRequest_Callback$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlRequest$Callback;';

  @_$jni.internal
  @_$core.override
  UrlRequest_Callback fromReference(_$jni.JReference reference) =>
      UrlRequest_Callback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlRequest_Callback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_Callback$Type) &&
        other is $UrlRequest_Callback$Type;
  }
}

/// from: `org.chromium.net.UrlRequest$Status`
class UrlRequest_Status extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequest_Status> $type;

  @_$jni.internal
  UrlRequest_Status.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UrlRequest$Status');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_Status$Type();

  /// from: `static public final int INVALID`
  static const INVALID = -1;

  /// from: `static public final int IDLE`
  static const IDLE = 0;

  /// from: `static public final int WAITING_FOR_STALLED_SOCKET_POOL`
  static const WAITING_FOR_STALLED_SOCKET_POOL = 1;

  /// from: `static public final int WAITING_FOR_AVAILABLE_SOCKET`
  static const WAITING_FOR_AVAILABLE_SOCKET = 2;

  /// from: `static public final int WAITING_FOR_DELEGATE`
  static const WAITING_FOR_DELEGATE = 3;

  /// from: `static public final int WAITING_FOR_CACHE`
  static const WAITING_FOR_CACHE = 4;

  /// from: `static public final int DOWNLOADING_PAC_FILE`
  static const DOWNLOADING_PAC_FILE = 5;

  /// from: `static public final int RESOLVING_PROXY_FOR_URL`
  static const RESOLVING_PROXY_FOR_URL = 6;

  /// from: `static public final int RESOLVING_HOST_IN_PAC_FILE`
  static const RESOLVING_HOST_IN_PAC_FILE = 7;

  /// from: `static public final int ESTABLISHING_PROXY_TUNNEL`
  static const ESTABLISHING_PROXY_TUNNEL = 8;

  /// from: `static public final int RESOLVING_HOST`
  static const RESOLVING_HOST = 9;

  /// from: `static public final int CONNECTING`
  static const CONNECTING = 10;

  /// from: `static public final int SSL_HANDSHAKE`
  static const SSL_HANDSHAKE = 11;

  /// from: `static public final int SENDING_REQUEST`
  static const SENDING_REQUEST = 12;

  /// from: `static public final int WAITING_FOR_RESPONSE`
  static const WAITING_FOR_RESPONSE = 13;

  /// from: `static public final int READING_RESPONSE`
  static const READING_RESPONSE = 14;
}

final class $UrlRequest_Status$Type extends _$jni.JObjType<UrlRequest_Status> {
  @_$jni.internal
  const $UrlRequest_Status$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlRequest$Status;';

  @_$jni.internal
  @_$core.override
  UrlRequest_Status fromReference(_$jni.JReference reference) =>
      UrlRequest_Status.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlRequest_Status$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_Status$Type) &&
        other is $UrlRequest_Status$Type;
  }
}

/// from: `org.chromium.net.UrlRequest$StatusListener`
class UrlRequest_StatusListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequest_StatusListener> $type;

  @_$jni.internal
  UrlRequest_StatusListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UrlRequest$StatusListener');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_StatusListener$Type();
  static final _id_onStatus = _class.instanceMethodId(
    r'onStatus',
    r'(I)V',
  );

  static final _onStatus = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onStatus(int i)`
  void onStatus(
    int i,
  ) {
    _onStatus(reference.pointer, _id_onStatus as _$jni.JMethodIDPtr, i).check();
  }
}

final class $UrlRequest_StatusListener$Type
    extends _$jni.JObjType<UrlRequest_StatusListener> {
  @_$jni.internal
  const $UrlRequest_StatusListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlRequest$StatusListener;';

  @_$jni.internal
  @_$core.override
  UrlRequest_StatusListener fromReference(_$jni.JReference reference) =>
      UrlRequest_StatusListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlRequest_StatusListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_StatusListener$Type) &&
        other is $UrlRequest_StatusListener$Type;
  }
}

/// from: `org.chromium.net.UrlRequest`
class UrlRequest extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlRequest> $type;

  @_$jni.internal
  UrlRequest.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'org/chromium/net/UrlRequest');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest$Type();
  static final _id_start = _class.instanceMethodId(
    r'start',
    r'()V',
  );

  static final _start = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void start()`
  void start() {
    _start(reference.pointer, _id_start as _$jni.JMethodIDPtr).check();
  }

  static final _id_followRedirect = _class.instanceMethodId(
    r'followRedirect',
    r'()V',
  );

  static final _followRedirect = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void followRedirect()`
  void followRedirect() {
    _followRedirect(reference.pointer, _id_followRedirect as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_read = _class.instanceMethodId(
    r'read',
    r'(Ljava/nio/ByteBuffer;)V',
  );

  static final _read = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void read(java.nio.ByteBuffer byteBuffer)`
  void read(
    _$jni.JByteBuffer byteBuffer,
  ) {
    _read(reference.pointer, _id_read as _$jni.JMethodIDPtr,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_cancel = _class.instanceMethodId(
    r'cancel',
    r'()V',
  );

  static final _cancel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void cancel()`
  void cancel() {
    _cancel(reference.pointer, _id_cancel as _$jni.JMethodIDPtr).check();
  }

  static final _id_isDone = _class.instanceMethodId(
    r'isDone',
    r'()Z',
  );

  static final _isDone = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isDone()`
  bool isDone() {
    return _isDone(reference.pointer, _id_isDone as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_getStatus = _class.instanceMethodId(
    r'getStatus',
    r'(Lorg/chromium/net/UrlRequest$StatusListener;)V',
  );

  static final _getStatus = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void getStatus(org.chromium.net.UrlRequest$StatusListener statusListener)`
  void getStatus(
    UrlRequest_StatusListener statusListener,
  ) {
    _getStatus(reference.pointer, _id_getStatus as _$jni.JMethodIDPtr,
            statusListener.reference.pointer)
        .check();
  }
}

final class $UrlRequest$Type extends _$jni.JObjType<UrlRequest> {
  @_$jni.internal
  const $UrlRequest$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlRequest;';

  @_$jni.internal
  @_$core.override
  UrlRequest fromReference(_$jni.JReference reference) =>
      UrlRequest.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlRequest$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest$Type) && other is $UrlRequest$Type;
  }
}

/// from: `org.chromium.net.UrlResponseInfo$HeaderBlock`
class UrlResponseInfo_HeaderBlock extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlResponseInfo_HeaderBlock> $type;

  @_$jni.internal
  UrlResponseInfo_HeaderBlock.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UrlResponseInfo$HeaderBlock');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfo_HeaderBlock$Type();
  static final _id_getAsList = _class.instanceMethodId(
    r'getAsList',
    r'()Ljava/util/List;',
  );

  static final _getAsList = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.util.List getAsList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAsList() {
    return _getAsList(reference.pointer, _id_getAsList as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getAsMap = _class.instanceMethodId(
    r'getAsMap',
    r'()Ljava/util/Map;',
  );

  static final _getAsMap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.util.Map getAsMap()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JMap<_$jni.JString, _$jni.JList<_$jni.JString>> getAsMap() {
    return _getAsMap(reference.pointer, _id_getAsMap as _$jni.JMethodIDPtr)
        .object(const _$jni.JMapType(
            _$jni.JStringType(), _$jni.JListType(_$jni.JStringType())));
  }
}

final class $UrlResponseInfo_HeaderBlock$Type
    extends _$jni.JObjType<UrlResponseInfo_HeaderBlock> {
  @_$jni.internal
  const $UrlResponseInfo_HeaderBlock$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlResponseInfo$HeaderBlock;';

  @_$jni.internal
  @_$core.override
  UrlResponseInfo_HeaderBlock fromReference(_$jni.JReference reference) =>
      UrlResponseInfo_HeaderBlock.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlResponseInfo_HeaderBlock$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfo_HeaderBlock$Type) &&
        other is $UrlResponseInfo_HeaderBlock$Type;
  }
}

/// from: `org.chromium.net.UrlResponseInfo`
class UrlResponseInfo extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<UrlResponseInfo> $type;

  @_$jni.internal
  UrlResponseInfo.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/chromium/net/UrlResponseInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfo$Type();
  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getUrlChain = _class.instanceMethodId(
    r'getUrlChain',
    r'()Ljava/util/List;',
  );

  static final _getUrlChain = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.util.List getUrlChain()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JString> getUrlChain() {
    return _getUrlChain(
            reference.pointer, _id_getUrlChain as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JStringType()));
  }

  static final _id_getHttpStatusCode = _class.instanceMethodId(
    r'getHttpStatusCode',
    r'()I',
  );

  static final _getHttpStatusCode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getHttpStatusCode()`
  int getHttpStatusCode() {
    return _getHttpStatusCode(
            reference.pointer, _id_getHttpStatusCode as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHttpStatusText = _class.instanceMethodId(
    r'getHttpStatusText',
    r'()Ljava/lang/String;',
  );

  static final _getHttpStatusText = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getHttpStatusText()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getHttpStatusText() {
    return _getHttpStatusText(
            reference.pointer, _id_getHttpStatusText as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getAllHeadersAsList = _class.instanceMethodId(
    r'getAllHeadersAsList',
    r'()Ljava/util/List;',
  );

  static final _getAllHeadersAsList = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.util.List getAllHeadersAsList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAllHeadersAsList() {
    return _getAllHeadersAsList(
            reference.pointer, _id_getAllHeadersAsList as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getAllHeaders = _class.instanceMethodId(
    r'getAllHeaders',
    r'()Ljava/util/Map;',
  );

  static final _getAllHeaders = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.util.Map getAllHeaders()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JMap<_$jni.JString, _$jni.JList<_$jni.JString>> getAllHeaders() {
    return _getAllHeaders(
            reference.pointer, _id_getAllHeaders as _$jni.JMethodIDPtr)
        .object(const _$jni.JMapType(
            _$jni.JStringType(), _$jni.JListType(_$jni.JStringType())));
  }

  static final _id_wasCached = _class.instanceMethodId(
    r'wasCached',
    r'()Z',
  );

  static final _wasCached = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean wasCached()`
  bool wasCached() {
    return _wasCached(reference.pointer, _id_wasCached as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getNegotiatedProtocol = _class.instanceMethodId(
    r'getNegotiatedProtocol',
    r'()Ljava/lang/String;',
  );

  static final _getNegotiatedProtocol = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getNegotiatedProtocol()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getNegotiatedProtocol() {
    return _getNegotiatedProtocol(
            reference.pointer, _id_getNegotiatedProtocol as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getProxyServer = _class.instanceMethodId(
    r'getProxyServer',
    r'()Ljava/lang/String;',
  );

  static final _getProxyServer = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getProxyServer()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getProxyServer() {
    return _getProxyServer(
            reference.pointer, _id_getProxyServer as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getReceivedByteCount = _class.instanceMethodId(
    r'getReceivedByteCount',
    r'()J',
  );

  static final _getReceivedByteCount = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract long getReceivedByteCount()`
  int getReceivedByteCount() {
    return _getReceivedByteCount(
            reference.pointer, _id_getReceivedByteCount as _$jni.JMethodIDPtr)
        .long;
  }
}

final class $UrlResponseInfo$Type extends _$jni.JObjType<UrlResponseInfo> {
  @_$jni.internal
  const $UrlResponseInfo$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/chromium/net/UrlResponseInfo;';

  @_$jni.internal
  @_$core.override
  UrlResponseInfo fromReference(_$jni.JReference reference) =>
      UrlResponseInfo.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($UrlResponseInfo$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfo$Type) &&
        other is $UrlResponseInfo$Type;
  }
}
