// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface
class UrlRequestCallbackProxy_UrlRequestCallbackInterface extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequestCallbackProxy_UrlRequestCallbackInterface>
      $type = type;

  UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"io/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface");

  /// The type which includes information such as the signature of this class.
  static const type =
      $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType();
  static final _id_onRedirectReceived = _class.instanceMethodId(
    r"onRedirectReceived",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V",
  );

  static final _onRedirectReceived = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    _onRedirectReceived(
            reference.pointer,
            _id_onRedirectReceived as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_onResponseStarted = _class.instanceMethodId(
    r"onResponseStarted",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onResponseStarted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onResponseStarted(
            reference.pointer,
            _id_onResponseStarted as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onReadCompleted = _class.instanceMethodId(
    r"onReadCompleted",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V",
  );

  static final _onReadCompleted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JByteBuffer byteBuffer,
  ) {
    _onReadCompleted(
            reference.pointer,
            _id_onReadCompleted as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r"onSucceeded",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onSucceeded = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onSucceeded(reference.pointer, _id_onSucceeded as jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r"onFailed",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V",
  );

  static final _onFailed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    _onFailed(
            reference.pointer,
            _id_onFailed as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            cronetException.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int,
      $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"onRedirectReceived(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V") {
        _$impls[$p]!.onRedirectReceived(
          $a[0].castTo(const $UrlRequestType(), releaseOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), releaseOriginal: true),
          $a[2].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onResponseStarted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V") {
        _$impls[$p]!.onResponseStarted(
          $a[0].castTo(const $UrlRequestType(), releaseOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onReadCompleted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V") {
        _$impls[$p]!.onReadCompleted(
          $a[0].castTo(const $UrlRequestType(), releaseOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), releaseOriginal: true),
          $a[2].castTo(const jni.JByteBufferType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onSucceeded(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V") {
        _$impls[$p]!.onSucceeded(
          $a[0].castTo(const $UrlRequestType(), releaseOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onFailed(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V") {
        _$impls[$p]!.onFailed(
          $a[0].castTo(const $UrlRequestType(), releaseOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), releaseOriginal: true),
          $a[2].castTo(const $CronetExceptionType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory UrlRequestCallbackProxy_UrlRequestCallbackInterface.implement(
    $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x =
        UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl {
  factory $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl({
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JString string)
        onRedirectReceived,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onResponseStarted,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JByteBuffer byteBuffer)
        onReadCompleted,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onSucceeded,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, CronetException cronetException)
        onFailed,
  }) = _$UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl;

  void onRedirectReceived(UrlRequest urlRequest,
      UrlResponseInfo urlResponseInfo, jni.JString string);
  void onResponseStarted(
      UrlRequest urlRequest, UrlResponseInfo urlResponseInfo);
  void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JByteBuffer byteBuffer);
  void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo);
  void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException);
}

class _$UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl
    implements $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl {
  _$UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl({
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JString string)
        onRedirectReceived,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onResponseStarted,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JByteBuffer byteBuffer)
        onReadCompleted,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onSucceeded,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, CronetException cronetException)
        onFailed,
  })  : _onRedirectReceived = onRedirectReceived,
        _onResponseStarted = onResponseStarted,
        _onReadCompleted = onReadCompleted,
        _onSucceeded = onSucceeded,
        _onFailed = onFailed;

  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JString string) _onRedirectReceived;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
      _onResponseStarted;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JByteBuffer byteBuffer) _onReadCompleted;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
      _onSucceeded;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException) _onFailed;

  void onRedirectReceived(UrlRequest urlRequest,
      UrlResponseInfo urlResponseInfo, jni.JString string) {
    return _onRedirectReceived(urlRequest, urlResponseInfo, string);
  }

  void onResponseStarted(
      UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) {
    return _onResponseStarted(urlRequest, urlResponseInfo);
  }

  void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JByteBuffer byteBuffer) {
    return _onReadCompleted(urlRequest, urlResponseInfo, byteBuffer);
  }

  void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) {
    return _onSucceeded(urlRequest, urlResponseInfo);
  }

  void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException) {
    return _onFailed(urlRequest, urlResponseInfo, cronetException);
  }
}

final class $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType
    extends jni.JObjType<UrlRequestCallbackProxy_UrlRequestCallbackInterface> {
  const $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType();

  @override
  String get signature =>
      r"Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;";

  @override
  UrlRequestCallbackProxy_UrlRequestCallbackInterface fromReference(
          jni.JReference reference) =>
      UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromReference(
          reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType) &&
        other is $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType;
  }
}

/// from: io.flutter.plugins.cronet_http.UrlRequestCallbackProxy
class UrlRequestCallbackProxy extends UrlRequest_Callback {
  @override
  late final jni.JObjType<UrlRequestCallbackProxy> $type = type;

  UrlRequestCallbackProxy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"io/flutter/plugins/cronet_http/UrlRequestCallbackProxy");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequestCallbackProxyType();
  static final _id_new1 = _class.constructorId(
    r"(Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface urlRequestCallbackInterface)
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlRequestCallbackProxy.new1(
    UrlRequestCallbackProxy_UrlRequestCallbackInterface
        urlRequestCallbackInterface,
  ) {
    return UrlRequestCallbackProxy.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            urlRequestCallbackInterface.reference.pointer)
        .reference);
  }

  static final _id_getCallback = _class.instanceMethodId(
    r"getCallback",
    r"()Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;",
  );

  static final _getCallback = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface getCallback()
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequestCallbackProxy_UrlRequestCallbackInterface getCallback() {
    return _getCallback(reference.pointer, _id_getCallback as jni.JMethodIDPtr)
        .object(
            const $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType());
  }

  static final _id_onRedirectReceived = _class.instanceMethodId(
    r"onRedirectReceived",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V",
  );

  static final _onRedirectReceived = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    _onRedirectReceived(
            reference.pointer,
            _id_onRedirectReceived as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_onResponseStarted = _class.instanceMethodId(
    r"onResponseStarted",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onResponseStarted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onResponseStarted(
            reference.pointer,
            _id_onResponseStarted as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onReadCompleted = _class.instanceMethodId(
    r"onReadCompleted",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V",
  );

  static final _onReadCompleted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JByteBuffer byteBuffer,
  ) {
    _onReadCompleted(
            reference.pointer,
            _id_onReadCompleted as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r"onSucceeded",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onSucceeded = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onSucceeded(reference.pointer, _id_onSucceeded as jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r"onFailed",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V",
  );

  static final _onFailed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    _onFailed(
            reference.pointer,
            _id_onFailed as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            cronetException.reference.pointer)
        .check();
  }
}

final class $UrlRequestCallbackProxyType
    extends jni.JObjType<UrlRequestCallbackProxy> {
  const $UrlRequestCallbackProxyType();

  @override
  String get signature =>
      r"Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy;";

  @override
  UrlRequestCallbackProxy fromReference(jni.JReference reference) =>
      UrlRequestCallbackProxy.fromReference(reference);

  @override
  jni.JObjType get superType => const $UrlRequest_CallbackType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($UrlRequestCallbackProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequestCallbackProxyType) &&
        other is $UrlRequestCallbackProxyType;
  }
}

/// from: java.net.URL
class URL extends jni.JObject {
  @override
  late final jni.JObjType<URL> $type = type;

  URL.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/net/URL");

  /// The type which includes information such as the signature of this class.
  static const type = $URLType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, int i, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  factory URL(
    jni.JString string,
    jni.JString string1,
    int i,
    jni.JString string2,
  ) {
    return URL.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            string2.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new1(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return URL.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r"(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V",
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, int i, java.lang.String string2, java.net.URLStreamHandler uRLStreamHandler)
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new2(
    jni.JString string,
    jni.JString string1,
    int i,
    jni.JString string2,
    jni.JObject uRLStreamHandler,
  ) {
    return URL.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            string2.reference.pointer,
            uRLStreamHandler.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r"(Ljava/lang/String;)V",
  );

  static final _new3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new3(
    jni.JString string,
  ) {
    return URL.fromReference(_new3(_class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new4 = _class.constructorId(
    r"(Ljava/net/URL;Ljava/lang/String;)V",
  );

  static final _new4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.net.URL uRL, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new4(
    URL uRL,
    jni.JString string,
  ) {
    return URL.fromReference(_new4(
            _class.reference.pointer,
            _id_new4 as jni.JMethodIDPtr,
            uRL.reference.pointer,
            string.reference.pointer)
        .reference);
  }

  static final _id_new5 = _class.constructorId(
    r"(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V",
  );

  static final _new5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.net.URL uRL, java.lang.String string, java.net.URLStreamHandler uRLStreamHandler)
  /// The returned object must be released after use, by calling the [release] method.
  factory URL.new5(
    URL uRL,
    jni.JString string,
    jni.JObject uRLStreamHandler,
  ) {
    return URL.fromReference(_new5(
            _class.reference.pointer,
            _id_new5 as jni.JMethodIDPtr,
            uRL.reference.pointer,
            string.reference.pointer,
            uRLStreamHandler.reference.pointer)
        .reference);
  }

  static final _id_getQuery = _class.instanceMethodId(
    r"getQuery",
    r"()Ljava/lang/String;",
  );

  static final _getQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQuery() {
    return _getQuery(reference.pointer, _id_getQuery as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPath = _class.instanceMethodId(
    r"getPath",
    r"()Ljava/lang/String;",
  );

  static final _getPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPath() {
    return _getPath(reference.pointer, _id_getPath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r"getUserInfo",
    r"()Ljava/lang/String;",
  );

  static final _getUserInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUserInfo() {
    return _getUserInfo(reference.pointer, _id_getUserInfo as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAuthority = _class.instanceMethodId(
    r"getAuthority",
    r"()Ljava/lang/String;",
  );

  static final _getAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthority() {
    return _getAuthority(
            reference.pointer, _id_getAuthority as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r"getPort",
    r"()I",
  );

  static final _getPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getPort()
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni.JMethodIDPtr).integer;
  }

  static final _id_getDefaultPort = _class.instanceMethodId(
    r"getDefaultPort",
    r"()I",
  );

  static final _getDefaultPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getDefaultPort()
  int getDefaultPort() {
    return _getDefaultPort(
            reference.pointer, _id_getDefaultPort as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getProtocol = _class.instanceMethodId(
    r"getProtocol",
    r"()Ljava/lang/String;",
  );

  static final _getProtocol = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getProtocol()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getProtocol() {
    return _getProtocol(reference.pointer, _id_getProtocol as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getHost = _class.instanceMethodId(
    r"getHost",
    r"()Ljava/lang/String;",
  );

  static final _getHost = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHost() {
    return _getHost(reference.pointer, _id_getHost as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getFile = _class.instanceMethodId(
    r"getFile",
    r"()Ljava/lang/String;",
  );

  static final _getFile = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getFile()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFile() {
    return _getFile(reference.pointer, _id_getFile as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getRef = _class.instanceMethodId(
    r"getRef",
    r"()Ljava/lang/String;",
  );

  static final _getRef = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getRef()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRef() {
    return _getRef(reference.pointer, _id_getRef as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_sameFile = _class.instanceMethodId(
    r"sameFile",
    r"(Ljava/net/URL;)Z",
  );

  static final _sameFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean sameFile(java.net.URL uRL)
  bool sameFile(
    URL uRL,
  ) {
    return _sameFile(reference.pointer, _id_sameFile as jni.JMethodIDPtr,
            uRL.reference.pointer)
        .boolean;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toExternalForm = _class.instanceMethodId(
    r"toExternalForm",
    r"()Ljava/lang/String;",
  );

  static final _toExternalForm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toExternalForm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toExternalForm() {
    return _toExternalForm(
            reference.pointer, _id_toExternalForm as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r"toURI",
    r"()Ljava/net/URI;",
  );

  static final _toURI = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.net.URI toURI()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject toURI() {
    return _toURI(reference.pointer, _id_toURI as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_openConnection = _class.instanceMethodId(
    r"openConnection",
    r"()Ljava/net/URLConnection;",
  );

  static final _openConnection = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.net.URLConnection openConnection()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openConnection() {
    return _openConnection(
            reference.pointer, _id_openConnection as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_openConnection1 = _class.instanceMethodId(
    r"openConnection",
    r"(Ljava/net/Proxy;)Ljava/net/URLConnection;",
  );

  static final _openConnection1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.URLConnection openConnection(java.net.Proxy proxy)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openConnection1(
    jni.JObject proxy,
  ) {
    return _openConnection1(reference.pointer,
            _id_openConnection1 as jni.JMethodIDPtr, proxy.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openStream = _class.instanceMethodId(
    r"openStream",
    r"()Ljava/io/InputStream;",
  );

  static final _openStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.io.InputStream openStream()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openStream() {
    return _openStream(reference.pointer, _id_openStream as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContent = _class.instanceMethodId(
    r"getContent",
    r"()Ljava/lang/Object;",
  );

  static final _getContent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object getContent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContent() {
    return _getContent(reference.pointer, _id_getContent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContent1 = _class.instanceMethodId(
    r"getContent",
    r"([Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _getContent1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getContent(java.lang.Class[] classs)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContent1(
    jni.JArray<jni.JObject> classs,
  ) {
    return _getContent1(reference.pointer, _id_getContent1 as jni.JMethodIDPtr,
            classs.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setURLStreamHandlerFactory = _class.staticMethodId(
    r"setURLStreamHandlerFactory",
    r"(Ljava/net/URLStreamHandlerFactory;)V",
  );

  static final _setURLStreamHandlerFactory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory uRLStreamHandlerFactory)
  static void setURLStreamHandlerFactory(
    jni.JObject uRLStreamHandlerFactory,
  ) {
    _setURLStreamHandlerFactory(
            _class.reference.pointer,
            _id_setURLStreamHandlerFactory as jni.JMethodIDPtr,
            uRLStreamHandlerFactory.reference.pointer)
        .check();
  }
}

final class $URLType extends jni.JObjType<URL> {
  const $URLType();

  @override
  String get signature => r"Ljava/net/URL;";

  @override
  URL fromReference(jni.JReference reference) => URL.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($URLType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($URLType) && other is $URLType;
  }
}

/// from: java.util.concurrent.Executors
class Executors extends jni.JObject {
  @override
  late final jni.JObjType<Executors> $type = type;

  Executors.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/util/concurrent/Executors");

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorsType();
  static final _id_newFixedThreadPool = _class.staticMethodId(
    r"newFixedThreadPool",
    r"(I)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newFixedThreadPool = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool(
    int i,
  ) {
    return _newFixedThreadPool(_class.reference.pointer,
            _id_newFixedThreadPool as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_newWorkStealingPool = _class.staticMethodId(
    r"newWorkStealingPool",
    r"(I)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newWorkStealingPool = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool(
    int i,
  ) {
    return _newWorkStealingPool(_class.reference.pointer,
            _id_newWorkStealingPool as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_newWorkStealingPool1 = _class.staticMethodId(
    r"newWorkStealingPool",
    r"()Ljava/util/concurrent/ExecutorService;",
  );

  static final _newWorkStealingPool1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool1() {
    return _newWorkStealingPool1(_class.reference.pointer,
            _id_newWorkStealingPool1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newFixedThreadPool1 = _class.staticMethodId(
    r"newFixedThreadPool",
    r"(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newFixedThreadPool1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return _newFixedThreadPool1(
            _class.reference.pointer,
            _id_newFixedThreadPool1 as jni.JMethodIDPtr,
            i,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadExecutor = _class.staticMethodId(
    r"newSingleThreadExecutor",
    r"()Ljava/util/concurrent/ExecutorService;",
  );

  static final _newSingleThreadExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor() {
    return _newSingleThreadExecutor(_class.reference.pointer,
            _id_newSingleThreadExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadExecutor1 = _class.staticMethodId(
    r"newSingleThreadExecutor",
    r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newSingleThreadExecutor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor1(
    jni.JObject threadFactory,
  ) {
    return _newSingleThreadExecutor1(
            _class.reference.pointer,
            _id_newSingleThreadExecutor1 as jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newCachedThreadPool = _class.staticMethodId(
    r"newCachedThreadPool",
    r"()Ljava/util/concurrent/ExecutorService;",
  );

  static final _newCachedThreadPool = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool() {
    return _newCachedThreadPool(_class.reference.pointer,
            _id_newCachedThreadPool as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newCachedThreadPool1 = _class.staticMethodId(
    r"newCachedThreadPool",
    r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newCachedThreadPool1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool1(
    jni.JObject threadFactory,
  ) {
    return _newCachedThreadPool1(
            _class.reference.pointer,
            _id_newCachedThreadPool1 as jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadScheduledExecutor = _class.staticMethodId(
    r"newSingleThreadScheduledExecutor",
    r"()Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newSingleThreadScheduledExecutor =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor() {
    return _newSingleThreadScheduledExecutor(_class.reference.pointer,
            _id_newSingleThreadScheduledExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadScheduledExecutor1 = _class.staticMethodId(
    r"newSingleThreadScheduledExecutor",
    r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newSingleThreadScheduledExecutor1 =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor1(
    jni.JObject threadFactory,
  ) {
    return _newSingleThreadScheduledExecutor1(
            _class.reference.pointer,
            _id_newSingleThreadScheduledExecutor1 as jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newScheduledThreadPool = _class.staticMethodId(
    r"newScheduledThreadPool",
    r"(I)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newScheduledThreadPool = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool(
    int i,
  ) {
    return _newScheduledThreadPool(_class.reference.pointer,
            _id_newScheduledThreadPool as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_newScheduledThreadPool1 = _class.staticMethodId(
    r"newScheduledThreadPool",
    r"(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newScheduledThreadPool1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return _newScheduledThreadPool1(
            _class.reference.pointer,
            _id_newScheduledThreadPool1 as jni.JMethodIDPtr,
            i,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_unconfigurableExecutorService = _class.staticMethodId(
    r"unconfigurableExecutorService",
    r"(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _unconfigurableExecutorService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService executorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableExecutorService(
    jni.JObject executorService,
  ) {
    return _unconfigurableExecutorService(
            _class.reference.pointer,
            _id_unconfigurableExecutorService as jni.JMethodIDPtr,
            executorService.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_unconfigurableScheduledExecutorService =
      _class.staticMethodId(
    r"unconfigurableScheduledExecutorService",
    r"(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _unconfigurableScheduledExecutorService =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService scheduledExecutorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableScheduledExecutorService(
    jni.JObject scheduledExecutorService,
  ) {
    return _unconfigurableScheduledExecutorService(
            _class.reference.pointer,
            _id_unconfigurableScheduledExecutorService as jni.JMethodIDPtr,
            scheduledExecutorService.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_defaultThreadFactory = _class.staticMethodId(
    r"defaultThreadFactory",
    r"()Ljava/util/concurrent/ThreadFactory;",
  );

  static final _defaultThreadFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ThreadFactory defaultThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject defaultThreadFactory() {
    return _defaultThreadFactory(_class.reference.pointer,
            _id_defaultThreadFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_privilegedThreadFactory = _class.staticMethodId(
    r"privilegedThreadFactory",
    r"()Ljava/util/concurrent/ThreadFactory;",
  );

  static final _privilegedThreadFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ThreadFactory privilegedThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedThreadFactory() {
    return _privilegedThreadFactory(_class.reference.pointer,
            _id_privilegedThreadFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_callable = _class.staticMethodId(
    r"callable",
    r"(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;",
  );

  static final _callable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable, T object)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable<$T extends jni.JObject>(
    jni.JObject runnable,
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return _callable(_class.reference.pointer, _id_callable as jni.JMethodIDPtr,
            runnable.reference.pointer, object.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_callable1 = _class.staticMethodId(
    r"callable",
    r"(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;",
  );

  static final _callable1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable1(
    jni.JObject runnable,
  ) {
    return _callable1(_class.reference.pointer,
            _id_callable1 as jni.JMethodIDPtr, runnable.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_callable2 = _class.staticMethodId(
    r"callable",
    r"(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;",
  );

  static final _callable2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedAction privilegedAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable2(
    jni.JObject privilegedAction,
  ) {
    return _callable2(
            _class.reference.pointer,
            _id_callable2 as jni.JMethodIDPtr,
            privilegedAction.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_callable3 = _class.staticMethodId(
    r"callable",
    r"(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;",
  );

  static final _callable3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction privilegedExceptionAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable3(
    jni.JObject privilegedExceptionAction,
  ) {
    return _callable3(
            _class.reference.pointer,
            _id_callable3 as jni.JMethodIDPtr,
            privilegedExceptionAction.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_privilegedCallable = _class.staticMethodId(
    r"privilegedCallable",
    r"(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;",
  );

  static final _privilegedCallable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedCallable<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return _privilegedCallable(
            _class.reference.pointer,
            _id_privilegedCallable as jni.JMethodIDPtr,
            callable.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_privilegedCallableUsingCurrentClassLoader =
      _class.staticMethodId(
    r"privilegedCallableUsingCurrentClassLoader",
    r"(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;",
  );

  static final _privilegedCallableUsingCurrentClassLoader =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject
      privilegedCallableUsingCurrentClassLoader<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return _privilegedCallableUsingCurrentClassLoader(
            _class.reference.pointer,
            _id_privilegedCallableUsingCurrentClassLoader as jni.JMethodIDPtr,
            callable.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ExecutorsType extends jni.JObjType<Executors> {
  const $ExecutorsType();

  @override
  String get signature => r"Ljava/util/concurrent/Executors;";

  @override
  Executors fromReference(jni.JReference reference) =>
      Executors.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorsType) && other is $ExecutorsType;
  }
}

/// from: org.chromium.net.CronetEngine$Builder$LibraryLoader
class CronetEngine_Builder_LibraryLoader extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine_Builder_LibraryLoader> $type = type;

  CronetEngine_Builder_LibraryLoader.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"org/chromium/net/CronetEngine$Builder$LibraryLoader");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_Builder_LibraryLoaderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetEngine_Builder_LibraryLoader() {
    return CronetEngine_Builder_LibraryLoader.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_loadLibrary = _class.instanceMethodId(
    r"loadLibrary",
    r"(Ljava/lang/String;)V",
  );

  static final _loadLibrary = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void loadLibrary(java.lang.String string)
  void loadLibrary(
    jni.JString string,
  ) {
    _loadLibrary(reference.pointer, _id_loadLibrary as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $CronetEngine_Builder_LibraryLoaderType
    extends jni.JObjType<CronetEngine_Builder_LibraryLoader> {
  const $CronetEngine_Builder_LibraryLoaderType();

  @override
  String get signature =>
      r"Lorg/chromium/net/CronetEngine$Builder$LibraryLoader;";

  @override
  CronetEngine_Builder_LibraryLoader fromReference(jni.JReference reference) =>
      CronetEngine_Builder_LibraryLoader.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngine_Builder_LibraryLoaderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_Builder_LibraryLoaderType) &&
        other is $CronetEngine_Builder_LibraryLoaderType;
  }
}

/// from: org.chromium.net.CronetEngine$Builder
class CronetEngine_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine_Builder> $type = type;

  CronetEngine_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/CronetEngine$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_BuilderType();
  static final _id_mBuilderDelegate = _class.instanceFieldId(
    r"mBuilderDelegate",
    r"Lorg/chromium/net/ICronetEngineBuilder;",
  );

  /// from: protected final org.chromium.net.ICronetEngineBuilder mBuilderDelegate
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get mBuilderDelegate =>
      _id_mBuilderDelegate.get(this, const jni.JObjectType());

  /// from: static public final int HTTP_CACHE_DISABLED
  static const HTTP_CACHE_DISABLED = 0;

  /// from: static public final int HTTP_CACHE_IN_MEMORY
  static const HTTP_CACHE_IN_MEMORY = 1;

  /// from: static public final int HTTP_CACHE_DISK_NO_HTTP
  static const HTTP_CACHE_DISK_NO_HTTP = 2;

  /// from: static public final int HTTP_CACHE_DISK
  static const HTTP_CACHE_DISK = 3;
  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Context;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetEngine_Builder(
    jni.JObject context,
  ) {
    return CronetEngine_Builder.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Lorg/chromium/net/ICronetEngineBuilder;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.chromium.net.ICronetEngineBuilder iCronetEngineBuilder)
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetEngine_Builder.new1(
    jni.JObject iCronetEngineBuilder,
  ) {
    return CronetEngine_Builder.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            iCronetEngineBuilder.reference.pointer)
        .reference);
  }

  static final _id_getDefaultUserAgent = _class.instanceMethodId(
    r"getDefaultUserAgent",
    r"()Ljava/lang/String;",
  );

  static final _getDefaultUserAgent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getDefaultUserAgent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDefaultUserAgent() {
    return _getDefaultUserAgent(
            reference.pointer, _id_getDefaultUserAgent as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setUserAgent = _class.instanceMethodId(
    r"setUserAgent",
    r"(Ljava/lang/String;)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _setUserAgent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setUserAgent(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder setUserAgent(
    jni.JString string,
  ) {
    return _setUserAgent(reference.pointer,
            _id_setUserAgent as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_setStoragePath = _class.instanceMethodId(
    r"setStoragePath",
    r"(Ljava/lang/String;)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _setStoragePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setStoragePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder setStoragePath(
    jni.JString string,
  ) {
    return _setStoragePath(reference.pointer,
            _id_setStoragePath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_setLibraryLoader = _class.instanceMethodId(
    r"setLibraryLoader",
    r"(Lorg/chromium/net/CronetEngine$Builder$LibraryLoader;)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _setLibraryLoader = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setLibraryLoader(org.chromium.net.CronetEngine$Builder$LibraryLoader libraryLoader)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder setLibraryLoader(
    CronetEngine_Builder_LibraryLoader libraryLoader,
  ) {
    return _setLibraryLoader(
            reference.pointer,
            _id_setLibraryLoader as jni.JMethodIDPtr,
            libraryLoader.reference.pointer)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_enableQuic = _class.instanceMethodId(
    r"enableQuic",
    r"(Z)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _enableQuic = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableQuic(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableQuic(
    bool z,
  ) {
    return _enableQuic(
            reference.pointer, _id_enableQuic as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_enableHttp2 = _class.instanceMethodId(
    r"enableHttp2",
    r"(Z)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _enableHttp2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableHttp2(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableHttp2(
    bool z,
  ) {
    return _enableHttp2(
            reference.pointer, _id_enableHttp2 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_enableSdch = _class.instanceMethodId(
    r"enableSdch",
    r"(Z)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _enableSdch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableSdch(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableSdch(
    bool z,
  ) {
    return _enableSdch(
            reference.pointer, _id_enableSdch as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_enableBrotli = _class.instanceMethodId(
    r"enableBrotli",
    r"(Z)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _enableBrotli = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableBrotli(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableBrotli(
    bool z,
  ) {
    return _enableBrotli(
            reference.pointer, _id_enableBrotli as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_enableHttpCache = _class.instanceMethodId(
    r"enableHttpCache",
    r"(IJ)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _enableHttpCache = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableHttpCache(int i, long j)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enableHttpCache(
    int i,
    int j,
  ) {
    return _enableHttpCache(
            reference.pointer, _id_enableHttpCache as jni.JMethodIDPtr, i, j)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_addQuicHint = _class.instanceMethodId(
    r"addQuicHint",
    r"(Ljava/lang/String;II)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _addQuicHint = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder addQuicHint(java.lang.String string, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder addQuicHint(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _addQuicHint(reference.pointer, _id_addQuicHint as jni.JMethodIDPtr,
            string.reference.pointer, i, i1)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_addPublicKeyPins = _class.instanceMethodId(
    r"addPublicKeyPins",
    r"(Ljava/lang/String;Ljava/util/Set;ZLjava/util/Date;)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _addPublicKeyPins = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder addPublicKeyPins(java.lang.String string, java.util.Set set, boolean z, java.util.Date date)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder addPublicKeyPins(
    jni.JString string,
    jni.JSet<jni.JArray<jni.jbyte>> set0,
    bool z,
    jni.JObject date,
  ) {
    return _addPublicKeyPins(
            reference.pointer,
            _id_addPublicKeyPins as jni.JMethodIDPtr,
            string.reference.pointer,
            set0.reference.pointer,
            z ? 1 : 0,
            date.reference.pointer)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_enablePublicKeyPinningBypassForLocalTrustAnchors =
      _class.instanceMethodId(
    r"enablePublicKeyPinningBypassForLocalTrustAnchors",
    r"(Z)Lorg/chromium/net/CronetEngine$Builder;",
  );

  static final _enablePublicKeyPinningBypassForLocalTrustAnchors =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enablePublicKeyPinningBypassForLocalTrustAnchors(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine_Builder enablePublicKeyPinningBypassForLocalTrustAnchors(
    bool z,
  ) {
    return _enablePublicKeyPinningBypassForLocalTrustAnchors(
            reference.pointer,
            _id_enablePublicKeyPinningBypassForLocalTrustAnchors
                as jni.JMethodIDPtr,
            z ? 1 : 0)
        .object(const $CronetEngine_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Lorg/chromium/net/CronetEngine;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public org.chromium.net.CronetEngine build()
  /// The returned object must be released after use, by calling the [release] method.
  CronetEngine build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $CronetEngineType());
  }
}

final class $CronetEngine_BuilderType
    extends jni.JObjType<CronetEngine_Builder> {
  const $CronetEngine_BuilderType();

  @override
  String get signature => r"Lorg/chromium/net/CronetEngine$Builder;";

  @override
  CronetEngine_Builder fromReference(jni.JReference reference) =>
      CronetEngine_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngine_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_BuilderType) &&
        other is $CronetEngine_BuilderType;
  }
}

/// from: org.chromium.net.CronetEngine
class CronetEngine extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine> $type = type;

  CronetEngine.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"org/chromium/net/CronetEngine");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngineType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetEngine() {
    return CronetEngine.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getVersionString = _class.instanceMethodId(
    r"getVersionString",
    r"()Ljava/lang/String;",
  );

  static final _getVersionString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getVersionString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getVersionString() {
    return _getVersionString(
            reference.pointer, _id_getVersionString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_shutdown = _class.instanceMethodId(
    r"shutdown",
    r"()V",
  );

  static final _shutdown = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void shutdown()
  void shutdown() {
    _shutdown(reference.pointer, _id_shutdown as jni.JMethodIDPtr).check();
  }

  static final _id_startNetLogToFile = _class.instanceMethodId(
    r"startNetLogToFile",
    r"(Ljava/lang/String;Z)V",
  );

  static final _startNetLogToFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void startNetLogToFile(java.lang.String string, boolean z)
  void startNetLogToFile(
    jni.JString string,
    bool z,
  ) {
    _startNetLogToFile(
            reference.pointer,
            _id_startNetLogToFile as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_stopNetLog = _class.instanceMethodId(
    r"stopNetLog",
    r"()V",
  );

  static final _stopNetLog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void stopNetLog()
  void stopNetLog() {
    _stopNetLog(reference.pointer, _id_stopNetLog as jni.JMethodIDPtr).check();
  }

  static final _id_getGlobalMetricsDeltas = _class.instanceMethodId(
    r"getGlobalMetricsDeltas",
    r"()[B",
  );

  static final _getGlobalMetricsDeltas = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract byte[] getGlobalMetricsDeltas()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getGlobalMetricsDeltas() {
    return _getGlobalMetricsDeltas(
            reference.pointer, _id_getGlobalMetricsDeltas as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_openConnection = _class.instanceMethodId(
    r"openConnection",
    r"(Ljava/net/URL;)Ljava/net/URLConnection;",
  );

  static final _openConnection = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.net.URLConnection openConnection(java.net.URL uRL)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openConnection(
    URL uRL,
  ) {
    return _openConnection(reference.pointer,
            _id_openConnection as jni.JMethodIDPtr, uRL.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createURLStreamHandlerFactory = _class.instanceMethodId(
    r"createURLStreamHandlerFactory",
    r"()Ljava/net/URLStreamHandlerFactory;",
  );

  static final _createURLStreamHandlerFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.net.URLStreamHandlerFactory createURLStreamHandlerFactory()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createURLStreamHandlerFactory() {
    return _createURLStreamHandlerFactory(reference.pointer,
            _id_createURLStreamHandlerFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newUrlRequestBuilder = _class.instanceMethodId(
    r"newUrlRequestBuilder",
    r"(Ljava/lang/String;Lorg/chromium/net/UrlRequest$Callback;Ljava/util/concurrent/Executor;)Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _newUrlRequestBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder newUrlRequestBuilder(java.lang.String string, org.chromium.net.UrlRequest$Callback callback, java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder newUrlRequestBuilder(
    jni.JString string,
    UrlRequest_Callback callback,
    jni.JObject executor,
  ) {
    return _newUrlRequestBuilder(
            reference.pointer,
            _id_newUrlRequestBuilder as jni.JMethodIDPtr,
            string.reference.pointer,
            callback.reference.pointer,
            executor.reference.pointer)
        .object(const $UrlRequest_BuilderType());
  }
}

final class $CronetEngineType extends jni.JObjType<CronetEngine> {
  const $CronetEngineType();

  @override
  String get signature => r"Lorg/chromium/net/CronetEngine;";

  @override
  CronetEngine fromReference(jni.JReference reference) =>
      CronetEngine.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngineType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngineType) &&
        other is $CronetEngineType;
  }
}

/// from: org.chromium.net.CronetException
class CronetException extends jni.JObject {
  @override
  late final jni.JObjType<CronetException> $type = type;

  CronetException.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"org/chromium/net/CronetException");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetExceptionType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/lang/String;Ljava/lang/Throwable;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be released after use, by calling the [release] method.
  factory CronetException(
    jni.JString string,
    jni.JObject throwable,
  ) {
    return CronetException.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            string.reference.pointer,
            throwable.reference.pointer)
        .reference);
  }
}

final class $CronetExceptionType extends jni.JObjType<CronetException> {
  const $CronetExceptionType();

  @override
  String get signature => r"Lorg/chromium/net/CronetException;";

  @override
  CronetException fromReference(jni.JReference reference) =>
      CronetException.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetExceptionType) &&
        other is $CronetExceptionType;
  }
}

/// from: org.chromium.net.UploadDataProviders
class UploadDataProviders extends jni.JObject {
  @override
  late final jni.JObjType<UploadDataProviders> $type = type;

  UploadDataProviders.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/UploadDataProviders");

  /// The type which includes information such as the signature of this class.
  static const type = $UploadDataProvidersType();
  static final _id_create = _class.staticMethodId(
    r"create",
    r"(Ljava/io/File;)Lorg/chromium/net/UploadDataProvider;",
  );

  static final _create = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject create(
    jni.JObject file,
  ) {
    return _create(_class.reference.pointer, _id_create as jni.JMethodIDPtr,
            file.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_create1 = _class.staticMethodId(
    r"create",
    r"(Landroid/os/ParcelFileDescriptor;)Lorg/chromium/net/UploadDataProvider;",
  );

  static final _create1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(android.os.ParcelFileDescriptor parcelFileDescriptor)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject create1(
    jni.JObject parcelFileDescriptor,
  ) {
    return _create1(_class.reference.pointer, _id_create1 as jni.JMethodIDPtr,
            parcelFileDescriptor.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_create2 = _class.staticMethodId(
    r"create",
    r"(Ljava/nio/ByteBuffer;)Lorg/chromium/net/UploadDataProvider;",
  );

  static final _create2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(java.nio.ByteBuffer byteBuffer)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject create2(
    jni.JByteBuffer byteBuffer,
  ) {
    return _create2(_class.reference.pointer, _id_create2 as jni.JMethodIDPtr,
            byteBuffer.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_create3 = _class.staticMethodId(
    r"create",
    r"([BII)Lorg/chromium/net/UploadDataProvider;",
  );

  static final _create3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public org.chromium.net.UploadDataProvider create(byte[] bs, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject create3(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return _create3(_class.reference.pointer, _id_create3 as jni.JMethodIDPtr,
            bs.reference.pointer, i, i1)
        .object(const jni.JObjectType());
  }

  static final _id_create4 = _class.staticMethodId(
    r"create",
    r"([B)Lorg/chromium/net/UploadDataProvider;",
  );

  static final _create4 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject create4(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create4(_class.reference.pointer, _id_create4 as jni.JMethodIDPtr,
            bs.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $UploadDataProvidersType extends jni.JObjType<UploadDataProviders> {
  const $UploadDataProvidersType();

  @override
  String get signature => r"Lorg/chromium/net/UploadDataProviders;";

  @override
  UploadDataProviders fromReference(jni.JReference reference) =>
      UploadDataProviders.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UploadDataProvidersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UploadDataProvidersType) &&
        other is $UploadDataProvidersType;
  }
}

/// from: org.chromium.net.UrlRequest$Builder
class UrlRequest_Builder extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Builder> $type = type;

  UrlRequest_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/UrlRequest$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_BuilderType();

  /// from: static public final int REQUEST_PRIORITY_IDLE
  static const REQUEST_PRIORITY_IDLE = 0;

  /// from: static public final int REQUEST_PRIORITY_LOWEST
  static const REQUEST_PRIORITY_LOWEST = 1;

  /// from: static public final int REQUEST_PRIORITY_LOW
  static const REQUEST_PRIORITY_LOW = 2;

  /// from: static public final int REQUEST_PRIORITY_MEDIUM
  static const REQUEST_PRIORITY_MEDIUM = 3;

  /// from: static public final int REQUEST_PRIORITY_HIGHEST
  static const REQUEST_PRIORITY_HIGHEST = 4;
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlRequest_Builder() {
    return UrlRequest_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_setHttpMethod = _class.instanceMethodId(
    r"setHttpMethod",
    r"(Ljava/lang/String;)Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _setHttpMethod = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder setHttpMethod(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder setHttpMethod(
    jni.JString string,
  ) {
    return _setHttpMethod(reference.pointer,
            _id_setHttpMethod as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UrlRequest_BuilderType());
  }

  static final _id_addHeader = _class.instanceMethodId(
    r"addHeader",
    r"(Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _addHeader = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder addHeader(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder addHeader(
    jni.JString string,
    jni.JString string1,
  ) {
    return _addHeader(reference.pointer, _id_addHeader as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $UrlRequest_BuilderType());
  }

  static final _id_disableCache = _class.instanceMethodId(
    r"disableCache",
    r"()Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _disableCache = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder disableCache()
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder disableCache() {
    return _disableCache(
            reference.pointer, _id_disableCache as jni.JMethodIDPtr)
        .object(const $UrlRequest_BuilderType());
  }

  static final _id_setPriority = _class.instanceMethodId(
    r"setPriority",
    r"(I)Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _setPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder setPriority(int i)
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder setPriority(
    int i,
  ) {
    return _setPriority(
            reference.pointer, _id_setPriority as jni.JMethodIDPtr, i)
        .object(const $UrlRequest_BuilderType());
  }

  static final _id_setUploadDataProvider = _class.instanceMethodId(
    r"setUploadDataProvider",
    r"(Lorg/chromium/net/UploadDataProvider;Ljava/util/concurrent/Executor;)Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _setUploadDataProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder setUploadDataProvider(org.chromium.net.UploadDataProvider uploadDataProvider, java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder setUploadDataProvider(
    jni.JObject uploadDataProvider,
    jni.JObject executor,
  ) {
    return _setUploadDataProvider(
            reference.pointer,
            _id_setUploadDataProvider as jni.JMethodIDPtr,
            uploadDataProvider.reference.pointer,
            executor.reference.pointer)
        .object(const $UrlRequest_BuilderType());
  }

  static final _id_allowDirectExecutor = _class.instanceMethodId(
    r"allowDirectExecutor",
    r"()Lorg/chromium/net/UrlRequest$Builder;",
  );

  static final _allowDirectExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder allowDirectExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest_Builder allowDirectExecutor() {
    return _allowDirectExecutor(
            reference.pointer, _id_allowDirectExecutor as jni.JMethodIDPtr)
        .object(const $UrlRequest_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Lorg/chromium/net/UrlRequest;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract org.chromium.net.UrlRequest build()
  /// The returned object must be released after use, by calling the [release] method.
  UrlRequest build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $UrlRequestType());
  }
}

final class $UrlRequest_BuilderType extends jni.JObjType<UrlRequest_Builder> {
  const $UrlRequest_BuilderType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Builder;";

  @override
  UrlRequest_Builder fromReference(jni.JReference reference) =>
      UrlRequest_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_BuilderType) &&
        other is $UrlRequest_BuilderType;
  }
}

/// from: org.chromium.net.UrlRequest$Callback
class UrlRequest_Callback extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Callback> $type = type;

  UrlRequest_Callback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/UrlRequest$Callback");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_CallbackType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlRequest_Callback() {
    return UrlRequest_Callback.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onRedirectReceived = _class.instanceMethodId(
    r"onRedirectReceived",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V",
  );

  static final _onRedirectReceived = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    _onRedirectReceived(
            reference.pointer,
            _id_onRedirectReceived as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_onResponseStarted = _class.instanceMethodId(
    r"onResponseStarted",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onResponseStarted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onResponseStarted(
            reference.pointer,
            _id_onResponseStarted as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onReadCompleted = _class.instanceMethodId(
    r"onReadCompleted",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V",
  );

  static final _onReadCompleted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JByteBuffer byteBuffer,
  ) {
    _onReadCompleted(
            reference.pointer,
            _id_onReadCompleted as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r"onSucceeded",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onSucceeded = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onSucceeded(reference.pointer, _id_onSucceeded as jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r"onFailed",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V",
  );

  static final _onFailed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    _onFailed(
            reference.pointer,
            _id_onFailed as jni.JMethodIDPtr,
            urlRequest.reference.pointer,
            urlResponseInfo.reference.pointer,
            cronetException.reference.pointer)
        .check();
  }

  static final _id_onCanceled = _class.instanceMethodId(
    r"onCanceled",
    r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V",
  );

  static final _onCanceled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCanceled(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onCanceled(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    _onCanceled(reference.pointer, _id_onCanceled as jni.JMethodIDPtr,
            urlRequest.reference.pointer, urlResponseInfo.reference.pointer)
        .check();
  }
}

final class $UrlRequest_CallbackType extends jni.JObjType<UrlRequest_Callback> {
  const $UrlRequest_CallbackType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Callback;";

  @override
  UrlRequest_Callback fromReference(jni.JReference reference) =>
      UrlRequest_Callback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_CallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_CallbackType) &&
        other is $UrlRequest_CallbackType;
  }
}

/// from: org.chromium.net.UrlRequest$Status
class UrlRequest_Status extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Status> $type = type;

  UrlRequest_Status.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/UrlRequest$Status");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_StatusType();

  /// from: static public final int INVALID
  static const INVALID = -1;

  /// from: static public final int IDLE
  static const IDLE = 0;

  /// from: static public final int WAITING_FOR_STALLED_SOCKET_POOL
  static const WAITING_FOR_STALLED_SOCKET_POOL = 1;

  /// from: static public final int WAITING_FOR_AVAILABLE_SOCKET
  static const WAITING_FOR_AVAILABLE_SOCKET = 2;

  /// from: static public final int WAITING_FOR_DELEGATE
  static const WAITING_FOR_DELEGATE = 3;

  /// from: static public final int WAITING_FOR_CACHE
  static const WAITING_FOR_CACHE = 4;

  /// from: static public final int DOWNLOADING_PAC_FILE
  static const DOWNLOADING_PAC_FILE = 5;

  /// from: static public final int RESOLVING_PROXY_FOR_URL
  static const RESOLVING_PROXY_FOR_URL = 6;

  /// from: static public final int RESOLVING_HOST_IN_PAC_FILE
  static const RESOLVING_HOST_IN_PAC_FILE = 7;

  /// from: static public final int ESTABLISHING_PROXY_TUNNEL
  static const ESTABLISHING_PROXY_TUNNEL = 8;

  /// from: static public final int RESOLVING_HOST
  static const RESOLVING_HOST = 9;

  /// from: static public final int CONNECTING
  static const CONNECTING = 10;

  /// from: static public final int SSL_HANDSHAKE
  static const SSL_HANDSHAKE = 11;

  /// from: static public final int SENDING_REQUEST
  static const SENDING_REQUEST = 12;

  /// from: static public final int WAITING_FOR_RESPONSE
  static const WAITING_FOR_RESPONSE = 13;

  /// from: static public final int READING_RESPONSE
  static const READING_RESPONSE = 14;
}

final class $UrlRequest_StatusType extends jni.JObjType<UrlRequest_Status> {
  const $UrlRequest_StatusType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Status;";

  @override
  UrlRequest_Status fromReference(jni.JReference reference) =>
      UrlRequest_Status.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_StatusType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_StatusType) &&
        other is $UrlRequest_StatusType;
  }
}

/// from: org.chromium.net.UrlRequest$StatusListener
class UrlRequest_StatusListener extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_StatusListener> $type = type;

  UrlRequest_StatusListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/UrlRequest$StatusListener");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_StatusListenerType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlRequest_StatusListener() {
    return UrlRequest_StatusListener.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onStatus = _class.instanceMethodId(
    r"onStatus",
    r"(I)V",
  );

  static final _onStatus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void onStatus(int i)
  void onStatus(
    int i,
  ) {
    _onStatus(reference.pointer, _id_onStatus as jni.JMethodIDPtr, i).check();
  }
}

final class $UrlRequest_StatusListenerType
    extends jni.JObjType<UrlRequest_StatusListener> {
  const $UrlRequest_StatusListenerType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$StatusListener;";

  @override
  UrlRequest_StatusListener fromReference(jni.JReference reference) =>
      UrlRequest_StatusListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_StatusListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_StatusListenerType) &&
        other is $UrlRequest_StatusListenerType;
  }
}

/// from: org.chromium.net.UrlRequest
class UrlRequest extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest> $type = type;

  UrlRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"org/chromium/net/UrlRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequestType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlRequest() {
    return UrlRequest.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_start = _class.instanceMethodId(
    r"start",
    r"()V",
  );

  static final _start = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void start()
  void start() {
    _start(reference.pointer, _id_start as jni.JMethodIDPtr).check();
  }

  static final _id_followRedirect = _class.instanceMethodId(
    r"followRedirect",
    r"()V",
  );

  static final _followRedirect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void followRedirect()
  void followRedirect() {
    _followRedirect(reference.pointer, _id_followRedirect as jni.JMethodIDPtr)
        .check();
  }

  static final _id_read = _class.instanceMethodId(
    r"read",
    r"(Ljava/nio/ByteBuffer;)V",
  );

  static final _read = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void read(java.nio.ByteBuffer byteBuffer)
  void read(
    jni.JByteBuffer byteBuffer,
  ) {
    _read(reference.pointer, _id_read as jni.JMethodIDPtr,
            byteBuffer.reference.pointer)
        .check();
  }

  static final _id_cancel = _class.instanceMethodId(
    r"cancel",
    r"()V",
  );

  static final _cancel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void cancel()
  void cancel() {
    _cancel(reference.pointer, _id_cancel as jni.JMethodIDPtr).check();
  }

  static final _id_isDone = _class.instanceMethodId(
    r"isDone",
    r"()Z",
  );

  static final _isDone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDone()
  bool isDone() {
    return _isDone(reference.pointer, _id_isDone as jni.JMethodIDPtr).boolean;
  }

  static final _id_getStatus = _class.instanceMethodId(
    r"getStatus",
    r"(Lorg/chromium/net/UrlRequest$StatusListener;)V",
  );

  static final _getStatus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void getStatus(org.chromium.net.UrlRequest$StatusListener statusListener)
  void getStatus(
    UrlRequest_StatusListener statusListener,
  ) {
    _getStatus(reference.pointer, _id_getStatus as jni.JMethodIDPtr,
            statusListener.reference.pointer)
        .check();
  }
}

final class $UrlRequestType extends jni.JObjType<UrlRequest> {
  const $UrlRequestType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest;";

  @override
  UrlRequest fromReference(jni.JReference reference) =>
      UrlRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequestType) && other is $UrlRequestType;
  }
}

/// from: org.chromium.net.UrlResponseInfo$HeaderBlock
class UrlResponseInfo_HeaderBlock extends jni.JObject {
  @override
  late final jni.JObjType<UrlResponseInfo_HeaderBlock> $type = type;

  UrlResponseInfo_HeaderBlock.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"org/chromium/net/UrlResponseInfo$HeaderBlock");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfo_HeaderBlockType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlResponseInfo_HeaderBlock() {
    return UrlResponseInfo_HeaderBlock.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAsList = _class.instanceMethodId(
    r"getAsList",
    r"()Ljava/util/List;",
  );

  static final _getAsList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.List getAsList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAsList() {
    return _getAsList(reference.pointer, _id_getAsList as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getAsMap = _class.instanceMethodId(
    r"getAsMap",
    r"()Ljava/util/Map;",
  );

  static final _getAsMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.Map getAsMap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> getAsMap() {
    return _getAsMap(reference.pointer, _id_getAsMap as jni.JMethodIDPtr)
        .object(const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType())));
  }
}

final class $UrlResponseInfo_HeaderBlockType
    extends jni.JObjType<UrlResponseInfo_HeaderBlock> {
  const $UrlResponseInfo_HeaderBlockType();

  @override
  String get signature => r"Lorg/chromium/net/UrlResponseInfo$HeaderBlock;";

  @override
  UrlResponseInfo_HeaderBlock fromReference(jni.JReference reference) =>
      UrlResponseInfo_HeaderBlock.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlResponseInfo_HeaderBlockType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfo_HeaderBlockType) &&
        other is $UrlResponseInfo_HeaderBlockType;
  }
}

/// from: org.chromium.net.UrlResponseInfo
class UrlResponseInfo extends jni.JObject {
  @override
  late final jni.JObjType<UrlResponseInfo> $type = type;

  UrlResponseInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"org/chromium/net/UrlResponseInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfoType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlResponseInfo() {
    return UrlResponseInfo.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getUrl = _class.instanceMethodId(
    r"getUrl",
    r"()Ljava/lang/String;",
  );

  static final _getUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getUrl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getUrlChain = _class.instanceMethodId(
    r"getUrlChain",
    r"()Ljava/util/List;",
  );

  static final _getUrlChain = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.List getUrlChain()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getUrlChain() {
    return _getUrlChain(reference.pointer, _id_getUrlChain as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JStringType()));
  }

  static final _id_getHttpStatusCode = _class.instanceMethodId(
    r"getHttpStatusCode",
    r"()I",
  );

  static final _getHttpStatusCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getHttpStatusCode()
  int getHttpStatusCode() {
    return _getHttpStatusCode(
            reference.pointer, _id_getHttpStatusCode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHttpStatusText = _class.instanceMethodId(
    r"getHttpStatusText",
    r"()Ljava/lang/String;",
  );

  static final _getHttpStatusText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getHttpStatusText()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHttpStatusText() {
    return _getHttpStatusText(
            reference.pointer, _id_getHttpStatusText as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAllHeadersAsList = _class.instanceMethodId(
    r"getAllHeadersAsList",
    r"()Ljava/util/List;",
  );

  static final _getAllHeadersAsList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.List getAllHeadersAsList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAllHeadersAsList() {
    return _getAllHeadersAsList(
            reference.pointer, _id_getAllHeadersAsList as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getAllHeaders = _class.instanceMethodId(
    r"getAllHeaders",
    r"()Ljava/util/Map;",
  );

  static final _getAllHeaders = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.Map getAllHeaders()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> getAllHeaders() {
    return _getAllHeaders(
            reference.pointer, _id_getAllHeaders as jni.JMethodIDPtr)
        .object(const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType())));
  }

  static final _id_wasCached = _class.instanceMethodId(
    r"wasCached",
    r"()Z",
  );

  static final _wasCached = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean wasCached()
  bool wasCached() {
    return _wasCached(reference.pointer, _id_wasCached as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getNegotiatedProtocol = _class.instanceMethodId(
    r"getNegotiatedProtocol",
    r"()Ljava/lang/String;",
  );

  static final _getNegotiatedProtocol = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getNegotiatedProtocol()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getNegotiatedProtocol() {
    return _getNegotiatedProtocol(
            reference.pointer, _id_getNegotiatedProtocol as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getProxyServer = _class.instanceMethodId(
    r"getProxyServer",
    r"()Ljava/lang/String;",
  );

  static final _getProxyServer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getProxyServer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getProxyServer() {
    return _getProxyServer(
            reference.pointer, _id_getProxyServer as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getReceivedByteCount = _class.instanceMethodId(
    r"getReceivedByteCount",
    r"()J",
  );

  static final _getReceivedByteCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract long getReceivedByteCount()
  int getReceivedByteCount() {
    return _getReceivedByteCount(
            reference.pointer, _id_getReceivedByteCount as jni.JMethodIDPtr)
        .long;
  }
}

final class $UrlResponseInfoType extends jni.JObjType<UrlResponseInfo> {
  const $UrlResponseInfoType();

  @override
  String get signature => r"Lorg/chromium/net/UrlResponseInfo;";

  @override
  UrlResponseInfo fromReference(jni.JReference reference) =>
      UrlResponseInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlResponseInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfoType) &&
        other is $UrlResponseInfoType;
  }
}
