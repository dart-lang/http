// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: okhttp3.RequestBody$Companion
class RequestBody_Companion extends jni.JObject {
  @override
  late final jni.JObjType<RequestBody_Companion> $type = type;

  RequestBody_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/RequestBody$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $RequestBody_CompanionType();
  static final _id_create = _class.instanceMethodId(
    r"create",
    r"(Ljava/lang/String;Lokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(java.lang.String string, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create(
    jni.JString string,
    jni.JObject mediaType,
  ) {
    return _create(reference.pointer, _id_create as jni.JMethodIDPtr,
            string.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create1 = _class.instanceMethodId(
    r"create",
    r"(Lokio/ByteString;Lokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(okio.ByteString byteString, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create1(
    jni.JObject byteString,
    jni.JObject mediaType,
  ) {
    return _create1(reference.pointer, _id_create1 as jni.JMethodIDPtr,
            byteString.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create2 = _class.instanceMethodId(
    r"create",
    r"([BLokhttp3/MediaType;II)Lokhttp3/RequestBody;",
  );

  static final _create2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final okhttp3.RequestBody create(byte[] bs, okhttp3.MediaType mediaType, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create2(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
    int i,
    int i1,
  ) {
    return _create2(reference.pointer, _id_create2 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer, i, i1)
        .object(const $RequestBodyType());
  }

  static final _id_create3 = _class.instanceMethodId(
    r"create",
    r"(Ljava/io/File;Lokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(java.io.File file, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create3(
    jni.JObject file,
    jni.JObject mediaType,
  ) {
    return _create3(reference.pointer, _id_create3 as jni.JMethodIDPtr,
            file.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create4 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;",
  );

  static final _create4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create4(
    jni.JObject mediaType,
    jni.JString string,
  ) {
    return _create4(reference.pointer, _id_create4 as jni.JMethodIDPtr,
            mediaType.reference.pointer, string.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create5 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody;",
  );

  static final _create5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create5(
    jni.JObject mediaType,
    jni.JObject byteString,
  ) {
    return _create5(reference.pointer, _id_create5 as jni.JMethodIDPtr,
            mediaType.reference.pointer, byteString.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create6 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;",
  );

  static final _create6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create6(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return _create6(reference.pointer, _id_create6 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer, i, i1)
        .object(const $RequestBodyType());
  }

  static final _id_create7 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody;",
  );

  static final _create7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create7(
    jni.JObject mediaType,
    jni.JObject file,
  ) {
    return _create7(reference.pointer, _id_create7 as jni.JMethodIDPtr,
            mediaType.reference.pointer, file.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create8 = _class.instanceMethodId(
    r"create",
    r"([BLokhttp3/MediaType;I)Lokhttp3/RequestBody;",
  );

  static final _create8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final okhttp3.RequestBody create(byte[] bs, okhttp3.MediaType mediaType, int i)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create8(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
    int i,
  ) {
    return _create8(reference.pointer, _id_create8 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer, i)
        .object(const $RequestBodyType());
  }

  static final _id_create9 = _class.instanceMethodId(
    r"create",
    r"([BLokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create9 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(byte[] bs, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create9(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
  ) {
    return _create9(reference.pointer, _id_create9 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create10 = _class.instanceMethodId(
    r"create",
    r"([B)Lokhttp3/RequestBody;",
  );

  static final _create10 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create10(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create10(reference.pointer, _id_create10 as jni.JMethodIDPtr,
            bs.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create11 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[BI)Lokhttp3/RequestBody;",
  );

  static final _create11 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs, int i)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create11(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
    int i,
  ) {
    return _create11(reference.pointer, _id_create11 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer, i)
        .object(const $RequestBodyType());
  }

  static final _id_create12 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;",
  );

  static final _create12 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  RequestBody create12(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create12(reference.pointer, _id_create12 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory RequestBody_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return RequestBody_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $RequestBody_CompanionType
    extends jni.JObjType<RequestBody_Companion> {
  const $RequestBody_CompanionType();

  @override
  String get signature => r"Lokhttp3/RequestBody$Companion;";

  @override
  RequestBody_Companion fromReference(jni.JReference reference) =>
      RequestBody_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($RequestBody_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RequestBody_CompanionType) &&
        other is $RequestBody_CompanionType;
  }
}

/// from: okhttp3.RequestBody
class RequestBody extends jni.JObject {
  @override
  late final jni.JObjType<RequestBody> $type = type;

  RequestBody.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/RequestBody");

  /// The type which includes information such as the signature of this class.
  static const type = $RequestBodyType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Lokhttp3/RequestBody$Companion;",
  );

  /// from: static public final okhttp3.RequestBody$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody_Companion get Companion =>
      _id_Companion.get(_class, const $RequestBody_CompanionType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory RequestBody() {
    return RequestBody.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_contentType = _class.instanceMethodId(
    r"contentType",
    r"()Lokhttp3/MediaType;",
  );

  static final _contentType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract okhttp3.MediaType contentType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject contentType() {
    return _contentType(reference.pointer, _id_contentType as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_contentLength = _class.instanceMethodId(
    r"contentLength",
    r"()J",
  );

  static final _contentLength = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long contentLength()
  int contentLength() {
    return _contentLength(
            reference.pointer, _id_contentLength as jni.JMethodIDPtr)
        .long;
  }

  static final _id_writeTo = _class.instanceMethodId(
    r"writeTo",
    r"(Lokio/BufferedSink;)V",
  );

  static final _writeTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void writeTo(okio.BufferedSink bufferedSink)
  void writeTo(
    jni.JObject bufferedSink,
  ) {
    _writeTo(reference.pointer, _id_writeTo as jni.JMethodIDPtr,
            bufferedSink.reference.pointer)
        .check();
  }

  static final _id_isDuplex = _class.instanceMethodId(
    r"isDuplex",
    r"()Z",
  );

  static final _isDuplex = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isDuplex()
  bool isDuplex() {
    return _isDuplex(reference.pointer, _id_isDuplex as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOneShot = _class.instanceMethodId(
    r"isOneShot",
    r"()Z",
  );

  static final _isOneShot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isOneShot()
  bool isOneShot() {
    return _isOneShot(reference.pointer, _id_isOneShot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_create = _class.staticMethodId(
    r"create",
    r"(Ljava/lang/String;Lokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(java.lang.String string, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create(
    jni.JString string,
    jni.JObject mediaType,
  ) {
    return _create(_class.reference.pointer, _id_create as jni.JMethodIDPtr,
            string.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create1 = _class.staticMethodId(
    r"create",
    r"(Lokio/ByteString;Lokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(okio.ByteString byteString, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create1(
    jni.JObject byteString,
    jni.JObject mediaType,
  ) {
    return _create1(_class.reference.pointer, _id_create1 as jni.JMethodIDPtr,
            byteString.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create2 = _class.staticMethodId(
    r"create",
    r"([BLokhttp3/MediaType;II)Lokhttp3/RequestBody;",
  );

  static final _create2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public final okhttp3.RequestBody create(byte[] bs, okhttp3.MediaType mediaType, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create2(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
    int i,
    int i1,
  ) {
    return _create2(_class.reference.pointer, _id_create2 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer, i, i1)
        .object(const $RequestBodyType());
  }

  static final _id_create3 = _class.staticMethodId(
    r"create",
    r"(Ljava/io/File;Lokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(java.io.File file, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create3(
    jni.JObject file,
    jni.JObject mediaType,
  ) {
    return _create3(_class.reference.pointer, _id_create3 as jni.JMethodIDPtr,
            file.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create4 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;",
  );

  static final _create4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create4(
    jni.JObject mediaType,
    jni.JString string,
  ) {
    return _create4(_class.reference.pointer, _id_create4 as jni.JMethodIDPtr,
            mediaType.reference.pointer, string.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create5 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody;",
  );

  static final _create5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create5(
    jni.JObject mediaType,
    jni.JObject byteString,
  ) {
    return _create5(_class.reference.pointer, _id_create5 as jni.JMethodIDPtr,
            mediaType.reference.pointer, byteString.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create6 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;",
  );

  static final _create6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create6(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return _create6(_class.reference.pointer, _id_create6 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer, i, i1)
        .object(const $RequestBodyType());
  }

  static final _id_create7 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody;",
  );

  static final _create7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create7(
    jni.JObject mediaType,
    jni.JObject file,
  ) {
    return _create7(_class.reference.pointer, _id_create7 as jni.JMethodIDPtr,
            mediaType.reference.pointer, file.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create8 = _class.staticMethodId(
    r"create",
    r"([BLokhttp3/MediaType;I)Lokhttp3/RequestBody;",
  );

  static final _create8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public final okhttp3.RequestBody create(byte[] bs, okhttp3.MediaType mediaType, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create8(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
    int i,
  ) {
    return _create8(_class.reference.pointer, _id_create8 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer, i)
        .object(const $RequestBodyType());
  }

  static final _id_create9 = _class.staticMethodId(
    r"create",
    r"([BLokhttp3/MediaType;)Lokhttp3/RequestBody;",
  );

  static final _create9 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(byte[] bs, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create9(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
  ) {
    return _create9(_class.reference.pointer, _id_create9 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create10 = _class.staticMethodId(
    r"create",
    r"([B)Lokhttp3/RequestBody;",
  );

  static final _create10 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create10(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create10(_class.reference.pointer, _id_create10 as jni.JMethodIDPtr,
            bs.reference.pointer)
        .object(const $RequestBodyType());
  }

  static final _id_create11 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[BI)Lokhttp3/RequestBody;",
  );

  static final _create11 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create11(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
    int i,
  ) {
    return _create11(_class.reference.pointer, _id_create11 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer, i)
        .object(const $RequestBodyType());
  }

  static final _id_create12 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;",
  );

  static final _create12 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  static RequestBody create12(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create12(_class.reference.pointer, _id_create12 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer)
        .object(const $RequestBodyType());
  }
}

final class $RequestBodyType extends jni.JObjType<RequestBody> {
  const $RequestBodyType();

  @override
  String get signature => r"Lokhttp3/RequestBody;";

  @override
  RequestBody fromReference(jni.JReference reference) =>
      RequestBody.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($RequestBodyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RequestBodyType) && other is $RequestBodyType;
  }
}
