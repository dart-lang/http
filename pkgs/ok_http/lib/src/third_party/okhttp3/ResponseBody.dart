// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: okhttp3.ResponseBody$BomAwareReader
class ResponseBody_BomAwareReader extends jni.JObject {
  @override
  late final jni.JObjType<ResponseBody_BomAwareReader> $type = type;

  ResponseBody_BomAwareReader.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"okhttp3/ResponseBody$BomAwareReader");

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseBody_BomAwareReaderType();
  static final _id_new0 = _class.constructorId(
    r"(Lokio/BufferedSource;Ljava/nio/charset/Charset;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(okio.BufferedSource bufferedSource, java.nio.charset.Charset charset)
  /// The returned object must be released after use, by calling the [release] method.
  factory ResponseBody_BomAwareReader(
    jni.JObject bufferedSource,
    jni.JObject charset,
  ) {
    return ResponseBody_BomAwareReader.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            bufferedSource.reference.pointer,
            charset.reference.pointer)
        .reference);
  }

  static final _id_read = _class.instanceMethodId(
    r"read",
    r"([CII)I",
  );

  static final _read = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int read(char[] cs, int i, int i1)
  int read(
    jni.JArray<jni.jchar> cs,
    int i,
    int i1,
  ) {
    return _read(reference.pointer, _id_read as jni.JMethodIDPtr,
            cs.reference.pointer, i, i1)
        .integer;
  }

  static final _id_close = _class.instanceMethodId(
    r"close",
    r"()V",
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }
}

final class $ResponseBody_BomAwareReaderType
    extends jni.JObjType<ResponseBody_BomAwareReader> {
  const $ResponseBody_BomAwareReaderType();

  @override
  String get signature => r"Lokhttp3/ResponseBody$BomAwareReader;";

  @override
  ResponseBody_BomAwareReader fromReference(jni.JReference reference) =>
      ResponseBody_BomAwareReader.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResponseBody_BomAwareReaderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResponseBody_BomAwareReaderType) &&
        other is $ResponseBody_BomAwareReaderType;
  }
}

/// from: okhttp3.ResponseBody$Companion
class ResponseBody_Companion extends jni.JObject {
  @override
  late final jni.JObjType<ResponseBody_Companion> $type = type;

  ResponseBody_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/ResponseBody$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseBody_CompanionType();
  static final _id_create = _class.instanceMethodId(
    r"create",
    r"(Ljava/lang/String;Lokhttp3/MediaType;)Lokhttp3/ResponseBody;",
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(java.lang.String string, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create(
    jni.JString string,
    jni.JObject mediaType,
  ) {
    return _create(reference.pointer, _id_create as jni.JMethodIDPtr,
            string.reference.pointer, mediaType.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create1 = _class.instanceMethodId(
    r"create",
    r"([BLokhttp3/MediaType;)Lokhttp3/ResponseBody;",
  );

  static final _create1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(byte[] bs, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create1(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
  ) {
    return _create1(reference.pointer, _id_create1 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create2 = _class.instanceMethodId(
    r"create",
    r"(Lokio/ByteString;Lokhttp3/MediaType;)Lokhttp3/ResponseBody;",
  );

  static final _create2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(okio.ByteString byteString, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create2(
    jni.JObject byteString,
    jni.JObject mediaType,
  ) {
    return _create2(reference.pointer, _id_create2 as jni.JMethodIDPtr,
            byteString.reference.pointer, mediaType.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create3 = _class.instanceMethodId(
    r"create",
    r"(Lokio/BufferedSource;Lokhttp3/MediaType;J)Lokhttp3/ResponseBody;",
  );

  static final _create3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final okhttp3.ResponseBody create(okio.BufferedSource bufferedSource, okhttp3.MediaType mediaType, long j)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create3(
    jni.JObject bufferedSource,
    jni.JObject mediaType,
    int j,
  ) {
    return _create3(reference.pointer, _id_create3 as jni.JMethodIDPtr,
            bufferedSource.reference.pointer, mediaType.reference.pointer, j)
        .object(const $ResponseBodyType());
  }

  static final _id_create4 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/ResponseBody;",
  );

  static final _create4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create4(
    jni.JObject mediaType,
    jni.JString string,
  ) {
    return _create4(reference.pointer, _id_create4 as jni.JMethodIDPtr,
            mediaType.reference.pointer, string.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create5 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[B)Lokhttp3/ResponseBody;",
  );

  static final _create5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create5(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create5(reference.pointer, _id_create5 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create6 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/ResponseBody;",
  );

  static final _create6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create6(
    jni.JObject mediaType,
    jni.JObject byteString,
  ) {
    return _create6(reference.pointer, _id_create6 as jni.JMethodIDPtr,
            mediaType.reference.pointer, byteString.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create7 = _class.instanceMethodId(
    r"create",
    r"(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;",
  );

  static final _create7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, long j, okio.BufferedSource bufferedSource)
  /// The returned object must be released after use, by calling the [release] method.
  ResponseBody create7(
    jni.JObject mediaType,
    int j,
    jni.JObject bufferedSource,
  ) {
    return _create7(reference.pointer, _id_create7 as jni.JMethodIDPtr,
            mediaType.reference.pointer, j, bufferedSource.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ResponseBody_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return ResponseBody_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $ResponseBody_CompanionType
    extends jni.JObjType<ResponseBody_Companion> {
  const $ResponseBody_CompanionType();

  @override
  String get signature => r"Lokhttp3/ResponseBody$Companion;";

  @override
  ResponseBody_Companion fromReference(jni.JReference reference) =>
      ResponseBody_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResponseBody_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResponseBody_CompanionType) &&
        other is $ResponseBody_CompanionType;
  }
}

/// from: okhttp3.ResponseBody
class ResponseBody extends jni.JObject {
  @override
  late final jni.JObjType<ResponseBody> $type = type;

  ResponseBody.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/ResponseBody");

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseBodyType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Lokhttp3/ResponseBody$Companion;",
  );

  /// from: static public final okhttp3.ResponseBody$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody_Companion get Companion =>
      _id_Companion.get(_class, const $ResponseBody_CompanionType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ResponseBody() {
    return ResponseBody.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_contentType = _class.instanceMethodId(
    r"contentType",
    r"()Lokhttp3/MediaType;",
  );

  static final _contentType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract okhttp3.MediaType contentType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject contentType() {
    return _contentType(reference.pointer, _id_contentType as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_contentLength = _class.instanceMethodId(
    r"contentLength",
    r"()J",
  );

  static final _contentLength = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract long contentLength()
  int contentLength() {
    return _contentLength(
            reference.pointer, _id_contentLength as jni.JMethodIDPtr)
        .long;
  }

  static final _id_byteStream = _class.instanceMethodId(
    r"byteStream",
    r"()Ljava/io/InputStream;",
  );

  static final _byteStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.io.InputStream byteStream()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject byteStream() {
    return _byteStream(reference.pointer, _id_byteStream as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_source = _class.instanceMethodId(
    r"source",
    r"()Lokio/BufferedSource;",
  );

  static final _source = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract okio.BufferedSource source()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject source() {
    return _source(reference.pointer, _id_source as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_bytes = _class.instanceMethodId(
    r"bytes",
    r"()[B",
  );

  static final _bytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final byte[] bytes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> bytes() {
    return _bytes(reference.pointer, _id_bytes as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_byteString = _class.instanceMethodId(
    r"byteString",
    r"()Lokio/ByteString;",
  );

  static final _byteString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okio.ByteString byteString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject byteString() {
    return _byteString(reference.pointer, _id_byteString as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_charStream = _class.instanceMethodId(
    r"charStream",
    r"()Ljava/io/Reader;",
  );

  static final _charStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.io.Reader charStream()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject charStream() {
    return _charStream(reference.pointer, _id_charStream as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_string = _class.instanceMethodId(
    r"string",
    r"()Ljava/lang/String;",
  );

  static final _string = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String string()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString string() {
    return _string(reference.pointer, _id_string as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_close = _class.instanceMethodId(
    r"close",
    r"()V",
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_create = _class.staticMethodId(
    r"create",
    r"(Ljava/lang/String;Lokhttp3/MediaType;)Lokhttp3/ResponseBody;",
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(java.lang.String string, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create(
    jni.JString string,
    jni.JObject mediaType,
  ) {
    return _create(_class.reference.pointer, _id_create as jni.JMethodIDPtr,
            string.reference.pointer, mediaType.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create1 = _class.staticMethodId(
    r"create",
    r"([BLokhttp3/MediaType;)Lokhttp3/ResponseBody;",
  );

  static final _create1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(byte[] bs, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create1(
    jni.JArray<jni.jbyte> bs,
    jni.JObject mediaType,
  ) {
    return _create1(_class.reference.pointer, _id_create1 as jni.JMethodIDPtr,
            bs.reference.pointer, mediaType.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create2 = _class.staticMethodId(
    r"create",
    r"(Lokio/ByteString;Lokhttp3/MediaType;)Lokhttp3/ResponseBody;",
  );

  static final _create2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(okio.ByteString byteString, okhttp3.MediaType mediaType)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create2(
    jni.JObject byteString,
    jni.JObject mediaType,
  ) {
    return _create2(_class.reference.pointer, _id_create2 as jni.JMethodIDPtr,
            byteString.reference.pointer, mediaType.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create3 = _class.staticMethodId(
    r"create",
    r"(Lokio/BufferedSource;Lokhttp3/MediaType;J)Lokhttp3/ResponseBody;",
  );

  static final _create3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public final okhttp3.ResponseBody create(okio.BufferedSource bufferedSource, okhttp3.MediaType mediaType, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create3(
    jni.JObject bufferedSource,
    jni.JObject mediaType,
    int j,
  ) {
    return _create3(_class.reference.pointer, _id_create3 as jni.JMethodIDPtr,
            bufferedSource.reference.pointer, mediaType.reference.pointer, j)
        .object(const $ResponseBodyType());
  }

  static final _id_create4 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/ResponseBody;",
  );

  static final _create4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create4(
    jni.JObject mediaType,
    jni.JString string,
  ) {
    return _create4(_class.reference.pointer, _id_create4 as jni.JMethodIDPtr,
            mediaType.reference.pointer, string.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create5 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;[B)Lokhttp3/ResponseBody;",
  );

  static final _create5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create5(
    jni.JObject mediaType,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _create5(_class.reference.pointer, _id_create5 as jni.JMethodIDPtr,
            mediaType.reference.pointer, bs.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create6 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/ResponseBody;",
  );

  static final _create6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create6(
    jni.JObject mediaType,
    jni.JObject byteString,
  ) {
    return _create6(_class.reference.pointer, _id_create6 as jni.JMethodIDPtr,
            mediaType.reference.pointer, byteString.reference.pointer)
        .object(const $ResponseBodyType());
  }

  static final _id_create7 = _class.staticMethodId(
    r"create",
    r"(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;",
  );

  static final _create7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.ResponseBody create(okhttp3.MediaType mediaType, long j, okio.BufferedSource bufferedSource)
  /// The returned object must be released after use, by calling the [release] method.
  static ResponseBody create7(
    jni.JObject mediaType,
    int j,
    jni.JObject bufferedSource,
  ) {
    return _create7(_class.reference.pointer, _id_create7 as jni.JMethodIDPtr,
            mediaType.reference.pointer, j, bufferedSource.reference.pointer)
        .object(const $ResponseBodyType());
  }
}

final class $ResponseBodyType extends jni.JObjType<ResponseBody> {
  const $ResponseBodyType();

  @override
  String get signature => r"Lokhttp3/ResponseBody;";

  @override
  ResponseBody fromReference(jni.JReference reference) =>
      ResponseBody.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResponseBodyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResponseBodyType) &&
        other is $ResponseBodyType;
  }
}
