// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Request.dart" as request_;

import "Call.dart" as call_;

/// from: okhttp3.OkHttpClient$Builder
class OkHttpClient_Builder extends jni.JObject {
  @override
  late final jni.JObjType<OkHttpClient_Builder> $type = type;

  OkHttpClient_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/OkHttpClient$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClient_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory OkHttpClient_Builder() {
    return OkHttpClient_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Lokhttp3/OkHttpClient;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(okhttp3.OkHttpClient okHttpClient)
  /// The returned object must be released after use, by calling the [release] method.
  factory OkHttpClient_Builder.new1(
    OkHttpClient okHttpClient,
  ) {
    return OkHttpClient_Builder.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, okHttpClient.reference.pointer)
        .reference);
  }

  static final _id_dispatcher = _class.instanceMethodId(
    r"dispatcher",
    r"(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _dispatcher = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher dispatcher)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder dispatcher(
    jni.JObject dispatcher,
  ) {
    return _dispatcher(reference.pointer, _id_dispatcher as jni.JMethodIDPtr,
            dispatcher.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_connectionPool = _class.instanceMethodId(
    r"connectionPool",
    r"(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _connectionPool = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool connectionPool)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder connectionPool(
    jni.JObject connectionPool,
  ) {
    return _connectionPool(
            reference.pointer,
            _id_connectionPool as jni.JMethodIDPtr,
            connectionPool.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_interceptors = _class.instanceMethodId(
    r"interceptors",
    r"()Ljava/util/List;",
  );

  static final _interceptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List interceptors()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> interceptors() {
    return _interceptors(
            reference.pointer, _id_interceptors as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_addInterceptor = _class.instanceMethodId(
    r"addInterceptor",
    r"(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _addInterceptor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor interceptor)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder addInterceptor(
    jni.JObject interceptor,
  ) {
    return _addInterceptor(
            reference.pointer,
            _id_addInterceptor as jni.JMethodIDPtr,
            interceptor.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_networkInterceptors = _class.instanceMethodId(
    r"networkInterceptors",
    r"()Ljava/util/List;",
  );

  static final _networkInterceptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List networkInterceptors()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> networkInterceptors() {
    return _networkInterceptors(
            reference.pointer, _id_networkInterceptors as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_addNetworkInterceptor = _class.instanceMethodId(
    r"addNetworkInterceptor",
    r"(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _addNetworkInterceptor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor interceptor)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder addNetworkInterceptor(
    jni.JObject interceptor,
  ) {
    return _addNetworkInterceptor(
            reference.pointer,
            _id_addNetworkInterceptor as jni.JMethodIDPtr,
            interceptor.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_eventListener = _class.instanceMethodId(
    r"eventListener",
    r"(Lokhttp3/EventListener;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _eventListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder eventListener(okhttp3.EventListener eventListener)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder eventListener(
    jni.JObject eventListener,
  ) {
    return _eventListener(
            reference.pointer,
            _id_eventListener as jni.JMethodIDPtr,
            eventListener.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_eventListenerFactory = _class.instanceMethodId(
    r"eventListenerFactory",
    r"(Lokhttp3/EventListener$Factory;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _eventListenerFactory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder eventListenerFactory(okhttp3.EventListener$Factory factory)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder eventListenerFactory(
    jni.JObject factory0,
  ) {
    return _eventListenerFactory(
            reference.pointer,
            _id_eventListenerFactory as jni.JMethodIDPtr,
            factory0.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_retryOnConnectionFailure = _class.instanceMethodId(
    r"retryOnConnectionFailure",
    r"(Z)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _retryOnConnectionFailure = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder retryOnConnectionFailure(
    bool z,
  ) {
    return _retryOnConnectionFailure(reference.pointer,
            _id_retryOnConnectionFailure as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_authenticator = _class.instanceMethodId(
    r"authenticator",
    r"(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _authenticator = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator authenticator)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder authenticator(
    jni.JObject authenticator,
  ) {
    return _authenticator(
            reference.pointer,
            _id_authenticator as jni.JMethodIDPtr,
            authenticator.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_followRedirects = _class.instanceMethodId(
    r"followRedirects",
    r"(Z)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _followRedirects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final okhttp3.OkHttpClient$Builder followRedirects(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder followRedirects(
    bool z,
  ) {
    return _followRedirects(reference.pointer,
            _id_followRedirects as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_followSslRedirects = _class.instanceMethodId(
    r"followSslRedirects",
    r"(Z)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _followSslRedirects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final okhttp3.OkHttpClient$Builder followSslRedirects(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder followSslRedirects(
    bool z,
  ) {
    return _followSslRedirects(reference.pointer,
            _id_followSslRedirects as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_cookieJar = _class.instanceMethodId(
    r"cookieJar",
    r"(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _cookieJar = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar cookieJar)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder cookieJar(
    jni.JObject cookieJar,
  ) {
    return _cookieJar(reference.pointer, _id_cookieJar as jni.JMethodIDPtr,
            cookieJar.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_cache = _class.instanceMethodId(
    r"cache",
    r"(Lokhttp3/Cache;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _cache = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder cache(okhttp3.Cache cache)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder cache(
    jni.JObject cache,
  ) {
    return _cache(reference.pointer, _id_cache as jni.JMethodIDPtr,
            cache.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_dns = _class.instanceMethodId(
    r"dns",
    r"(Lokhttp3/Dns;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _dns = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder dns(okhttp3.Dns dns)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder dns(
    jni.JObject dns,
  ) {
    return _dns(reference.pointer, _id_dns as jni.JMethodIDPtr,
            dns.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_proxy = _class.instanceMethodId(
    r"proxy",
    r"(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _proxy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder proxy(java.net.Proxy proxy)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder proxy(
    jni.JObject proxy,
  ) {
    return _proxy(reference.pointer, _id_proxy as jni.JMethodIDPtr,
            proxy.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_proxySelector = _class.instanceMethodId(
    r"proxySelector",
    r"(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _proxySelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector proxySelector)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder proxySelector(
    jni.JObject proxySelector,
  ) {
    return _proxySelector(
            reference.pointer,
            _id_proxySelector as jni.JMethodIDPtr,
            proxySelector.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_proxyAuthenticator = _class.instanceMethodId(
    r"proxyAuthenticator",
    r"(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _proxyAuthenticator = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator authenticator)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder proxyAuthenticator(
    jni.JObject authenticator,
  ) {
    return _proxyAuthenticator(
            reference.pointer,
            _id_proxyAuthenticator as jni.JMethodIDPtr,
            authenticator.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_socketFactory = _class.instanceMethodId(
    r"socketFactory",
    r"(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _socketFactory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory socketFactory)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder socketFactory(
    jni.JObject socketFactory,
  ) {
    return _socketFactory(
            reference.pointer,
            _id_socketFactory as jni.JMethodIDPtr,
            socketFactory.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_sslSocketFactory = _class.instanceMethodId(
    r"sslSocketFactory",
    r"(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _sslSocketFactory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory sSLSocketFactory)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder sslSocketFactory(
    jni.JObject sSLSocketFactory,
  ) {
    return _sslSocketFactory(
            reference.pointer,
            _id_sslSocketFactory as jni.JMethodIDPtr,
            sSLSocketFactory.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_sslSocketFactory1 = _class.instanceMethodId(
    r"sslSocketFactory",
    r"(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _sslSocketFactory1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory sSLSocketFactory, javax.net.ssl.X509TrustManager x509TrustManager)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder sslSocketFactory1(
    jni.JObject sSLSocketFactory,
    jni.JObject x509TrustManager,
  ) {
    return _sslSocketFactory1(
            reference.pointer,
            _id_sslSocketFactory1 as jni.JMethodIDPtr,
            sSLSocketFactory.reference.pointer,
            x509TrustManager.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_connectionSpecs = _class.instanceMethodId(
    r"connectionSpecs",
    r"(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _connectionSpecs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder connectionSpecs(
    jni.JList<jni.JObject> list,
  ) {
    return _connectionSpecs(reference.pointer,
            _id_connectionSpecs as jni.JMethodIDPtr, list.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_protocols = _class.instanceMethodId(
    r"protocols",
    r"(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _protocols = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder protocols(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder protocols(
    jni.JList<jni.JObject> list,
  ) {
    return _protocols(reference.pointer, _id_protocols as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_hostnameVerifier = _class.instanceMethodId(
    r"hostnameVerifier",
    r"(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _hostnameVerifier = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier hostnameVerifier)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder hostnameVerifier(
    jni.JObject hostnameVerifier,
  ) {
    return _hostnameVerifier(
            reference.pointer,
            _id_hostnameVerifier as jni.JMethodIDPtr,
            hostnameVerifier.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_certificatePinner = _class.instanceMethodId(
    r"certificatePinner",
    r"(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _certificatePinner = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner certificatePinner)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder certificatePinner(
    jni.JObject certificatePinner,
  ) {
    return _certificatePinner(
            reference.pointer,
            _id_certificatePinner as jni.JMethodIDPtr,
            certificatePinner.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_callTimeout = _class.instanceMethodId(
    r"callTimeout",
    r"(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _callTimeout = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder callTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder callTimeout(
    int j,
    jni.JObject timeUnit,
  ) {
    return _callTimeout(reference.pointer, _id_callTimeout as jni.JMethodIDPtr,
            j, timeUnit.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_callTimeout1 = _class.instanceMethodId(
    r"callTimeout",
    r"(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _callTimeout1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder callTimeout(java.time.Duration duration)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder callTimeout1(
    jni.JObject duration,
  ) {
    return _callTimeout1(reference.pointer,
            _id_callTimeout1 as jni.JMethodIDPtr, duration.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_connectTimeout = _class.instanceMethodId(
    r"connectTimeout",
    r"(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _connectTimeout = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder connectTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder connectTimeout(
    int j,
    jni.JObject timeUnit,
  ) {
    return _connectTimeout(
            reference.pointer,
            _id_connectTimeout as jni.JMethodIDPtr,
            j,
            timeUnit.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_connectTimeout1 = _class.instanceMethodId(
    r"connectTimeout",
    r"(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _connectTimeout1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder connectTimeout(java.time.Duration duration)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder connectTimeout1(
    jni.JObject duration,
  ) {
    return _connectTimeout1(reference.pointer,
            _id_connectTimeout1 as jni.JMethodIDPtr, duration.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_readTimeout = _class.instanceMethodId(
    r"readTimeout",
    r"(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _readTimeout = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder readTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder readTimeout(
    int j,
    jni.JObject timeUnit,
  ) {
    return _readTimeout(reference.pointer, _id_readTimeout as jni.JMethodIDPtr,
            j, timeUnit.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_readTimeout1 = _class.instanceMethodId(
    r"readTimeout",
    r"(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _readTimeout1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder readTimeout(java.time.Duration duration)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder readTimeout1(
    jni.JObject duration,
  ) {
    return _readTimeout1(reference.pointer,
            _id_readTimeout1 as jni.JMethodIDPtr, duration.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_writeTimeout = _class.instanceMethodId(
    r"writeTimeout",
    r"(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _writeTimeout = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder writeTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder writeTimeout(
    int j,
    jni.JObject timeUnit,
  ) {
    return _writeTimeout(reference.pointer,
            _id_writeTimeout as jni.JMethodIDPtr, j, timeUnit.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_writeTimeout1 = _class.instanceMethodId(
    r"writeTimeout",
    r"(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _writeTimeout1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder writeTimeout(java.time.Duration duration)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder writeTimeout1(
    jni.JObject duration,
  ) {
    return _writeTimeout1(reference.pointer,
            _id_writeTimeout1 as jni.JMethodIDPtr, duration.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_pingInterval = _class.instanceMethodId(
    r"pingInterval",
    r"(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _pingInterval = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder pingInterval(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder pingInterval(
    int j,
    jni.JObject timeUnit,
  ) {
    return _pingInterval(reference.pointer,
            _id_pingInterval as jni.JMethodIDPtr, j, timeUnit.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_pingInterval1 = _class.instanceMethodId(
    r"pingInterval",
    r"(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _pingInterval1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.OkHttpClient$Builder pingInterval(java.time.Duration duration)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder pingInterval1(
    jni.JObject duration,
  ) {
    return _pingInterval1(reference.pointer,
            _id_pingInterval1 as jni.JMethodIDPtr, duration.reference.pointer)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_minWebSocketMessageToCompress = _class.instanceMethodId(
    r"minWebSocketMessageToCompress",
    r"(J)Lokhttp3/OkHttpClient$Builder;",
  );

  static final _minWebSocketMessageToCompress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final okhttp3.OkHttpClient$Builder minWebSocketMessageToCompress(long j)
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder minWebSocketMessageToCompress(
    int j,
  ) {
    return _minWebSocketMessageToCompress(reference.pointer,
            _id_minWebSocketMessageToCompress as jni.JMethodIDPtr, j)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Lokhttp3/OkHttpClient;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.OkHttpClient build()
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $OkHttpClientType());
  }
}

final class $OkHttpClient_BuilderType
    extends jni.JObjType<OkHttpClient_Builder> {
  const $OkHttpClient_BuilderType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient$Builder;";

  @override
  OkHttpClient_Builder fromReference(jni.JReference reference) =>
      OkHttpClient_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OkHttpClient_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OkHttpClient_BuilderType) &&
        other is $OkHttpClient_BuilderType;
  }
}

/// from: okhttp3.OkHttpClient$Companion
class OkHttpClient_Companion extends jni.JObject {
  @override
  late final jni.JObjType<OkHttpClient_Companion> $type = type;

  OkHttpClient_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/OkHttpClient$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClient_CompanionType();
  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory OkHttpClient_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return OkHttpClient_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $OkHttpClient_CompanionType
    extends jni.JObjType<OkHttpClient_Companion> {
  const $OkHttpClient_CompanionType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient$Companion;";

  @override
  OkHttpClient_Companion fromReference(jni.JReference reference) =>
      OkHttpClient_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OkHttpClient_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OkHttpClient_CompanionType) &&
        other is $OkHttpClient_CompanionType;
  }
}

/// from: okhttp3.OkHttpClient
class OkHttpClient extends jni.JObject {
  @override
  late final jni.JObjType<OkHttpClient> $type = type;

  OkHttpClient.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/OkHttpClient");

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClientType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Lokhttp3/OkHttpClient$Companion;",
  );

  /// from: static public final okhttp3.OkHttpClient$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static OkHttpClient_Companion get Companion =>
      _id_Companion.get(_class, const $OkHttpClient_CompanionType());

  static final _id_new0 = _class.constructorId(
    r"(Lokhttp3/OkHttpClient$Builder;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(okhttp3.OkHttpClient$Builder builder)
  /// The returned object must be released after use, by calling the [release] method.
  factory OkHttpClient(
    OkHttpClient_Builder builder,
  ) {
    return OkHttpClient.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, builder.reference.pointer)
        .reference);
  }

  static final _id_dispatcher = _class.instanceMethodId(
    r"dispatcher",
    r"()Lokhttp3/Dispatcher;",
  );

  static final _dispatcher = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Dispatcher dispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject dispatcher() {
    return _dispatcher(reference.pointer, _id_dispatcher as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_connectionPool = _class.instanceMethodId(
    r"connectionPool",
    r"()Lokhttp3/ConnectionPool;",
  );

  static final _connectionPool = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.ConnectionPool connectionPool()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject connectionPool() {
    return _connectionPool(
            reference.pointer, _id_connectionPool as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_interceptors = _class.instanceMethodId(
    r"interceptors",
    r"()Ljava/util/List;",
  );

  static final _interceptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List interceptors()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> interceptors() {
    return _interceptors(
            reference.pointer, _id_interceptors as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_networkInterceptors = _class.instanceMethodId(
    r"networkInterceptors",
    r"()Ljava/util/List;",
  );

  static final _networkInterceptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List networkInterceptors()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> networkInterceptors() {
    return _networkInterceptors(
            reference.pointer, _id_networkInterceptors as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_eventListenerFactory = _class.instanceMethodId(
    r"eventListenerFactory",
    r"()Lokhttp3/EventListener$Factory;",
  );

  static final _eventListenerFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.EventListener$Factory eventListenerFactory()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eventListenerFactory() {
    return _eventListenerFactory(
            reference.pointer, _id_eventListenerFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_retryOnConnectionFailure = _class.instanceMethodId(
    r"retryOnConnectionFailure",
    r"()Z",
  );

  static final _retryOnConnectionFailure = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean retryOnConnectionFailure()
  bool retryOnConnectionFailure() {
    return _retryOnConnectionFailure(
            reference.pointer, _id_retryOnConnectionFailure as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_authenticator = _class.instanceMethodId(
    r"authenticator",
    r"()Lokhttp3/Authenticator;",
  );

  static final _authenticator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Authenticator authenticator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject authenticator() {
    return _authenticator(
            reference.pointer, _id_authenticator as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_followRedirects = _class.instanceMethodId(
    r"followRedirects",
    r"()Z",
  );

  static final _followRedirects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean followRedirects()
  bool followRedirects() {
    return _followRedirects(
            reference.pointer, _id_followRedirects as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_followSslRedirects = _class.instanceMethodId(
    r"followSslRedirects",
    r"()Z",
  );

  static final _followSslRedirects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean followSslRedirects()
  bool followSslRedirects() {
    return _followSslRedirects(
            reference.pointer, _id_followSslRedirects as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_cookieJar = _class.instanceMethodId(
    r"cookieJar",
    r"()Lokhttp3/CookieJar;",
  );

  static final _cookieJar = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.CookieJar cookieJar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject cookieJar() {
    return _cookieJar(reference.pointer, _id_cookieJar as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_cache = _class.instanceMethodId(
    r"cache",
    r"()Lokhttp3/Cache;",
  );

  static final _cache = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Cache cache()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject cache() {
    return _cache(reference.pointer, _id_cache as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_dns = _class.instanceMethodId(
    r"dns",
    r"()Lokhttp3/Dns;",
  );

  static final _dns = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Dns dns()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject dns() {
    return _dns(reference.pointer, _id_dns as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_proxy = _class.instanceMethodId(
    r"proxy",
    r"()Ljava/net/Proxy;",
  );

  static final _proxy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.net.Proxy proxy()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject proxy() {
    return _proxy(reference.pointer, _id_proxy as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_proxySelector = _class.instanceMethodId(
    r"proxySelector",
    r"()Ljava/net/ProxySelector;",
  );

  static final _proxySelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.net.ProxySelector proxySelector()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject proxySelector() {
    return _proxySelector(
            reference.pointer, _id_proxySelector as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_proxyAuthenticator = _class.instanceMethodId(
    r"proxyAuthenticator",
    r"()Lokhttp3/Authenticator;",
  );

  static final _proxyAuthenticator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Authenticator proxyAuthenticator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject proxyAuthenticator() {
    return _proxyAuthenticator(
            reference.pointer, _id_proxyAuthenticator as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_socketFactory = _class.instanceMethodId(
    r"socketFactory",
    r"()Ljavax/net/SocketFactory;",
  );

  static final _socketFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final javax.net.SocketFactory socketFactory()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject socketFactory() {
    return _socketFactory(
            reference.pointer, _id_socketFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_sslSocketFactory = _class.instanceMethodId(
    r"sslSocketFactory",
    r"()Ljavax/net/ssl/SSLSocketFactory;",
  );

  static final _sslSocketFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final javax.net.ssl.SSLSocketFactory sslSocketFactory()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject sslSocketFactory() {
    return _sslSocketFactory(
            reference.pointer, _id_sslSocketFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_x509TrustManager = _class.instanceMethodId(
    r"x509TrustManager",
    r"()Ljavax/net/ssl/X509TrustManager;",
  );

  static final _x509TrustManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final javax.net.ssl.X509TrustManager x509TrustManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject x509TrustManager() {
    return _x509TrustManager(
            reference.pointer, _id_x509TrustManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_connectionSpecs = _class.instanceMethodId(
    r"connectionSpecs",
    r"()Ljava/util/List;",
  );

  static final _connectionSpecs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List connectionSpecs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> connectionSpecs() {
    return _connectionSpecs(
            reference.pointer, _id_connectionSpecs as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_protocols = _class.instanceMethodId(
    r"protocols",
    r"()Ljava/util/List;",
  );

  static final _protocols = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List protocols()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> protocols() {
    return _protocols(reference.pointer, _id_protocols as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_hostnameVerifier = _class.instanceMethodId(
    r"hostnameVerifier",
    r"()Ljavax/net/ssl/HostnameVerifier;",
  );

  static final _hostnameVerifier = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final javax.net.ssl.HostnameVerifier hostnameVerifier()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject hostnameVerifier() {
    return _hostnameVerifier(
            reference.pointer, _id_hostnameVerifier as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_certificatePinner = _class.instanceMethodId(
    r"certificatePinner",
    r"()Lokhttp3/CertificatePinner;",
  );

  static final _certificatePinner = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.CertificatePinner certificatePinner()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject certificatePinner() {
    return _certificatePinner(
            reference.pointer, _id_certificatePinner as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_certificateChainCleaner = _class.instanceMethodId(
    r"certificateChainCleaner",
    r"()Lokhttp3/internal/tls/CertificateChainCleaner;",
  );

  static final _certificateChainCleaner = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject certificateChainCleaner() {
    return _certificateChainCleaner(
            reference.pointer, _id_certificateChainCleaner as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_callTimeoutMillis = _class.instanceMethodId(
    r"callTimeoutMillis",
    r"()I",
  );

  static final _callTimeoutMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int callTimeoutMillis()
  int callTimeoutMillis() {
    return _callTimeoutMillis(
            reference.pointer, _id_callTimeoutMillis as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_connectTimeoutMillis = _class.instanceMethodId(
    r"connectTimeoutMillis",
    r"()I",
  );

  static final _connectTimeoutMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int connectTimeoutMillis()
  int connectTimeoutMillis() {
    return _connectTimeoutMillis(
            reference.pointer, _id_connectTimeoutMillis as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_readTimeoutMillis = _class.instanceMethodId(
    r"readTimeoutMillis",
    r"()I",
  );

  static final _readTimeoutMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int readTimeoutMillis()
  int readTimeoutMillis() {
    return _readTimeoutMillis(
            reference.pointer, _id_readTimeoutMillis as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeTimeoutMillis = _class.instanceMethodId(
    r"writeTimeoutMillis",
    r"()I",
  );

  static final _writeTimeoutMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int writeTimeoutMillis()
  int writeTimeoutMillis() {
    return _writeTimeoutMillis(
            reference.pointer, _id_writeTimeoutMillis as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_pingIntervalMillis = _class.instanceMethodId(
    r"pingIntervalMillis",
    r"()I",
  );

  static final _pingIntervalMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int pingIntervalMillis()
  int pingIntervalMillis() {
    return _pingIntervalMillis(
            reference.pointer, _id_pingIntervalMillis as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_minWebSocketMessageToCompress = _class.instanceMethodId(
    r"minWebSocketMessageToCompress",
    r"()J",
  );

  static final _minWebSocketMessageToCompress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final long minWebSocketMessageToCompress()
  int minWebSocketMessageToCompress() {
    return _minWebSocketMessageToCompress(reference.pointer,
            _id_minWebSocketMessageToCompress as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getRouteDatabase = _class.instanceMethodId(
    r"getRouteDatabase",
    r"()Lokhttp3/internal/connection/RouteDatabase;",
  );

  static final _getRouteDatabase = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.internal.connection.RouteDatabase getRouteDatabase()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRouteDatabase() {
    return _getRouteDatabase(
            reference.pointer, _id_getRouteDatabase as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_new1 = _class.constructorId(
    r"()V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory OkHttpClient.new1() {
    return OkHttpClient.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_newCall = _class.instanceMethodId(
    r"newCall",
    r"(Lokhttp3/Request;)Lokhttp3/Call;",
  );

  static final _newCall = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Call newCall(okhttp3.Request request)
  /// The returned object must be released after use, by calling the [release] method.
  call_.Call newCall(
    request_.Request request,
  ) {
    return _newCall(reference.pointer, _id_newCall as jni.JMethodIDPtr,
            request.reference.pointer)
        .object(const call_.$CallType());
  }

  static final _id_newWebSocket = _class.instanceMethodId(
    r"newWebSocket",
    r"(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket;",
  );

  static final _newWebSocket = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.WebSocket newWebSocket(okhttp3.Request request, okhttp3.WebSocketListener webSocketListener)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject newWebSocket(
    request_.Request request,
    jni.JObject webSocketListener,
  ) {
    return _newWebSocket(
            reference.pointer,
            _id_newWebSocket as jni.JMethodIDPtr,
            request.reference.pointer,
            webSocketListener.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newBuilder = _class.instanceMethodId(
    r"newBuilder",
    r"()Lokhttp3/OkHttpClient$Builder;",
  );

  static final _newBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public okhttp3.OkHttpClient$Builder newBuilder()
  /// The returned object must be released after use, by calling the [release] method.
  OkHttpClient_Builder newBuilder() {
    return _newBuilder(reference.pointer, _id_newBuilder as jni.JMethodIDPtr)
        .object(const $OkHttpClient_BuilderType());
  }

  static final _id_clone = _class.instanceMethodId(
    r"clone",
    r"()Ljava/lang/Object;",
  );

  static final _clone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object clone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject clone() {
    return _clone(reference.pointer, _id_clone as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $OkHttpClientType extends jni.JObjType<OkHttpClient> {
  const $OkHttpClientType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient;";

  @override
  OkHttpClient fromReference(jni.JReference reference) =>
      OkHttpClient.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OkHttpClientType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OkHttpClientType) &&
        other is $OkHttpClientType;
  }
}
