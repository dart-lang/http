// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Request.dart" as request_;

import "Headers.dart" as headers_;

import "ResponseBody.dart" as responsebody_;

/// from: okhttp3.Response$Builder
class Response_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Response_Builder> $type = type;

  Response_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/Response$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $Response_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Response_Builder() {
    return Response_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Lokhttp3/Response;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(okhttp3.Response response)
  /// The returned object must be released after use, by calling the [release] method.
  factory Response_Builder.new1(
    Response response,
  ) {
    return Response_Builder.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, response.reference.pointer)
        .reference);
  }

  static final _id_request = _class.instanceMethodId(
    r"request",
    r"(Lokhttp3/Request;)Lokhttp3/Response$Builder;",
  );

  static final _request = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder request(okhttp3.Request request)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder request(
    request_.Request request,
  ) {
    return _request(reference.pointer, _id_request as jni.JMethodIDPtr,
            request.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_protocol = _class.instanceMethodId(
    r"protocol",
    r"(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;",
  );

  static final _protocol = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder protocol(okhttp3.Protocol protocol)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder protocol(
    jni.JObject protocol,
  ) {
    return _protocol(reference.pointer, _id_protocol as jni.JMethodIDPtr,
            protocol.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_code = _class.instanceMethodId(
    r"code",
    r"(I)Lokhttp3/Response$Builder;",
  );

  static final _code = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public okhttp3.Response$Builder code(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder code(
    int i,
  ) {
    return _code(reference.pointer, _id_code as jni.JMethodIDPtr, i)
        .object(const $Response_BuilderType());
  }

  static final _id_message = _class.instanceMethodId(
    r"message",
    r"(Ljava/lang/String;)Lokhttp3/Response$Builder;",
  );

  static final _message = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder message(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder message(
    jni.JString string,
  ) {
    return _message(reference.pointer, _id_message as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_handshake = _class.instanceMethodId(
    r"handshake",
    r"(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;",
  );

  static final _handshake = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder handshake(okhttp3.Handshake handshake)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder handshake(
    jni.JObject handshake,
  ) {
    return _handshake(reference.pointer, _id_handshake as jni.JMethodIDPtr,
            handshake.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_header = _class.instanceMethodId(
    r"header",
    r"(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;",
  );

  static final _header = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder header(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder header(
    jni.JString string,
    jni.JString string1,
  ) {
    return _header(reference.pointer, _id_header as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_addHeader = _class.instanceMethodId(
    r"addHeader",
    r"(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;",
  );

  static final _addHeader = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder addHeader(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder addHeader(
    jni.JString string,
    jni.JString string1,
  ) {
    return _addHeader(reference.pointer, _id_addHeader as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_removeHeader = _class.instanceMethodId(
    r"removeHeader",
    r"(Ljava/lang/String;)Lokhttp3/Response$Builder;",
  );

  static final _removeHeader = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder removeHeader(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder removeHeader(
    jni.JString string,
  ) {
    return _removeHeader(reference.pointer,
            _id_removeHeader as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_headers = _class.instanceMethodId(
    r"headers",
    r"(Lokhttp3/Headers;)Lokhttp3/Response$Builder;",
  );

  static final _headers = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder headers(okhttp3.Headers headers)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder headers(
    headers_.Headers headers,
  ) {
    return _headers(reference.pointer, _id_headers as jni.JMethodIDPtr,
            headers.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_body = _class.instanceMethodId(
    r"body",
    r"(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;",
  );

  static final _body = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder body(okhttp3.ResponseBody responseBody)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder body(
    responsebody_.ResponseBody responseBody,
  ) {
    return _body(reference.pointer, _id_body as jni.JMethodIDPtr,
            responseBody.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_networkResponse = _class.instanceMethodId(
    r"networkResponse",
    r"(Lokhttp3/Response;)Lokhttp3/Response$Builder;",
  );

  static final _networkResponse = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder networkResponse(okhttp3.Response response)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder networkResponse(
    Response response,
  ) {
    return _networkResponse(reference.pointer,
            _id_networkResponse as jni.JMethodIDPtr, response.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_cacheResponse = _class.instanceMethodId(
    r"cacheResponse",
    r"(Lokhttp3/Response;)Lokhttp3/Response$Builder;",
  );

  static final _cacheResponse = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder cacheResponse(okhttp3.Response response)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder cacheResponse(
    Response response,
  ) {
    return _cacheResponse(reference.pointer,
            _id_cacheResponse as jni.JMethodIDPtr, response.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_priorResponse = _class.instanceMethodId(
    r"priorResponse",
    r"(Lokhttp3/Response;)Lokhttp3/Response$Builder;",
  );

  static final _priorResponse = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder priorResponse(okhttp3.Response response)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder priorResponse(
    Response response,
  ) {
    return _priorResponse(reference.pointer,
            _id_priorResponse as jni.JMethodIDPtr, response.reference.pointer)
        .object(const $Response_BuilderType());
  }

  static final _id_sentRequestAtMillis = _class.instanceMethodId(
    r"sentRequestAtMillis",
    r"(J)Lokhttp3/Response$Builder;",
  );

  static final _sentRequestAtMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public okhttp3.Response$Builder sentRequestAtMillis(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder sentRequestAtMillis(
    int j,
  ) {
    return _sentRequestAtMillis(
            reference.pointer, _id_sentRequestAtMillis as jni.JMethodIDPtr, j)
        .object(const $Response_BuilderType());
  }

  static final _id_receivedResponseAtMillis = _class.instanceMethodId(
    r"receivedResponseAtMillis",
    r"(J)Lokhttp3/Response$Builder;",
  );

  static final _receivedResponseAtMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public okhttp3.Response$Builder receivedResponseAtMillis(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder receivedResponseAtMillis(
    int j,
  ) {
    return _receivedResponseAtMillis(reference.pointer,
            _id_receivedResponseAtMillis as jni.JMethodIDPtr, j)
        .object(const $Response_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Lokhttp3/Response;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public okhttp3.Response build()
  /// The returned object must be released after use, by calling the [release] method.
  Response build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $ResponseType());
  }
}

final class $Response_BuilderType extends jni.JObjType<Response_Builder> {
  const $Response_BuilderType();

  @override
  String get signature => r"Lokhttp3/Response$Builder;";

  @override
  Response_Builder fromReference(jni.JReference reference) =>
      Response_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Response_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Response_BuilderType) &&
        other is $Response_BuilderType;
  }
}

/// from: okhttp3.Response
class Response extends jni.JObject {
  @override
  late final jni.JObjType<Response> $type = type;

  Response.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/Response");

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseType();
  static final _id_new0 = _class.constructorId(
    r"(Lokhttp3/Request;Lokhttp3/Protocol;Ljava/lang/String;ILokhttp3/Handshake;Lokhttp3/Headers;Lokhttp3/ResponseBody;Lokhttp3/Response;Lokhttp3/Response;Lokhttp3/Response;JJLokhttp3/internal/connection/Exchange;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(okhttp3.Request request, okhttp3.Protocol protocol, java.lang.String string, int i, okhttp3.Handshake handshake, okhttp3.Headers headers, okhttp3.ResponseBody responseBody, okhttp3.Response response, okhttp3.Response response1, okhttp3.Response response2, long j, long j1, okhttp3.internal.connection.Exchange exchange)
  /// The returned object must be released after use, by calling the [release] method.
  factory Response(
    request_.Request request,
    jni.JObject protocol,
    jni.JString string,
    int i,
    jni.JObject handshake,
    headers_.Headers headers,
    responsebody_.ResponseBody responseBody,
    Response response,
    Response response1,
    Response response2,
    int j,
    int j1,
    jni.JObject exchange,
  ) {
    return Response.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            request.reference.pointer,
            protocol.reference.pointer,
            string.reference.pointer,
            i,
            handshake.reference.pointer,
            headers.reference.pointer,
            responseBody.reference.pointer,
            response.reference.pointer,
            response1.reference.pointer,
            response2.reference.pointer,
            j,
            j1,
            exchange.reference.pointer)
        .reference);
  }

  static final _id_request = _class.instanceMethodId(
    r"request",
    r"()Lokhttp3/Request;",
  );

  static final _request = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Request request()
  /// The returned object must be released after use, by calling the [release] method.
  request_.Request request() {
    return _request(reference.pointer, _id_request as jni.JMethodIDPtr)
        .object(const request_.$RequestType());
  }

  static final _id_protocol = _class.instanceMethodId(
    r"protocol",
    r"()Lokhttp3/Protocol;",
  );

  static final _protocol = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Protocol protocol()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject protocol() {
    return _protocol(reference.pointer, _id_protocol as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_message = _class.instanceMethodId(
    r"message",
    r"()Ljava/lang/String;",
  );

  static final _message = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String message()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString message() {
    return _message(reference.pointer, _id_message as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_code = _class.instanceMethodId(
    r"code",
    r"()I",
  );

  static final _code = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int code()
  int code() {
    return _code(reference.pointer, _id_code as jni.JMethodIDPtr).integer;
  }

  static final _id_handshake = _class.instanceMethodId(
    r"handshake",
    r"()Lokhttp3/Handshake;",
  );

  static final _handshake = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Handshake handshake()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject handshake() {
    return _handshake(reference.pointer, _id_handshake as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_headers = _class.instanceMethodId(
    r"headers",
    r"()Lokhttp3/Headers;",
  );

  static final _headers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Headers headers()
  /// The returned object must be released after use, by calling the [release] method.
  headers_.Headers headers() {
    return _headers(reference.pointer, _id_headers as jni.JMethodIDPtr)
        .object(const headers_.$HeadersType());
  }

  static final _id_body = _class.instanceMethodId(
    r"body",
    r"()Lokhttp3/ResponseBody;",
  );

  static final _body = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.ResponseBody body()
  /// The returned object must be released after use, by calling the [release] method.
  responsebody_.ResponseBody body() {
    return _body(reference.pointer, _id_body as jni.JMethodIDPtr)
        .object(const responsebody_.$ResponseBodyType());
  }

  static final _id_networkResponse = _class.instanceMethodId(
    r"networkResponse",
    r"()Lokhttp3/Response;",
  );

  static final _networkResponse = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Response networkResponse()
  /// The returned object must be released after use, by calling the [release] method.
  Response networkResponse() {
    return _networkResponse(
            reference.pointer, _id_networkResponse as jni.JMethodIDPtr)
        .object(const $ResponseType());
  }

  static final _id_cacheResponse = _class.instanceMethodId(
    r"cacheResponse",
    r"()Lokhttp3/Response;",
  );

  static final _cacheResponse = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Response cacheResponse()
  /// The returned object must be released after use, by calling the [release] method.
  Response cacheResponse() {
    return _cacheResponse(
            reference.pointer, _id_cacheResponse as jni.JMethodIDPtr)
        .object(const $ResponseType());
  }

  static final _id_priorResponse = _class.instanceMethodId(
    r"priorResponse",
    r"()Lokhttp3/Response;",
  );

  static final _priorResponse = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Response priorResponse()
  /// The returned object must be released after use, by calling the [release] method.
  Response priorResponse() {
    return _priorResponse(
            reference.pointer, _id_priorResponse as jni.JMethodIDPtr)
        .object(const $ResponseType());
  }

  static final _id_sentRequestAtMillis = _class.instanceMethodId(
    r"sentRequestAtMillis",
    r"()J",
  );

  static final _sentRequestAtMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final long sentRequestAtMillis()
  int sentRequestAtMillis() {
    return _sentRequestAtMillis(
            reference.pointer, _id_sentRequestAtMillis as jni.JMethodIDPtr)
        .long;
  }

  static final _id_receivedResponseAtMillis = _class.instanceMethodId(
    r"receivedResponseAtMillis",
    r"()J",
  );

  static final _receivedResponseAtMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final long receivedResponseAtMillis()
  int receivedResponseAtMillis() {
    return _receivedResponseAtMillis(
            reference.pointer, _id_receivedResponseAtMillis as jni.JMethodIDPtr)
        .long;
  }

  static final _id_exchange = _class.instanceMethodId(
    r"exchange",
    r"()Lokhttp3/internal/connection/Exchange;",
  );

  static final _exchange = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.internal.connection.Exchange exchange()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject exchange() {
    return _exchange(reference.pointer, _id_exchange as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isSuccessful = _class.instanceMethodId(
    r"isSuccessful",
    r"()Z",
  );

  static final _isSuccessful = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isSuccessful()
  bool isSuccessful() {
    return _isSuccessful(
            reference.pointer, _id_isSuccessful as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_headers1 = _class.instanceMethodId(
    r"headers",
    r"(Ljava/lang/String;)Ljava/util/List;",
  );

  static final _headers1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.util.List headers(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> headers1(
    jni.JString string,
  ) {
    return _headers1(reference.pointer, _id_headers1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType(jni.JStringType()));
  }

  static final _id_header = _class.instanceMethodId(
    r"header",
    r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _header = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String header(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString header(
    jni.JString string,
    jni.JString string1,
  ) {
    return _header(reference.pointer, _id_header as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_trailers = _class.instanceMethodId(
    r"trailers",
    r"()Lokhttp3/Headers;",
  );

  static final _trailers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Headers trailers()
  /// The returned object must be released after use, by calling the [release] method.
  headers_.Headers trailers() {
    return _trailers(reference.pointer, _id_trailers as jni.JMethodIDPtr)
        .object(const headers_.$HeadersType());
  }

  static final _id_peekBody = _class.instanceMethodId(
    r"peekBody",
    r"(J)Lokhttp3/ResponseBody;",
  );

  static final _peekBody = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final okhttp3.ResponseBody peekBody(long j)
  /// The returned object must be released after use, by calling the [release] method.
  responsebody_.ResponseBody peekBody(
    int j,
  ) {
    return _peekBody(reference.pointer, _id_peekBody as jni.JMethodIDPtr, j)
        .object(const responsebody_.$ResponseBodyType());
  }

  static final _id_newBuilder = _class.instanceMethodId(
    r"newBuilder",
    r"()Lokhttp3/Response$Builder;",
  );

  static final _newBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Response$Builder newBuilder()
  /// The returned object must be released after use, by calling the [release] method.
  Response_Builder newBuilder() {
    return _newBuilder(reference.pointer, _id_newBuilder as jni.JMethodIDPtr)
        .object(const $Response_BuilderType());
  }

  static final _id_isRedirect = _class.instanceMethodId(
    r"isRedirect",
    r"()Z",
  );

  static final _isRedirect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isRedirect()
  bool isRedirect() {
    return _isRedirect(reference.pointer, _id_isRedirect as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_challenges = _class.instanceMethodId(
    r"challenges",
    r"()Ljava/util/List;",
  );

  static final _challenges = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.List challenges()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> challenges() {
    return _challenges(reference.pointer, _id_challenges as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_cacheControl = _class.instanceMethodId(
    r"cacheControl",
    r"()Lokhttp3/CacheControl;",
  );

  static final _cacheControl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.CacheControl cacheControl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject cacheControl() {
    return _cacheControl(
            reference.pointer, _id_cacheControl as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_close = _class.instanceMethodId(
    r"close",
    r"()V",
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_header1 = _class.instanceMethodId(
    r"header",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _header1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String header(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString header1(
    jni.JString string,
  ) {
    return _header1(reference.pointer, _id_header1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $ResponseType extends jni.JObjType<Response> {
  const $ResponseType();

  @override
  String get signature => r"Lokhttp3/Response;";

  @override
  Response fromReference(jni.JReference reference) =>
      Response.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResponseType) && other is $ResponseType;
  }
}
