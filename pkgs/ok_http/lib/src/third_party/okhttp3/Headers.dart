// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: okhttp3.Headers$Builder
class Headers_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Headers_Builder> $type = type;

  Headers_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/Headers$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $Headers_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Headers_Builder() {
    return Headers_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_add = _class.instanceMethodId(
    r"add",
    r"(Ljava/lang/String;)Lokhttp3/Headers$Builder;",
  );

  static final _add = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder add(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder add(
    jni.JString string,
  ) {
    return _add(reference.pointer, _id_add as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_add1 = _class.instanceMethodId(
    r"add",
    r"(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;",
  );

  static final _add1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder add(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder add1(
    jni.JString string,
    jni.JString string1,
  ) {
    return _add1(reference.pointer, _id_add1 as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_addUnsafeNonAscii = _class.instanceMethodId(
    r"addUnsafeNonAscii",
    r"(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;",
  );

  static final _addUnsafeNonAscii = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder addUnsafeNonAscii(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder addUnsafeNonAscii(
    jni.JString string,
    jni.JString string1,
  ) {
    return _addUnsafeNonAscii(
            reference.pointer,
            _id_addUnsafeNonAscii as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_addAll = _class.instanceMethodId(
    r"addAll",
    r"(Lokhttp3/Headers;)Lokhttp3/Headers$Builder;",
  );

  static final _addAll = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder addAll(okhttp3.Headers headers)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder addAll(
    Headers headers,
  ) {
    return _addAll(reference.pointer, _id_addAll as jni.JMethodIDPtr,
            headers.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_add2 = _class.instanceMethodId(
    r"add",
    r"(Ljava/lang/String;Ljava/util/Date;)Lokhttp3/Headers$Builder;",
  );

  static final _add2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder add(java.lang.String string, java.util.Date date)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder add2(
    jni.JString string,
    jni.JObject date,
  ) {
    return _add2(reference.pointer, _id_add2 as jni.JMethodIDPtr,
            string.reference.pointer, date.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_add3 = _class.instanceMethodId(
    r"add",
    r"(Ljava/lang/String;Ljava/time/Instant;)Lokhttp3/Headers$Builder;",
  );

  static final _add3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder add(java.lang.String string, java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder add3(
    jni.JString string,
    jni.JObject instant,
  ) {
    return _add3(reference.pointer, _id_add3 as jni.JMethodIDPtr,
            string.reference.pointer, instant.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_set0 = _class.instanceMethodId(
    r"set",
    r"(Ljava/lang/String;Ljava/util/Date;)Lokhttp3/Headers$Builder;",
  );

  static final _set0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder set(java.lang.String string, java.util.Date date)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder set0(
    jni.JString string,
    jni.JObject date,
  ) {
    return _set0(reference.pointer, _id_set0 as jni.JMethodIDPtr,
            string.reference.pointer, date.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_set1 = _class.instanceMethodId(
    r"set",
    r"(Ljava/lang/String;Ljava/time/Instant;)Lokhttp3/Headers$Builder;",
  );

  static final _set1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder set(java.lang.String string, java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder set1(
    jni.JString string,
    jni.JObject instant,
  ) {
    return _set1(reference.pointer, _id_set1 as jni.JMethodIDPtr,
            string.reference.pointer, instant.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_removeAll = _class.instanceMethodId(
    r"removeAll",
    r"(Ljava/lang/String;)Lokhttp3/Headers$Builder;",
  );

  static final _removeAll = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder removeAll(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder removeAll(
    jni.JString string,
  ) {
    return _removeAll(reference.pointer, _id_removeAll as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_set2 = _class.instanceMethodId(
    r"set",
    r"(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;",
  );

  static final _set2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers$Builder set(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder set2(
    jni.JString string,
    jni.JString string1,
  ) {
    return _set2(reference.pointer, _id_set2 as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $Headers_BuilderType());
  }

  static final _id_get0 = _class.instanceMethodId(
    r"get",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String get(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get0(
    jni.JString string,
  ) {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Lokhttp3/Headers;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Headers build()
  /// The returned object must be released after use, by calling the [release] method.
  Headers build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $HeadersType());
  }
}

final class $Headers_BuilderType extends jni.JObjType<Headers_Builder> {
  const $Headers_BuilderType();

  @override
  String get signature => r"Lokhttp3/Headers$Builder;";

  @override
  Headers_Builder fromReference(jni.JReference reference) =>
      Headers_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Headers_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Headers_BuilderType) &&
        other is $Headers_BuilderType;
  }
}

/// from: okhttp3.Headers$Companion
class Headers_Companion extends jni.JObject {
  @override
  late final jni.JObjType<Headers_Companion> $type = type;

  Headers_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/Headers$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $Headers_CompanionType();
  static final _id_of = _class.instanceMethodId(
    r"of",
    r"([Ljava/lang/String;)Lokhttp3/Headers;",
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers of(java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  Headers of(
    jni.JArray<jni.JString> strings,
  ) {
    return _of(reference.pointer, _id_of as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const $HeadersType());
  }

  static final _id_of1 = _class.instanceMethodId(
    r"of",
    r"(Ljava/util/Map;)Lokhttp3/Headers;",
  );

  static final _of1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final okhttp3.Headers of(java.util.Map map)
  /// The returned object must be released after use, by calling the [release] method.
  Headers of1(
    jni.JMap<jni.JString, jni.JString> map,
  ) {
    return _of1(reference.pointer, _id_of1 as jni.JMethodIDPtr,
            map.reference.pointer)
        .object(const $HeadersType());
  }

  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory Headers_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return Headers_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $Headers_CompanionType extends jni.JObjType<Headers_Companion> {
  const $Headers_CompanionType();

  @override
  String get signature => r"Lokhttp3/Headers$Companion;";

  @override
  Headers_Companion fromReference(jni.JReference reference) =>
      Headers_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Headers_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Headers_CompanionType) &&
        other is $Headers_CompanionType;
  }
}

/// from: okhttp3.Headers
class Headers extends jni.JObject {
  @override
  late final jni.JObjType<Headers> $type = type;

  Headers.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"okhttp3/Headers");

  /// The type which includes information such as the signature of this class.
  static const type = $HeadersType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Lokhttp3/Headers$Companion;",
  );

  /// from: static public final okhttp3.Headers$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static Headers_Companion get Companion =>
      _id_Companion.get(_class, const $Headers_CompanionType());

  static final _id_get0 = _class.instanceMethodId(
    r"get",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String get(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get0(
    jni.JString string,
  ) {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getDate = _class.instanceMethodId(
    r"getDate",
    r"(Ljava/lang/String;)Ljava/util/Date;",
  );

  static final _getDate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.util.Date getDate(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDate(
    jni.JString string,
  ) {
    return _getDate(reference.pointer, _id_getDate as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getInstant = _class.instanceMethodId(
    r"getInstant",
    r"(Ljava/lang/String;)Ljava/time/Instant;",
  );

  static final _getInstant = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.time.Instant getInstant(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getInstant(
    jni.JString string,
  ) {
    return _getInstant(reference.pointer, _id_getInstant as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_size = _class.instanceMethodId(
    r"size",
    r"()I",
  );

  static final _size = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int size()
  int size() {
    return _size(reference.pointer, _id_size as jni.JMethodIDPtr).integer;
  }

  static final _id_name = _class.instanceMethodId(
    r"name",
    r"(I)Ljava/lang/String;",
  );

  static final _name = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String name(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString name(
    int i,
  ) {
    return _name(reference.pointer, _id_name as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_value = _class.instanceMethodId(
    r"value",
    r"(I)Ljava/lang/String;",
  );

  static final _value = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String value(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString value(
    int i,
  ) {
    return _value(reference.pointer, _id_value as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_names = _class.instanceMethodId(
    r"names",
    r"()Ljava/util/Set;",
  );

  static final _names = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Set names()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> names() {
    return _names(reference.pointer, _id_names as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_values = _class.instanceMethodId(
    r"values",
    r"(Ljava/lang/String;)Ljava/util/List;",
  );

  static final _values = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.util.List values(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> values(
    jni.JString string,
  ) {
    return _values(reference.pointer, _id_values as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType(jni.JStringType()));
  }

  static final _id_byteCount = _class.instanceMethodId(
    r"byteCount",
    r"()J",
  );

  static final _byteCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final long byteCount()
  int byteCount() {
    return _byteCount(reference.pointer, _id_byteCount as jni.JMethodIDPtr)
        .long;
  }

  static final _id_iterator = _class.instanceMethodId(
    r"iterator",
    r"()Ljava/util/Iterator;",
  );

  static final _iterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Iterator iterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JObject> iterator() {
    return _iterator(reference.pointer, _id_iterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JObjectType()));
  }

  static final _id_newBuilder = _class.instanceMethodId(
    r"newBuilder",
    r"()Lokhttp3/Headers$Builder;",
  );

  static final _newBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final okhttp3.Headers$Builder newBuilder()
  /// The returned object must be released after use, by calling the [release] method.
  Headers_Builder newBuilder() {
    return _newBuilder(reference.pointer, _id_newBuilder as jni.JMethodIDPtr)
        .object(const $Headers_BuilderType());
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toMultimap = _class.instanceMethodId(
    r"toMultimap",
    r"()Ljava/util/Map;",
  );

  static final _toMultimap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Map toMultimap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> toMultimap() {
    return _toMultimap(reference.pointer, _id_toMultimap as jni.JMethodIDPtr)
        .object(const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType())));
  }

  static final _id_of = _class.staticMethodId(
    r"of",
    r"([Ljava/lang/String;)Lokhttp3/Headers;",
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.Headers of(java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static Headers of(
    jni.JArray<jni.JString> strings,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const $HeadersType());
  }

  static final _id_of1 = _class.staticMethodId(
    r"of",
    r"(Ljava/util/Map;)Lokhttp3/Headers;",
  );

  static final _of1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final okhttp3.Headers of(java.util.Map map)
  /// The returned object must be released after use, by calling the [release] method.
  static Headers of1(
    jni.JMap<jni.JString, jni.JString> map,
  ) {
    return _of1(_class.reference.pointer, _id_of1 as jni.JMethodIDPtr,
            map.reference.pointer)
        .object(const $HeadersType());
  }

  static final _id_new0 = _class.constructorId(
    r"([Ljava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String[] strings, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory Headers(
    jni.JArray<jni.JString> strings,
    jni.JObject defaultConstructorMarker,
  ) {
    return Headers.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            strings.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $HeadersType extends jni.JObjType<Headers> {
  const $HeadersType();

  @override
  String get signature => r"Lokhttp3/Headers;";

  @override
  Headers fromReference(jni.JReference reference) =>
      Headers.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($HeadersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($HeadersType) && other is $HeadersType;
  }
}
