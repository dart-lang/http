// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: java.io.OutputStream
class OutputStream extends jni.JObject {
  @override
  late final jni.JObjType<OutputStream> $type = type;

  OutputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"java/io/OutputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $OutputStreamType();
  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory OutputStream() {
    return OutputStream.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_nullOutputStream = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"nullOutputStream", r"()Ljava/io/OutputStream;");

  /// from: static public java.io.OutputStream nullOutputStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static OutputStream nullOutputStream() {
    return const $OutputStreamType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_nullOutputStream,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_write =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"write", r"(I)V");

  /// from: public abstract void write(int i)
  void write(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_write,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_write1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"write", r"([B)V");

  /// from: public void write(byte[] bs)
  void write1(
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_write1,
        jni.JniCallType.voidType, [bs.reference]).check();
  }

  static final _id_write2 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"write", r"([BII)V");

  /// from: public void write(byte[] bs, int i, int i1)
  void write2(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_write2,
        jni.JniCallType.voidType,
        [bs.reference, jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_flush =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"flush", r"()V");

  /// from: public void flush()
  void flush() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_flush, jni.JniCallType.voidType, []).check();
  }

  static final _id_close =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"close", r"()V");

  /// from: public void close()
  void close() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_close, jni.JniCallType.voidType, []).check();
  }
}

class $OutputStreamType extends jni.JObjType<OutputStream> {
  const $OutputStreamType();

  @override
  String get signature => r"Ljava/io/OutputStream;";

  @override
  OutputStream fromRef(jni.JObjectPtr ref) => OutputStream.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OutputStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OutputStreamType) &&
        other is $OutputStreamType;
  }
}
