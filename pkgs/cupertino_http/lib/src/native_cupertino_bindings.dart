// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: return_of_invalid_type

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

/// Bindings for the Foundation URL Loading System and supporting libraries.
///
/// Regenerate bindings with `flutter packages pub run ffigen --config ffigen.yaml`.
///
class NativeCupertinoHttp {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeCupertinoHttp(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeCupertinoHttp.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    idtype_t arg0,
    Dart__uint32_t arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0.value,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, id_t, ffi.Pointer<siginfo_t>,
              ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit1(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  int atexit_b(
    ObjCBlock_ffiVoid arg0,
  ) {
    return _atexit_b(
      arg0.pointer,
    );
  }

  late final _atexit_bPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlock>)>>(
      'atexit_b');
  late final _atexit_b =
      _atexit_bPtr.asFunction<int Function(ffi.Pointer<objc.ObjCBlock>)>();

  ffi.Pointer<ffi.Void> bsearch_b(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _bsearch_b(
      __key,
      __base,
      __nel,
      __width,
      __compar.pointer,
    );
  }

  late final _bsearch_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<objc.ObjCBlock>)>>('bsearch_b');
  late final _bsearch_b = _bsearch_bPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlock>)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int heapsort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _heapsort_b(
      __base,
      __nel,
      __width,
      __compar.pointer,
    );
  }

  late final _heapsort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlock>)>>('heapsort_b');
  late final _heapsort_b = _heapsort_bPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlock>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _mergesort_b(
      __base,
      __nel,
      __width,
      __compar.pointer,
    );
  }

  late final _mergesort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlock>)>>('mergesort_b');
  late final _mergesort_b = _mergesort_bPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlock>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _psort_b(
      __base,
      __nel,
      __width,
      __compar.pointer,
    );
  }

  late final _psort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlock>)>>('psort_b');
  late final _psort_b = _psort_bPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlock>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _qsort_b(
      __base,
      __nel,
      __width,
      __compar.pointer,
    );
  }

  late final _qsort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlock>)>>('qsort_b');
  late final _qsort_b = _qsort_bPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlock>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> sel_getName(
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return _sel_getName(
      sel,
    );
  }

  late final _sel_getNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCSelector>)>>('sel_getName');
  late final _sel_getName = _sel_getNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCSelector>)>();

  ffi.Pointer<objc.ObjCSelector> sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_registerName(
      str,
    );
  }

  late final _sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final _sel_registerName = _sel_registerNamePtr.asFunction<
      ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> object_getClassName(
    objc.ObjCObjectBase? obj,
  ) {
    return _object_getClassName(
      obj?.pointer ?? ffi.nullptr,
    );
  }

  late final _object_getClassNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCObject>)>>('object_getClassName');
  late final _object_getClassName = _object_getClassNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>)>();

  ffi.Pointer<ffi.Void> object_getIndexedIvars(
    objc.ObjCObjectBase? obj,
  ) {
    return _object_getIndexedIvars(
      obj?.pointer ?? ffi.nullptr,
    );
  }

  late final _object_getIndexedIvarsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<objc.ObjCObject>)>>('object_getIndexedIvars');
  late final _object_getIndexedIvars = _object_getIndexedIvarsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>)>();

  bool sel_isMapped(
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return _sel_isMapped(
      sel,
    );
  }

  late final _sel_isMappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<objc.ObjCSelector>)>>('sel_isMapped');
  late final _sel_isMapped = _sel_isMappedPtr
      .asFunction<bool Function(ffi.Pointer<objc.ObjCSelector>)>();

  ffi.Pointer<objc.ObjCSelector> sel_getUid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_getUid(
      str,
    );
  }

  late final _sel_getUidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<ffi.Char>)>>('sel_getUid');
  late final _sel_getUid = _sel_getUidPtr.asFunction<
      ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<ffi.Char>)>();

  objc.ObjCObjectBase? objc_retainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_retainedObject(
              obj,
            ).address ==
            0
        ? null
        : objc.ObjCObjectBase(
            _objc_retainedObject(
              obj,
            ),
            retain: true,
            release: true);
  }

  late final _objc_retainedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              objc_objectptr_t)>>('objc_retainedObject');
  late final _objc_retainedObject = _objc_retainedObjectPtr
      .asFunction<ffi.Pointer<objc.ObjCObject> Function(objc_objectptr_t)>();

  objc.ObjCObjectBase? objc_unretainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_unretainedObject(
              obj,
            ).address ==
            0
        ? null
        : objc.ObjCObjectBase(
            _objc_unretainedObject(
              obj,
            ),
            retain: true,
            release: true);
  }

  late final _objc_unretainedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              objc_objectptr_t)>>('objc_unretainedObject');
  late final _objc_unretainedObject = _objc_unretainedObjectPtr
      .asFunction<ffi.Pointer<objc.ObjCObject> Function(objc_objectptr_t)>();

  objc_objectptr_t objc_unretainedPointer(
    objc.ObjCObjectBase? obj,
  ) {
    return _objc_unretainedPointer(
      obj?.pointer ?? ffi.nullptr,
    );
  }

  late final _objc_unretainedPointerPtr = _lookup<
      ffi.NativeFunction<
          objc_objectptr_t Function(
              ffi.Pointer<objc.ObjCObject>)>>('objc_unretainedPointer');
  late final _objc_unretainedPointer = _objc_unretainedPointerPtr
      .asFunction<objc_objectptr_t Function(ffi.Pointer<objc.ObjCObject>)>();

  late final ffi.Pointer<ffi.Double> _NSFoundationVersionNumber =
      _lookup<ffi.Double>('NSFoundationVersionNumber');

  double get NSFoundationVersionNumber => _NSFoundationVersionNumber.value;

  set NSFoundationVersionNumber(double value) =>
      _NSFoundationVersionNumber.value = value;

  objc.NSString NSStringFromSelector(
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return objc.NSString.castFromPointer(
        _NSStringFromSelector(
          aSelector,
        ),
        retain: true,
        release: true);
  }

  late final _NSStringFromSelectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCSelector>)>>('NSStringFromSelector');
  late final _NSStringFromSelector = _NSStringFromSelectorPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCSelector>)>();

  ffi.Pointer<objc.ObjCSelector> NSSelectorFromString(
    objc.NSString aSelectorName,
  ) {
    return _NSSelectorFromString(
      aSelectorName.pointer,
    );
  }

  late final _NSSelectorFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<objc.ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString = _NSSelectorFromStringPtr.asFunction<
      ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<objc.ObjCObject>)>();

  objc.NSString NSStringFromClass(
    objc.ObjCObjectBase aClass,
  ) {
    return objc.NSString.castFromPointer(
        _NSStringFromClass(
          aClass.pointer,
        ),
        retain: true,
        release: true);
  }

  late final _NSStringFromClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass = _NSStringFromClassPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>)>();

  objc.ObjCObjectBase? NSClassFromString(
    objc.NSString aClassName,
  ) {
    return _NSClassFromString(
              aClassName.pointer,
            ).address ==
            0
        ? null
        : objc.ObjCObjectBase(
            _NSClassFromString(
              aClassName.pointer,
            ),
            retain: true,
            release: true);
  }

  late final _NSClassFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString = _NSClassFromStringPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>)>();

  objc.NSString NSStringFromProtocol(
    objc.Protocol proto,
  ) {
    return objc.NSString.castFromPointer(
        _NSStringFromProtocol(
          proto.pointer,
        ),
        retain: true,
        release: true);
  }

  late final _NSStringFromProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol = _NSStringFromProtocolPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>)>();

  objc.Protocol? NSProtocolFromString(
    objc.NSString namestr,
  ) {
    return _NSProtocolFromString(
              namestr.pointer,
            ).address ==
            0
        ? null
        : objc.Protocol.castFromPointer(
            _NSProtocolFromString(
              namestr.pointer,
            ),
            retain: true,
            release: true);
  }

  late final _NSProtocolFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString = _NSProtocolFromStringPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>)>();

  ffi.Pointer<ffi.Char> NSGetSizeAndAlignment(
    ffi.Pointer<ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment = _NSGetSizeAndAlignmentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog(
    objc.NSString format,
  ) {
    return _NSLog(
      format.pointer,
    );
  }

  late final _NSLogPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSLog');
  late final _NSLog =
      _NSLogPtr.asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>();

  void NSLogv(
    objc.NSString format,
    va_list args,
  ) {
    return _NSLogv(
      format.pointer,
      args,
    );
  }

  late final _NSLogvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv = _NSLogvPtr.asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, va_list)>();

  late final ffi.Pointer<NSInteger> _NSNotFound =
      _lookup<NSInteger>('NSNotFound');

  int get NSNotFound => _NSNotFound.value;

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_copy(
      aBlock,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_release(
      aBlock,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void _Block_object_assign(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __Block_object_assign(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Block_object_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('_Block_object_assign');
  late final __Block_object_assign = __Block_object_assignPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void _Block_object_dispose(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __Block_object_dispose(
      arg0,
      arg1,
    );
  }

  late final __Block_object_disposePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      '_Block_object_dispose');
  late final __Block_object_dispose = __Block_object_disposePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteGlobalBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteGlobalBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteGlobalBlock =>
      __NSConcreteGlobalBlock.value;

  set _NSConcreteGlobalBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteGlobalBlock.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteStackBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteStackBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteStackBlock =>
      __NSConcreteStackBlock.value;

  set _NSConcreteStackBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteStackBlock.value = value;

  void Debugger() {
    return _Debugger();
  }

  late final _DebuggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Debugger');
  late final _Debugger = _DebuggerPtr.asFunction<void Function()>();

  void DebugStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _DebugStr(
      debuggerMsg,
    );
  }

  late final _DebugStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'DebugStr');
  late final _DebugStr =
      _DebugStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreak() {
    return _SysBreak();
  }

  late final _SysBreakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SysBreak');
  late final _SysBreak = _SysBreakPtr.asFunction<void Function()>();

  void SysBreakStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakStr(
      debuggerMsg,
    );
  }

  late final _SysBreakStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakStr');
  late final _SysBreakStr =
      _SysBreakStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreakFunc(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakFunc(
      debuggerMsg,
    );
  }

  late final _SysBreakFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakFunc');
  late final _SysBreakFunc =
      _SysBreakFuncPtr.asFunction<void Function(ConstStr255Param)>();

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  int get kCFNotFound => _kCFNotFound.value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone() {
    return _NSDefaultMallocZone();
  }

  late final _NSDefaultMallocZonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone =
      _NSDefaultMallocZonePtr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone(
      startSize,
      granularity,
      canFree,
    );
  }

  late final _NSCreateZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Bool)>>('NSCreateZone');
  late final _NSCreateZone = _NSCreateZonePtr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, bool)>();

  void NSRecycleZone(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone(
      zone,
    );
  }

  late final _NSRecycleZonePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone =
      _NSRecycleZonePtr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName(
    ffi.Pointer<NSZone> zone,
    objc.NSString name,
  ) {
    return _NSSetZoneName(
      zone,
      name.pointer,
    );
  }

  late final _NSSetZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NSZone>,
              ffi.Pointer<objc.ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName = _NSSetZoneNamePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<objc.ObjCObject>)>();

  objc.NSString NSZoneName(
    ffi.Pointer<NSZone> zone,
  ) {
    return objc.NSString.castFromPointer(
        _NSZoneName(
          zone,
        ),
        retain: true,
        release: true);
  }

  late final _NSZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName = _NSZoneNamePtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer(
      ptr,
    );
  }

  late final _NSZoneFromPointerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>>(
      'NSZoneFromPointer');
  late final _NSZoneFromPointer = _NSZoneFromPointerPtr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc(
      zone,
      size,
    );
  }

  late final _NSZoneMallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc = _NSZoneMallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc = _NSZoneCallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc = _NSZoneReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree(
      zone,
      ptr,
    );
  }

  late final _NSZoneFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree = _NSZoneFreePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable(
      size,
      options,
    );
  }

  late final _NSAllocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable = _NSAllocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable = _NSReallocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize() {
    return _NSPageSize();
  }

  late final _NSPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize = _NSPageSizePtr.asFunction<int Function()>();

  int NSLogPageSize() {
    return _NSLogPageSize();
  }

  late final _NSLogPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize = _NSLogPageSizePtr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize =
      _NSRoundUpToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize =
      _NSRoundDownToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages(
    int bytes,
  ) {
    return _NSAllocateMemoryPages(
      bytes,
    );
  }

  late final _NSAllocateMemoryPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages = _NSAllocateMemoryPagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages = _NSDeallocateMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages = _NSCopyMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable() {
    return _NSRealMemoryAvailable();
  }

  late final _NSRealMemoryAvailablePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable =
      _NSRealMemoryAvailablePtr.asFunction<int Function()>();

  objc.ObjCObjectBase NSAllocateObject(
    objc.ObjCObjectBase aClass,
    DartNSUInteger extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return objc.ObjCObjectBase(
        _NSAllocateObject(
          aClass.pointer,
          extraBytes,
          zone,
        ),
        retain: true,
        release: true);
  }

  late final _NSAllocateObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
              NSUInteger, ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject = _NSAllocateObjectPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject(
    objc.ObjCObjectBase object,
  ) {
    return _NSDeallocateObject(
      object.pointer,
    );
  }

  late final _NSDeallocateObjectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSDeallocateObject');
  late final _NSDeallocateObject = _NSDeallocateObjectPtr.asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>)>();

  objc.ObjCObjectBase NSCopyObject(
    objc.ObjCObjectBase object,
    DartNSUInteger extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return objc.ObjCObjectBase(
        _NSCopyObject(
          object.pointer,
          extraBytes,
          zone,
        ),
        retain: true,
        release: true);
  }

  late final _NSCopyObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
              NSUInteger, ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject = _NSCopyObjectPtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone(
    objc.ObjCObjectBase anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone(
      anObject.pointer,
      requestedZone,
    );
  }

  late final _NSShouldRetainWithZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone = _NSShouldRetainWithZonePtr.asFunction<
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount(
    objc.ObjCObjectBase object,
  ) {
    return _NSIncrementExtraRefCount(
      object.pointer,
    );
  }

  late final _NSIncrementExtraRefCountPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount = _NSIncrementExtraRefCountPtr
      .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero(
    objc.ObjCObjectBase object,
  ) {
    return _NSDecrementExtraRefCountWasZero(
      object.pointer,
    );
  }

  late final _NSDecrementExtraRefCountWasZeroPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero =
      _NSDecrementExtraRefCountWasZeroPtr.asFunction<
          bool Function(ffi.Pointer<objc.ObjCObject>)>();

  DartNSUInteger NSExtraRefCount(
    objc.ObjCObjectBase object,
  ) {
    return _NSExtraRefCount(
      object.pointer,
    );
  }

  late final _NSExtraRefCountPtr = _lookup<
          ffi
          .NativeFunction<NSUInteger Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSExtraRefCount');
  late final _NSExtraRefCount = _NSExtraRefCountPtr.asFunction<
      int Function(ffi.Pointer<objc.ObjCObject>)>();

  NSRange NSUnionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange(
      range1,
      range2,
    );
  }

  late final _NSUnionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange =
      _NSUnionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange =
      _NSIntersectionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  objc.NSString NSStringFromRange(
    NSRange range,
  ) {
    return objc.NSString.castFromPointer(
        _NSStringFromRange(
          range,
        ),
        retain: true,
        release: true);
  }

  late final _NSStringFromRangePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(NSRange)>>(
      'NSStringFromRange');
  late final _NSStringFromRange = _NSStringFromRangePtr.asFunction<
      ffi.Pointer<objc.ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString(
    objc.NSString aString,
  ) {
    return _NSRangeFromString(
      aString.pointer,
    );
  }

  late final _NSRangeFromStringPtr = _lookup<
          ffi.NativeFunction<NSRange Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSRangeFromString');
  late final _NSRangeFromString = _NSRangeFromStringPtr.asFunction<
      NSRange Function(ffi.Pointer<objc.ObjCObject>)>();

  late final ffi.Pointer<NSNotificationName>
      _NSSystemClockDidChangeNotification =
      _lookup<NSNotificationName>('NSSystemClockDidChangeNotification');

  NSNotificationName get NSSystemClockDidChangeNotification =>
      _NSSystemClockDidChangeNotification.value;

  set NSSystemClockDidChangeNotification(NSNotificationName value) =>
      _NSSystemClockDidChangeNotification.value = value;

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerAcceptPolicyChangedNotification');

  NSNotificationName get NSHTTPCookieManagerAcceptPolicyChangedNotification =>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification.value;

  set NSHTTPCookieManagerAcceptPolicyChangedNotification(
          NSNotificationName value) =>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification.value = value;

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerCookiesChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerCookiesChangedNotification');

  NSNotificationName get NSHTTPCookieManagerCookiesChangedNotification =>
      _NSHTTPCookieManagerCookiesChangedNotification.value;

  set NSHTTPCookieManagerCookiesChangedNotification(NSNotificationName value) =>
      _NSHTTPCookieManagerCookiesChangedNotification.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressEstimatedTimeRemainingKey =
      _lookup<NSProgressUserInfoKey>('NSProgressEstimatedTimeRemainingKey');

  NSProgressUserInfoKey get NSProgressEstimatedTimeRemainingKey =>
      _NSProgressEstimatedTimeRemainingKey.value;

  set NSProgressEstimatedTimeRemainingKey(NSProgressUserInfoKey value) =>
      _NSProgressEstimatedTimeRemainingKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressThroughputKey =
      _lookup<NSProgressUserInfoKey>('NSProgressThroughputKey');

  NSProgressUserInfoKey get NSProgressThroughputKey =>
      _NSProgressThroughputKey.value;

  set NSProgressThroughputKey(NSProgressUserInfoKey value) =>
      _NSProgressThroughputKey.value = value;

  late final ffi.Pointer<NSProgressKind> _NSProgressKindFile =
      _lookup<NSProgressKind>('NSProgressKindFile');

  NSProgressKind get NSProgressKindFile => _NSProgressKindFile.value;

  set NSProgressKindFile(NSProgressKind value) =>
      _NSProgressKindFile.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileOperationKindKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileOperationKindKey');

  NSProgressUserInfoKey get NSProgressFileOperationKindKey =>
      _NSProgressFileOperationKindKey.value;

  set NSProgressFileOperationKindKey(NSProgressUserInfoKey value) =>
      _NSProgressFileOperationKindKey.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDownloading');

  NSProgressFileOperationKind get NSProgressFileOperationKindDownloading =>
      _NSProgressFileOperationKindDownloading.value;

  set NSProgressFileOperationKindDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDecompressingAfterDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDecompressingAfterDownloading');

  NSProgressFileOperationKind
      get NSProgressFileOperationKindDecompressingAfterDownloading =>
          _NSProgressFileOperationKindDecompressingAfterDownloading.value;

  set NSProgressFileOperationKindDecompressingAfterDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDecompressingAfterDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindReceiving =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindReceiving');

  NSProgressFileOperationKind get NSProgressFileOperationKindReceiving =>
      _NSProgressFileOperationKindReceiving.value;

  set NSProgressFileOperationKindReceiving(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindReceiving.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindCopying =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindCopying');

  NSProgressFileOperationKind get NSProgressFileOperationKindCopying =>
      _NSProgressFileOperationKindCopying.value;

  set NSProgressFileOperationKindCopying(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindCopying.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindUploading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindUploading');

  NSProgressFileOperationKind get NSProgressFileOperationKindUploading =>
      _NSProgressFileOperationKindUploading.value;

  set NSProgressFileOperationKindUploading(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindUploading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDuplicating =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDuplicating');

  NSProgressFileOperationKind get NSProgressFileOperationKindDuplicating =>
      _NSProgressFileOperationKindDuplicating.value;

  set NSProgressFileOperationKindDuplicating(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDuplicating.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileURLKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileURLKey');

  NSProgressUserInfoKey get NSProgressFileURLKey => _NSProgressFileURLKey.value;

  set NSProgressFileURLKey(NSProgressUserInfoKey value) =>
      _NSProgressFileURLKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileTotalCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileTotalCountKey');

  NSProgressUserInfoKey get NSProgressFileTotalCountKey =>
      _NSProgressFileTotalCountKey.value;

  set NSProgressFileTotalCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileTotalCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileCompletedCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileCompletedCountKey');

  NSProgressUserInfoKey get NSProgressFileCompletedCountKey =>
      _NSProgressFileCompletedCountKey.value;

  set NSProgressFileCompletedCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileCompletedCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileAnimationImageKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageKey =>
      _NSProgressFileAnimationImageKey.value;

  set NSProgressFileAnimationImageKey(NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageOriginalRectKey =
      _lookup<NSProgressUserInfoKey>(
          'NSProgressFileAnimationImageOriginalRectKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageOriginalRectKey =>
      _NSProgressFileAnimationImageOriginalRectKey.value;

  set NSProgressFileAnimationImageOriginalRectKey(
          NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageOriginalRectKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileIconKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileIconKey');

  NSProgressUserInfoKey get NSProgressFileIconKey =>
      _NSProgressFileIconKey.value;

  set NSProgressFileIconKey(NSProgressUserInfoKey value) =>
      _NSProgressFileIconKey.value = value;

  late final ffi.Pointer<CFArrayCallBacks> _kCFTypeArrayCallBacks =
      _lookup<CFArrayCallBacks>('kCFTypeArrayCallBacks');

  CFArrayCallBacks get kCFTypeArrayCallBacks => _kCFTypeArrayCallBacks.ref;

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate = _CFArrayCreatePtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy = _CFArrayCreateCopyPtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable = _CFArrayCreateMutablePtr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy =
      _CFArrayCreateMutableCopyPtr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue = _CFArrayGetCountOfValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue = _CFArrayContainsValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(CFArrayRef, CFIndex)>>(
      'CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues = _CFArrayGetValuesPtr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction = _CFArrayApplyFunctionPtr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue = _CFArrayGetFirstIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue = _CFArrayGetLastIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValuesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues = _CFArrayBSearchValuesPtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue = _CFArrayAppendValuePtr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex =
      _CFArrayInsertValueAtIndexPtr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex = _CFArraySetValueAtIndexPtr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex = _CFArrayRemoveValueAtIndexPtr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues =
      _CFArrayRemoveAllValuesPtr.asFunction<void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues = _CFArrayReplaceValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices =
      _CFArrayExchangeValuesAtIndicesPtr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues = _CFArraySortValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray = _CFArrayAppendArrayPtr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  ffi.Pointer<ffi.Void> os_retain(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_retain(
      object,
    );
  }

  late final _os_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('os_retain');
  late final _os_retain = _os_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void os_release(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_release(
      object,
    );
  }

  late final _os_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'os_release');
  late final _os_release =
      _os_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sec_retain(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_retain(
      obj,
    );
  }

  late final _sec_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('sec_retain');
  late final _sec_retain = _sec_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void sec_release(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_release(
      obj,
    );
  }

  late final _sec_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sec_release');
  late final _sec_release =
      _sec_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString = _SecCopyErrorMessageStringPtr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  void __assert_rtn(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___assert_rtn(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___assert_rtnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('__assert_rtn');
  late final ___assert_rtn = ___assert_rtnPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<_RuneLocale> __DefaultRuneLocale =
      _lookup<_RuneLocale>('_DefaultRuneLocale');

  _RuneLocale get _DefaultRuneLocale => __DefaultRuneLocale.ref;

  late final ffi.Pointer<ffi.Pointer<_RuneLocale>> __CurrentRuneLocale =
      _lookup<ffi.Pointer<_RuneLocale>>('_CurrentRuneLocale');

  ffi.Pointer<_RuneLocale> get _CurrentRuneLocale => __CurrentRuneLocale.value;

  set _CurrentRuneLocale(ffi.Pointer<_RuneLocale> value) =>
      __CurrentRuneLocale.value = value;

  int ___runetype(
    int arg0,
  ) {
    return ____runetype(
      arg0,
    );
  }

  late final ____runetypePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(__darwin_ct_rune_t)>>(
      '___runetype');
  late final ____runetype = ____runetypePtr.asFunction<int Function(int)>();

  int ___tolower(
    int arg0,
  ) {
    return ____tolower(
      arg0,
    );
  }

  late final ____tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___tolower');
  late final ____tolower = ____tolowerPtr.asFunction<int Function(int)>();

  int ___toupper(
    int arg0,
  ) {
    return ____toupper(
      arg0,
    );
  }

  late final ____toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___toupper');
  late final ____toupper = ____toupperPtr.asFunction<int Function(int)>();

  int __maskrune(
    int arg0,
    int arg1,
  ) {
    return ___maskrune(
      arg0,
      arg1,
    );
  }

  late final ___maskrunePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __darwin_ct_rune_t, ffi.UnsignedLong)>>('__maskrune');
  late final ___maskrune = ___maskrunePtr.asFunction<int Function(int, int)>();

  int __toupper(
    int arg0,
  ) {
    return ___toupper1(
      arg0,
    );
  }

  late final ___toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__toupper');
  late final ___toupper1 = ___toupperPtr.asFunction<int Function(int)>();

  int __tolower(
    int arg0,
  ) {
    return ___tolower1(
      arg0,
    );
  }

  late final ___tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__tolower');
  late final ___tolower1 = ___tolowerPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __error() {
    return ___error();
  }

  late final ___errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__error');
  late final ___error =
      ___errorPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<lconv> localeconv() {
    return _localeconv();
  }

  late final _localeconvPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lconv> Function()>>('localeconv');
  late final _localeconv =
      _localeconvPtr.asFunction<ffi.Pointer<lconv> Function()>();

  ffi.Pointer<ffi.Char> setlocale(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setlocale(
      arg0,
      arg1,
    );
  }

  late final _setlocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('setlocale');
  late final _setlocale = _setlocalePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int __math_errhandling() {
    return ___math_errhandling();
  }

  late final ___math_errhandlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__math_errhandling');
  late final ___math_errhandling =
      ___math_errhandlingPtr.asFunction<int Function()>();

  int __fpclassifyf(
    double arg0,
  ) {
    return ___fpclassifyf(
      arg0,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __fpclassifyd(
    double arg0,
  ) {
    return ___fpclassifyd(
      arg0,
    );
  }

  late final ___fpclassifydPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__fpclassifyd');
  late final ___fpclassifyd =
      ___fpclassifydPtr.asFunction<int Function(double)>();

  double acosf(
    double arg0,
  ) {
    return _acosf(
      arg0,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acos(
    double arg0,
  ) {
    return _acos(
      arg0,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asinf(
    double arg0,
  ) {
    return _asinf(
      arg0,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asin(
    double arg0,
  ) {
    return _asin(
      arg0,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atanf(
    double arg0,
  ) {
    return _atanf(
      arg0,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan(
    double arg0,
  ) {
    return _atan(
      arg0,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2f(
    double arg0,
    double arg1,
  ) {
    return _atan2f(
      arg0,
      arg1,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atan2(
    double arg0,
    double arg1,
  ) {
    return _atan2(
      arg0,
      arg1,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cosf(
    double arg0,
  ) {
    return _cosf(
      arg0,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cos(
    double arg0,
  ) {
    return _cos(
      arg0,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sinf(
    double arg0,
  ) {
    return _sinf(
      arg0,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sin(
    double arg0,
  ) {
    return _sin(
      arg0,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tanf(
    double arg0,
  ) {
    return _tanf(
      arg0,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tan(
    double arg0,
  ) {
    return _tan(
      arg0,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double acoshf(
    double arg0,
  ) {
    return _acoshf(
      arg0,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double acosh(
    double arg0,
  ) {
    return _acosh(
      arg0,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinhf(
    double arg0,
  ) {
    return _asinhf(
      arg0,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double asinh(
    double arg0,
  ) {
    return _asinh(
      arg0,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanhf(
    double arg0,
  ) {
    return _atanhf(
      arg0,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double atanh(
    double arg0,
  ) {
    return _atanh(
      arg0,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double coshf(
    double arg0,
  ) {
    return _coshf(
      arg0,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double cosh(
    double arg0,
  ) {
    return _cosh(
      arg0,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinhf(
    double arg0,
  ) {
    return _sinhf(
      arg0,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sinh(
    double arg0,
  ) {
    return _sinh(
      arg0,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanhf(
    double arg0,
  ) {
    return _tanhf(
      arg0,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double tanh(
    double arg0,
  ) {
    return _tanh(
      arg0,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double expf(
    double arg0,
  ) {
    return _expf(
      arg0,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double exp(
    double arg0,
  ) {
    return _exp(
      arg0,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2f(
    double arg0,
  ) {
    return _exp2f(
      arg0,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double exp2(
    double arg0,
  ) {
    return _exp2(
      arg0,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1f(
    double arg0,
  ) {
    return _expm1f(
      arg0,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double expm1(
    double arg0,
  ) {
    return _expm1(
      arg0,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double logf(
    double arg0,
  ) {
    return _logf(
      arg0,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log(
    double arg0,
  ) {
    return _log(
      arg0,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10f(
    double arg0,
  ) {
    return _log10f(
      arg0,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log10(
    double arg0,
  ) {
    return _log10(
      arg0,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log2f(
    double arg0,
  ) {
    return _log2f(
      arg0,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double log2(
    double arg0,
  ) {
    return _log2(
      arg0,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log1pf(
    double arg0,
  ) {
    return _log1pf(
      arg0,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log1p(
    double arg0,
  ) {
    return _log1p(
      arg0,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logbf(
    double arg0,
  ) {
    return _logbf(
      arg0,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logb(
    double arg0,
  ) {
    return _logb(
      arg0,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double modff(
    double arg0,
    ffi.Pointer<ffi.Float> arg1,
  ) {
    return _modff(
      arg0,
      arg1,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double modf(
    double arg0,
    ffi.Pointer<ffi.Double> arg1,
  ) {
    return _modf(
      arg0,
      arg1,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double ldexpf(
    double arg0,
    int arg1,
  ) {
    return _ldexpf(
      arg0,
      arg1,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double ldexp(
    double arg0,
    int arg1,
  ) {
    return _ldexp(
      arg0,
      arg1,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double frexpf(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexpf(
      arg0,
      arg1,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double frexp(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexp(
      arg0,
      arg1,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  int ilogbf(
    double arg0,
  ) {
    return _ilogbf(
      arg0,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int ilogb(
    double arg0,
  ) {
    return _ilogb(
      arg0,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbnf(
    double arg0,
    int arg1,
  ) {
    return _scalbnf(
      arg0,
      arg1,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double arg0,
    int arg1,
  ) {
    return _scalbn(
      arg0,
      arg1,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double arg0,
    int arg1,
  ) {
    return _scalblnf(
      arg0,
      arg1,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbln(
    double arg0,
    int arg1,
  ) {
    return _scalbln(
      arg0,
      arg1,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double fabsf(
    double arg0,
  ) {
    return _fabsf(
      arg0,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double fabs(
    double arg0,
  ) {
    return _fabs(
      arg0,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double cbrtf(
    double arg0,
  ) {
    return _cbrtf(
      arg0,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double cbrt(
    double arg0,
  ) {
    return _cbrt(
      arg0,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double hypotf(
    double arg0,
    double arg1,
  ) {
    return _hypotf(
      arg0,
      arg1,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double hypot(
    double arg0,
    double arg1,
  ) {
    return _hypot(
      arg0,
      arg1,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double powf(
    double arg0,
    double arg1,
  ) {
    return _powf(
      arg0,
      arg1,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double pow(
    double arg0,
    double arg1,
  ) {
    return _pow(
      arg0,
      arg1,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double arg0,
  ) {
    return _sqrtf(
      arg0,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double sqrt(
    double arg0,
  ) {
    return _sqrt(
      arg0,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double ceilf(
    double arg0,
  ) {
    return _ceilf(
      arg0,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double ceil(
    double arg0,
  ) {
    return _ceil(
      arg0,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double floorf(
    double arg0,
  ) {
    return _floorf(
      arg0,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double floor(
    double arg0,
  ) {
    return _floor(
      arg0,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double arg0,
  ) {
    return _nearbyintf(
      arg0,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nearbyint(
    double arg0,
  ) {
    return _nearbyint(
      arg0,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double rintf(
    double arg0,
  ) {
    return _rintf(
      arg0,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double rint(
    double arg0,
  ) {
    return _rint(
      arg0,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  int lrintf(
    double arg0,
  ) {
    return _lrintf(
      arg0,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lrint(
    double arg0,
  ) {
    return _lrint(
      arg0,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  double roundf(
    double arg0,
  ) {
    return _roundf(
      arg0,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double round(
    double arg0,
  ) {
    return _round(
      arg0,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  int lroundf(
    double arg0,
  ) {
    return _lroundf(
      arg0,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int lround(
    double arg0,
  ) {
    return _lround(
      arg0,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llrintf(
    double arg0,
  ) {
    return _llrintf(
      arg0,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llrint(
    double arg0,
  ) {
    return _llrint(
      arg0,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llroundf(
    double arg0,
  ) {
    return _llroundf(
      arg0,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int llround(
    double arg0,
  ) {
    return _llround(
      arg0,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double truncf(
    double arg0,
  ) {
    return _truncf(
      arg0,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double trunc(
    double arg0,
  ) {
    return _trunc(
      arg0,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double fmodf(
    double arg0,
    double arg1,
  ) {
    return _fmodf(
      arg0,
      arg1,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double arg0,
    double arg1,
  ) {
    return _fmod(
      arg0,
      arg1,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double arg0,
    double arg1,
  ) {
    return _remainderf(
      arg0,
      arg1,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remainder(
    double arg0,
    double arg1,
  ) {
    return _remainder(
      arg0,
      arg1,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquof(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double remquo(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double copysignf(
    double arg0,
    double arg1,
  ) {
    return _copysignf(
      arg0,
      arg1,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysign(
    double arg0,
    double arg1,
  ) {
    return _copysign(
      arg0,
      arg1,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nanf(
      arg0,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nan(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nan(
      arg0,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nextafterf(
    double arg0,
    double arg1,
  ) {
    return _nextafterf(
      arg0,
      arg1,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double nextafter(
    double arg0,
    double arg1,
  ) {
    return _nextafter(
      arg0,
      arg1,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double arg0,
    double arg1,
  ) {
    return _fdimf(
      arg0,
      arg1,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fdim(
    double arg0,
    double arg1,
  ) {
    return _fdim(
      arg0,
      arg1,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double arg0,
    double arg1,
  ) {
    return _fmaxf(
      arg0,
      arg1,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fmax(
    double arg0,
    double arg1,
  ) {
    return _fmax(
      arg0,
      arg1,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fminf(
    double arg0,
    double arg1,
  ) {
    return _fminf(
      arg0,
      arg1,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmin(
    double arg0,
    double arg1,
  ) {
    return _fmin(
      arg0,
      arg1,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fmaf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fma(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fma(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __exp10f(
    double arg0,
  ) {
    return ___exp10f(
      arg0,
    );
  }

  late final ___exp10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp10f');
  late final ___exp10f = ___exp10fPtr.asFunction<double Function(double)>();

  double __exp10(
    double arg0,
  ) {
    return ___exp10(
      arg0,
    );
  }

  late final ___exp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp10');
  late final ___exp10 = ___exp10Ptr.asFunction<double Function(double)>();

  double __cospif(
    double arg0,
  ) {
    return ___cospif(
      arg0,
    );
  }

  late final ___cospifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cospif');
  late final ___cospif = ___cospifPtr.asFunction<double Function(double)>();

  double __cospi(
    double arg0,
  ) {
    return ___cospi(
      arg0,
    );
  }

  late final ___cospiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cospi');
  late final ___cospi = ___cospiPtr.asFunction<double Function(double)>();

  double __sinpif(
    double arg0,
  ) {
    return ___sinpif(
      arg0,
    );
  }

  late final ___sinpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinpif');
  late final ___sinpif = ___sinpifPtr.asFunction<double Function(double)>();

  double __sinpi(
    double arg0,
  ) {
    return ___sinpi(
      arg0,
    );
  }

  late final ___sinpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinpi');
  late final ___sinpi = ___sinpiPtr.asFunction<double Function(double)>();

  double __tanpif(
    double arg0,
  ) {
    return ___tanpif(
      arg0,
    );
  }

  late final ___tanpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanpif');
  late final ___tanpif = ___tanpifPtr.asFunction<double Function(double)>();

  double __tanpi(
    double arg0,
  ) {
    return ___tanpi(
      arg0,
    );
  }

  late final ___tanpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanpi');
  late final ___tanpi = ___tanpiPtr.asFunction<double Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double scalb(
    double arg0,
    double arg1,
  ) {
    return _scalb(
      arg0,
      arg1,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  int setjmp(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _setjmp1(
      arg0,
    );
  }

  late final _setjmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'setjmp');
  late final _setjmp1 =
      _setjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  void longjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _longjmp1(
      arg0,
      arg1,
    );
  }

  late final _longjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'longjmp');
  late final _longjmp1 =
      _longjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int _setjmp(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return __setjmp(
      arg0,
    );
  }

  late final __setjmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          '_setjmp');
  late final __setjmp =
      __setjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  void _longjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return __longjmp(
      arg0,
      arg1,
    );
  }

  late final __longjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      '_longjmp');
  late final __longjmp =
      __longjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int sigsetjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _sigsetjmp(
      arg0,
      arg1,
    );
  }

  late final _sigsetjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'sigsetjmp');
  late final _sigsetjmp =
      _sigsetjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  void siglongjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _siglongjmp(
      arg0,
      arg1,
    );
  }

  late final _siglongjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'siglongjmp');
  late final _siglongjmp =
      _siglongjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  void longjmperror() {
    return _longjmperror();
  }

  late final _longjmperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('longjmperror');
  late final _longjmperror = _longjmperrorPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_signame =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_signame');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_signame => _sys_signame.value;

  set sys_signame(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_signame.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_siglist => _sys_siglist.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_siglist.value = value;

  int raise(
    int arg0,
  ) {
    return _raise(
      arg0,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> bsd_signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _bsd_signal(
      arg0,
      arg1,
    );
  }

  late final _bsd_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Void Function(ffi.Int)>>)>>('bsd_signal');
  late final _bsd_signal = _bsd_signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int kill(
    int arg0,
    int arg1,
  ) {
    return _kill(
      arg0,
      arg1,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int arg0,
    int arg1,
  ) {
    return _killpg(
      arg0,
      arg1,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigaction1(
    int arg0,
    ffi.Pointer<sigaction> arg1,
    ffi.Pointer<sigaction> arg2,
  ) {
    return _sigaction1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  late final _sigaddsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> arg0,
    ffi.Pointer<stack_t> arg1,
  ) {
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigdelset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  late final _sigdelsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigemptyset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigemptyset(
      arg0,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigfillset(
      arg0,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sighold(
    int arg0,
  ) {
    return _sighold(
      arg0,
    );
  }

  late final _sigholdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sighold');
  late final _sighold = _sigholdPtr.asFunction<int Function(int)>();

  int sigignore(
    int arg0,
  ) {
    return _sigignore(
      arg0,
    );
  }

  late final _sigignorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigignore');
  late final _sigignore = _sigignorePtr.asFunction<int Function(int)>();

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigismember(
      arg0,
      arg1,
    );
  }

  late final _sigismemberPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigpause(
    int arg0,
  ) {
    return _sigpause(
      arg0,
    );
  }

  late final _sigpausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigpause');
  late final _sigpause = _sigpausePtr.asFunction<int Function(int)>();

  int sigpending(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigpending(
      arg0,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigprocmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigrelse(
    int arg0,
  ) {
    return _sigrelse(
      arg0,
    );
  }

  late final _sigrelsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigrelse');
  late final _sigrelse = _sigrelsePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> sigset(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _sigset(
      arg0,
      arg1,
    );
  }

  late final _sigsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('sigset');
  late final _sigset = _sigsetPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigsuspend(
      arg0,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _sigwait(
      arg0,
      arg1,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr
      .asFunction<int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>();

  void psignal(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _psignal(
      arg0,
      arg1,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int sigblock(
    int arg0,
  ) {
    return _sigblock(
      arg0,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int arg0,
  ) {
    return _sigsetmask(
      arg0,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int sigvec1(
    int arg0,
    ffi.Pointer<sigvec> arg1,
    ffi.Pointer<sigvec> arg2,
  ) {
    return _sigvec1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigvec1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>>('sigvec');
  late final _sigvec1 = _sigvec1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id.value,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  Dart__uint64_t clock_gettime_nsec_np(
    clockid_t __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id.value,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.UnsignedInt)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  late final ffi.Pointer<CFBagCallBacks> _kCFTypeBagCallBacks =
      _lookup<CFBagCallBacks>('kCFTypeBagCallBacks');

  CFBagCallBacks get kCFTypeBagCallBacks => _kCFTypeBagCallBacks.ref;

  late final ffi.Pointer<CFBagCallBacks> _kCFCopyStringBagCallBacks =
      _lookup<CFBagCallBacks>('kCFCopyStringBagCallBacks');

  CFBagCallBacks get kCFCopyStringBagCallBacks =>
      _kCFCopyStringBagCallBacks.ref;

  int CFBagGetTypeID() {
    return _CFBagGetTypeID();
  }

  late final _CFBagGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID = _CFBagGetTypeIDPtr.asFunction<int Function()>();

  CFBagRef CFBagCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate = _CFBagCreatePtr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy = _CFBagCreateCopyPtr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable = _CFBagCreateMutablePtr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy = _CFBagCreateMutableCopyPtr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount(
      theBag,
    );
  }

  late final _CFBagGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount =
      _CFBagGetCountPtr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValuePtr = _lookup<
          ffi
          .NativeFunction<CFIndex Function(CFBagRef, ffi.Pointer<ffi.Void>)>>(
      'CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue = _CFBagGetCountOfValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValuePtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>)>>(
      'CFBagContainsValue');
  late final _CFBagContainsValue = _CFBagContainsValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue = _CFBagGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent = _CFBagGetValueIfPresentPtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues(
      theBag,
      values,
    );
  }

  late final _CFBagGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues = _CFBagGetValuesPtr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction = _CFBagApplyFunctionPtr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue(
      theBag,
      value,
    );
  }

  late final _CFBagAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue = _CFBagAddValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue = _CFBagReplaceValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue(
      theBag,
      value,
    );
  }

  late final _CFBagSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue = _CFBagSetValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue = _CFBagRemoveValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues(
      theBag,
    );
  }

  late final _CFBagRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues =
      _CFBagRemoveAllValuesPtr.asFunction<void Function(CFMutableBagRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFBinaryHeapGetTypeID() {
    return _CFBinaryHeapGetTypeID();
  }

  late final _CFBinaryHeapGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID =
      _CFBinaryHeapGetTypeIDPtr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate = _CFBinaryHeapCreatePtr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy = _CFBinaryHeapCreateCopyPtr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount(
      heap,
    );
  }

  late final _CFBinaryHeapGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount =
      _CFBinaryHeapGetCountPtr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue = _CFBinaryHeapGetCountOfValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue = _CFBinaryHeapContainsValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum = _CFBinaryHeapGetMinimumPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent =
      _CFBinaryHeapGetMinimumIfPresentPtr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues = _CFBinaryHeapGetValuesPtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction =
      _CFBinaryHeapApplyFunctionPtr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue = _CFBinaryHeapAddValuePtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue =
      _CFBinaryHeapRemoveMinimumValuePtr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues = _CFBinaryHeapRemoveAllValuesPtr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID() {
    return _CFBitVectorGetTypeID();
  }

  late final _CFBitVectorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID =
      _CFBitVectorGetTypeIDPtr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate = _CFBitVectorCreatePtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy = _CFBitVectorCreateCopyPtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable = _CFBitVectorCreateMutablePtr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy =
      _CFBitVectorCreateMutableCopyPtr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount(
      bv,
    );
  }

  late final _CFBitVectorGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount =
      _CFBitVectorGetCountPtr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit = _CFBitVectorGetCountOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBitPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit = _CFBitVectorContainsBitPtr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndexPtr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex = _CFBitVectorGetBitAtIndexPtr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits = _CFBitVectorGetBitsPtr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit = _CFBitVectorGetFirstIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit = _CFBitVectorGetLastIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFIndex)>>(
      'CFBitVectorSetCount');
  late final _CFBitVectorSetCount = _CFBitVectorSetCountPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFIndex)>>(
      'CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex = _CFBitVectorFlipBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBitsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFRange)>>(
      'CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits = _CFBitVectorFlipBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex = _CFBitVectorSetBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits = _CFBitVectorSetBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits = _CFBitVectorSetAllBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFTypeDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFTypeDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFTypeDictionaryKeyCallBacks =>
      _kCFTypeDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFCopyStringDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFCopyStringDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFCopyStringDictionaryKeyCallBacks =>
      _kCFCopyStringDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryValueCallBacks>
      _kCFTypeDictionaryValueCallBacks =
      _lookup<CFDictionaryValueCallBacks>('kCFTypeDictionaryValueCallBacks');

  CFDictionaryValueCallBacks get kCFTypeDictionaryValueCallBacks =>
      _kCFTypeDictionaryValueCallBacks.ref;

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  int CFNotificationCenterGetTypeID() {
    return _CFNotificationCenterGetTypeID();
  }

  late final _CFNotificationCenterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID =
      _CFNotificationCenterGetTypeIDPtr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter() {
    return _CFNotificationCenterGetLocalCenter();
  }

  late final _CFNotificationCenterGetLocalCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter =
      _CFNotificationCenterGetLocalCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter() {
    return _CFNotificationCenterGetDistributedCenter();
  }

  late final _CFNotificationCenterGetDistributedCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter =
      _CFNotificationCenterGetDistributedCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter() {
    return _CFNotificationCenterGetDarwinNotifyCenter();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter =
      _CFNotificationCenterGetDarwinNotifyCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    CFNotificationSuspensionBehavior suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior.value,
    );
  }

  late final _CFNotificationCenterAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              CFIndex)>>('CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver =
      _CFNotificationCenterAddObserverPtr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver =
      _CFNotificationCenterRemoveObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver =
      _CFNotificationCenterRemoveEveryObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification =
      _CFNotificationCenterPostNotificationPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions =
      _CFNotificationCenterPostNotificationWithOptionsPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID() {
    return _CFLocaleGetTypeID();
  }

  late final _CFLocaleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID =
      _CFLocaleGetTypeIDPtr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem() {
    return _CFLocaleGetSystem();
  }

  late final _CFLocaleGetSystemPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem =
      _CFLocaleGetSystemPtr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent() {
    return _CFLocaleCopyCurrent();
  }

  late final _CFLocaleCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent =
      _CFLocaleCopyCurrentPtr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers() {
    return _CFLocaleCopyAvailableLocaleIdentifiers();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiersPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers =
      _CFLocaleCopyAvailableLocaleIdentifiersPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes() {
    return _CFLocaleCopyISOLanguageCodes();
  }

  late final _CFLocaleCopyISOLanguageCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes =
      _CFLocaleCopyISOLanguageCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes() {
    return _CFLocaleCopyISOCountryCodes();
  }

  late final _CFLocaleCopyISOCountryCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes =
      _CFLocaleCopyISOCountryCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes() {
    return _CFLocaleCopyISOCurrencyCodes();
  }

  late final _CFLocaleCopyISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes =
      _CFLocaleCopyISOCurrencyCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes() {
    return _CFLocaleCopyCommonISOCurrencyCodes();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes =
      _CFLocaleCopyCommonISOCurrencyCodesPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages() {
    return _CFLocaleCopyPreferredLanguages();
  }

  late final _CFLocaleCopyPreferredLanguagesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages =
      _CFLocaleCopyPreferredLanguagesPtr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString =
      _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString =
      _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr.asFunction<
          int Function(CFLocaleIdentifier)>();

  CFLocaleLanguageDirection CFLocaleGetLanguageCharacterDirection(
    CFStringRef isoLangCode,
  ) {
    return CFLocaleLanguageDirection.fromValue(
        _CFLocaleGetLanguageCharacterDirection(
      isoLangCode,
    ));
  }

  late final _CFLocaleGetLanguageCharacterDirectionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection =
      _CFLocaleGetLanguageCharacterDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFLocaleLanguageDirection CFLocaleGetLanguageLineDirection(
    CFStringRef isoLangCode,
  ) {
    return CFLocaleLanguageDirection.fromValue(
        _CFLocaleGetLanguageLineDirection(
      isoLangCode,
    ));
  }

  late final _CFLocaleGetLanguageLineDirectionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection =
      _CFLocaleGetLanguageLineDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifierPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier =
      _CFLocaleCreateComponentsFromLocaleIdentifierPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponentsPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents =
      _CFLocaleCreateLocaleIdentifierFromComponentsPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreatePtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate = _CFLocaleCreatePtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopyPtr = _lookup<
          ffi
          .NativeFunction<CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>>(
      'CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy = _CFLocaleCreateCopyPtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier(
      locale,
    );
  }

  late final _CFLocaleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier = _CFLocaleGetIdentifierPtr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValuePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue = _CFLocaleGetValuePtr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue =
      _CFLocaleCopyDisplayNameForPropertyValuePtr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFLocaleCurrentLocaleDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFLocaleCurrentLocaleDidChangeNotification');

  CFNotificationName get kCFLocaleCurrentLocaleDidChangeNotification =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleIdentifier');

  CFLocaleKey get kCFLocaleIdentifier => _kCFLocaleIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleLanguageCode =
      _lookup<CFLocaleKey>('kCFLocaleLanguageCode');

  CFLocaleKey get kCFLocaleLanguageCode => _kCFLocaleLanguageCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCountryCode =
      _lookup<CFLocaleKey>('kCFLocaleCountryCode');

  CFLocaleKey get kCFLocaleCountryCode => _kCFLocaleCountryCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleScriptCode =
      _lookup<CFLocaleKey>('kCFLocaleScriptCode');

  CFLocaleKey get kCFLocaleScriptCode => _kCFLocaleScriptCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleVariantCode =
      _lookup<CFLocaleKey>('kCFLocaleVariantCode');

  CFLocaleKey get kCFLocaleVariantCode => _kCFLocaleVariantCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleExemplarCharacterSet =
      _lookup<CFLocaleKey>('kCFLocaleExemplarCharacterSet');

  CFLocaleKey get kCFLocaleExemplarCharacterSet =>
      _kCFLocaleExemplarCharacterSet.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendarIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCalendarIdentifier');

  CFLocaleKey get kCFLocaleCalendarIdentifier =>
      _kCFLocaleCalendarIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendar =
      _lookup<CFLocaleKey>('kCFLocaleCalendar');

  CFLocaleKey get kCFLocaleCalendar => _kCFLocaleCalendar.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollationIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollationIdentifier');

  CFLocaleKey get kCFLocaleCollationIdentifier =>
      _kCFLocaleCollationIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleUsesMetricSystem =
      _lookup<CFLocaleKey>('kCFLocaleUsesMetricSystem');

  CFLocaleKey get kCFLocaleUsesMetricSystem => _kCFLocaleUsesMetricSystem.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleMeasurementSystem =
      _lookup<CFLocaleKey>('kCFLocaleMeasurementSystem');

  CFLocaleKey get kCFLocaleMeasurementSystem =>
      _kCFLocaleMeasurementSystem.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleDecimalSeparator =
      _lookup<CFLocaleKey>('kCFLocaleDecimalSeparator');

  CFLocaleKey get kCFLocaleDecimalSeparator => _kCFLocaleDecimalSeparator.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleGroupingSeparator =
      _lookup<CFLocaleKey>('kCFLocaleGroupingSeparator');

  CFLocaleKey get kCFLocaleGroupingSeparator =>
      _kCFLocaleGroupingSeparator.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencySymbol =
      _lookup<CFLocaleKey>('kCFLocaleCurrencySymbol');

  CFLocaleKey get kCFLocaleCurrencySymbol => _kCFLocaleCurrencySymbol.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencyCode =
      _lookup<CFLocaleKey>('kCFLocaleCurrencyCode');

  CFLocaleKey get kCFLocaleCurrencyCode => _kCFLocaleCurrencyCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollatorIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollatorIdentifier');

  CFLocaleKey get kCFLocaleCollatorIdentifier =>
      _kCFLocaleCollatorIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationBeginDelimiterKey =>
      _kCFLocaleQuotationBeginDelimiterKey.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationEndDelimiterKey =>
      _kCFLocaleQuotationEndDelimiterKey.value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationBeginDelimiterKey =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationEndDelimiterKey =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFGregorianCalendar =
      _lookup<CFCalendarIdentifier>('kCFGregorianCalendar');

  CFCalendarIdentifier get kCFGregorianCalendar => _kCFGregorianCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFBuddhistCalendar =
      _lookup<CFCalendarIdentifier>('kCFBuddhistCalendar');

  CFCalendarIdentifier get kCFBuddhistCalendar => _kCFBuddhistCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFChineseCalendar =
      _lookup<CFCalendarIdentifier>('kCFChineseCalendar');

  CFCalendarIdentifier get kCFChineseCalendar => _kCFChineseCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFHebrewCalendar =
      _lookup<CFCalendarIdentifier>('kCFHebrewCalendar');

  CFCalendarIdentifier get kCFHebrewCalendar => _kCFHebrewCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCalendar');

  CFCalendarIdentifier get kCFIslamicCalendar => _kCFIslamicCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCivilCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCivilCalendar');

  CFCalendarIdentifier get kCFIslamicCivilCalendar =>
      _kCFIslamicCivilCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFJapaneseCalendar =
      _lookup<CFCalendarIdentifier>('kCFJapaneseCalendar');

  CFCalendarIdentifier get kCFJapaneseCalendar => _kCFJapaneseCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFRepublicOfChinaCalendar =
      _lookup<CFCalendarIdentifier>('kCFRepublicOfChinaCalendar');

  CFCalendarIdentifier get kCFRepublicOfChinaCalendar =>
      _kCFRepublicOfChinaCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFPersianCalendar =
      _lookup<CFCalendarIdentifier>('kCFPersianCalendar');

  CFCalendarIdentifier get kCFPersianCalendar => _kCFPersianCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIndianCalendar =
      _lookup<CFCalendarIdentifier>('kCFIndianCalendar');

  CFCalendarIdentifier get kCFIndianCalendar => _kCFIndianCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFISO8601Calendar =
      _lookup<CFCalendarIdentifier>('kCFISO8601Calendar');

  CFCalendarIdentifier get kCFISO8601Calendar => _kCFISO8601Calendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicTabularCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicTabularCalendar');

  CFCalendarIdentifier get kCFIslamicTabularCalendar =>
      _kCFIslamicTabularCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicUmmAlQuraCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicUmmAlQuraCalendar');

  CFCalendarIdentifier get kCFIslamicUmmAlQuraCalendar =>
      _kCFIslamicUmmAlQuraCalendar.value;

  double CFAbsoluteTimeGetCurrent() {
    return _CFAbsoluteTimeGetCurrent();
  }

  late final _CFAbsoluteTimeGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent =
      _CFAbsoluteTimeGetCurrentPtr.asFunction<double Function()>();

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1970 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1970');

  double get kCFAbsoluteTimeIntervalSince1970 =>
      _kCFAbsoluteTimeIntervalSince1970.value;

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1904 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1904');

  double get kCFAbsoluteTimeIntervalSince1904 =>
      _kCFAbsoluteTimeIntervalSince1904.value;

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate =
      _CFDateCreatePtr.asFunction<CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  CFComparisonResult CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return CFComparisonResult.fromValue(_CFDateCompare(
      theDate,
      otherDate,
      context,
    ));
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid = _CFGregorianDateIsValidPtr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime =
      _CFGregorianDateGetAbsoluteTimePtr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDatePtr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate =
      _CFAbsoluteTimeGetGregorianDatePtr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits =
      _CFAbsoluteTimeAddGregorianUnitsPtr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeekPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek = _CFAbsoluteTimeGetDayOfWeekPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear = _CFAbsoluteTimeGetDayOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear = _CFAbsoluteTimeGetWeekOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
          ffi
          .NativeFunction<CFMutableDataRef Function(CFAllocatorRef, CFIndex)>>(
      'CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength =
      _CFDataSetLengthPtr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    CFDataSearchFlags compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions.value,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, CFOptionFlags)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID() {
    return _CFCharacterSetGetTypeID();
  }

  late final _CFCharacterSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID =
      _CFCharacterSetGetTypeIDPtr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined(
    CFCharacterSetPredefinedSet theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined(
      theSetIdentifier.value,
    );
  }

  late final _CFCharacterSetGetPredefinedPtr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(CFIndex)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined = _CFCharacterSetGetPredefinedPtr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRangePtr = _lookup<
          ffi
          .NativeFunction<CFCharacterSetRef Function(CFAllocatorRef, CFRange)>>(
      'CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange =
      _CFCharacterSetCreateWithCharactersInRangePtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString =
      _CFCharacterSetCreateWithCharactersInStringPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation =
      _CFCharacterSetCreateWithBitmapRepresentationPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSetPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet =
      _CFCharacterSetCreateInvertedSetPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet = _CFCharacterSetIsSupersetOfSetPtr
      .asFunction<int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlanePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane =
      _CFCharacterSetHasMemberInPlanePtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutablePtr = _lookup<
          ffi
          .NativeFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>>(
      'CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable = _CFCharacterSetCreateMutablePtr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy =
      _CFCharacterSetCreateCopyPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy =
      _CFCharacterSetCreateMutableCopyPtr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMemberPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember =
      _CFCharacterSetIsCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMemberPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember =
      _CFCharacterSetIsLongCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation =
      _CFCharacterSetCreateBitmapRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange =
      _CFCharacterSetAddCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange =
      _CFCharacterSetRemoveCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString =
      _CFCharacterSetAddCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString =
      _CFCharacterSetRemoveCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion = _CFCharacterSetUnionPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect = _CFCharacterSetIntersectPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert(
      theSet,
    );
  }

  late final _CFCharacterSetInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert = _CFCharacterSetInvertPtr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFErrorGetTypeID() {
    return _CFErrorGetTypeID();
  }

  late final _CFErrorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID =
      _CFErrorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainPOSIX =
      _lookup<CFErrorDomain>('kCFErrorDomainPOSIX');

  CFErrorDomain get kCFErrorDomainPOSIX => _kCFErrorDomainPOSIX.value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainOSStatus =
      _lookup<CFErrorDomain>('kCFErrorDomainOSStatus');

  CFErrorDomain get kCFErrorDomainOSStatus => _kCFErrorDomainOSStatus.value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainMach =
      _lookup<CFErrorDomain>('kCFErrorDomainMach');

  CFErrorDomain get kCFErrorDomainMach => _kCFErrorDomainMach.value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainCocoa =
      _lookup<CFErrorDomain>('kCFErrorDomainCocoa');

  CFErrorDomain get kCFErrorDomainCocoa => _kCFErrorDomainCocoa.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedDescriptionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedDescriptionKey');

  CFStringRef get kCFErrorLocalizedDescriptionKey =>
      _kCFErrorLocalizedDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureKey');

  CFStringRef get kCFErrorLocalizedFailureKey =>
      _kCFErrorLocalizedFailureKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureReasonKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureReasonKey');

  CFStringRef get kCFErrorLocalizedFailureReasonKey =>
      _kCFErrorLocalizedFailureReasonKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedRecoverySuggestionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedRecoverySuggestionKey');

  CFStringRef get kCFErrorLocalizedRecoverySuggestionKey =>
      _kCFErrorLocalizedRecoverySuggestionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorDescriptionKey =
      _lookup<CFStringRef>('kCFErrorDescriptionKey');

  CFStringRef get kCFErrorDescriptionKey => _kCFErrorDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorUnderlyingErrorKey =
      _lookup<CFStringRef>('kCFErrorUnderlyingErrorKey');

  CFStringRef get kCFErrorUnderlyingErrorKey =>
      _kCFErrorUnderlyingErrorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorURLKey =
      _lookup<CFStringRef>('kCFErrorURLKey');

  CFStringRef get kCFErrorURLKey => _kCFErrorURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorFilePathKey =
      _lookup<CFStringRef>('kCFErrorFilePathKey');

  CFStringRef get kCFErrorFilePathKey => _kCFErrorFilePathKey.value;

  CFErrorRef CFErrorCreate(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate = _CFErrorCreatePtr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValuesPtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues =
      _CFErrorCreateWithUserInfoKeysAndValuesPtr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain(
      err,
    );
  }

  late final _CFErrorGetDomainPtr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain =
      _CFErrorGetDomainPtr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode(
      err,
    );
  }

  late final _CFErrorGetCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode =
      _CFErrorGetCodePtr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo(
      err,
    );
  }

  late final _CFErrorCopyUserInfoPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo = _CFErrorCopyUserInfoPtr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription(
      err,
    );
  }

  late final _CFErrorCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription =
      _CFErrorCopyDescriptionPtr.asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason(
      err,
    );
  }

  late final _CFErrorCopyFailureReasonPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason = _CFErrorCopyFailureReasonPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion = _CFErrorCopyRecoverySuggestionPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<ffi.Char>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring = _CFStringCreateWithSubstringPtr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
          ffi
          .NativeFunction<CFStringRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFStringRef CFStringCreateStringWithValidatedFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef validFormatSpecifiers,
    CFStringRef format,
    ffi.Pointer<CFErrorRef> errorPtr,
  ) {
    return _CFStringCreateStringWithValidatedFormat(
      alloc,
      formatOptions,
      validFormatSpecifiers,
      format,
      errorPtr,
    );
  }

  late final _CFStringCreateStringWithValidatedFormatPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
                  CFStringRef, ffi.Pointer<CFErrorRef>)>>(
      'CFStringCreateStringWithValidatedFormat');
  late final _CFStringCreateStringWithValidatedFormat =
      _CFStringCreateStringWithValidatedFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              CFStringRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef CFStringCreateStringWithValidatedFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef validFormatSpecifiers,
    CFStringRef format,
    va_list arguments,
    ffi.Pointer<CFErrorRef> errorPtr,
  ) {
    return _CFStringCreateStringWithValidatedFormatAndArguments(
      alloc,
      formatOptions,
      validFormatSpecifiers,
      format,
      arguments,
      errorPtr,
    );
  }

  late final _CFStringCreateStringWithValidatedFormatAndArgumentsPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
                  CFStringRef, va_list, ffi.Pointer<CFErrorRef>)>>(
      'CFStringCreateStringWithValidatedFormatAndArguments');
  late final _CFStringCreateStringWithValidatedFormatAndArguments =
      _CFStringCreateStringWithValidatedFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              CFStringRef, va_list, ffi.Pointer<CFErrorRef>)>();

  CFMutableStringRef CFStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>)>();

  CFComparisonResult CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    CFStringCompareFlags compareOptions,
    CFLocaleRef locale,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions.value,
      locale,
    ));
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef, CFRange, CFOptionFlags,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  CFComparisonResult CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    CFStringCompareFlags compareOptions,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions.value,
    ));
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef, CFRange,
              CFOptionFlags)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  CFComparisonResult CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    CFStringCompareFlags compareOptions,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompare(
      theString1,
      theString2,
      compareOptions.value,
    ));
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef, CFStringRef, CFOptionFlags)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  DartBoolean CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions.value,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFOptionFlags,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  DartBoolean CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions.value,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef, CFRange, CFOptionFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions.value,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              CFOptionFlags)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions.value,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, CFOptionFlags)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  DartBoolean CFStringFindCharacterFromSet(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions.value,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFCharacterSetRef,
              CFRange,
              CFOptionFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFStringRef)>>(
      'CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString = _CFStringAppendPascalStringPtr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString(
    CFMutableStringRef theString,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<ffi.Char>, int)>();

  void CFStringAppendFormat(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFStringRef)>>(
      'CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  DartCFIndex CFStringFindAndReplace(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions.value,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, CFOptionFlags)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFLocaleRef)>>(
      'CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFLocaleRef)>>(
      'CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFLocaleRef)>>(
      'CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize(
    CFMutableStringRef theString,
    CFStringNormalizationForm theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm.value,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFIndex)>>(
      'CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold(
    CFMutableStringRef theString,
    CFStringCompareFlags theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags.value,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFOptionFlags, CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(ffi.UnsignedLong)>>(
          'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  void CFShow(
    CFTypeRef obj,
  ) {
    return _CFShow(
      obj,
    );
  }

  late final _CFShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow = _CFShowPtr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr(
    CFStringRef str,
  ) {
    return _CFShowStr(
      str,
    );
  }

  late final _CFShowStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr =
      _CFShowStrPtr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString(
    ffi.Pointer<ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString(
      cStr,
    );
  }

  late final ___CFStringMakeConstantStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Char>)>>(
          '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString = ___CFStringMakeConstantStringPtr
      .asFunction<CFStringRef Function(ffi.Pointer<ffi.Char>)>();

  int CFTimeZoneGetTypeID() {
    return _CFTimeZoneGetTypeID();
  }

  late final _CFTimeZoneGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID =
      _CFTimeZoneGetTypeIDPtr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem() {
    return _CFTimeZoneCopySystem();
  }

  late final _CFTimeZoneCopySystemPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem =
      _CFTimeZoneCopySystemPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem() {
    return _CFTimeZoneResetSystem();
  }

  late final _CFTimeZoneResetSystemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem =
      _CFTimeZoneResetSystemPtr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault() {
    return _CFTimeZoneCopyDefault();
  }

  late final _CFTimeZoneCopyDefaultPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault =
      _CFTimeZoneCopyDefaultPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault(
      tz,
    );
  }

  late final _CFTimeZoneSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault =
      _CFTimeZoneSetDefaultPtr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames() {
    return _CFTimeZoneCopyKnownNames();
  }

  late final _CFTimeZoneCopyKnownNamesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames =
      _CFTimeZoneCopyKnownNamesPtr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary() {
    return _CFTimeZoneCopyAbbreviationDictionary();
  }

  late final _CFTimeZoneCopyAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary =
      _CFTimeZoneCopyAbbreviationDictionaryPtr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary =
      _CFTimeZoneSetAbbreviationDictionaryPtr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate = _CFTimeZoneCreatePtr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT =
      _CFTimeZoneCreateWithTimeIntervalFromGMTPtr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithNamePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName = _CFTimeZoneCreateWithNamePtr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName(
      tz,
    );
  }

  late final _CFTimeZoneGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName =
      _CFTimeZoneGetNamePtr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData(
      tz,
    );
  }

  late final _CFTimeZoneGetDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData =
      _CFTimeZoneGetDataPtr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT = _CFTimeZoneGetSecondsFromGMTPtr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviationPtr = _lookup<
          ffi
          .NativeFunction<CFStringRef Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation = _CFTimeZoneCopyAbbreviationPtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTimePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime =
      _CFTimeZoneIsDaylightSavingTimePtr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffsetPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset =
      _CFTimeZoneGetDaylightSavingTimeOffsetPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition =
      _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName(
    CFTimeZoneRef tz,
    CFTimeZoneNameStyle style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName(
      tz,
      style.value,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedNamePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, CFIndex,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName = _CFTimeZoneCopyLocalizedNamePtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFTimeZoneSystemTimeZoneDidChangeNotification');

  CFNotificationName get kCFTimeZoneSystemTimeZoneDidChangeNotification =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value;

  int CFCalendarGetTypeID() {
    return _CFCalendarGetTypeID();
  }

  late final _CFCalendarGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID =
      _CFCalendarGetTypeIDPtr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent() {
    return _CFCalendarCopyCurrent();
  }

  late final _CFCalendarCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent =
      _CFCalendarCopyCurrentPtr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifierPtr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier =
      _CFCalendarCreateWithIdentifierPtr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier = _CFCalendarGetIdentifierPtr.asFunction<
      CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale(
      calendar,
    );
  }

  late final _CFCalendarCopyLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale = _CFCalendarCopyLocalePtr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale = _CFCalendarSetLocalePtr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZonePtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone = _CFCalendarCopyTimeZonePtr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZonePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone = _CFCalendarSetTimeZonePtr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday =
      _CFCalendarGetFirstWeekdayPtr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday = _CFCalendarSetFirstWeekdayPtr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek =
      _CFCalendarGetMinimumDaysInFirstWeekPtr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek =
      _CFCalendarSetMinimumDaysInFirstWeekPtr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit(
      calendar,
      unit.value,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFOptionFlags)>>(
      'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit =
      _CFCalendarGetMinimumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit(
      calendar,
      unit.value,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFOptionFlags)>>(
      'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit =
      _CFCalendarGetMaximumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit smallerUnit,
    CFCalendarUnit biggerUnit,
    DartCFTimeInterval at,
  ) {
    return _CFCalendarGetRangeOfUnit(
      calendar,
      smallerUnit.value,
      biggerUnit.value,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, CFOptionFlags, CFOptionFlags,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit = _CFCalendarGetRangeOfUnitPtr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  DartCFIndex CFCalendarGetOrdinalityOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit smallerUnit,
    CFCalendarUnit biggerUnit,
    DartCFTimeInterval at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit(
      calendar,
      smallerUnit.value,
      biggerUnit.value,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, CFOptionFlags, CFOptionFlags,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit = _CFCalendarGetOrdinalityOfUnitPtr
      .asFunction<int Function(CFCalendarRef, int, int, double)>();

  DartBoolean CFCalendarGetTimeRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit unit,
    DartCFTimeInterval at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit(
      calendar,
      unit.value,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFOptionFlags,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit =
      _CFCalendarGetTimeRangeOfUnitPtr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime =
      _CFCalendarComposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime =
      _CFCalendarDecomposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<ffi.Char>)>();

  int CFCalendarAddComponents(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponentsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents = _CFCalendarAddComponentsPtr.asFunction<
      int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
          ffi.Pointer<ffi.Char>)>();

  int CFCalendarGetComponentDifference(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifferencePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference =
      _CFCalendarGetComponentDifferencePtr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    CFAllocatorRef allocator,
    CFISO8601DateFormatOptions formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions.value,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef,
              CFOptionFlags)>>('CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    CFDateFormatterStyle dateStyle,
    CFDateFormatterStyle timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle.value,
      timeStyle.value,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, CFIndex,
              CFIndex)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  CFDateFormatterStyle CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return CFDateFormatterStyle.fromValue(_CFDateFormatterGetDateStyle(
      formatter,
    ));
  }

  late final _CFDateFormatterGetDateStylePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFDateFormatterStyle CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return CFDateFormatterStyle.fromValue(_CFDateFormatterGetTimeStyle(
      formatter,
    ));
  }

  late final _CFDateFormatterGetTimeStylePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFDateFormatterRef, CFStringRef)>>(
      'CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanFalse =
      _lookup<CFBooleanRef>('kCFBooleanFalse');

  CFBooleanRef get kCFBooleanFalse => _kCFBooleanFalse.value;

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  int CFBooleanGetValue(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<int Function(CFBooleanRef)>();

  late final ffi.Pointer<CFNumberRef> _kCFNumberPositiveInfinity =
      _lookup<CFNumberRef>('kCFNumberPositiveInfinity');

  CFNumberRef get kCFNumberPositiveInfinity => _kCFNumberPositiveInfinity.value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNegativeInfinity =
      _lookup<CFNumberRef>('kCFNumberNegativeInfinity');

  CFNumberRef get kCFNumberNegativeInfinity => _kCFNumberNegativeInfinity.value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNaN =
      _lookup<CFNumberRef>('kCFNumberNaN');

  CFNumberRef get kCFNumberNaN => _kCFNumberNaN.value;

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate(
    CFAllocatorRef allocator,
    CFNumberType theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate(
      allocator,
      theType.value,
      valuePtr,
    );
  }

  late final _CFNumberCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate = _CFNumberCreatePtr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  CFNumberType CFNumberGetType(
    CFNumberRef number,
  ) {
    return CFNumberType.fromValue(_CFNumberGetType(
      number,
    ));
  }

  late final _CFNumberGetTypePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType =
      _CFNumberGetTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize(
      number,
    );
  }

  late final _CFNumberGetByteSizePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize =
      _CFNumberGetByteSizePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType(
      number,
    );
  }

  late final _CFNumberIsFloatTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType =
      _CFNumberIsFloatTypePtr.asFunction<int Function(CFNumberRef)>();

  DartBoolean CFNumberGetValue(
    CFNumberRef number,
    CFNumberType theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType.value,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  CFComparisonResult CFNumberCompare(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return CFComparisonResult.fromValue(_CFNumberCompare(
      number,
      otherNumber,
      context,
    ));
  }

  late final _CFNumberComparePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare = _CFNumberComparePtr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID() {
    return _CFNumberFormatterGetTypeID();
  }

  late final _CFNumberFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID =
      _CFNumberFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    CFNumberFormatterStyle style,
  ) {
    return _CFNumberFormatterCreate(
      allocator,
      locale,
      style.value,
    );
  }

  late final _CFNumberFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              CFIndex)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate = _CFNumberFormatterCreatePtr.asFunction<
      CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale = _CFNumberFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  CFNumberFormatterStyle CFNumberFormatterGetStyle(
    CFNumberFormatterRef formatter,
  ) {
    return CFNumberFormatterStyle.fromValue(_CFNumberFormatterGetStyle(
      formatter,
    ));
  }

  late final _CFNumberFormatterGetStylePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle = _CFNumberFormatterGetStylePtr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat = _CFNumberFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat = _CFNumberFormatterSetFormatPtr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumberPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber =
      _CFNumberFormatterCreateStringWithNumberPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberType numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue(
      allocator,
      formatter,
      numberType.value,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValuePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  CFIndex, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue =
      _CFNumberFormatterCreateStringWithValuePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString =
      _CFNumberFormatterCreateNumberFromStringPtr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  DartBoolean CFNumberFormatterGetValueFromString(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    CFNumberType numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString(
      formatter,
      string,
      rangep,
      numberType.value,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString =
      _CFNumberFormatterGetValueFromStringPtr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty =
      _CFNumberFormatterSetPropertyPtr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty =
      _CFNumberFormatterCopyPropertyPtr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterCurrencyCode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencyCode');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyCode =>
      _kCFNumberFormatterCurrencyCode.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDecimalSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterDecimalSeparator =>
      _kCFNumberFormatterDecimalSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyDecimalSeparator =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterAlwaysShowDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterAlwaysShowDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterAlwaysShowDecimalSeparator =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSeparator =>
      _kCFNumberFormatterGroupingSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterUseGroupingSeparator =>
      _kCFNumberFormatterUseGroupingSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPercentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPercentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPercentSymbol =>
      _kCFNumberFormatterPercentSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterZeroSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterZeroSymbol');

  CFNumberFormatterKey get kCFNumberFormatterZeroSymbol =>
      _kCFNumberFormatterZeroSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterNaNSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNaNSymbol');

  CFNumberFormatterKey get kCFNumberFormatterNaNSymbol =>
      _kCFNumberFormatterNaNSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInfinitySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterInfinitySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInfinitySymbol =>
      _kCFNumberFormatterInfinitySymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMinusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinusSign');

  CFNumberFormatterKey get kCFNumberFormatterMinusSign =>
      _kCFNumberFormatterMinusSign.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterPlusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPlusSign');

  CFNumberFormatterKey get kCFNumberFormatterPlusSign =>
      _kCFNumberFormatterPlusSign.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterCurrencySymbol =>
      _kCFNumberFormatterCurrencySymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterExponentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterExponentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterExponentSymbol =>
      _kCFNumberFormatterExponentSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinIntegerDigits =>
      _kCFNumberFormatterMinIntegerDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxIntegerDigits =>
      _kCFNumberFormatterMaxIntegerDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinFractionDigits =>
      _kCFNumberFormatterMinFractionDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxFractionDigits =>
      _kCFNumberFormatterMaxFractionDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSize =>
      _kCFNumberFormatterGroupingSize.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterSecondaryGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterSecondaryGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterSecondaryGroupingSize =>
      _kCFNumberFormatterSecondaryGroupingSize.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterRoundingMode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingMode');

  CFNumberFormatterKey get kCFNumberFormatterRoundingMode =>
      _kCFNumberFormatterRoundingMode.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterRoundingIncrement =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingIncrement');

  CFNumberFormatterKey get kCFNumberFormatterRoundingIncrement =>
      _kCFNumberFormatterRoundingIncrement.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterFormatWidth =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterFormatWidth');

  CFNumberFormatterKey get kCFNumberFormatterFormatWidth =>
      _kCFNumberFormatterFormatWidth.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingPosition =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingPosition');

  CFNumberFormatterKey get kCFNumberFormatterPaddingPosition =>
      _kCFNumberFormatterPaddingPosition.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingCharacter =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingCharacter');

  CFNumberFormatterKey get kCFNumberFormatterPaddingCharacter =>
      _kCFNumberFormatterPaddingCharacter.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDefaultFormat =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDefaultFormat');

  CFNumberFormatterKey get kCFNumberFormatterDefaultFormat =>
      _kCFNumberFormatterDefaultFormat.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMultiplier =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMultiplier');

  CFNumberFormatterKey get kCFNumberFormatterMultiplier =>
      _kCFNumberFormatterMultiplier.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositivePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositivePrefix');

  CFNumberFormatterKey get kCFNumberFormatterPositivePrefix =>
      _kCFNumberFormatterPositivePrefix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositiveSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositiveSuffix');

  CFNumberFormatterKey get kCFNumberFormatterPositiveSuffix =>
      _kCFNumberFormatterPositiveSuffix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativePrefix');

  CFNumberFormatterKey get kCFNumberFormatterNegativePrefix =>
      _kCFNumberFormatterNegativePrefix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativeSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativeSuffix');

  CFNumberFormatterKey get kCFNumberFormatterNegativeSuffix =>
      _kCFNumberFormatterNegativeSuffix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPerMillSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPerMillSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPerMillSymbol =>
      _kCFNumberFormatterPerMillSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInternationalCurrencySymbol =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterInternationalCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInternationalCurrencySymbol =>
      _kCFNumberFormatterInternationalCurrencySymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyGroupingSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyGroupingSeparator =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterIsLenient =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterIsLenient');

  CFNumberFormatterKey get kCFNumberFormatterIsLenient =>
      _kCFNumberFormatterIsLenient.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterUseSignificantDigits =>
      _kCFNumberFormatterUseSignificantDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinSignificantDigits =>
      _kCFNumberFormatterMinSignificantDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxSignificantDigits =>
      _kCFNumberFormatterMaxSignificantDigits.value;

  int CFNumberFormatterGetDecimalInfoForCurrencyCode(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode =
      _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyApplication =
      _lookup<CFStringRef>('kCFPreferencesAnyApplication');

  CFStringRef get kCFPreferencesAnyApplication =>
      _kCFPreferencesAnyApplication.value;

  set kCFPreferencesAnyApplication(CFStringRef value) =>
      _kCFPreferencesAnyApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentApplication =
      _lookup<CFStringRef>('kCFPreferencesCurrentApplication');

  CFStringRef get kCFPreferencesCurrentApplication =>
      _kCFPreferencesCurrentApplication.value;

  set kCFPreferencesCurrentApplication(CFStringRef value) =>
      _kCFPreferencesCurrentApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyHost =
      _lookup<CFStringRef>('kCFPreferencesAnyHost');

  CFStringRef get kCFPreferencesAnyHost => _kCFPreferencesAnyHost.value;

  set kCFPreferencesAnyHost(CFStringRef value) =>
      _kCFPreferencesAnyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentHost =
      _lookup<CFStringRef>('kCFPreferencesCurrentHost');

  CFStringRef get kCFPreferencesCurrentHost => _kCFPreferencesCurrentHost.value;

  set kCFPreferencesCurrentHost(CFStringRef value) =>
      _kCFPreferencesCurrentHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyUser =
      _lookup<CFStringRef>('kCFPreferencesAnyUser');

  CFStringRef get kCFPreferencesAnyUser => _kCFPreferencesAnyUser.value;

  set kCFPreferencesAnyUser(CFStringRef value) =>
      _kCFPreferencesAnyUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentUser =
      _lookup<CFStringRef>('kCFPreferencesCurrentUser');

  CFStringRef get kCFPreferencesCurrentUser => _kCFPreferencesCurrentUser.value;

  set kCFPreferencesCurrentUser(CFStringRef value) =>
      _kCFPreferencesCurrentUser.value = value;

  CFPropertyListRef CFPreferencesCopyAppValue(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue = _CFPreferencesCopyAppValuePtr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue =
      _CFPreferencesGetAppBooleanValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue =
      _CFPreferencesGetAppIntegerValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue = _CFPreferencesSetAppValuePtr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp =
      _CFPreferencesAddSuitePreferencesToAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp =
      _CFPreferencesRemoveSuitePreferencesFromAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronizePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize =
      _CFPreferencesAppSynchronizePtr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue = _CFPreferencesCopyValuePtr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiplePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple =
      _CFPreferencesCopyMultiplePtr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue = _CFPreferencesSetValuePtr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple =
      _CFPreferencesSetMultiplePtr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronizePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize = _CFPreferencesSynchronizePtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationListPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList =
      _CFPreferencesCopyApplicationListPtr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyListPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList = _CFPreferencesCopyKeyListPtr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForcedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced = _CFPreferencesAppValueIsForcedPtr
      .asFunction<int Function(CFStringRef, CFStringRef)>();

  int CFURLGetTypeID() {
    return _CFURLGetTypeID();
  }

  late final _CFURLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID = _CFURLGetTypeIDPtr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes = _CFURLCreateWithBytesPtr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData = _CFURLCreateDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes =
      _CFURLCreateAbsoluteURLWithBytesPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    CFURLPathStyle pathStyle,
    DartBoolean isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath(
      allocator,
      filePath,
      pathStyle.value,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPathPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, CFIndex,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath = _CFURLCreateWithFileSystemPathPtr
      .asFunction<CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation =
      _CFURLCreateFromFileSystemRepresentationPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    CFURLPathStyle pathStyle,
    DartBoolean isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase(
      allocator,
      filePath,
      pathStyle.value,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBasePtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, CFIndex, Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase =
      _CFURLCreateWithFileSystemPathRelativeToBasePtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase =
      _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation =
      _CFURLGetFileSystemRepresentationPtr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL =
      _CFURLCopyAbsoluteURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString(
    CFURLRef anURL,
  ) {
    return _CFURLGetString(
      anURL,
    );
  }

  late final _CFURLGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString =
      _CFURLGetStringPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL(
      anURL,
    );
  }

  late final _CFURLGetBaseURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL =
      _CFURLGetBaseURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed =
      _CFURLCanBeDecomposedPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme(
      anURL,
    );
  }

  late final _CFURLCopySchemePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme =
      _CFURLCopySchemePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation(
      anURL,
    );
  }

  late final _CFURLCopyNetLocationPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation =
      _CFURLCopyNetLocationPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath(
      anURL,
    );
  }

  late final _CFURLCopyPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath =
      _CFURLCopyPathPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath = _CFURLCopyStrictPathPtr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath(
    CFURLRef anURL,
    CFURLPathStyle pathStyle,
  ) {
    return _CFURLCopyFileSystemPath(
      anURL,
      pathStyle.value,
    );
  }

  late final _CFURLCopyFileSystemPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFIndex)>>(
          'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath = _CFURLCopyFileSystemPathPtr.asFunction<
      CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPathPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath =
      _CFURLHasDirectoryPathPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier = _CFURLCopyResourceSpecifierPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName(
      anURL,
    );
  }

  late final _CFURLCopyHostNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName =
      _CFURLCopyHostNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber(
      anURL,
    );
  }

  late final _CFURLGetPortNumberPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber =
      _CFURLGetPortNumberPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName(
      anURL,
    );
  }

  late final _CFURLCopyUserNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName =
      _CFURLCopyUserNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword(
      anURL,
    );
  }

  late final _CFURLCopyPasswordPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword =
      _CFURLCopyPasswordPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString = _CFURLCopyParameterStringPtr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString = _CFURLCopyQueryStringPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragmentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment = _CFURLCopyFragmentPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent(
      url,
    );
  }

  late final _CFURLCopyLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent = _CFURLCopyLastPathComponentPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension(
      url,
    );
  }

  late final _CFURLCopyPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension =
      _CFURLCopyPathExtensionPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponentPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent =
      _CFURLCreateCopyAppendingPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent =
      _CFURLCreateCopyDeletingLastPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension1,
  ) {
    return _CFURLCreateCopyAppendingPathExtension(
      allocator,
      url,
      extension1,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtensionPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension =
      _CFURLCreateCopyAppendingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension =
      _CFURLCreateCopyDeletingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes = _CFURLGetBytesPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent(
    CFURLRef url,
    CFURLComponentType component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent(
      url,
      component.value,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponentPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent = _CFURLGetByteRangeForComponentPtr
      .asFunction<CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes =
      _CFURLCreateStringByReplacingPercentEscapesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes =
      _CFURLCreateStringByAddingPercentEscapesPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL(
      url,
    );
  }

  late final _CFURLIsFileReferenceURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL =
      _CFURLIsFileReferenceURLPtr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL =
      _CFURLCreateFileReferenceURLPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL = _CFURLCreateFilePathURLPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRefPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef = _CFURLCreateFromFSRefPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRefPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef = _CFURLGetFSRefPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey =
      _CFURLCopyResourcePropertyForKeyPtr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys =
      _CFURLCopyResourcePropertiesForKeysPtr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey =
      _CFURLSetResourcePropertyForKeyPtr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys =
      _CFURLSetResourcePropertiesForKeysPtr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLKeysOfUnsetValuesKey =
      _lookup<CFStringRef>('kCFURLKeysOfUnsetValuesKey');

  CFStringRef get kCFURLKeysOfUnsetValuesKey =>
      _kCFURLKeysOfUnsetValuesKey.value;

  void CFURLClearResourcePropertyCacheForKey(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey =
      _CFURLClearResourcePropertyCacheForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache =
      _CFURLClearResourcePropertyCachePtr.asFunction<void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKeyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFURLRef, CFStringRef, CFTypeRef)>>(
      'CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey =
      _CFURLSetTemporaryResourcePropertyForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachablePtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<CFErrorRef>)>>(
      'CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable = _CFURLResourceIsReachablePtr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLNameKey =
      _lookup<CFStringRef>('kCFURLNameKey');

  CFStringRef get kCFURLNameKey => _kCFURLNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLLocalizedNameKey');

  CFStringRef get kCFURLLocalizedNameKey => _kCFURLLocalizedNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsRegularFileKey =
      _lookup<CFStringRef>('kCFURLIsRegularFileKey');

  CFStringRef get kCFURLIsRegularFileKey => _kCFURLIsRegularFileKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsDirectoryKey =
      _lookup<CFStringRef>('kCFURLIsDirectoryKey');

  CFStringRef get kCFURLIsDirectoryKey => _kCFURLIsDirectoryKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSymbolicLinkKey =
      _lookup<CFStringRef>('kCFURLIsSymbolicLinkKey');

  CFStringRef get kCFURLIsSymbolicLinkKey => _kCFURLIsSymbolicLinkKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsVolumeKey =
      _lookup<CFStringRef>('kCFURLIsVolumeKey');

  CFStringRef get kCFURLIsVolumeKey => _kCFURLIsVolumeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPackageKey =
      _lookup<CFStringRef>('kCFURLIsPackageKey');

  CFStringRef get kCFURLIsPackageKey => _kCFURLIsPackageKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsApplicationKey =
      _lookup<CFStringRef>('kCFURLIsApplicationKey');

  CFStringRef get kCFURLIsApplicationKey => _kCFURLIsApplicationKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLApplicationIsScriptableKey =
      _lookup<CFStringRef>('kCFURLApplicationIsScriptableKey');

  CFStringRef get kCFURLApplicationIsScriptableKey =>
      _kCFURLApplicationIsScriptableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSystemImmutableKey =
      _lookup<CFStringRef>('kCFURLIsSystemImmutableKey');

  CFStringRef get kCFURLIsSystemImmutableKey =>
      _kCFURLIsSystemImmutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUserImmutableKey =
      _lookup<CFStringRef>('kCFURLIsUserImmutableKey');

  CFStringRef get kCFURLIsUserImmutableKey => _kCFURLIsUserImmutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsHiddenKey =
      _lookup<CFStringRef>('kCFURLIsHiddenKey');

  CFStringRef get kCFURLIsHiddenKey => _kCFURLIsHiddenKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLHasHiddenExtensionKey =
      _lookup<CFStringRef>('kCFURLHasHiddenExtensionKey');

  CFStringRef get kCFURLHasHiddenExtensionKey =>
      _kCFURLHasHiddenExtensionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLCreationDateKey =
      _lookup<CFStringRef>('kCFURLCreationDateKey');

  CFStringRef get kCFURLCreationDateKey => _kCFURLCreationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentAccessDateKey =
      _lookup<CFStringRef>('kCFURLContentAccessDateKey');

  CFStringRef get kCFURLContentAccessDateKey =>
      _kCFURLContentAccessDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentModificationDateKey =
      _lookup<CFStringRef>('kCFURLContentModificationDateKey');

  CFStringRef get kCFURLContentModificationDateKey =>
      _kCFURLContentModificationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLAttributeModificationDateKey =
      _lookup<CFStringRef>('kCFURLAttributeModificationDateKey');

  CFStringRef get kCFURLAttributeModificationDateKey =>
      _kCFURLAttributeModificationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileIdentifierKey');

  CFStringRef get kCFURLFileIdentifierKey => _kCFURLFileIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileContentIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileContentIdentifierKey');

  CFStringRef get kCFURLFileContentIdentifierKey =>
      _kCFURLFileContentIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayShareFileContentKey =
      _lookup<CFStringRef>('kCFURLMayShareFileContentKey');

  CFStringRef get kCFURLMayShareFileContentKey =>
      _kCFURLMayShareFileContentKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayHaveExtendedAttributesKey =
      _lookup<CFStringRef>('kCFURLMayHaveExtendedAttributesKey');

  CFStringRef get kCFURLMayHaveExtendedAttributesKey =>
      _kCFURLMayHaveExtendedAttributesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPurgeableKey =
      _lookup<CFStringRef>('kCFURLIsPurgeableKey');

  CFStringRef get kCFURLIsPurgeableKey => _kCFURLIsPurgeableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSparseKey =
      _lookup<CFStringRef>('kCFURLIsSparseKey');

  CFStringRef get kCFURLIsSparseKey => _kCFURLIsSparseKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLinkCountKey =
      _lookup<CFStringRef>('kCFURLLinkCountKey');

  CFStringRef get kCFURLLinkCountKey => _kCFURLLinkCountKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLParentDirectoryURLKey =
      _lookup<CFStringRef>('kCFURLParentDirectoryURLKey');

  CFStringRef get kCFURLParentDirectoryURLKey =>
      _kCFURLParentDirectoryURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLKey =
      _lookup<CFStringRef>('kCFURLVolumeURLKey');

  CFStringRef get kCFURLVolumeURLKey => _kCFURLVolumeURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTypeIdentifierKey =
      _lookup<CFStringRef>('kCFURLTypeIdentifierKey');

  CFStringRef get kCFURLTypeIdentifierKey => _kCFURLTypeIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedTypeDescriptionKey =
      _lookup<CFStringRef>('kCFURLLocalizedTypeDescriptionKey');

  CFStringRef get kCFURLLocalizedTypeDescriptionKey =>
      _kCFURLLocalizedTypeDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelNumberKey =
      _lookup<CFStringRef>('kCFURLLabelNumberKey');

  CFStringRef get kCFURLLabelNumberKey => _kCFURLLabelNumberKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelColorKey =
      _lookup<CFStringRef>('kCFURLLabelColorKey');

  CFStringRef get kCFURLLabelColorKey => _kCFURLLabelColorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedLabelKey =
      _lookup<CFStringRef>('kCFURLLocalizedLabelKey');

  CFStringRef get kCFURLLocalizedLabelKey => _kCFURLLocalizedLabelKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLEffectiveIconKey =
      _lookup<CFStringRef>('kCFURLEffectiveIconKey');

  CFStringRef get kCFURLEffectiveIconKey => _kCFURLEffectiveIconKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLCustomIconKey =
      _lookup<CFStringRef>('kCFURLCustomIconKey');

  CFStringRef get kCFURLCustomIconKey => _kCFURLCustomIconKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileResourceIdentifierKey');

  CFStringRef get kCFURLFileResourceIdentifierKey =>
      _kCFURLFileResourceIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIdentifierKey =
      _lookup<CFStringRef>('kCFURLVolumeIdentifierKey');

  CFStringRef get kCFURLVolumeIdentifierKey => _kCFURLVolumeIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLPreferredIOBlockSizeKey =
      _lookup<CFStringRef>('kCFURLPreferredIOBlockSizeKey');

  CFStringRef get kCFURLPreferredIOBlockSizeKey =>
      _kCFURLPreferredIOBlockSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsReadableKey =
      _lookup<CFStringRef>('kCFURLIsReadableKey');

  CFStringRef get kCFURLIsReadableKey => _kCFURLIsReadableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsWritableKey =
      _lookup<CFStringRef>('kCFURLIsWritableKey');

  CFStringRef get kCFURLIsWritableKey => _kCFURLIsWritableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExecutableKey =
      _lookup<CFStringRef>('kCFURLIsExecutableKey');

  CFStringRef get kCFURLIsExecutableKey => _kCFURLIsExecutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSecurityKey =
      _lookup<CFStringRef>('kCFURLFileSecurityKey');

  CFStringRef get kCFURLFileSecurityKey => _kCFURLFileSecurityKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExcludedFromBackupKey =
      _lookup<CFStringRef>('kCFURLIsExcludedFromBackupKey');

  CFStringRef get kCFURLIsExcludedFromBackupKey =>
      _kCFURLIsExcludedFromBackupKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTagNamesKey =
      _lookup<CFStringRef>('kCFURLTagNamesKey');

  CFStringRef get kCFURLTagNamesKey => _kCFURLTagNamesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLPathKey =
      _lookup<CFStringRef>('kCFURLPathKey');

  CFStringRef get kCFURLPathKey => _kCFURLPathKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLCanonicalPathKey =
      _lookup<CFStringRef>('kCFURLCanonicalPathKey');

  CFStringRef get kCFURLCanonicalPathKey => _kCFURLCanonicalPathKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsMountTriggerKey =
      _lookup<CFStringRef>('kCFURLIsMountTriggerKey');

  CFStringRef get kCFURLIsMountTriggerKey => _kCFURLIsMountTriggerKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLGenerationIdentifierKey =
      _lookup<CFStringRef>('kCFURLGenerationIdentifierKey');

  CFStringRef get kCFURLGenerationIdentifierKey =>
      _kCFURLGenerationIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLDocumentIdentifierKey =
      _lookup<CFStringRef>('kCFURLDocumentIdentifierKey');

  CFStringRef get kCFURLDocumentIdentifierKey =>
      _kCFURLDocumentIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLAddedToDirectoryDateKey =
      _lookup<CFStringRef>('kCFURLAddedToDirectoryDateKey');

  CFStringRef get kCFURLAddedToDirectoryDateKey =>
      _kCFURLAddedToDirectoryDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLQuarantinePropertiesKey =
      _lookup<CFStringRef>('kCFURLQuarantinePropertiesKey');

  CFStringRef get kCFURLQuarantinePropertiesKey =>
      _kCFURLQuarantinePropertiesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeKey =
      _lookup<CFStringRef>('kCFURLFileResourceTypeKey');

  CFStringRef get kCFURLFileResourceTypeKey => _kCFURLFileResourceTypeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeNamedPipe =
      _lookup<CFStringRef>('kCFURLFileResourceTypeNamedPipe');

  CFStringRef get kCFURLFileResourceTypeNamedPipe =>
      _kCFURLFileResourceTypeNamedPipe.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeCharacterSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeCharacterSpecial');

  CFStringRef get kCFURLFileResourceTypeCharacterSpecial =>
      _kCFURLFileResourceTypeCharacterSpecial.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeDirectory =
      _lookup<CFStringRef>('kCFURLFileResourceTypeDirectory');

  CFStringRef get kCFURLFileResourceTypeDirectory =>
      _kCFURLFileResourceTypeDirectory.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeBlockSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeBlockSpecial');

  CFStringRef get kCFURLFileResourceTypeBlockSpecial =>
      _kCFURLFileResourceTypeBlockSpecial.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeRegular =
      _lookup<CFStringRef>('kCFURLFileResourceTypeRegular');

  CFStringRef get kCFURLFileResourceTypeRegular =>
      _kCFURLFileResourceTypeRegular.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSymbolicLink =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSymbolicLink');

  CFStringRef get kCFURLFileResourceTypeSymbolicLink =>
      _kCFURLFileResourceTypeSymbolicLink.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSocket =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSocket');

  CFStringRef get kCFURLFileResourceTypeSocket =>
      _kCFURLFileResourceTypeSocket.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeUnknown =
      _lookup<CFStringRef>('kCFURLFileResourceTypeUnknown');

  CFStringRef get kCFURLFileResourceTypeUnknown =>
      _kCFURLFileResourceTypeUnknown.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSizeKey =
      _lookup<CFStringRef>('kCFURLFileSizeKey');

  CFStringRef get kCFURLFileSizeKey => _kCFURLFileSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLFileAllocatedSizeKey');

  CFStringRef get kCFURLFileAllocatedSizeKey =>
      _kCFURLFileAllocatedSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileSizeKey');

  CFStringRef get kCFURLTotalFileSizeKey => _kCFURLTotalFileSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileAllocatedSizeKey');

  CFStringRef get kCFURLTotalFileAllocatedSizeKey =>
      _kCFURLTotalFileAllocatedSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsAliasFileKey =
      _lookup<CFStringRef>('kCFURLIsAliasFileKey');

  CFStringRef get kCFURLIsAliasFileKey => _kCFURLIsAliasFileKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionKey =
      _lookup<CFStringRef>('kCFURLFileProtectionKey');

  CFStringRef get kCFURLFileProtectionKey => _kCFURLFileProtectionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionNone =
      _lookup<CFStringRef>('kCFURLFileProtectionNone');

  CFStringRef get kCFURLFileProtectionNone => _kCFURLFileProtectionNone.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionComplete =
      _lookup<CFStringRef>('kCFURLFileProtectionComplete');

  CFStringRef get kCFURLFileProtectionComplete =>
      _kCFURLFileProtectionComplete.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionCompleteUnlessOpen =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteUnlessOpen');

  CFStringRef get kCFURLFileProtectionCompleteUnlessOpen =>
      _kCFURLFileProtectionCompleteUnlessOpen.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<CFStringRef>(
          'kCFURLFileProtectionCompleteUntilFirstUserAuthentication');

  CFStringRef get kCFURLFileProtectionCompleteUntilFirstUserAuthentication =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteWhenUserInactive =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteWhenUserInactive');

  CFStringRef get kCFURLFileProtectionCompleteWhenUserInactive =>
      _kCFURLFileProtectionCompleteWhenUserInactive.value;

  late final ffi.Pointer<CFStringRef> _kCFURLDirectoryEntryCountKey =
      _lookup<CFStringRef>('kCFURLDirectoryEntryCountKey');

  CFStringRef get kCFURLDirectoryEntryCountKey =>
      _kCFURLDirectoryEntryCountKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeLocalizedFormatDescriptionKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedFormatDescriptionKey');

  CFStringRef get kCFURLVolumeLocalizedFormatDescriptionKey =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTotalCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeTotalCapacityKey');

  CFStringRef get kCFURLVolumeTotalCapacityKey =>
      _kCFURLVolumeTotalCapacityKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeAvailableCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityKey');

  CFStringRef get kCFURLVolumeAvailableCapacityKey =>
      _kCFURLVolumeAvailableCapacityKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityForImportantUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForImportantUsageKey =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<CFStringRef>(
          'kCFURLVolumeAvailableCapacityForOpportunisticUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeResourceCountKey =
      _lookup<CFStringRef>('kCFURLVolumeResourceCountKey');

  CFStringRef get kCFURLVolumeResourceCountKey =>
      _kCFURLVolumeResourceCountKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsPersistentIDsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsPersistentIDsKey');

  CFStringRef get kCFURLVolumeSupportsPersistentIDsKey =>
      _kCFURLVolumeSupportsPersistentIDsKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSymbolicLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSymbolicLinksKey');

  CFStringRef get kCFURLVolumeSupportsSymbolicLinksKey =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsHardLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsHardLinksKey');

  CFStringRef get kCFURLVolumeSupportsHardLinksKey =>
      _kCFURLVolumeSupportsHardLinksKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsJournalingKey');

  CFStringRef get kCFURLVolumeSupportsJournalingKey =>
      _kCFURLVolumeSupportsJournalingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeIsJournalingKey');

  CFStringRef get kCFURLVolumeIsJournalingKey =>
      _kCFURLVolumeIsJournalingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSparseFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSparseFilesKey');

  CFStringRef get kCFURLVolumeSupportsSparseFilesKey =>
      _kCFURLVolumeSupportsSparseFilesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsZeroRunsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsZeroRunsKey');

  CFStringRef get kCFURLVolumeSupportsZeroRunsKey =>
      _kCFURLVolumeSupportsZeroRunsKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCaseSensitiveNamesKey');

  CFStringRef get kCFURLVolumeSupportsCaseSensitiveNamesKey =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCasePreservedNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCasePreservedNamesKey');

  CFStringRef get kCFURLVolumeSupportsCasePreservedNamesKey =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRootDirectoryDatesKey');

  CFStringRef get kCFURLVolumeSupportsRootDirectoryDatesKey =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsVolumeSizesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsVolumeSizesKey');

  CFStringRef get kCFURLVolumeSupportsVolumeSizesKey =>
      _kCFURLVolumeSupportsVolumeSizesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRenamingKey');

  CFStringRef get kCFURLVolumeSupportsRenamingKey =>
      _kCFURLVolumeSupportsRenamingKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAdvisoryFileLockingKey');

  CFStringRef get kCFURLVolumeSupportsAdvisoryFileLockingKey =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsExtendedSecurityKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExtendedSecurityKey');

  CFStringRef get kCFURLVolumeSupportsExtendedSecurityKey =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsBrowsableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsBrowsableKey');

  CFStringRef get kCFURLVolumeIsBrowsableKey =>
      _kCFURLVolumeIsBrowsableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMaximumFileSizeKey =
      _lookup<CFStringRef>('kCFURLVolumeMaximumFileSizeKey');

  CFStringRef get kCFURLVolumeMaximumFileSizeKey =>
      _kCFURLVolumeMaximumFileSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEjectableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEjectableKey');

  CFStringRef get kCFURLVolumeIsEjectableKey =>
      _kCFURLVolumeIsEjectableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRemovableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRemovableKey');

  CFStringRef get kCFURLVolumeIsRemovableKey =>
      _kCFURLVolumeIsRemovableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsInternalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsInternalKey');

  CFStringRef get kCFURLVolumeIsInternalKey => _kCFURLVolumeIsInternalKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsAutomountedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsAutomountedKey');

  CFStringRef get kCFURLVolumeIsAutomountedKey =>
      _kCFURLVolumeIsAutomountedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsLocalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsLocalKey');

  CFStringRef get kCFURLVolumeIsLocalKey => _kCFURLVolumeIsLocalKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsReadOnlyKey =
      _lookup<CFStringRef>('kCFURLVolumeIsReadOnlyKey');

  CFStringRef get kCFURLVolumeIsReadOnlyKey => _kCFURLVolumeIsReadOnlyKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeCreationDateKey =
      _lookup<CFStringRef>('kCFURLVolumeCreationDateKey');

  CFStringRef get kCFURLVolumeCreationDateKey =>
      _kCFURLVolumeCreationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLForRemountingKey =
      _lookup<CFStringRef>('kCFURLVolumeURLForRemountingKey');

  CFStringRef get kCFURLVolumeURLForRemountingKey =>
      _kCFURLVolumeURLForRemountingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeUUIDStringKey =
      _lookup<CFStringRef>('kCFURLVolumeUUIDStringKey');

  CFStringRef get kCFURLVolumeUUIDStringKey => _kCFURLVolumeUUIDStringKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeNameKey');

  CFStringRef get kCFURLVolumeNameKey => _kCFURLVolumeNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedNameKey');

  CFStringRef get kCFURLVolumeLocalizedNameKey =>
      _kCFURLVolumeLocalizedNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEncryptedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEncryptedKey');

  CFStringRef get kCFURLVolumeIsEncryptedKey =>
      _kCFURLVolumeIsEncryptedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRootFileSystemKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRootFileSystemKey');

  CFStringRef get kCFURLVolumeIsRootFileSystemKey =>
      _kCFURLVolumeIsRootFileSystemKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsCompressionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCompressionKey');

  CFStringRef get kCFURLVolumeSupportsCompressionKey =>
      _kCFURLVolumeSupportsCompressionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileCloningKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileCloningKey');

  CFStringRef get kCFURLVolumeSupportsFileCloningKey =>
      _kCFURLVolumeSupportsFileCloningKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSwapRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSwapRenamingKey');

  CFStringRef get kCFURLVolumeSupportsSwapRenamingKey =>
      _kCFURLVolumeSupportsSwapRenamingKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsExclusiveRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExclusiveRenamingKey');

  CFStringRef get kCFURLVolumeSupportsExclusiveRenamingKey =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsImmutableFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsImmutableFilesKey');

  CFStringRef get kCFURLVolumeSupportsImmutableFilesKey =>
      _kCFURLVolumeSupportsImmutableFilesKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAccessPermissionsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAccessPermissionsKey');

  CFStringRef get kCFURLVolumeSupportsAccessPermissionsKey =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileProtectionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileProtectionKey');

  CFStringRef get kCFURLVolumeSupportsFileProtectionKey =>
      _kCFURLVolumeSupportsFileProtectionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTypeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeTypeNameKey');

  CFStringRef get kCFURLVolumeTypeNameKey => _kCFURLVolumeTypeNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSubtypeKey =
      _lookup<CFStringRef>('kCFURLVolumeSubtypeKey');

  CFStringRef get kCFURLVolumeSubtypeKey => _kCFURLVolumeSubtypeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMountFromLocationKey =
      _lookup<CFStringRef>('kCFURLVolumeMountFromLocationKey');

  CFStringRef get kCFURLVolumeMountFromLocationKey =>
      _kCFURLVolumeMountFromLocationKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUbiquitousItemKey =
      _lookup<CFStringRef>('kCFURLIsUbiquitousItemKey');

  CFStringRef get kCFURLIsUbiquitousItemKey => _kCFURLIsUbiquitousItemKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemHasUnresolvedConflictsKey');

  CFStringRef get kCFURLUbiquitousItemHasUnresolvedConflictsKey =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadedKey =>
      _kCFURLUbiquitousItemIsDownloadedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadingKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadingKey =>
      _kCFURLUbiquitousItemIsDownloadingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadedKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadedKey =>
      _kCFURLUbiquitousItemIsUploadedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadingKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadingKey =>
      _kCFURLUbiquitousItemIsUploadingKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemPercentDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentDownloadedKey =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemPercentUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentUploadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentUploadedKey =>
      _kCFURLUbiquitousItemPercentUploadedKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusKey =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemDownloadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingErrorKey =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemUploadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemUploadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemUploadingErrorKey =>
      _kCFURLUbiquitousItemUploadingErrorKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsExcludedFromSyncKey');

  CFStringRef get kCFURLUbiquitousItemIsExcludedFromSyncKey =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<CFStringRef>(
          'kCFURLUbiquitousItemDownloadingStatusNotDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusNotDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusCurrent');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusCurrent =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value;

  CFDataRef CFURLCreateBookmarkData(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFURLBookmarkCreationOptions options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData(
      allocator,
      url,
      options.value,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFURLRef,
              CFOptionFlags,
              CFArrayRef,
              CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData = _CFURLCreateBookmarkDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef, CFURLRef,
          ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    CFURLBookmarkResolutionOptions options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData(
      allocator,
      bookmark,
      options.value,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData =
      _CFURLCreateByResolvingBookmarkDataPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>>(
      'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData =
      _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFilePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile =
      _CFURLCreateBookmarkDataFromFilePtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFilePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile =
      _CFURLWriteBookmarkDataToFilePtr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecordPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord =
      _CFURLCreateBookmarkDataFromAliasRecordPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource =
      _CFURLStartAccessingSecurityScopedResourcePtr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource =
      _CFURLStopAccessingSecurityScopedResourcePtr.asFunction<
          void Function(CFURLRef)>();

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopDefaultMode =
      _lookup<CFRunLoopMode>('kCFRunLoopDefaultMode');

  CFRunLoopMode get kCFRunLoopDefaultMode => _kCFRunLoopDefaultMode.value;

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopCommonModes =
      _lookup<CFRunLoopMode>('kCFRunLoopCommonModes');

  CFRunLoopMode get kCFRunLoopCommonModes => _kCFRunLoopCommonModes.value;

  int CFRunLoopGetTypeID() {
    return _CFRunLoopGetTypeID();
  }

  late final _CFRunLoopGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID =
      _CFRunLoopGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGetMain();
  }

  late final _CFRunLoopGetMainPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain =
      _CFRunLoopGetMainPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentModePtr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode = _CFRunLoopCopyCurrentModePtr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes =
      _CFRunLoopCopyAllModesPtr.asFunction<CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonModePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode = _CFRunLoopAddCommonModePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDatePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate = _CFRunLoopGetNextTimerFireDatePtr
      .asFunction<double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun() {
    return _CFRunLoopRun();
  }

  late final _CFRunLoopRunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun = _CFRunLoopRunPtr.asFunction<void Function()>();

  CFRunLoopRunResult CFRunLoopRunInMode(
    CFRunLoopMode mode,
    DartCFTimeInterval seconds,
    DartBoolean returnAfterSourceHandled,
  ) {
    return CFRunLoopRunResult.fromValue(_CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    ));
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting(
      rl,
    );
  }

  late final _CFRunLoopIsWaitingPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting =
      _CFRunLoopIsWaitingPtr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp(
      rl,
    );
  }

  late final _CFRunLoopWakeUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp =
      _CFRunLoopWakeUpPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop(
      rl,
    );
  }

  late final _CFRunLoopStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop =
      _CFRunLoopStopPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopPerformBlock(
    CFRunLoopRef rl,
    CFTypeRef mode,
    ObjCBlock_ffiVoid block,
  ) {
    return _CFRunLoopPerformBlock(
      rl,
      mode,
      block.pointer,
    );
  }

  late final _CFRunLoopPerformBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFTypeRef,
              ffi.Pointer<objc.ObjCBlock>)>>('CFRunLoopPerformBlock');
  late final _CFRunLoopPerformBlock = _CFRunLoopPerformBlockPtr.asFunction<
      void Function(CFRunLoopRef, CFTypeRef, ffi.Pointer<objc.ObjCBlock>)>();

  int CFRunLoopContainsSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource = _CFRunLoopContainsSourcePtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource = _CFRunLoopRemoveSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserverPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver =
      _CFRunLoopContainsObserverPtr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver = _CFRunLoopAddObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver = _CFRunLoopRemoveObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer = _CFRunLoopContainsTimerPtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer = _CFRunLoopAddTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer = _CFRunLoopRemoveTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID() {
    return _CFRunLoopSourceGetTypeID();
  }

  late final _CFRunLoopSourceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID =
      _CFRunLoopSourceGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate = _CFRunLoopSourceCreatePtr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder = _CFRunLoopSourceGetOrderPtr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate = _CFRunLoopSourceInvalidatePtr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid(
      source,
    );
  }

  late final _CFRunLoopSourceIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid =
      _CFRunLoopSourceIsValidPtr.asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext =
      _CFRunLoopSourceGetContextPtr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal(
      source,
    );
  }

  late final _CFRunLoopSourceSignalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal =
      _CFRunLoopSourceSignalPtr.asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID() {
    return _CFRunLoopObserverGetTypeID();
  }

  late final _CFRunLoopObserverGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID =
      _CFRunLoopObserverGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreatePtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate = _CFRunLoopObserverCreatePtr.asFunction<
      CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
          CFRunLoopObserverCallBack, ffi.Pointer<CFRunLoopObserverContext>)>();

  CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(
    CFAllocatorRef allocator,
    DartCFOptionFlags activities,
    DartBoolean repeats,
    DartCFIndex order,
    ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity block,
  ) {
    return _CFRunLoopObserverCreateWithHandler(
      allocator,
      activities,
      repeats,
      order,
      block.pointer,
    );
  }

  late final _CFRunLoopObserverCreateWithHandlerPtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(CFAllocatorRef, CFOptionFlags,
                  Boolean, CFIndex, ffi.Pointer<objc.ObjCBlock>)>>(
      'CFRunLoopObserverCreateWithHandler');
  late final _CFRunLoopObserverCreateWithHandler =
      _CFRunLoopObserverCreateWithHandlerPtr.asFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef, int, int, int, ffi.Pointer<objc.ObjCBlock>)>();

  int CFRunLoopObserverGetActivities(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivitiesPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities =
      _CFRunLoopObserverGetActivitiesPtr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat = _CFRunLoopObserverDoesRepeatPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder = _CFRunLoopObserverGetOrderPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate = _CFRunLoopObserverInvalidatePtr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid = _CFRunLoopObserverIsValidPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext =
      _CFRunLoopObserverGetContextPtr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID() {
    return _CFRunLoopTimerGetTypeID();
  }

  late final _CFRunLoopTimerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID =
      _CFRunLoopTimerGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate = _CFRunLoopTimerCreatePtr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(
    CFAllocatorRef allocator,
    DartCFTimeInterval fireDate,
    DartCFTimeInterval interval,
    DartCFOptionFlags flags,
    DartCFIndex order,
    ObjCBlock_ffiVoid_CFRunLoopTimerRef block,
  ) {
    return _CFRunLoopTimerCreateWithHandler(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      block.pointer,
    );
  }

  late final _CFRunLoopTimerCreateWithHandlerPtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<objc.ObjCBlock>)>>('CFRunLoopTimerCreateWithHandler');
  late final _CFRunLoopTimerCreateWithHandler =
      _CFRunLoopTimerCreateWithHandlerPtr.asFunction<
          CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
              ffi.Pointer<objc.ObjCBlock>)>();

  double CFRunLoopTimerGetNextFireDate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDatePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate = _CFRunLoopTimerGetNextFireDatePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate = _CFRunLoopTimerSetNextFireDatePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval(
      timer,
    );
  }

  late final _CFRunLoopTimerGetIntervalPtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval = _CFRunLoopTimerGetIntervalPtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat = _CFRunLoopTimerDoesRepeatPtr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder =
      _CFRunLoopTimerGetOrderPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate = _CFRunLoopTimerInvalidatePtr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid =
      _CFRunLoopTimerIsValidPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext =
      _CFRunLoopTimerGetContextPtr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerancePtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance = _CFRunLoopTimerGetTolerancePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance = _CFRunLoopTimerSetTolerancePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID() {
    return _CFSocketGetTypeID();
  }

  late final _CFSocketGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID =
      _CFSocketGetTypeIDPtr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate = _CFSocketCreatePtr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNativePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative =
      _CFSocketCreateWithNativePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature =
      _CFSocketCreateWithSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignaturePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature =
      _CFSocketCreateConnectedToSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  CFSocketError CFSocketSetAddress(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return CFSocketError.fromValue(_CFSocketSetAddress(
      s,
      address,
    ));
  }

  late final _CFSocketSetAddressPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSocketRef, CFDataRef)>>(
          'CFSocketSetAddress');
  late final _CFSocketSetAddress =
      _CFSocketSetAddressPtr.asFunction<int Function(CFSocketRef, CFDataRef)>();

  CFSocketError CFSocketConnectToAddress(
    CFSocketRef s,
    CFDataRef address,
    DartCFTimeInterval timeout,
  ) {
    return CFSocketError.fromValue(_CFSocketConnectToAddress(
      s,
      address,
      timeout,
    ));
  }

  late final _CFSocketConnectToAddressPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress = _CFSocketConnectToAddressPtr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate(
      s,
    );
  }

  late final _CFSocketInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate =
      _CFSocketInvalidatePtr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid(
      s,
    );
  }

  late final _CFSocketIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid =
      _CFSocketIsValidPtr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress(
      s,
    );
  }

  late final _CFSocketCopyAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress =
      _CFSocketCopyAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress(
      s,
    );
  }

  late final _CFSocketCopyPeerAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress =
      _CFSocketCopyPeerAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext(
      s,
      context,
    );
  }

  late final _CFSocketGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext = _CFSocketGetContextPtr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative(
      s,
    );
  }

  late final _CFSocketGetNativePtr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative =
      _CFSocketGetNativePtr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource =
      _CFSocketCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags(
      s,
    );
  }

  late final _CFSocketGetSocketFlagsPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags =
      _CFSocketGetSocketFlagsPtr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags =
      _CFSocketSetSocketFlagsPtr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks = _CFSocketDisableCallBacksPtr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks =
      _CFSocketEnableCallBacksPtr.asFunction<void Function(CFSocketRef, int)>();

  CFSocketError CFSocketSendData(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    DartCFTimeInterval timeout,
  ) {
    return CFSocketError.fromValue(_CFSocketSendData(
      s,
      address,
      data,
      timeout,
    ));
  }

  late final _CFSocketSendDataPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData = _CFSocketSendDataPtr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  CFSocketError CFSocketRegisterValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return CFSocketError.fromValue(_CFSocketRegisterValue(
      nameServerSignature,
      timeout,
      name,
      value,
    ));
  }

  late final _CFSocketRegisterValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue = _CFSocketRegisterValuePtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  CFSocketError CFSocketCopyRegisteredValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return CFSocketError.fromValue(_CFSocketCopyRegisteredValue(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    ));
  }

  late final _CFSocketCopyRegisteredValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue =
      _CFSocketCopyRegisteredValuePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  CFSocketError CFSocketRegisterSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return CFSocketError.fromValue(_CFSocketRegisterSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
    ));
  }

  late final _CFSocketRegisterSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
                  CFStringRef, ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature =
      _CFSocketRegisterSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  CFSocketError CFSocketCopyRegisteredSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return CFSocketError.fromValue(_CFSocketCopyRegisteredSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    ));
  }

  late final _CFSocketCopyRegisteredSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature =
      _CFSocketCopyRegisteredSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  CFSocketError CFSocketUnregister(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
  ) {
    return CFSocketError.fromValue(_CFSocketUnregister(
      nameServerSignature,
      timeout,
      name,
    ));
  }

  late final _CFSocketUnregisterPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister = _CFSocketUnregisterPtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber =
      _CFSocketSetDefaultNameRegistryPortNumberPtr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber() {
    return _CFSocketGetDefaultNameRegistryPortNumber();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber =
      _CFSocketGetDefaultNameRegistryPortNumberPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCFSocketCommandKey =
      _lookup<CFStringRef>('kCFSocketCommandKey');

  CFStringRef get kCFSocketCommandKey => _kCFSocketCommandKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketNameKey =
      _lookup<CFStringRef>('kCFSocketNameKey');

  CFStringRef get kCFSocketNameKey => _kCFSocketNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketValueKey =
      _lookup<CFStringRef>('kCFSocketValueKey');

  CFStringRef get kCFSocketValueKey => _kCFSocketValueKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketResultKey =
      _lookup<CFStringRef>('kCFSocketResultKey');

  CFStringRef get kCFSocketResultKey => _kCFSocketResultKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketErrorKey =
      _lookup<CFStringRef>('kCFSocketErrorKey');

  CFStringRef get kCFSocketErrorKey => _kCFSocketErrorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRegisterCommand =
      _lookup<CFStringRef>('kCFSocketRegisterCommand');

  CFStringRef get kCFSocketRegisterCommand => _kCFSocketRegisterCommand.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRetrieveCommand =
      _lookup<CFStringRef>('kCFSocketRetrieveCommand');

  CFStringRef get kCFSocketRetrieveCommand => _kCFSocketRetrieveCommand.value;

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistbulkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Uint64)>>('getattrlistbulk');
  late final _getattrlistbulk = _getattrlistbulkPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedLong)>>('getattrlistat');
  late final _getattrlistat = _getattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Uint32)>>('setattrlistat');
  late final _setattrlistat = _setattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int freadlink(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _freadlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freadlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('freadlink');
  late final _freadlink =
      _freadlinkPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, uid_t, gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int linkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int readlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  void _exit(
    int arg0,
  ) {
    return __exit(
      arg0,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int access(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _access(
      arg0,
      arg1,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int alarm(
    int arg0,
  ) {
    return _alarm(
      arg0,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int chdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chdir(
      arg0,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int chown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int dup(
    int arg0,
  ) {
    return _dup(
      arg0,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int arg0,
    int arg1,
  ) {
    return _dup2(
      arg0,
      arg1,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execl(
      __path,
      __arg0,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execle(
      __path,
      __arg0,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execlp(
      __file,
      __arg0,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execve(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getcwd(
      arg0,
      arg1,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _getgroups(
      arg0,
      arg1,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int isatty(
    int arg0,
  ) {
    return _isatty(
      arg0,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int link(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _link(
      arg0,
      arg1,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Int, off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _pathconf(
      arg0,
      arg1,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int pipe(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _pipe(
      arg0,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rmdir(
      arg0,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, pid_t)>>('setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int sleep(
    int arg0,
  ) {
    return _sleep(
      arg0,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int sysconf(
    int arg0,
  ) {
    return _sysconf(
      arg0,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int tcgetpgrp(
    int arg0,
  ) {
    return _tcgetpgrp(
      arg0,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> ttyname(
    int arg0,
  ) {
    return _ttyname(
      arg0,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unlink(
      arg0,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int confstr(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _brk(
      arg0,
    );
  }

  late final _brkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('brk');
  late final _brk = _brkPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int chroot(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chroot(
      arg0,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _crypt(
      arg0,
      arg1,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void encrypt(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _encrypt(
      arg0,
      arg1,
    );
  }

  late final _encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('encrypt');
  late final _encrypt =
      _encryptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  int fchdir(
    int arg0,
  ) {
    return _fchdir(
      arg0,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getpass(
      arg0,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getwd(
      arg0,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int lchown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int nice(
    int arg0,
  ) {
    return _nice(
      arg0,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    return _sbrk(
      arg0,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t, gid_t)>>('setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, uid_t)>>('setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _truncate(
      arg0,
      arg1,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ualarm(
    int arg0,
    int arg1,
  ) {
    return _ualarm(
      arg0,
      arg1,
    );
  }

  late final _ualarmPtr =
      _lookup<ffi.NativeFunction<useconds_t Function(useconds_t, useconds_t)>>(
          'ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int arg0,
  ) {
    return _usleep(
      arg0,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  int fsync(
    int arg0,
  ) {
    return _fsync(
      arg0,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, uid_t, gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int gethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _gethostname(
      arg0,
      arg1,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int readlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int symlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _symlink(
      arg0,
      arg1,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<sigset_t> arg5,
  ) {
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<sigset_t>)>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
  ) {
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _accessx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<accessx_descriptor>, ffi.Size,
              ffi.Pointer<ffi.Int>, uid_t)>>('accessx_np');
  late final _accessx_np = _accessx_npPtr.asFunction<
      int Function(
          ffi.Pointer<accessx_descriptor>, int, ffi.Pointer<ffi.Int>, int)>();

  int acct(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _acct(
      arg0,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int add_profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _add_profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('add_profil');
  late final _add_profil = _add_profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  int execvP(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __searchpath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  late final _execvPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvP');
  late final _execvP = _execvPPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> fflagstostr(
    int arg0,
  ) {
    return _fflagstostr(
      arg0,
    );
  }

  late final _fflagstostrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'fflagstostr');
  late final _fflagstostr =
      _fflagstostrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  late final _getdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int getgrouplist(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getgrouplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('getgrouplist');
  late final _getgrouplist = _getgrouplistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int gethostuuid(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<timespec>)>>('gethostuuid');
  late final _gethostuuid = _gethostuuidPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<timespec>)>();

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getmode(
      arg0,
      arg1,
    );
  }

  late final _getmodePtr = _lookup<
          ffi.NativeFunction<mode_t Function(ffi.Pointer<ffi.Void>, mode_t)>>(
      'getmode');
  late final _getmode =
      _getmodePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int getpeereid(
    int arg0,
    ffi.Pointer<uid_t> arg1,
    ffi.Pointer<gid_t> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('getpeereid');
  late final _getpeereid = _getpeereidPtr
      .asFunction<int Function(int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int getsgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getsgroups_np');
  late final _getsgroups_np = _getsgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getwgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getwgroups_np');
  late final _getwgroups_np = _getwgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  int initgroups(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _initgroups(
      arg0,
      arg1,
    );
  }

  late final _initgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'initgroups');
  late final _initgroups =
      _initgroupsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int issetugid() {
    return _issetugid();
  }

  late final _issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('issetugid');
  late final _issetugid = _issetugidPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkdtemp(
      arg0,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mknod(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mknodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t, dev_t)>>('mknod');
  late final _mknod =
      _mknodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mkpath_np(
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpath_np(
      path,
      omode,
    );
  }

  late final _mkpath_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'mkpath_np');
  late final _mkpath_np =
      _mkpath_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkpathat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  late final _mkpathat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, mode_t)>>('mkpathat_np');
  late final _mkpathat_np = _mkpathat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkostemp(
    ffi.Pointer<ffi.Char> path,
    int oflags,
  ) {
    return _mkostemp(
      path,
      oflags,
    );
  }

  late final _mkostempPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkostemp');
  late final _mkostemp =
      _mkostempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkostemps(
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('mkostemps');
  late final _mkostemps =
      _mkostempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mkstemp_dprotected_np(
    ffi.Pointer<ffi.Char> path,
    int dpclass,
    int dpflags,
  ) {
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  late final _mkstemp_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkstemp_dprotected_np');
  late final _mkstemp_dprotected_np = _mkstemp_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> mkdtempat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  late final _mkdtempat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('mkdtempat_np');
  late final _mkdtempat_np = _mkdtempat_npPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
  ) {
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  late final _mkstempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mkstempsat_np');
  late final _mkstempsat_np = _mkstempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkostempsat_np');
  late final _mkostempsat_np = _mkostempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  late final _nfssvcPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'nfssvc');
  late final _nfssvc =
      _nfssvcPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_setugid_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, gid_t)>>(
          'pthread_setugid_np');
  late final _pthread_setugid_np =
      _pthread_setugid_npPtr.asFunction<int Function(int, int)>();

  int pthread_getugid_np(
    ffi.Pointer<uid_t> arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_getugid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('pthread_getugid_np');
  late final _pthread_getugid_np = _pthread_getugid_npPtr
      .asFunction<int Function(ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int reboot(
    int arg0,
  ) {
    return _reboot(
      arg0,
    );
  }

  late final _rebootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('reboot');
  late final _reboot = _rebootPtr.asFunction<int Function(int)>();

  int revoke(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _revoke(
      arg0,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _rcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('rcmd');
  late final _rcmd = _rcmdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
    int arg6,
  ) {
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _rcmd_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('rcmd_af');
  late final _rcmd_af = _rcmd_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int rresvport(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _rresvport(
      arg0,
    );
  }

  late final _rresvportPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'rresvport');
  late final _rresvport =
      _rresvportPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int rresvport_af(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  late final _rresvport_afPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'rresvport_af');
  late final _rresvport_af =
      _rresvport_afPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _iruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('iruserok');
  late final _iruserok = _iruserokPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _iruserok_saPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('iruserok_sa');
  late final _iruserok_sa = _iruserok_saPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ruserok(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ruserok');
  late final _ruserok = _ruserokPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  late final _setdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _setgroups(
      arg0,
      arg1,
    );
  }

  late final _setgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'setgroups');
  late final _setgroups =
      _setgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<void Function(int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sethostname(
      arg0,
      arg1,
    );
  }

  late final _sethostnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setlogin(
      arg0,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setmode(
      arg0,
    );
  }

  late final _setmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>>('setmode');
  late final _setmode = _setmodePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setrgid');
  late final _setrgid = _setrgidPtr.asFunction<int Function(int)>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setruid');
  late final _setruid = _setruidPtr.asFunction<int Function(int)>();

  int setsgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setsgroups_np');
  late final _setsgroups_np = _setsgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int setwgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setwgroups_np');
  late final _setwgroups_np = _setwgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  int strtofflags(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.UnsignedLong> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
  ) {
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strtofflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>)>>('strtofflags');
  late final _strtofflags = _strtofflagsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.UnsignedLong>)>();

  int swapon(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _swapon(
      arg0,
    );
  }

  late final _swaponPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'swapon');
  late final _swapon =
      _swaponPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int undelete(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _undelete(
      arg0,
    );
  }

  late final _undeletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'undelete');
  late final _undelete =
      _undeletePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unwhiteout(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unwhiteout(
      arg0,
    );
  }

  late final _unwhiteoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unwhiteout');
  late final _unwhiteout =
      _unwhiteoutPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int syscall(
    int arg0,
  ) {
    return _syscall(
      arg0,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fgetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fgetattrlist');
  late final _fgetattrlist = _fgetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fsetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fsetattrlist');
  late final _fsetattrlist = _fsetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('getattrlist');
  late final _getattrlist = _getattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('setattrlist');
  late final _setattrlist = _setattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int exchangedata(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _exchangedataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('exchangedata');
  late final _exchangedata = _exchangedataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
    int arg7,
  ) {
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _getdirentriesattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('getdirentriesattr');
  late final _getdirentriesattr = _getdirentriesattrPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          int)>();

  int searchfs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _searchfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<fssearchblock>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<searchstate>)>>('searchfs');
  late final _searchfs = _searchfsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<fssearchblock>,
          ffi.Pointer<ffi.UnsignedLong>, int, int, ffi.Pointer<searchstate>)>();

  int fsctl(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('fsctl');
  late final _fsctl = _fsctlPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>, int)>();

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ffsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedLong, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ffsctl');
  late final _ffsctl = _ffsctlPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _fsync_volume_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'fsync_volume_np');
  late final _fsync_volume_np =
      _fsync_volume_npPtr.asFunction<int Function(int, int)>();

  int sync_volume_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _sync_volume_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sync_volume_np');
  late final _sync_volume_np =
      _sync_volume_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _optreset = _lookup<ffi.Int>('optreset');

  int get optreset => _optreset.value;

  set optreset(int value) => _optreset.value = value;

  int open(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int openat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('openat');
  late final _openat =
      _openatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int creat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fcntl(
    int arg0,
    int arg1,
  ) {
    return _fcntl(
      arg0,
      arg1,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int openx_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    filesec_t arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, filesec_t)>>('openx_np');
  late final _openx_np = _openx_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, filesec_t)>();

  int open_dprotected_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('open_dprotected_np');
  late final _open_dprotected_np = _open_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int openat_dprotected_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _openat_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _openat_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('openat_dprotected_np');
  late final _openat_dprotected_np = _openat_dprotected_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int openat_authenticated_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _openat_authenticated_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _openat_authenticated_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('openat_authenticated_np');
  late final _openat_authenticated_np = _openat_authenticated_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int flock1(
    int arg0,
    int arg1,
  ) {
    return _flock1(
      arg0,
      arg1,
    );
  }

  late final _flock1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('flock');
  late final _flock1 = _flock1Ptr.asFunction<int Function(int, int)>();

  filesec_t filesec_init() {
    return _filesec_init();
  }

  late final _filesec_initPtr =
      _lookup<ffi.NativeFunction<filesec_t Function()>>('filesec_init');
  late final _filesec_init =
      _filesec_initPtr.asFunction<filesec_t Function()>();

  filesec_t filesec_dup(
    filesec_t arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dupPtr =
      _lookup<ffi.NativeFunction<filesec_t Function(filesec_t)>>('filesec_dup');
  late final _filesec_dup =
      _filesec_dupPtr.asFunction<filesec_t Function(filesec_t)>();

  void filesec_free(
    filesec_t arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(filesec_t)>>('filesec_free');
  late final _filesec_free =
      _filesec_freePtr.asFunction<void Function(filesec_t)>();

  int filesec_get_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('filesec_get_property');
  late final _filesec_get_property = _filesec_get_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_query_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_query_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>)>>('filesec_query_property');
  late final _filesec_query_property = _filesec_query_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Int>)>();

  int filesec_set_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('filesec_set_property');
  late final _filesec_set_property = _filesec_set_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_unset_property(
    filesec_t arg0,
    filesec_property_t arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1.value,
    );
  }

  late final _filesec_unset_propertyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(filesec_t, ffi.UnsignedInt)>>(
          'filesec_unset_property');
  late final _filesec_unset_property =
      _filesec_unset_propertyPtr.asFunction<int Function(filesec_t, int)>();

  int os_workgroup_copy_port(
    os_workgroup_t wg,
    ffi.Pointer<mach_port_t> mach_port_out,
  ) {
    return _os_workgroup_copy_port(
      wg,
      mach_port_out,
    );
  }

  late final _os_workgroup_copy_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_t,
              ffi.Pointer<mach_port_t>)>>('os_workgroup_copy_port');
  late final _os_workgroup_copy_port = _os_workgroup_copy_portPtr
      .asFunction<int Function(os_workgroup_t, ffi.Pointer<mach_port_t>)>();

  os_workgroup_t os_workgroup_create_with_port(
    ffi.Pointer<ffi.Char> name,
    int mach_port,
  ) {
    return _os_workgroup_create_with_port(
      name,
      mach_port,
    );
  }

  late final _os_workgroup_create_with_portPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>,
              mach_port_t)>>('os_workgroup_create_with_port');
  late final _os_workgroup_create_with_port = _os_workgroup_create_with_portPtr
      .asFunction<os_workgroup_t Function(ffi.Pointer<ffi.Char>, int)>();

  os_workgroup_t os_workgroup_create_with_workgroup(
    ffi.Pointer<ffi.Char> name,
    os_workgroup_t wg,
  ) {
    return _os_workgroup_create_with_workgroup(
      name,
      wg,
    );
  }

  late final _os_workgroup_create_with_workgroupPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>,
              os_workgroup_t)>>('os_workgroup_create_with_workgroup');
  late final _os_workgroup_create_with_workgroup =
      _os_workgroup_create_with_workgroupPtr.asFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>, os_workgroup_t)>();

  int os_workgroup_join(
    os_workgroup_t wg,
    os_workgroup_join_token_t token_out,
  ) {
    return _os_workgroup_join(
      wg,
      token_out,
    );
  }

  late final _os_workgroup_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              os_workgroup_t, os_workgroup_join_token_t)>>('os_workgroup_join');
  late final _os_workgroup_join = _os_workgroup_joinPtr
      .asFunction<int Function(os_workgroup_t, os_workgroup_join_token_t)>();

  void os_workgroup_leave(
    os_workgroup_t wg,
    os_workgroup_join_token_t token,
  ) {
    return _os_workgroup_leave(
      wg,
      token,
    );
  }

  late final _os_workgroup_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(os_workgroup_t,
              os_workgroup_join_token_t)>>('os_workgroup_leave');
  late final _os_workgroup_leave = _os_workgroup_leavePtr
      .asFunction<void Function(os_workgroup_t, os_workgroup_join_token_t)>();

  int os_workgroup_set_working_arena(
    os_workgroup_t wg,
    ffi.Pointer<ffi.Void> arena,
    int max_workers,
    os_workgroup_working_arena_destructor_t destructor,
  ) {
    return _os_workgroup_set_working_arena(
      wg,
      arena,
      max_workers,
      destructor,
    );
  }

  late final _os_workgroup_set_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(os_workgroup_t, ffi.Pointer<ffi.Void>,
                  ffi.Uint32, os_workgroup_working_arena_destructor_t)>>(
      'os_workgroup_set_working_arena');
  late final _os_workgroup_set_working_arena =
      _os_workgroup_set_working_arenaPtr.asFunction<
          int Function(os_workgroup_t, ffi.Pointer<ffi.Void>, int,
              os_workgroup_working_arena_destructor_t)>();

  ffi.Pointer<ffi.Void> os_workgroup_get_working_arena(
    os_workgroup_t wg,
    ffi.Pointer<os_workgroup_index> index_out,
  ) {
    return _os_workgroup_get_working_arena(
      wg,
      index_out,
    );
  }

  late final _os_workgroup_get_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  os_workgroup_t, ffi.Pointer<os_workgroup_index>)>>(
      'os_workgroup_get_working_arena');
  late final _os_workgroup_get_working_arena =
      _os_workgroup_get_working_arenaPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              os_workgroup_t, ffi.Pointer<os_workgroup_index>)>();

  void os_workgroup_cancel(
    os_workgroup_t wg,
  ) {
    return _os_workgroup_cancel(
      wg,
    );
  }

  late final _os_workgroup_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(os_workgroup_t)>>(
          'os_workgroup_cancel');
  late final _os_workgroup_cancel =
      _os_workgroup_cancelPtr.asFunction<void Function(os_workgroup_t)>();

  bool os_workgroup_testcancel(
    os_workgroup_t wg,
  ) {
    return _os_workgroup_testcancel(
      wg,
    );
  }

  late final _os_workgroup_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(os_workgroup_t)>>(
          'os_workgroup_testcancel');
  late final _os_workgroup_testcancel =
      _os_workgroup_testcancelPtr.asFunction<bool Function(os_workgroup_t)>();

  int os_workgroup_max_parallel_threads(
    os_workgroup_t wg,
    os_workgroup_mpt_attr_t attr,
  ) {
    return _os_workgroup_max_parallel_threads(
      wg,
      attr,
    );
  }

  late final _os_workgroup_max_parallel_threadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_t,
              os_workgroup_mpt_attr_t)>>('os_workgroup_max_parallel_threads');
  late final _os_workgroup_max_parallel_threads =
      _os_workgroup_max_parallel_threadsPtr
          .asFunction<int Function(os_workgroup_t, os_workgroup_mpt_attr_t)>();

  int os_workgroup_interval_start(
    os_workgroup_interval_t wg,
    int start,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_start(
      wg,
      start,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t, ffi.Uint64, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_start');
  late final _os_workgroup_interval_start =
      _os_workgroup_interval_startPtr.asFunction<
          int Function(os_workgroup_interval_t, int, int,
              os_workgroup_interval_data_t)>();

  int os_workgroup_interval_update(
    os_workgroup_interval_t wg,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_update(
      wg,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_update');
  late final _os_workgroup_interval_update =
      _os_workgroup_interval_updatePtr.asFunction<
          int Function(
              os_workgroup_interval_t, int, os_workgroup_interval_data_t)>();

  int os_workgroup_interval_finish(
    os_workgroup_interval_t wg,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_finish(
      wg,
      data,
    );
  }

  late final _os_workgroup_interval_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_finish');
  late final _os_workgroup_interval_finish =
      _os_workgroup_interval_finishPtr.asFunction<
          int Function(
              os_workgroup_interval_t, os_workgroup_interval_data_t)>();

  os_workgroup_parallel_t os_workgroup_parallel_create(
    ffi.Pointer<ffi.Char> name,
    os_workgroup_attr_t attr,
  ) {
    return _os_workgroup_parallel_create(
      name,
      attr,
    );
  }

  late final _os_workgroup_parallel_createPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_parallel_t Function(ffi.Pointer<ffi.Char>,
              os_workgroup_attr_t)>>('os_workgroup_parallel_create');
  late final _os_workgroup_parallel_create =
      _os_workgroup_parallel_createPtr.asFunction<
          os_workgroup_parallel_t Function(
              ffi.Pointer<ffi.Char>, os_workgroup_attr_t)>();

  int dispatch_time(
    int when,
    int delta,
  ) {
    return _dispatch_time(
      when,
      delta,
    );
  }

  late final _dispatch_timePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              dispatch_time_t, ffi.Int64)>>('dispatch_time');
  late final _dispatch_time =
      _dispatch_timePtr.asFunction<int Function(int, int)>();

  int dispatch_walltime(
    ffi.Pointer<timespec> when,
    int delta,
  ) {
    return _dispatch_walltime(
      when,
      delta,
    );
  }

  late final _dispatch_walltimePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              ffi.Pointer<timespec>, ffi.Int64)>>('dispatch_walltime');
  late final _dispatch_walltime = _dispatch_walltimePtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>();

  qos_class_t qos_class_self() {
    return qos_class_t.fromValue(_qos_class_self());
  }

  late final _qos_class_selfPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('qos_class_self');
  late final _qos_class_self = _qos_class_selfPtr.asFunction<int Function()>();

  qos_class_t qos_class_main() {
    return qos_class_t.fromValue(_qos_class_main());
  }

  late final _qos_class_mainPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('qos_class_main');
  late final _qos_class_main = _qos_class_mainPtr.asFunction<int Function()>();

  void dispatch_retain(
    dispatch_object_t object,
  ) {
    return _dispatch_retain(
      object,
    );
  }

  late final _dispatch_retainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_retain');
  late final _dispatch_retain =
      _dispatch_retainPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_release(
    dispatch_object_t object,
  ) {
    return _dispatch_release(
      object,
    );
  }

  late final _dispatch_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_release');
  late final _dispatch_release =
      _dispatch_releasePtr.asFunction<void Function(dispatch_object_t)>();

  ffi.Pointer<ffi.Void> dispatch_get_context(
    dispatch_object_t object,
  ) {
    return _dispatch_get_context(
      object,
    );
  }

  late final _dispatch_get_contextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(dispatch_object_t)>>(
      'dispatch_get_context');
  late final _dispatch_get_context = _dispatch_get_contextPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(dispatch_object_t)>();

  void dispatch_set_context(
    dispatch_object_t object,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _dispatch_set_context(
      object,
      context,
    );
  }

  late final _dispatch_set_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_set_context');
  late final _dispatch_set_context = _dispatch_set_contextPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Void>)>();

  void dispatch_set_finalizer_f(
    dispatch_object_t object,
    dispatch_function_t finalizer,
  ) {
    return _dispatch_set_finalizer_f(
      object,
      finalizer,
    );
  }

  late final _dispatch_set_finalizer_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_function_t)>>('dispatch_set_finalizer_f');
  late final _dispatch_set_finalizer_f = _dispatch_set_finalizer_fPtr
      .asFunction<void Function(dispatch_object_t, dispatch_function_t)>();

  void dispatch_activate(
    dispatch_object_t object,
  ) {
    return _dispatch_activate(
      object,
    );
  }

  late final _dispatch_activatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_activate');
  late final _dispatch_activate =
      _dispatch_activatePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_suspend(
    dispatch_object_t object,
  ) {
    return _dispatch_suspend(
      object,
    );
  }

  late final _dispatch_suspendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_suspend');
  late final _dispatch_suspend =
      _dispatch_suspendPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_resume(
    dispatch_object_t object,
  ) {
    return _dispatch_resume(
      object,
    );
  }

  late final _dispatch_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_resume');
  late final _dispatch_resume =
      _dispatch_resumePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_set_qos_class_floor(
    dispatch_object_t object,
    qos_class_t qos_class,
    int relative_priority,
  ) {
    return _dispatch_set_qos_class_floor(
      object,
      qos_class.value,
      relative_priority,
    );
  }

  late final _dispatch_set_qos_class_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, ffi.UnsignedInt,
              ffi.Int)>>('dispatch_set_qos_class_floor');
  late final _dispatch_set_qos_class_floor = _dispatch_set_qos_class_floorPtr
      .asFunction<void Function(dispatch_object_t, int, int)>();

  int dispatch_wait(
    ffi.Pointer<ffi.Void> object,
    int timeout,
  ) {
    return _dispatch_wait(
      object,
      timeout,
    );
  }

  late final _dispatch_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<ffi.Void>, dispatch_time_t)>>('dispatch_wait');
  late final _dispatch_wait =
      _dispatch_waitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  void dispatch_notify(
    ffi.Pointer<ffi.Void> object,
    dispatch_object_t queue,
    Dartdispatch_block_t notification_block,
  ) {
    return _dispatch_notify(
      object,
      queue,
      notification_block.pointer,
    );
  }

  late final _dispatch_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, dispatch_object_t,
              dispatch_block_t)>>('dispatch_notify');
  late final _dispatch_notify = _dispatch_notifyPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, dispatch_object_t, dispatch_block_t)>();

  void dispatch_cancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_cancel(
      object,
    );
  }

  late final _dispatch_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_cancel');
  late final _dispatch_cancel =
      _dispatch_cancelPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dispatch_testcancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_testcancel(
      object,
    );
  }

  late final _dispatch_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_testcancel');
  late final _dispatch_testcancel =
      _dispatch_testcancelPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_debug(
    dispatch_object_t object,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _dispatch_debug(
      object,
      message,
    );
  }

  late final _dispatch_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_object_t, ffi.Pointer<ffi.Char>)>>('dispatch_debug');
  late final _dispatch_debug = _dispatch_debugPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Char>)>();

  void dispatch_debugv(
    dispatch_object_t object,
    ffi.Pointer<ffi.Char> message,
    va_list ap,
  ) {
    return _dispatch_debugv(
      object,
      message,
      ap,
    );
  }

  late final _dispatch_debugvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, ffi.Pointer<ffi.Char>,
              va_list)>>('dispatch_debugv');
  late final _dispatch_debugv = _dispatch_debugvPtr.asFunction<
      void Function(dispatch_object_t, ffi.Pointer<ffi.Char>, va_list)>();

  void dispatch_async(
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_async(
      queue,
      block.pointer,
    );
  }

  late final _dispatch_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_async');
  late final _dispatch_async = _dispatch_asyncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_async_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_f');
  late final _dispatch_async_f = _dispatch_async_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_sync(
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_sync(
      queue,
      block.pointer,
    );
  }

  late final _dispatch_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_sync');
  late final _dispatch_sync = _dispatch_syncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_sync_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_sync_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_sync_f');
  late final _dispatch_sync_f = _dispatch_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_async_and_wait(
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_async_and_wait(
      queue,
      block.pointer,
    );
  }

  late final _dispatch_async_and_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_async_and_wait');
  late final _dispatch_async_and_wait = _dispatch_async_and_waitPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_async_and_wait_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_and_wait_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_and_wait_f');
  late final _dispatch_async_and_wait_f =
      _dispatch_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_apply(
    int iterations,
    dispatch_queue_t queue,
    ObjCBlock_ffiVoid_ffiSize block,
  ) {
    return _dispatch_apply(
      iterations,
      queue,
      block.pointer,
    );
  }

  late final _dispatch_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Size, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>>('dispatch_apply');
  late final _dispatch_apply = _dispatch_applyPtr.asFunction<
      void Function(int, dispatch_queue_t, ffi.Pointer<objc.ObjCBlock>)>();

  void dispatch_apply_f(
    int iterations,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> context, ffi.Size iteration)>>
        work,
  ) {
    return _dispatch_apply_f(
      iterations,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_apply_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Size,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void> context,
                          ffi.Size iteration)>>)>>('dispatch_apply_f');
  late final _dispatch_apply_f = _dispatch_apply_fPtr.asFunction<
      void Function(
          int,
          dispatch_queue_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> context, ffi.Size iteration)>>)>();

  dispatch_queue_t dispatch_get_current_queue() {
    return _dispatch_get_current_queue();
  }

  late final _dispatch_get_current_queuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function()>>(
          'dispatch_get_current_queue');
  late final _dispatch_get_current_queue =
      _dispatch_get_current_queuePtr.asFunction<dispatch_queue_t Function()>();

  late final ffi.Pointer<dispatch_queue_s> __dispatch_main_q =
      _lookup<dispatch_queue_s>('_dispatch_main_q');

  ffi.Pointer<dispatch_queue_s> get _dispatch_main_q => __dispatch_main_q;

  dispatch_queue_global_t dispatch_get_global_queue(
    int identifier,
    int flags,
  ) {
    return _dispatch_get_global_queue(
      identifier,
      flags,
    );
  }

  late final _dispatch_get_global_queuePtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_global_t Function(
              ffi.IntPtr, ffi.UintPtr)>>('dispatch_get_global_queue');
  late final _dispatch_get_global_queue = _dispatch_get_global_queuePtr
      .asFunction<dispatch_queue_global_t Function(int, int)>();

  late final ffi.Pointer<dispatch_queue_attr_s>
      __dispatch_queue_attr_concurrent =
      _lookup<dispatch_queue_attr_s>('_dispatch_queue_attr_concurrent');

  ffi.Pointer<dispatch_queue_attr_s> get _dispatch_queue_attr_concurrent =>
      __dispatch_queue_attr_concurrent;

  dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(
    dispatch_queue_attr_t attr,
  ) {
    return _dispatch_queue_attr_make_initially_inactive(
      attr,
    );
  }

  late final _dispatch_queue_attr_make_initially_inactivePtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(dispatch_queue_attr_t)>>(
      'dispatch_queue_attr_make_initially_inactive');
  late final _dispatch_queue_attr_make_initially_inactive =
      _dispatch_queue_attr_make_initially_inactivePtr
          .asFunction<dispatch_queue_attr_t Function(dispatch_queue_attr_t)>();

  dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(
    dispatch_queue_attr_t attr,
    dispatch_autorelease_frequency_t frequency,
  ) {
    return _dispatch_queue_attr_make_with_autorelease_frequency(
      attr,
      frequency.value,
    );
  }

  late final _dispatch_queue_attr_make_with_autorelease_frequencyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(
                  dispatch_queue_attr_t, ffi.UnsignedLong)>>(
      'dispatch_queue_attr_make_with_autorelease_frequency');
  late final _dispatch_queue_attr_make_with_autorelease_frequency =
      _dispatch_queue_attr_make_with_autorelease_frequencyPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int)>();

  dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(
    dispatch_queue_attr_t attr,
    qos_class_t qos_class,
    int relative_priority,
  ) {
    return _dispatch_queue_attr_make_with_qos_class(
      attr,
      qos_class.value,
      relative_priority,
    );
  }

  late final _dispatch_queue_attr_make_with_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, ffi.UnsignedInt,
              ffi.Int)>>('dispatch_queue_attr_make_with_qos_class');
  late final _dispatch_queue_attr_make_with_qos_class =
      _dispatch_queue_attr_make_with_qos_classPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int, int)>();

  dispatch_queue_t dispatch_queue_create_with_target(
    ffi.Pointer<ffi.Char> label,
    dispatch_queue_attr_t attr,
    dispatch_queue_t target,
  ) {
    return _dispatch_queue_create_with_target(
      label,
      attr,
      target,
    );
  }

  late final _dispatch_queue_create_with_targetPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(
              ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t,
              dispatch_queue_t)>>('dispatch_queue_create_with_target');
  late final _dispatch_queue_create_with_target =
      _dispatch_queue_create_with_targetPtr.asFunction<
          dispatch_queue_t Function(ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t, dispatch_queue_t)>();

  dispatch_queue_t dispatch_queue_create(
    ffi.Pointer<ffi.Char> label,
    dispatch_queue_attr_t attr,
  ) {
    return _dispatch_queue_create(
      label,
      attr,
    );
  }

  late final _dispatch_queue_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t)>>('dispatch_queue_create');
  late final _dispatch_queue_create = _dispatch_queue_createPtr.asFunction<
      dispatch_queue_t Function(
          ffi.Pointer<ffi.Char>, dispatch_queue_attr_t)>();

  ffi.Pointer<ffi.Char> dispatch_queue_get_label(
    dispatch_queue_t queue,
  ) {
    return _dispatch_queue_get_label(
      queue,
    );
  }

  late final _dispatch_queue_get_labelPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dispatch_queue_t)>>(
      'dispatch_queue_get_label');
  late final _dispatch_queue_get_label = _dispatch_queue_get_labelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(dispatch_queue_t)>();

  qos_class_t dispatch_queue_get_qos_class(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Int> relative_priority_ptr,
  ) {
    return qos_class_t.fromValue(_dispatch_queue_get_qos_class(
      queue,
      relative_priority_ptr,
    ));
  }

  late final _dispatch_queue_get_qos_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(dispatch_queue_t,
              ffi.Pointer<ffi.Int>)>>('dispatch_queue_get_qos_class');
  late final _dispatch_queue_get_qos_class = _dispatch_queue_get_qos_classPtr
      .asFunction<int Function(dispatch_queue_t, ffi.Pointer<ffi.Int>)>();

  void dispatch_set_target_queue(
    dispatch_object_t object,
    dispatch_queue_t queue,
  ) {
    return _dispatch_set_target_queue(
      object,
      queue,
    );
  }

  late final _dispatch_set_target_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_queue_t)>>('dispatch_set_target_queue');
  late final _dispatch_set_target_queue = _dispatch_set_target_queuePtr
      .asFunction<void Function(dispatch_object_t, dispatch_queue_t)>();

  void dispatch_main() {
    return _dispatch_main();
  }

  late final _dispatch_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dispatch_main');
  late final _dispatch_main = _dispatch_mainPtr.asFunction<void Function()>();

  void dispatch_after(
    Dartdispatch_time_t when,
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_after(
      when,
      queue,
      block.pointer,
    );
  }

  late final _dispatch_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_time_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_after');
  late final _dispatch_after = _dispatch_afterPtr
      .asFunction<void Function(int, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_after_f(
    int when,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_after_f(
      when,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_after_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_time_t, dispatch_queue_t,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>>('dispatch_after_f');
  late final _dispatch_after_f = _dispatch_after_fPtr.asFunction<
      void Function(
          int, dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async(
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_barrier_async(
      queue,
      block.pointer,
    );
  }

  late final _dispatch_barrier_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_barrier_async');
  late final _dispatch_barrier_async = _dispatch_barrier_asyncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_barrier_async_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_f');
  late final _dispatch_barrier_async_f =
      _dispatch_barrier_async_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_sync(
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_barrier_sync(
      queue,
      block.pointer,
    );
  }

  late final _dispatch_barrier_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_barrier_sync');
  late final _dispatch_barrier_sync = _dispatch_barrier_syncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_barrier_sync_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_sync_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_sync_f');
  late final _dispatch_barrier_sync_f = _dispatch_barrier_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async_and_wait(
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_barrier_async_and_wait(
      queue,
      block.pointer,
    );
  }

  late final _dispatch_barrier_async_and_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t,
              dispatch_block_t)>>('dispatch_barrier_async_and_wait');
  late final _dispatch_barrier_async_and_wait =
      _dispatch_barrier_async_and_waitPtr
          .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_barrier_async_and_wait_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_and_wait_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_and_wait_f');
  late final _dispatch_barrier_async_and_wait_f =
      _dispatch_barrier_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_queue_set_specific(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t destructor,
  ) {
    return _dispatch_queue_set_specific(
      queue,
      key,
      context,
      destructor,
    );
  }

  late final _dispatch_queue_set_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_queue_set_specific');
  late final _dispatch_queue_set_specific =
      _dispatch_queue_set_specificPtr.asFunction<
          void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  ffi.Pointer<ffi.Void> dispatch_queue_get_specific(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_queue_get_specific(
      queue,
      key,
    );
  }

  late final _dispatch_queue_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(dispatch_queue_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_queue_get_specific');
  late final _dispatch_queue_get_specific =
      _dispatch_queue_get_specificPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> dispatch_get_specific(
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_get_specific(
      key,
    );
  }

  late final _dispatch_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('dispatch_get_specific');
  late final _dispatch_get_specific = _dispatch_get_specificPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_assert_queue(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue(
      queue,
    );
  }

  late final _dispatch_assert_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue');
  late final _dispatch_assert_queue =
      _dispatch_assert_queuePtr.asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_barrier(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_barrier(
      queue,
    );
  }

  late final _dispatch_assert_queue_barrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_barrier');
  late final _dispatch_assert_queue_barrier = _dispatch_assert_queue_barrierPtr
      .asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_not(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_not(
      queue,
    );
  }

  late final _dispatch_assert_queue_notPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_not');
  late final _dispatch_assert_queue_not = _dispatch_assert_queue_notPtr
      .asFunction<void Function(dispatch_queue_t)>();

  Dartdispatch_block_t dispatch_block_create(
    dispatch_block_flags_t flags,
    Dartdispatch_block_t block,
  ) {
    return ObjCBlock_ffiVoid.castFromPointer(
        _dispatch_block_create(
          flags.value,
          block.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_block_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_block_t Function(
              ffi.UnsignedLong, dispatch_block_t)>>('dispatch_block_create');
  late final _dispatch_block_create = _dispatch_block_createPtr
      .asFunction<dispatch_block_t Function(int, dispatch_block_t)>();

  Dartdispatch_block_t dispatch_block_create_with_qos_class(
    dispatch_block_flags_t flags,
    qos_class_t qos_class,
    int relative_priority,
    Dartdispatch_block_t block,
  ) {
    return ObjCBlock_ffiVoid.castFromPointer(
        _dispatch_block_create_with_qos_class(
          flags.value,
          qos_class.value,
          relative_priority,
          block.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_block_create_with_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_block_t Function(ffi.UnsignedLong, ffi.UnsignedInt, ffi.Int,
              dispatch_block_t)>>('dispatch_block_create_with_qos_class');
  late final _dispatch_block_create_with_qos_class =
      _dispatch_block_create_with_qos_classPtr.asFunction<
          dispatch_block_t Function(int, int, int, dispatch_block_t)>();

  void dispatch_block_perform(
    dispatch_block_flags_t flags,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_block_perform(
      flags.value,
      block.pointer,
    );
  }

  late final _dispatch_block_performPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedLong, dispatch_block_t)>>('dispatch_block_perform');
  late final _dispatch_block_perform = _dispatch_block_performPtr
      .asFunction<void Function(int, dispatch_block_t)>();

  int dispatch_block_wait(
    Dartdispatch_block_t block,
    Dartdispatch_time_t timeout,
  ) {
    return _dispatch_block_wait(
      block.pointer,
      timeout,
    );
  }

  late final _dispatch_block_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              dispatch_block_t, dispatch_time_t)>>('dispatch_block_wait');
  late final _dispatch_block_wait =
      _dispatch_block_waitPtr.asFunction<int Function(dispatch_block_t, int)>();

  void dispatch_block_notify(
    Dartdispatch_block_t block,
    dispatch_queue_t queue,
    Dartdispatch_block_t notification_block,
  ) {
    return _dispatch_block_notify(
      block.pointer,
      queue,
      notification_block.pointer,
    );
  }

  late final _dispatch_block_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_block_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_block_notify');
  late final _dispatch_block_notify = _dispatch_block_notifyPtr.asFunction<
      void Function(dispatch_block_t, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_block_cancel(
    Dartdispatch_block_t block,
  ) {
    return _dispatch_block_cancel(
      block.pointer,
    );
  }

  late final _dispatch_block_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_block_t)>>(
          'dispatch_block_cancel');
  late final _dispatch_block_cancel =
      _dispatch_block_cancelPtr.asFunction<void Function(dispatch_block_t)>();

  int dispatch_block_testcancel(
    Dartdispatch_block_t block,
  ) {
    return _dispatch_block_testcancel(
      block.pointer,
    );
  }

  late final _dispatch_block_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_block_t)>>(
          'dispatch_block_testcancel');
  late final _dispatch_block_testcancel = _dispatch_block_testcancelPtr
      .asFunction<int Function(dispatch_block_t)>();

  late final ffi.Pointer<security_token_t> _KERNEL_SECURITY_TOKEN =
      _lookup<security_token_t>('KERNEL_SECURITY_TOKEN');

  security_token_t get KERNEL_SECURITY_TOKEN => _KERNEL_SECURITY_TOKEN.ref;

  late final ffi.Pointer<audit_token_t> _KERNEL_AUDIT_TOKEN =
      _lookup<audit_token_t>('KERNEL_AUDIT_TOKEN');

  audit_token_t get KERNEL_AUDIT_TOKEN => _KERNEL_AUDIT_TOKEN.ref;

  int mach_msg_overwrite(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
    ffi.Pointer<mach_msg_header_t> rcv_msg,
    int rcv_limit,
  ) {
    return _mach_msg_overwrite(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
      rcv_msg,
      rcv_limit,
    );
  }

  late final _mach_msg_overwritePtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t,
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_size_t)>>('mach_msg_overwrite');
  late final _mach_msg_overwrite = _mach_msg_overwritePtr.asFunction<
      int Function(ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int,
          ffi.Pointer<mach_msg_header_t>, int)>();

  int mach_msg(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
  ) {
    return _mach_msg(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
    );
  }

  late final _mach_msgPtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t)>>('mach_msg');
  late final _mach_msg = _mach_msgPtr.asFunction<
      int Function(
          ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int)>();

  int mach_voucher_deallocate(
    int voucher,
  ) {
    return _mach_voucher_deallocate(
      voucher,
    );
  }

  late final _mach_voucher_deallocatePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(mach_port_name_t)>>(
          'mach_voucher_deallocate');
  late final _mach_voucher_deallocate =
      _mach_voucher_deallocatePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_add =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_add');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_add =>
      __dispatch_source_type_data_add;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_or =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_or');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_or =>
      __dispatch_source_type_data_or;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_replace =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_replace');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_replace =>
      __dispatch_source_type_data_replace;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_send =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_send');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_send =>
      __dispatch_source_type_mach_send;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_recv =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_recv');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_recv =>
      __dispatch_source_type_mach_recv;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_memorypressure =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_memorypressure');

  ffi.Pointer<dispatch_source_type_s>
      get _dispatch_source_type_memorypressure =>
          __dispatch_source_type_memorypressure;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_proc =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_proc');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_proc =>
      __dispatch_source_type_proc;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_read =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_read');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_read =>
      __dispatch_source_type_read;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_signal =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_signal');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_signal =>
      __dispatch_source_type_signal;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_timer =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_timer');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_timer =>
      __dispatch_source_type_timer;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_vnode =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_vnode');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_vnode =>
      __dispatch_source_type_vnode;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_write =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_write');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_write =>
      __dispatch_source_type_write;

  dispatch_source_t dispatch_source_create(
    dispatch_source_type_t type,
    int handle,
    int mask,
    dispatch_queue_t queue,
  ) {
    return _dispatch_source_create(
      type,
      handle,
      mask,
      queue,
    );
  }

  late final _dispatch_source_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_source_t Function(dispatch_source_type_t, ffi.UintPtr,
              ffi.UintPtr, dispatch_queue_t)>>('dispatch_source_create');
  late final _dispatch_source_create = _dispatch_source_createPtr.asFunction<
      dispatch_source_t Function(
          dispatch_source_type_t, int, int, dispatch_queue_t)>();

  void dispatch_source_set_event_handler(
    dispatch_source_t source,
    Dartdispatch_block_t handler,
  ) {
    return _dispatch_source_set_event_handler(
      source,
      handler.pointer,
    );
  }

  late final _dispatch_source_set_event_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_block_t)>>('dispatch_source_set_event_handler');
  late final _dispatch_source_set_event_handler =
      _dispatch_source_set_event_handlerPtr
          .asFunction<void Function(dispatch_source_t, dispatch_block_t)>();

  void dispatch_source_set_event_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_event_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_event_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_event_handler_f');
  late final _dispatch_source_set_event_handler_f =
      _dispatch_source_set_event_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_set_cancel_handler(
    dispatch_source_t source,
    Dartdispatch_block_t handler,
  ) {
    return _dispatch_source_set_cancel_handler(
      source,
      handler.pointer,
    );
  }

  late final _dispatch_source_set_cancel_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_block_t)>>('dispatch_source_set_cancel_handler');
  late final _dispatch_source_set_cancel_handler =
      _dispatch_source_set_cancel_handlerPtr
          .asFunction<void Function(dispatch_source_t, dispatch_block_t)>();

  void dispatch_source_set_cancel_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_cancel_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_cancel_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_cancel_handler_f');
  late final _dispatch_source_set_cancel_handler_f =
      _dispatch_source_set_cancel_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_cancel(
    dispatch_source_t source,
  ) {
    return _dispatch_source_cancel(
      source,
    );
  }

  late final _dispatch_source_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_source_t)>>(
          'dispatch_source_cancel');
  late final _dispatch_source_cancel =
      _dispatch_source_cancelPtr.asFunction<void Function(dispatch_source_t)>();

  int dispatch_source_testcancel(
    dispatch_source_t source,
  ) {
    return _dispatch_source_testcancel(
      source,
    );
  }

  late final _dispatch_source_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_source_t)>>(
          'dispatch_source_testcancel');
  late final _dispatch_source_testcancel = _dispatch_source_testcancelPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_handle(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_handle(
      source,
    );
  }

  late final _dispatch_source_get_handlePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(dispatch_source_t)>>(
          'dispatch_source_get_handle');
  late final _dispatch_source_get_handle = _dispatch_source_get_handlePtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_mask(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_mask(
      source,
    );
  }

  late final _dispatch_source_get_maskPtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(dispatch_source_t)>>(
          'dispatch_source_get_mask');
  late final _dispatch_source_get_mask = _dispatch_source_get_maskPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_data(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_data(
      source,
    );
  }

  late final _dispatch_source_get_dataPtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(dispatch_source_t)>>(
          'dispatch_source_get_data');
  late final _dispatch_source_get_data = _dispatch_source_get_dataPtr
      .asFunction<int Function(dispatch_source_t)>();

  void dispatch_source_merge_data(
    dispatch_source_t source,
    int value,
  ) {
    return _dispatch_source_merge_data(
      source,
      value,
    );
  }

  late final _dispatch_source_merge_dataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(dispatch_source_t, ffi.UintPtr)>>(
      'dispatch_source_merge_data');
  late final _dispatch_source_merge_data = _dispatch_source_merge_dataPtr
      .asFunction<void Function(dispatch_source_t, int)>();

  void dispatch_source_set_timer(
    dispatch_source_t source,
    int start,
    int interval,
    int leeway,
  ) {
    return _dispatch_source_set_timer(
      source,
      start,
      interval,
      leeway,
    );
  }

  late final _dispatch_source_set_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t, dispatch_time_t, ffi.Uint64,
              ffi.Uint64)>>('dispatch_source_set_timer');
  late final _dispatch_source_set_timer = _dispatch_source_set_timerPtr
      .asFunction<void Function(dispatch_source_t, int, int, int)>();

  void dispatch_source_set_registration_handler(
    dispatch_source_t source,
    Dartdispatch_block_t handler,
  ) {
    return _dispatch_source_set_registration_handler(
      source,
      handler.pointer,
    );
  }

  late final _dispatch_source_set_registration_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_block_t)>>('dispatch_source_set_registration_handler');
  late final _dispatch_source_set_registration_handler =
      _dispatch_source_set_registration_handlerPtr
          .asFunction<void Function(dispatch_source_t, dispatch_block_t)>();

  void dispatch_source_set_registration_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_registration_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_registration_handler_fPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_source_t, dispatch_function_t)>>(
      'dispatch_source_set_registration_handler_f');
  late final _dispatch_source_set_registration_handler_f =
      _dispatch_source_set_registration_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  dispatch_group_t dispatch_group_create() {
    return _dispatch_group_create();
  }

  late final _dispatch_group_createPtr =
      _lookup<ffi.NativeFunction<dispatch_group_t Function()>>(
          'dispatch_group_create');
  late final _dispatch_group_create =
      _dispatch_group_createPtr.asFunction<dispatch_group_t Function()>();

  void dispatch_group_async(
    dispatch_group_t group,
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_group_async(
      group,
      queue,
      block.pointer,
    );
  }

  late final _dispatch_group_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_group_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_group_async');
  late final _dispatch_group_async = _dispatch_group_asyncPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_group_async_f(
    dispatch_group_t group,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_async_f(
      group,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_group_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_async_f');
  late final _dispatch_group_async_f = _dispatch_group_async_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  int dispatch_group_wait(
    dispatch_group_t group,
    int timeout,
  ) {
    return _dispatch_group_wait(
      group,
      timeout,
    );
  }

  late final _dispatch_group_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              dispatch_group_t, dispatch_time_t)>>('dispatch_group_wait');
  late final _dispatch_group_wait =
      _dispatch_group_waitPtr.asFunction<int Function(dispatch_group_t, int)>();

  void dispatch_group_notify(
    dispatch_group_t group,
    dispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_group_notify(
      group,
      queue,
      block.pointer,
    );
  }

  late final _dispatch_group_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_group_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_group_notify');
  late final _dispatch_group_notify = _dispatch_group_notifyPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_group_notify_f(
    dispatch_group_t group,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_notify_f(
      group,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_group_notify_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_notify_f');
  late final _dispatch_group_notify_f = _dispatch_group_notify_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  void dispatch_group_enter(
    dispatch_group_t group,
  ) {
    return _dispatch_group_enter(
      group,
    );
  }

  late final _dispatch_group_enterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_enter');
  late final _dispatch_group_enter =
      _dispatch_group_enterPtr.asFunction<void Function(dispatch_group_t)>();

  void dispatch_group_leave(
    dispatch_group_t group,
  ) {
    return _dispatch_group_leave(
      group,
    );
  }

  late final _dispatch_group_leavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_leave');
  late final _dispatch_group_leave =
      _dispatch_group_leavePtr.asFunction<void Function(dispatch_group_t)>();

  dispatch_semaphore_t dispatch_semaphore_create(
    int value,
  ) {
    return _dispatch_semaphore_create(
      value,
    );
  }

  late final _dispatch_semaphore_createPtr =
      _lookup<ffi.NativeFunction<dispatch_semaphore_t Function(ffi.IntPtr)>>(
          'dispatch_semaphore_create');
  late final _dispatch_semaphore_create = _dispatch_semaphore_createPtr
      .asFunction<dispatch_semaphore_t Function(int)>();

  int dispatch_semaphore_wait(
    dispatch_semaphore_t dsema,
    int timeout,
  ) {
    return _dispatch_semaphore_wait(
      dsema,
      timeout,
    );
  }

  late final _dispatch_semaphore_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(dispatch_semaphore_t,
              dispatch_time_t)>>('dispatch_semaphore_wait');
  late final _dispatch_semaphore_wait = _dispatch_semaphore_waitPtr
      .asFunction<int Function(dispatch_semaphore_t, int)>();

  int dispatch_semaphore_signal(
    dispatch_semaphore_t dsema,
  ) {
    return _dispatch_semaphore_signal(
      dsema,
    );
  }

  late final _dispatch_semaphore_signalPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_semaphore_t)>>(
          'dispatch_semaphore_signal');
  late final _dispatch_semaphore_signal = _dispatch_semaphore_signalPtr
      .asFunction<int Function(dispatch_semaphore_t)>();

  void dispatch_once(
    ffi.Pointer<dispatch_once_t> predicate,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_once(
      predicate,
      block.pointer,
    );
  }

  late final _dispatch_oncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dispatch_once_t>,
              dispatch_block_t)>>('dispatch_once');
  late final _dispatch_once = _dispatch_oncePtr.asFunction<
      void Function(ffi.Pointer<dispatch_once_t>, dispatch_block_t)>();

  void dispatch_once_f(
    ffi.Pointer<dispatch_once_t> predicate,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t function,
  ) {
    return _dispatch_once_f(
      predicate,
      context,
      function,
    );
  }

  late final _dispatch_once_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_once_f');
  late final _dispatch_once_f = _dispatch_once_fPtr.asFunction<
      void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  late final ffi.Pointer<dispatch_data_s> __dispatch_data_empty =
      _lookup<dispatch_data_s>('_dispatch_data_empty');

  ffi.Pointer<dispatch_data_s> get _dispatch_data_empty =>
      __dispatch_data_empty;

  late final ffi.Pointer<dispatch_block_t> __dispatch_data_destructor_free =
      _lookup<dispatch_block_t>('_dispatch_data_destructor_free');

  dispatch_block_t get _dispatch_data_destructor_free =>
      __dispatch_data_destructor_free.value;

  set _dispatch_data_destructor_free(dispatch_block_t value) =>
      __dispatch_data_destructor_free.value = value;

  late final ffi.Pointer<dispatch_block_t> __dispatch_data_destructor_munmap =
      _lookup<dispatch_block_t>('_dispatch_data_destructor_munmap');

  dispatch_block_t get _dispatch_data_destructor_munmap =>
      __dispatch_data_destructor_munmap.value;

  set _dispatch_data_destructor_munmap(dispatch_block_t value) =>
      __dispatch_data_destructor_munmap.value = value;

  dispatch_data_t dispatch_data_create(
    ffi.Pointer<ffi.Void> buffer,
    int size,
    dispatch_queue_t queue,
    Dartdispatch_block_t destructor,
  ) {
    return _dispatch_data_create(
      buffer,
      size,
      queue,
      destructor.pointer,
    );
  }

  late final _dispatch_data_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(ffi.Pointer<ffi.Void>, ffi.Size,
              dispatch_queue_t, dispatch_block_t)>>('dispatch_data_create');
  late final _dispatch_data_create = _dispatch_data_createPtr.asFunction<
      dispatch_data_t Function(
          ffi.Pointer<ffi.Void>, int, dispatch_queue_t, dispatch_block_t)>();

  int dispatch_data_get_size(
    dispatch_data_t data,
  ) {
    return _dispatch_data_get_size(
      data,
    );
  }

  late final _dispatch_data_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(dispatch_data_t)>>(
          'dispatch_data_get_size');
  late final _dispatch_data_get_size =
      _dispatch_data_get_sizePtr.asFunction<int Function(dispatch_data_t)>();

  dispatch_data_t dispatch_data_create_map(
    dispatch_data_t data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer_ptr,
    ffi.Pointer<ffi.Size> size_ptr,
  ) {
    return _dispatch_data_create_map(
      data,
      buffer_ptr,
      size_ptr,
    );
  }

  late final _dispatch_data_create_mapPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('dispatch_data_create_map');
  late final _dispatch_data_create_map =
      _dispatch_data_create_mapPtr.asFunction<
          dispatch_data_t Function(dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  dispatch_data_t dispatch_data_create_concat(
    dispatch_data_t data1,
    dispatch_data_t data2,
  ) {
    return _dispatch_data_create_concat(
      data1,
      data2,
    );
  }

  late final _dispatch_data_create_concatPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t,
              dispatch_data_t)>>('dispatch_data_create_concat');
  late final _dispatch_data_create_concat = _dispatch_data_create_concatPtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, dispatch_data_t)>();

  dispatch_data_t dispatch_data_create_subrange(
    dispatch_data_t data,
    int offset,
    int length,
  ) {
    return _dispatch_data_create_subrange(
      data,
      offset,
      length,
    );
  }

  late final _dispatch_data_create_subrangePtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, ffi.Size,
              ffi.Size)>>('dispatch_data_create_subrange');
  late final _dispatch_data_create_subrange = _dispatch_data_create_subrangePtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, int, int)>();

  bool dispatch_data_apply(
    dispatch_data_t data,
    Dartdispatch_data_applier_t applier,
  ) {
    return _dispatch_data_apply(
      data,
      applier.pointer,
    );
  }

  late final _dispatch_data_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(dispatch_data_t,
              dispatch_data_applier_t)>>('dispatch_data_apply');
  late final _dispatch_data_apply = _dispatch_data_applyPtr
      .asFunction<bool Function(dispatch_data_t, dispatch_data_applier_t)>();

  dispatch_data_t dispatch_data_copy_region(
    dispatch_data_t data,
    int location,
    ffi.Pointer<ffi.Size> offset_ptr,
  ) {
    return _dispatch_data_copy_region(
      data,
      location,
      offset_ptr,
    );
  }

  late final _dispatch_data_copy_regionPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('dispatch_data_copy_region');
  late final _dispatch_data_copy_region =
      _dispatch_data_copy_regionPtr.asFunction<
          dispatch_data_t Function(
              dispatch_data_t, int, ffi.Pointer<ffi.Size>)>();

  void dispatch_read(
    Dartdispatch_fd_t fd,
    int length,
    dispatch_queue_t queue,
    ObjCBlock_ffiVoid_dispatchdatat_ffiInt handler,
  ) {
    return _dispatch_read(
      fd,
      length,
      queue,
      handler.pointer,
    );
  }

  late final _dispatch_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_fd_t, ffi.Size, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>>('dispatch_read');
  late final _dispatch_read = _dispatch_readPtr.asFunction<
      void Function(int, int, dispatch_queue_t, ffi.Pointer<objc.ObjCBlock>)>();

  void dispatch_write(
    Dartdispatch_fd_t fd,
    dispatch_data_t data,
    dispatch_queue_t queue,
    ObjCBlock_ffiVoid_dispatchdatat_ffiInt handler,
  ) {
    return _dispatch_write(
      fd,
      data,
      queue,
      handler.pointer,
    );
  }

  late final _dispatch_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_fd_t, dispatch_data_t, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>>('dispatch_write');
  late final _dispatch_write = _dispatch_writePtr.asFunction<
      void Function(int, dispatch_data_t, dispatch_queue_t,
          ffi.Pointer<objc.ObjCBlock>)>();

  dispatch_io_t dispatch_io_create(
    Dartdispatch_io_type_t type,
    Dartdispatch_fd_t fd,
    dispatch_queue_t queue,
    ObjCBlock_ffiVoid_ffiInt cleanup_handler,
  ) {
    return _dispatch_io_create(
      type,
      fd,
      queue,
      cleanup_handler.pointer,
    );
  }

  late final _dispatch_io_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_io_t Function(
              dispatch_io_type_t,
              dispatch_fd_t,
              dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>>('dispatch_io_create');
  late final _dispatch_io_create = _dispatch_io_createPtr.asFunction<
      dispatch_io_t Function(
          int, int, dispatch_queue_t, ffi.Pointer<objc.ObjCBlock>)>();

  dispatch_io_t dispatch_io_create_with_path(
    Dartdispatch_io_type_t type,
    ffi.Pointer<ffi.Char> path,
    int oflag,
    Dart__uint16_t mode,
    dispatch_queue_t queue,
    ObjCBlock_ffiVoid_ffiInt cleanup_handler,
  ) {
    return _dispatch_io_create_with_path(
      type,
      path,
      oflag,
      mode,
      queue,
      cleanup_handler.pointer,
    );
  }

  late final _dispatch_io_create_with_pathPtr = _lookup<
      ffi.NativeFunction<
          dispatch_io_t Function(
              dispatch_io_type_t,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              mode_t,
              dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>>('dispatch_io_create_with_path');
  late final _dispatch_io_create_with_path =
      _dispatch_io_create_with_pathPtr.asFunction<
          dispatch_io_t Function(int, ffi.Pointer<ffi.Char>, int, int,
              dispatch_queue_t, ffi.Pointer<objc.ObjCBlock>)>();

  dispatch_io_t dispatch_io_create_with_io(
    Dartdispatch_io_type_t type,
    dispatch_io_t io,
    dispatch_queue_t queue,
    ObjCBlock_ffiVoid_ffiInt cleanup_handler,
  ) {
    return _dispatch_io_create_with_io(
      type,
      io,
      queue,
      cleanup_handler.pointer,
    );
  }

  late final _dispatch_io_create_with_ioPtr = _lookup<
      ffi.NativeFunction<
          dispatch_io_t Function(
              dispatch_io_type_t,
              dispatch_io_t,
              dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>>('dispatch_io_create_with_io');
  late final _dispatch_io_create_with_io =
      _dispatch_io_create_with_ioPtr.asFunction<
          dispatch_io_t Function(int, dispatch_io_t, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlock>)>();

  void dispatch_io_read(
    dispatch_io_t channel,
    Dart__int64_t offset,
    int length,
    dispatch_queue_t queue,
    Dartdispatch_io_handler_t io_handler,
  ) {
    return _dispatch_io_read(
      channel,
      offset,
      length,
      queue,
      io_handler.pointer,
    );
  }

  late final _dispatch_io_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, off_t, ffi.Size, dispatch_queue_t,
              dispatch_io_handler_t)>>('dispatch_io_read');
  late final _dispatch_io_read = _dispatch_io_readPtr.asFunction<
      void Function(
          dispatch_io_t, int, int, dispatch_queue_t, dispatch_io_handler_t)>();

  void dispatch_io_write(
    dispatch_io_t channel,
    Dart__int64_t offset,
    dispatch_data_t data,
    dispatch_queue_t queue,
    Dartdispatch_io_handler_t io_handler,
  ) {
    return _dispatch_io_write(
      channel,
      offset,
      data,
      queue,
      io_handler.pointer,
    );
  }

  late final _dispatch_io_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, off_t, dispatch_data_t,
              dispatch_queue_t, dispatch_io_handler_t)>>('dispatch_io_write');
  late final _dispatch_io_write = _dispatch_io_writePtr.asFunction<
      void Function(dispatch_io_t, int, dispatch_data_t, dispatch_queue_t,
          dispatch_io_handler_t)>();

  void dispatch_io_close(
    dispatch_io_t channel,
    int flags,
  ) {
    return _dispatch_io_close(
      channel,
      flags,
    );
  }

  late final _dispatch_io_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_io_t, dispatch_io_close_flags_t)>>('dispatch_io_close');
  late final _dispatch_io_close =
      _dispatch_io_closePtr.asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_barrier(
    dispatch_io_t channel,
    Dartdispatch_block_t barrier,
  ) {
    return _dispatch_io_barrier(
      channel,
      barrier.pointer,
    );
  }

  late final _dispatch_io_barrierPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(dispatch_io_t, dispatch_block_t)>>(
      'dispatch_io_barrier');
  late final _dispatch_io_barrier = _dispatch_io_barrierPtr
      .asFunction<void Function(dispatch_io_t, dispatch_block_t)>();

  int dispatch_io_get_descriptor(
    dispatch_io_t channel,
  ) {
    return _dispatch_io_get_descriptor(
      channel,
    );
  }

  late final _dispatch_io_get_descriptorPtr =
      _lookup<ffi.NativeFunction<dispatch_fd_t Function(dispatch_io_t)>>(
          'dispatch_io_get_descriptor');
  late final _dispatch_io_get_descriptor =
      _dispatch_io_get_descriptorPtr.asFunction<int Function(dispatch_io_t)>();

  void dispatch_io_set_high_water(
    dispatch_io_t channel,
    int high_water,
  ) {
    return _dispatch_io_set_high_water(
      channel,
      high_water,
    );
  }

  late final _dispatch_io_set_high_waterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_io_t, ffi.Size)>>(
          'dispatch_io_set_high_water');
  late final _dispatch_io_set_high_water = _dispatch_io_set_high_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_low_water(
    dispatch_io_t channel,
    int low_water,
  ) {
    return _dispatch_io_set_low_water(
      channel,
      low_water,
    );
  }

  late final _dispatch_io_set_low_waterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_io_t, ffi.Size)>>(
          'dispatch_io_set_low_water');
  late final _dispatch_io_set_low_water = _dispatch_io_set_low_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_interval(
    dispatch_io_t channel,
    int interval,
    int flags,
  ) {
    return _dispatch_io_set_interval(
      channel,
      interval,
      flags,
    );
  }

  late final _dispatch_io_set_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, ffi.Uint64,
              dispatch_io_interval_flags_t)>>('dispatch_io_set_interval');
  late final _dispatch_io_set_interval = _dispatch_io_set_intervalPtr
      .asFunction<void Function(dispatch_io_t, int, int)>();

  dispatch_workloop_t dispatch_workloop_create(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _dispatch_workloop_create(
      label,
    );
  }

  late final _dispatch_workloop_createPtr = _lookup<
          ffi
          .NativeFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>>(
      'dispatch_workloop_create');
  late final _dispatch_workloop_create = _dispatch_workloop_createPtr
      .asFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>();

  dispatch_workloop_t dispatch_workloop_create_inactive(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _dispatch_workloop_create_inactive(
      label,
    );
  }

  late final _dispatch_workloop_create_inactivePtr = _lookup<
          ffi
          .NativeFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>>(
      'dispatch_workloop_create_inactive');
  late final _dispatch_workloop_create_inactive =
      _dispatch_workloop_create_inactivePtr
          .asFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>();

  void dispatch_workloop_set_autorelease_frequency(
    dispatch_workloop_t workloop,
    dispatch_autorelease_frequency_t frequency,
  ) {
    return _dispatch_workloop_set_autorelease_frequency(
      workloop,
      frequency.value,
    );
  }

  late final _dispatch_workloop_set_autorelease_frequencyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_workloop_t, ffi.UnsignedLong)>>(
      'dispatch_workloop_set_autorelease_frequency');
  late final _dispatch_workloop_set_autorelease_frequency =
      _dispatch_workloop_set_autorelease_frequencyPtr
          .asFunction<void Function(dispatch_workloop_t, int)>();

  void dispatch_workloop_set_os_workgroup(
    dispatch_workloop_t workloop,
    os_workgroup_t workgroup,
  ) {
    return _dispatch_workloop_set_os_workgroup(
      workloop,
      workgroup,
    );
  }

  late final _dispatch_workloop_set_os_workgroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_workloop_t,
              os_workgroup_t)>>('dispatch_workloop_set_os_workgroup');
  late final _dispatch_workloop_set_os_workgroup =
      _dispatch_workloop_set_os_workgroupPtr
          .asFunction<void Function(dispatch_workloop_t, os_workgroup_t)>();

  int CFReadStreamGetTypeID() {
    return _CFReadStreamGetTypeID();
  }

  late final _CFReadStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID =
      _CFReadStreamGetTypeIDPtr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID() {
    return _CFWriteStreamGetTypeID();
  }

  late final _CFWriteStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID =
      _CFWriteStreamGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyDataWritten =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyDataWritten');

  CFStreamPropertyKey get kCFStreamPropertyDataWritten =>
      _kCFStreamPropertyDataWritten.value;

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy =
      _CFReadStreamCreateWithBytesNoCopyPtr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBufferPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer =
      _CFWriteStreamCreateWithBufferPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffersPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers =
      _CFWriteStreamCreateWithAllocatedBuffersPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFilePtr = _lookup<
          ffi
          .NativeFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile = _CFReadStreamCreateWithFilePtr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFilePtr = _lookup<
          ffi
          .NativeFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile = _CFWriteStreamCreateWithFilePtr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair = _CFStreamCreateBoundPairPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
          ffi.Pointer<CFWriteStreamRef>, int)>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyAppendToFile =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyAppendToFile');

  CFStreamPropertyKey get kCFStreamPropertyAppendToFile =>
      _kCFStreamPropertyAppendToFile.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertyFileCurrentOffset =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyFileCurrentOffset');

  CFStreamPropertyKey get kCFStreamPropertyFileCurrentOffset =>
      _kCFStreamPropertyFileCurrentOffset.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketNativeHandle =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketNativeHandle');

  CFStreamPropertyKey get kCFStreamPropertySocketNativeHandle =>
      _kCFStreamPropertySocketNativeHandle.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemoteHostName =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemoteHostName');

  CFStreamPropertyKey get kCFStreamPropertySocketRemoteHostName =>
      _kCFStreamPropertySocketRemoteHostName.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemotePortNumber =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemotePortNumber');

  CFStreamPropertyKey get kCFStreamPropertySocketRemotePortNumber =>
      _kCFStreamPropertySocketRemotePortNumber.value;

  late final ffi.Pointer<ffi.Int> _kCFStreamErrorDomainSOCKS =
      _lookup<ffi.Int>('kCFStreamErrorDomainSOCKS');

  int get kCFStreamErrorDomainSOCKS => _kCFStreamErrorDomainSOCKS.value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxy =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxy');

  CFStringRef get kCFStreamPropertySOCKSProxy =>
      _kCFStreamPropertySOCKSProxy.value;

  set kCFStreamPropertySOCKSProxy(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyHost =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyHost');

  CFStringRef get kCFStreamPropertySOCKSProxyHost =>
      _kCFStreamPropertySOCKSProxyHost.value;

  set kCFStreamPropertySOCKSProxyHost(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyPort =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyPort');

  CFStringRef get kCFStreamPropertySOCKSProxyPort =>
      _kCFStreamPropertySOCKSProxyPort.value;

  set kCFStreamPropertySOCKSProxyPort(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyPort.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSVersion =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSVersion');

  CFStringRef get kCFStreamPropertySOCKSVersion =>
      _kCFStreamPropertySOCKSVersion.value;

  set kCFStreamPropertySOCKSVersion(CFStringRef value) =>
      _kCFStreamPropertySOCKSVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion4 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion4');

  CFStringRef get kCFStreamSocketSOCKSVersion4 =>
      _kCFStreamSocketSOCKSVersion4.value;

  set kCFStreamSocketSOCKSVersion4(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion4.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion5 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion5');

  CFStringRef get kCFStreamSocketSOCKSVersion5 =>
      _kCFStreamSocketSOCKSVersion5.value;

  set kCFStreamSocketSOCKSVersion5(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion5.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSUser =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSUser');

  CFStringRef get kCFStreamPropertySOCKSUser =>
      _kCFStreamPropertySOCKSUser.value;

  set kCFStreamPropertySOCKSUser(CFStringRef value) =>
      _kCFStreamPropertySOCKSUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSPassword =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSPassword');

  CFStringRef get kCFStreamPropertySOCKSPassword =>
      _kCFStreamPropertySOCKSPassword.value;

  set kCFStreamPropertySOCKSPassword(CFStringRef value) =>
      _kCFStreamPropertySOCKSPassword.value = value;

  late final ffi.Pointer<ffi.Int> _kCFStreamErrorDomainSSL =
      _lookup<ffi.Int>('kCFStreamErrorDomainSSL');

  int get kCFStreamErrorDomainSSL => _kCFStreamErrorDomainSSL.value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySocketSecurityLevel =
      _lookup<CFStringRef>('kCFStreamPropertySocketSecurityLevel');

  CFStringRef get kCFStreamPropertySocketSecurityLevel =>
      _kCFStreamPropertySocketSecurityLevel.value;

  set kCFStreamPropertySocketSecurityLevel(CFStringRef value) =>
      _kCFStreamPropertySocketSecurityLevel.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelNone =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNone');

  CFStringRef get kCFStreamSocketSecurityLevelNone =>
      _kCFStreamSocketSecurityLevelNone.value;

  set kCFStreamSocketSecurityLevelNone(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv2 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv2');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv2 =>
      _kCFStreamSocketSecurityLevelSSLv2.value;

  set kCFStreamSocketSecurityLevelSSLv2(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv3 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv3');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv3 =>
      _kCFStreamSocketSecurityLevelSSLv3.value;

  set kCFStreamSocketSecurityLevelSSLv3(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelTLSv1 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelTLSv1');

  CFStringRef get kCFStreamSocketSecurityLevelTLSv1 =>
      _kCFStreamSocketSecurityLevelTLSv1.value;

  set kCFStreamSocketSecurityLevelTLSv1(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNegotiatedSSL');

  CFStringRef get kCFStreamSocketSecurityLevelNegotiatedSSL =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value;

  set kCFStreamSocketSecurityLevelNegotiatedSSL(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamPropertyShouldCloseNativeSocket =
      _lookup<CFStringRef>('kCFStreamPropertyShouldCloseNativeSocket');

  CFStringRef get kCFStreamPropertyShouldCloseNativeSocket =>
      _kCFStreamPropertyShouldCloseNativeSocket.value;

  set kCFStreamPropertyShouldCloseNativeSocket(CFStringRef value) =>
      _kCFStreamPropertyShouldCloseNativeSocket.value = value;

  void CFStreamCreatePairWithSocket(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket =
      _CFStreamCreatePairWithSocketPtr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost =
      _CFStreamCreatePairWithSocketToHostPtr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature =
      _CFStreamCreatePairWithPeerSocketSignaturePtr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  CFStreamStatus CFReadStreamGetStatus(
    CFReadStreamRef stream,
  ) {
    return CFStreamStatus.fromValue(_CFReadStreamGetStatus(
      stream,
    ));
  }

  late final _CFReadStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus =
      _CFReadStreamGetStatusPtr.asFunction<int Function(CFReadStreamRef)>();

  CFStreamStatus CFWriteStreamGetStatus(
    CFWriteStreamRef stream,
  ) {
    return CFStreamStatus.fromValue(_CFWriteStreamGetStatus(
      stream,
    ));
  }

  late final _CFWriteStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus =
      _CFWriteStreamGetStatusPtr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError(
      stream,
    );
  }

  late final _CFReadStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError = _CFReadStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError(
      stream,
    );
  }

  late final _CFWriteStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError = _CFWriteStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen(
      stream,
    );
  }

  late final _CFReadStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen =
      _CFReadStreamOpenPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen(
      stream,
    );
  }

  late final _CFWriteStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen =
      _CFWriteStreamOpenPtr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose(
      stream,
    );
  }

  late final _CFReadStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose =
      _CFReadStreamClosePtr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose(
      stream,
    );
  }

  late final _CFWriteStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose =
      _CFWriteStreamClosePtr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable = _CFReadStreamHasBytesAvailablePtr
      .asFunction<int Function(CFReadStreamRef)>();

  int CFReadStreamRead(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamReadPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead = _CFReadStreamReadPtr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer = _CFReadStreamGetBufferPtr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytesPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes = _CFWriteStreamCanAcceptBytesPtr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite = _CFWriteStreamWritePtr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty = _CFReadStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty = _CFWriteStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty = _CFReadStreamSetPropertyPtr.asFunction<
      int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty =
      _CFWriteStreamSetPropertyPtr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient = _CFReadStreamSetClientPtr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient = _CFWriteStreamSetClientPtr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop =
      _CFReadStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop =
      _CFWriteStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop =
      _CFReadStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop =
      _CFWriteStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue(
    CFReadStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFReadStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue = _CFReadStreamSetDispatchQueuePtr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue(
    CFWriteStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFWriteStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue = _CFWriteStreamSetDispatchQueuePtr
      .asFunction<void Function(CFWriteStreamRef, dispatch_queue_t)>();

  dispatch_queue_t CFReadStreamCopyDispatchQueue(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFReadStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue = _CFReadStreamCopyDispatchQueuePtr
      .asFunction<dispatch_queue_t Function(CFReadStreamRef)>();

  dispatch_queue_t CFWriteStreamCopyDispatchQueue(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFWriteStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue =
      _CFWriteStreamCopyDispatchQueuePtr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError(
      stream,
    );
  }

  late final _CFReadStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError = _CFReadStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError(
      stream,
    );
  }

  late final _CFWriteStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError = _CFWriteStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData =
      _CFPropertyListCreateFromXMLDataPtr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData = _CFPropertyListCreateXMLDataPtr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopyPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy =
      _CFPropertyListCreateDeepCopyPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  DartBoolean CFPropertyListIsValid(
    CFPropertyListRef plist,
    CFPropertyListFormat format,
  ) {
    return _CFPropertyListIsValid(
      plist,
      format.value,
    );
  }

  late final _CFPropertyListIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPropertyListRef, CFIndex)>>(
          'CFPropertyListIsValid');
  late final _CFPropertyListIsValid = _CFPropertyListIsValidPtr.asFunction<
      int Function(CFPropertyListRef, int)>();

  DartCFIndex CFPropertyListWriteToStream(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    CFPropertyListFormat format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream(
      propertyList,
      stream,
      format.value,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, CFIndex,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream =
      _CFPropertyListWriteToStreamPtr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<CFIndex> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream =
      _CFPropertyListCreateFromStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<CFIndex> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData =
      _CFPropertyListCreateWithDataPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<CFIndex> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream =
      _CFPropertyListCreateWithStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFErrorRef>)>();

  DartCFIndex CFPropertyListWrite(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    CFPropertyListFormat format,
    DartCFOptionFlags options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite(
      propertyList,
      stream,
      format.value,
      options,
      error,
    );
  }

  late final _CFPropertyListWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, CFIndex,
              CFOptionFlags, ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite = _CFPropertyListWritePtr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    CFPropertyListFormat format,
    DartCFOptionFlags options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData(
      allocator,
      propertyList,
      format.value,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData =
      _CFPropertyListCreateDataPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFSetCallBacks> _kCFTypeSetCallBacks =
      _lookup<CFSetCallBacks>('kCFTypeSetCallBacks');

  CFSetCallBacks get kCFTypeSetCallBacks => _kCFTypeSetCallBacks.ref;

  late final ffi.Pointer<CFSetCallBacks> _kCFCopyStringSetCallBacks =
      _lookup<CFSetCallBacks>('kCFCopyStringSetCallBacks');

  CFSetCallBacks get kCFCopyStringSetCallBacks =>
      _kCFCopyStringSetCallBacks.ref;

  int CFSetGetTypeID() {
    return _CFSetGetTypeID();
  }

  late final _CFSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID = _CFSetGetTypeIDPtr.asFunction<int Function()>();

  CFSetRef CFSetCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate = _CFSetCreatePtr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy = _CFSetCreateCopyPtr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable = _CFSetCreateMutablePtr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy = _CFSetCreateMutableCopyPtr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount =
      _CFSetGetCountPtr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValuePtr = _lookup<
          ffi
          .NativeFunction<CFIndex Function(CFSetRef, ffi.Pointer<ffi.Void>)>>(
      'CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue = _CFSetGetCountOfValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValuePtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>)>>(
      'CFSetContainsValue');
  late final _CFSetContainsValue = _CFSetContainsValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue = _CFSetGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent = _CFSetGetValueIfPresentPtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues = _CFSetGetValuesPtr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction = _CFSetApplyFunctionPtr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue(
      theSet,
      value,
    );
  }

  late final _CFSetAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue = _CFSetAddValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue = _CFSetReplaceValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue(
      theSet,
      value,
    );
  }

  late final _CFSetSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue = _CFSetSetValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue = _CFSetRemoveValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues(
      theSet,
    );
  }

  late final _CFSetRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues =
      _CFSetRemoveAllValuesPtr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID() {
    return _CFTreeGetTypeID();
  }

  late final _CFTreeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID =
      _CFTreeGetTypeIDPtr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate(
      allocator,
      context,
    );
  }

  late final _CFTreeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate = _CFTreeCreatePtr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent(
      tree,
    );
  }

  late final _CFTreeGetParentPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent =
      _CFTreeGetParentPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling(
      tree,
    );
  }

  late final _CFTreeGetNextSiblingPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling =
      _CFTreeGetNextSiblingPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild(
      tree,
    );
  }

  late final _CFTreeGetFirstChildPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild =
      _CFTreeGetFirstChildPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext(
      tree,
      context,
    );
  }

  late final _CFTreeGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext = _CFTreeGetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount(
      tree,
    );
  }

  late final _CFTreeGetChildCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount =
      _CFTreeGetChildCountPtr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndexPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex = _CFTreeGetChildAtIndexPtr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren = _CFTreeGetChildrenPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren =
      _CFTreeApplyFunctionToChildrenPtr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot(
      tree,
    );
  }

  late final _CFTreeFindRootPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot =
      _CFTreeFindRootPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext(
      tree,
      context,
    );
  }

  late final _CFTreeSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext = _CFTreeSetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild =
      _CFTreePrependChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild =
      _CFTreeAppendChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling =
      _CFTreeInsertSiblingPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove(
      tree,
    );
  }

  late final _CFTreeRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove =
      _CFTreeRemovePtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren =
      _CFTreeRemoveAllChildrenPtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren = _CFTreeSortChildrenPtr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResourcePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource =
      _CFURLCreateDataAndPropertiesFromResourcePtr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource =
      _CFURLWriteDataAndPropertiesToResourcePtr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResourcePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource = _CFURLDestroyResourcePtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResourcePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource =
      _CFURLCreatePropertyFromResourcePtr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLFileExists =
      _lookup<CFStringRef>('kCFURLFileExists');

  CFStringRef get kCFURLFileExists => _kCFURLFileExists.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileDirectoryContents =
      _lookup<CFStringRef>('kCFURLFileDirectoryContents');

  CFStringRef get kCFURLFileDirectoryContents =>
      _kCFURLFileDirectoryContents.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLength =
      _lookup<CFStringRef>('kCFURLFileLength');

  CFStringRef get kCFURLFileLength => _kCFURLFileLength.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLastModificationTime =
      _lookup<CFStringRef>('kCFURLFileLastModificationTime');

  CFStringRef get kCFURLFileLastModificationTime =>
      _kCFURLFileLastModificationTime.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFilePOSIXMode =
      _lookup<CFStringRef>('kCFURLFilePOSIXMode');

  CFStringRef get kCFURLFilePOSIXMode => _kCFURLFilePOSIXMode.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileOwnerID =
      _lookup<CFStringRef>('kCFURLFileOwnerID');

  CFStringRef get kCFURLFileOwnerID => _kCFURLFileOwnerID.value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusCode =
      _lookup<CFStringRef>('kCFURLHTTPStatusCode');

  CFStringRef get kCFURLHTTPStatusCode => _kCFURLHTTPStatusCode.value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusLine =
      _lookup<CFStringRef>('kCFURLHTTPStatusLine');

  CFStringRef get kCFURLHTTPStatusLine => _kCFURLHTTPStatusLine.value;

  int CFUUIDGetTypeID() {
    return _CFUUIDGetTypeID();
  }

  late final _CFUUIDGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID =
      _CFUUIDGetTypeIDPtr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate(
      alloc,
    );
  }

  late final _CFUUIDCreatePtr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate =
      _CFUUIDCreatePtr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes = _CFUUIDCreateWithBytesPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromStringPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString = _CFUUIDCreateFromStringPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString = _CFUUIDCreateStringPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes =
      _CFUUIDGetConstantUUIDWithBytesPtr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytesPtr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes =
      _CFUUIDGetUUIDBytesPtr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytesPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes = _CFUUIDCreateFromUUIDBytesPtr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL() {
    return _CFCopyHomeDirectoryURL();
  }

  late final _CFCopyHomeDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL =
      _CFCopyHomeDirectoryURLPtr.asFunction<CFURLRef Function()>();

  late final ffi.Pointer<CFStringRef> _kCFBundleInfoDictionaryVersionKey =
      _lookup<CFStringRef>('kCFBundleInfoDictionaryVersionKey');

  CFStringRef get kCFBundleInfoDictionaryVersionKey =>
      _kCFBundleInfoDictionaryVersionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleExecutableKey =
      _lookup<CFStringRef>('kCFBundleExecutableKey');

  CFStringRef get kCFBundleExecutableKey => _kCFBundleExecutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleIdentifierKey =
      _lookup<CFStringRef>('kCFBundleIdentifierKey');

  CFStringRef get kCFBundleIdentifierKey => _kCFBundleIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleVersionKey =
      _lookup<CFStringRef>('kCFBundleVersionKey');

  CFStringRef get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleDevelopmentRegionKey =
      _lookup<CFStringRef>('kCFBundleDevelopmentRegionKey');

  CFStringRef get kCFBundleDevelopmentRegionKey =>
      _kCFBundleDevelopmentRegionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleNameKey =
      _lookup<CFStringRef>('kCFBundleNameKey');

  CFStringRef get kCFBundleNameKey => _kCFBundleNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleLocalizationsKey =
      _lookup<CFStringRef>('kCFBundleLocalizationsKey');

  CFStringRef get kCFBundleLocalizationsKey => _kCFBundleLocalizationsKey.value;

  CFBundleRef CFBundleGetMainBundle() {
    return _CFBundleGetMainBundle();
  }

  late final _CFBundleGetMainBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle =
      _CFBundleGetMainBundlePtr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifierPtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier =
      _CFBundleGetBundleWithIdentifierPtr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles() {
    return _CFBundleGetAllBundles();
  }

  late final _CFBundleGetAllBundlesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles =
      _CFBundleGetAllBundlesPtr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID() {
    return _CFBundleGetTypeID();
  }

  late final _CFBundleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID =
      _CFBundleGetTypeIDPtr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreatePtr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate = _CFBundleCreatePtr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory =
      _CFBundleCreateBundlesFromDirectoryPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL =
      _CFBundleCopyBundleURLPtr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKeyPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey =
      _CFBundleGetValueForInfoDictionaryKeyPtr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary = _CFBundleGetInfoDictionaryPtr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary =
      _CFBundleGetLocalInfoDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo = _CFBundleGetPackageInfoPtr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier(
      bundle,
    );
  }

  late final _CFBundleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier =
      _CFBundleGetIdentifierPtr.asFunction<CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber =
      _CFBundleGetVersionNumberPtr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion = _CFBundleGetDevelopmentRegionPtr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL =
      _CFBundleCopySupportFilesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL =
      _CFBundleCopyResourcesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL =
      _CFBundleCopyPrivateFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL =
      _CFBundleCopySharedFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL = _CFBundleCopySharedSupportURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL = _CFBundleCopyBuiltInPlugInsURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectoryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory =
      _CFBundleCopyInfoDictionaryInDirectoryPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory =
      _CFBundleGetPackageInfoInDirectoryPtr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL = _CFBundleCopyResourceURLPtr.asFunction<
      CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType =
      _CFBundleCopyResourceURLsOfTypePtr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString =
      _CFBundleCopyLocalizedStringPtr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory =
      _CFBundleCopyResourceURLInDirectoryPtr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory =
      _CFBundleCopyResourceURLsOfTypeInDirectoryPtr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizationsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations =
      _CFBundleCopyBundleLocalizationsPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArrayPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray =
      _CFBundleCopyPreferredLocalizationsFromArrayPtr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferencesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences =
      _CFBundleCopyLocalizationsForPreferencesPtr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization =
      _CFBundleCopyResourceURLForLocalizationPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization =
      _CFBundleCopyResourceURLsOfTypeForLocalizationPtr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURLPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL =
      _CFBundleCopyInfoDictionaryForURLPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL =
      _CFBundleCopyLocalizationsForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL =
      _CFBundleCopyExecutableArchitecturesForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL = _CFBundleCopyExecutableURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures =
      _CFBundleCopyExecutableArchitecturesPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable = _CFBundlePreflightExecutablePtr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnErrorPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError =
      _CFBundleLoadExecutableAndReturnErrorPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable(
      bundle,
    );
  }

  late final _CFBundleLoadExecutablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable =
      _CFBundleLoadExecutablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded =
      _CFBundleIsExecutableLoadedPtr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable =
      _CFBundleUnloadExecutablePtr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName =
      _CFBundleGetFunctionPointerForNamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames =
      _CFBundleGetFunctionPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName = _CFBundleGetDataPointerForNamePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames =
      _CFBundleGetDataPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL =
      _CFBundleCopyAuxiliaryExecutableURLPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable =
      _CFBundleIsExecutableLoadablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL =
      _CFBundleIsExecutableLoadableForURLPtr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable =
      _CFBundleIsArchitectureLoadablePtr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn(
      bundle,
    );
  }

  late final _CFBundleGetPlugInPtr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn =
      _CFBundleGetPlugInPtr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMapPtr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap =
      _CFBundleOpenBundleResourceMapPtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFilesPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles =
      _CFBundleOpenBundleResourceFilesPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap =
      _CFBundleCloseBundleResourceMapPtr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID() {
    return _CFMessagePortGetTypeID();
  }

  late final _CFMessagePortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID =
      _CFMessagePortGetTypeIDPtr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocalPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal =
      _CFMessagePortCreateLocalPtr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemotePtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote = _CFMessagePortCreateRemotePtr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote(
      ms,
    );
  }

  late final _CFMessagePortIsRemotePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote =
      _CFMessagePortIsRemotePtr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName(
      ms,
    );
  }

  late final _CFMessagePortGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName = _CFMessagePortGetNamePtr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetNamePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName = _CFMessagePortSetNamePtr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext = _CFMessagePortGetContextPtr.asFunction<
      void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate(
      ms,
    );
  }

  late final _CFMessagePortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate =
      _CFMessagePortInvalidatePtr.asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid(
      ms,
    );
  }

  late final _CFMessagePortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid =
      _CFMessagePortIsValidPtr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack =
      _CFMessagePortGetInvalidationCallBackPtr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack =
      _CFMessagePortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequestPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest =
      _CFMessagePortSendRequestPtr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource =
      _CFMessagePortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue(
    CFMessagePortRef ms,
    dispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue(
      ms,
      queue,
    );
  }

  late final _CFMessagePortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue = _CFMessagePortSetDispatchQueuePtr
      .asFunction<void Function(CFMessagePortRef, dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegistrationKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegistrationKey');

  CFStringRef get kCFPlugInDynamicRegistrationKey =>
      _kCFPlugInDynamicRegistrationKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegisterFunctionKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegisterFunctionKey');

  CFStringRef get kCFPlugInDynamicRegisterFunctionKey =>
      _kCFPlugInDynamicRegisterFunctionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInUnloadFunctionKey =
      _lookup<CFStringRef>('kCFPlugInUnloadFunctionKey');

  CFStringRef get kCFPlugInUnloadFunctionKey =>
      _kCFPlugInUnloadFunctionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInFactoriesKey =
      _lookup<CFStringRef>('kCFPlugInFactoriesKey');

  CFStringRef get kCFPlugInFactoriesKey => _kCFPlugInFactoriesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInTypesKey =
      _lookup<CFStringRef>('kCFPlugInTypesKey');

  CFStringRef get kCFPlugInTypesKey => _kCFPlugInTypesKey.value;

  int CFPlugInGetTypeID() {
    return _CFPlugInGetTypeID();
  }

  late final _CFPlugInGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID =
      _CFPlugInGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreatePtr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate = _CFPlugInCreatePtr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle(
      plugIn,
    );
  }

  late final _CFPlugInGetBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle =
      _CFPlugInGetBundlePtr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand =
      _CFPlugInSetLoadOnDemandPtr.asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand =
      _CFPlugInIsLoadOnDemandPtr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypePtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType =
      _CFPlugInFindFactoriesForPlugInTypePtr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn =
      _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate = _CFPlugInInstanceCreatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction =
      _CFPlugInRegisterFactoryFunctionPtr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByNamePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName =
      _CFPlugInRegisterFactoryFunctionByNamePtr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactoryPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory =
      _CFPlugInUnregisterFactoryPtr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType = _CFPlugInRegisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType = _CFPlugInUnregisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory =
      _CFPlugInAddInstanceForFactoryPtr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory =
      _CFPlugInRemoveInstanceForFactoryPtr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTablePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable =
      _CFPlugInInstanceGetInterfaceFunctionTablePtr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName =
      _CFPlugInInstanceGetFactoryNamePtr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceDataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>>(
      'CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData =
      _CFPlugInInstanceGetInstanceDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID() {
    return _CFPlugInInstanceGetTypeID();
  }

  late final _CFPlugInInstanceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID =
      _CFPlugInInstanceGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSizePtr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize =
      _CFPlugInInstanceCreateWithInstanceDataSizePtr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID() {
    return _CFMachPortGetTypeID();
  }

  late final _CFMachPortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID =
      _CFMachPortGetTypeIDPtr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreatePtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate = _CFMachPortCreatePtr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPortPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort =
      _CFMachPortCreateWithPortPtr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort(
      port,
    );
  }

  late final _CFMachPortGetPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort =
      _CFMachPortGetPortPtr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext(
      port,
      context,
    );
  }

  late final _CFMachPortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext = _CFMachPortGetContextPtr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate(
      port,
    );
  }

  late final _CFMachPortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate =
      _CFMachPortInvalidatePtr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid(
      port,
    );
  }

  late final _CFMachPortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid =
      _CFMachPortIsValidPtr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack =
      _CFMachPortGetInvalidationCallBackPtr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack =
      _CFMachPortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource =
      _CFMachPortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID() {
    return _CFAttributedStringGetTypeID();
  }

  late final _CFAttributedStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID =
      _CFAttributedStringGetTypeIDPtr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate =
      _CFAttributedStringCreatePtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring =
      _CFAttributedStringCreateWithSubstringPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy =
      _CFAttributedStringCreateCopyPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString(
      aStr,
    );
  }

  late final _CFAttributedStringGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString = _CFAttributedStringGetStringPtr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength(
      aStr,
    );
  }

  late final _CFAttributedStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength = _CFAttributedStringGetLengthPtr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes =
      _CFAttributedStringGetAttributesPtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute =
      _CFAttributedStringGetAttributePtr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange =
      _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange =
      _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy =
      _CFAttributedStringCreateMutableCopyPtr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable =
      _CFAttributedStringCreateMutablePtr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString =
      _CFAttributedStringReplaceStringPtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableStringPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString =
      _CFAttributedStringGetMutableStringPtr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes =
      _CFAttributedStringSetAttributesPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute =
      _CFAttributedStringSetAttributePtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute =
      _CFAttributedStringRemoveAttributePtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString =
      _CFAttributedStringReplaceAttributedStringPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing =
      _CFAttributedStringBeginEditingPtr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing = _CFAttributedStringEndEditingPtr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  int CFURLEnumeratorGetTypeID() {
    return _CFURLEnumeratorGetTypeID();
  }

  late final _CFURLEnumeratorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID =
      _CFURLEnumeratorGetTypeIDPtr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    CFURLEnumeratorOptions option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL(
      alloc,
      directoryURL,
      option.value,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL =
      _CFURLEnumeratorCreateForDirectoryURLPtr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes(
    CFAllocatorRef alloc,
    CFURLEnumeratorOptions option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes(
      alloc,
      option.value,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumesPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFOptionFlags,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes =
      _CFURLEnumeratorCreateForMountedVolumesPtr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  CFURLEnumeratorResult CFURLEnumeratorGetNextURL(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return CFURLEnumeratorResult.fromValue(_CFURLEnumeratorGetNextURL(
      enumerator,
      url,
      error,
    ));
  }

  late final _CFURLEnumeratorGetNextURLPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL =
      _CFURLEnumeratorGetNextURLPtr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents =
      _CFURLEnumeratorSkipDescendentsPtr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevelPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel =
      _CFURLEnumeratorGetDescendentLevelPtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChangePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange =
      _CFURLEnumeratorGetSourceDidChangePtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  acl_t acl_dup(
    acl_t acl,
  ) {
    return _acl_dup(
      acl,
    );
  }

  late final _acl_dupPtr =
      _lookup<ffi.NativeFunction<acl_t Function(acl_t)>>('acl_dup');
  late final _acl_dup = _acl_dupPtr.asFunction<acl_t Function(acl_t)>();

  int acl_free(
    ffi.Pointer<ffi.Void> obj_p,
  ) {
    return _acl_free(
      obj_p,
    );
  }

  late final _acl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'acl_free');
  late final _acl_free =
      _acl_freePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_init(
    int count,
  ) {
    return _acl_init(
      count,
    );
  }

  late final _acl_initPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int)>>('acl_init');
  late final _acl_init = _acl_initPtr.asFunction<acl_t Function(int)>();

  int acl_copy_entry(
    acl_entry_t dest_d,
    acl_entry_t src_d,
  ) {
    return _acl_copy_entry(
      dest_d,
      src_d,
    );
  }

  late final _acl_copy_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, acl_entry_t)>>(
          'acl_copy_entry');
  late final _acl_copy_entry =
      _acl_copy_entryPtr.asFunction<int Function(acl_entry_t, acl_entry_t)>();

  int acl_create_entry(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_create_entry(
      acl_p,
      entry_p,
    );
  }

  late final _acl_create_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<acl_t>,
              ffi.Pointer<acl_entry_t>)>>('acl_create_entry');
  late final _acl_create_entry = _acl_create_entryPtr
      .asFunction<int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>)>();

  int acl_create_entry_np(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
    int entry_index,
  ) {
    return _acl_create_entry_np(
      acl_p,
      entry_p,
      entry_index,
    );
  }

  late final _acl_create_entry_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>,
              ffi.Int)>>('acl_create_entry_np');
  late final _acl_create_entry_np = _acl_create_entry_npPtr.asFunction<
      int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>, int)>();

  int acl_delete_entry(
    acl_t acl,
    acl_entry_t entry_d,
  ) {
    return _acl_delete_entry(
      acl,
      entry_d,
    );
  }

  late final _acl_delete_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_t, acl_entry_t)>>(
          'acl_delete_entry');
  late final _acl_delete_entry =
      _acl_delete_entryPtr.asFunction<int Function(acl_t, acl_entry_t)>();

  int acl_get_entry(
    acl_t acl,
    int entry_id,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_get_entry(
      acl,
      entry_id,
      entry_p,
    );
  }

  late final _acl_get_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_t, ffi.Int, ffi.Pointer<acl_entry_t>)>>('acl_get_entry');
  late final _acl_get_entry = _acl_get_entryPtr
      .asFunction<int Function(acl_t, int, ffi.Pointer<acl_entry_t>)>();

  int acl_valid(
    acl_t acl,
  ) {
    return _acl_valid(
      acl,
    );
  }

  late final _acl_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_t)>>('acl_valid');
  late final _acl_valid = _acl_validPtr.asFunction<int Function(acl_t)>();

  int acl_valid_fd_np(
    int fd,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_valid_fd_np(
      fd,
      type.value,
      acl,
    );
  }

  late final _acl_valid_fd_npPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedInt, acl_t)>>(
      'acl_valid_fd_np');
  late final _acl_valid_fd_np =
      _acl_valid_fd_npPtr.asFunction<int Function(int, int, acl_t)>();

  int acl_valid_file_np(
    ffi.Pointer<ffi.Char> path,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_valid_file_np(
      path,
      type.value,
      acl,
    );
  }

  late final _acl_valid_file_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              acl_t)>>('acl_valid_file_np');
  late final _acl_valid_file_np = _acl_valid_file_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_valid_link_np(
    ffi.Pointer<ffi.Char> path,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_valid_link_np(
      path,
      type.value,
      acl,
    );
  }

  late final _acl_valid_link_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              acl_t)>>('acl_valid_link_np');
  late final _acl_valid_link_np = _acl_valid_link_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_add_perm(
    acl_permset_t permset_d,
    acl_perm_t perm,
  ) {
    return _acl_add_perm(
      permset_d,
      perm.value,
    );
  }

  late final _acl_add_permPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.UnsignedInt)>>(
      'acl_add_perm');
  late final _acl_add_perm =
      _acl_add_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_calc_mask(
    ffi.Pointer<acl_t> acl_p,
  ) {
    return _acl_calc_mask(
      acl_p,
    );
  }

  late final _acl_calc_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<acl_t>)>>(
          'acl_calc_mask');
  late final _acl_calc_mask =
      _acl_calc_maskPtr.asFunction<int Function(ffi.Pointer<acl_t>)>();

  int acl_clear_perms(
    acl_permset_t permset_d,
  ) {
    return _acl_clear_perms(
      permset_d,
    );
  }

  late final _acl_clear_permsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_permset_t)>>(
          'acl_clear_perms');
  late final _acl_clear_perms =
      _acl_clear_permsPtr.asFunction<int Function(acl_permset_t)>();

  int acl_delete_perm(
    acl_permset_t permset_d,
    acl_perm_t perm,
  ) {
    return _acl_delete_perm(
      permset_d,
      perm.value,
    );
  }

  late final _acl_delete_permPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.UnsignedInt)>>(
      'acl_delete_perm');
  late final _acl_delete_perm =
      _acl_delete_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_perm_np(
    acl_permset_t permset_d,
    acl_perm_t perm,
  ) {
    return _acl_get_perm_np(
      permset_d,
      perm.value,
    );
  }

  late final _acl_get_perm_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.UnsignedInt)>>(
      'acl_get_perm_np');
  late final _acl_get_perm_np =
      _acl_get_perm_npPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_permset(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_t> permset_p,
  ) {
    return _acl_get_permset(
      entry_d,
      permset_p,
    );
  }

  late final _acl_get_permsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<acl_permset_t>)>>('acl_get_permset');
  late final _acl_get_permset = _acl_get_permsetPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_t>)>();

  int acl_set_permset(
    acl_entry_t entry_d,
    acl_permset_t permset_d,
  ) {
    return _acl_set_permset(
      entry_d,
      permset_d,
    );
  }

  late final _acl_set_permsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, acl_permset_t)>>(
          'acl_set_permset');
  late final _acl_set_permset = _acl_set_permsetPtr
      .asFunction<int Function(acl_entry_t, acl_permset_t)>();

  int acl_maximal_permset_mask_np(
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_maximal_permset_mask_np(
      mask_p,
    );
  }

  late final _acl_maximal_permset_mask_npPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<acl_permset_mask_t>)>>(
      'acl_maximal_permset_mask_np');
  late final _acl_maximal_permset_mask_np = _acl_maximal_permset_mask_npPtr
      .asFunction<int Function(ffi.Pointer<acl_permset_mask_t>)>();

  int acl_get_permset_mask_np(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_get_permset_mask_np(
      entry_d,
      mask_p,
    );
  }

  late final _acl_get_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(acl_entry_t,
              ffi.Pointer<acl_permset_mask_t>)>>('acl_get_permset_mask_np');
  late final _acl_get_permset_mask_np = _acl_get_permset_mask_npPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_mask_t>)>();

  int acl_set_permset_mask_np(
    acl_entry_t entry_d,
    int mask,
  ) {
    return _acl_set_permset_mask_np(
      entry_d,
      mask,
    );
  }

  late final _acl_set_permset_mask_npPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(acl_entry_t, acl_permset_mask_t)>>(
      'acl_set_permset_mask_np');
  late final _acl_set_permset_mask_np =
      _acl_set_permset_mask_npPtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_add_flag_np(
    acl_flagset_t flagset_d,
    acl_flag_t flag,
  ) {
    return _acl_add_flag_np(
      flagset_d,
      flag.value,
    );
  }

  late final _acl_add_flag_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.UnsignedInt)>>(
      'acl_add_flag_np');
  late final _acl_add_flag_np =
      _acl_add_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_clear_flags_np(
    acl_flagset_t flagset_d,
  ) {
    return _acl_clear_flags_np(
      flagset_d,
    );
  }

  late final _acl_clear_flags_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_flagset_t)>>(
          'acl_clear_flags_np');
  late final _acl_clear_flags_np =
      _acl_clear_flags_npPtr.asFunction<int Function(acl_flagset_t)>();

  int acl_delete_flag_np(
    acl_flagset_t flagset_d,
    acl_flag_t flag,
  ) {
    return _acl_delete_flag_np(
      flagset_d,
      flag.value,
    );
  }

  late final _acl_delete_flag_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.UnsignedInt)>>(
      'acl_delete_flag_np');
  late final _acl_delete_flag_np =
      _acl_delete_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flag_np(
    acl_flagset_t flagset_d,
    acl_flag_t flag,
  ) {
    return _acl_get_flag_np(
      flagset_d,
      flag.value,
    );
  }

  late final _acl_get_flag_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.UnsignedInt)>>(
      'acl_get_flag_np');
  late final _acl_get_flag_np =
      _acl_get_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    ffi.Pointer<acl_flagset_t> flagset_p,
  ) {
    return _acl_get_flagset_np(
      obj_p,
      flagset_p,
    );
  }

  late final _acl_get_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<acl_flagset_t>)>>('acl_get_flagset_np');
  late final _acl_get_flagset_np = _acl_get_flagset_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<acl_flagset_t>)>();

  int acl_set_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    acl_flagset_t flagset_d,
  ) {
    return _acl_set_flagset_np(
      obj_p,
      flagset_d,
    );
  }

  late final _acl_set_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, acl_flagset_t)>>('acl_set_flagset_np');
  late final _acl_set_flagset_np = _acl_set_flagset_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_flagset_t)>();

  ffi.Pointer<ffi.Void> acl_get_qualifier(
    acl_entry_t entry_d,
  ) {
    return _acl_get_qualifier(
      entry_d,
    );
  }

  late final _acl_get_qualifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>>(
          'acl_get_qualifier');
  late final _acl_get_qualifier = _acl_get_qualifierPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>();

  int acl_get_tag_type(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.UnsignedInt> tag_type_p,
  ) {
    return _acl_get_tag_type(
      entry_d,
      tag_type_p,
    );
  }

  late final _acl_get_tag_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.UnsignedInt>)>>('acl_get_tag_type');
  late final _acl_get_tag_type = _acl_get_tag_typePtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.UnsignedInt>)>();

  int acl_set_qualifier(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.Void> tag_qualifier_p,
  ) {
    return _acl_set_qualifier(
      entry_d,
      tag_qualifier_p,
    );
  }

  late final _acl_set_qualifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.Void>)>>('acl_set_qualifier');
  late final _acl_set_qualifier = _acl_set_qualifierPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.Void>)>();

  int acl_set_tag_type(
    acl_entry_t entry_d,
    acl_tag_t tag_type,
  ) {
    return _acl_set_tag_type(
      entry_d,
      tag_type.value,
    );
  }

  late final _acl_set_tag_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_entry_t, ffi.UnsignedInt)>>(
      'acl_set_tag_type');
  late final _acl_set_tag_type =
      _acl_set_tag_typePtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_delete_def_file(
    ffi.Pointer<ffi.Char> path_p,
  ) {
    return _acl_delete_def_file(
      path_p,
    );
  }

  late final _acl_delete_def_filePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acl_delete_def_file');
  late final _acl_delete_def_file =
      _acl_delete_def_filePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  acl_t acl_get_fd(
    int fd,
  ) {
    return _acl_get_fd(
      fd,
    );
  }

  late final _acl_get_fdPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int)>>('acl_get_fd');
  late final _acl_get_fd = _acl_get_fdPtr.asFunction<acl_t Function(int)>();

  acl_t acl_get_fd_np(
    int fd,
    acl_type_t type,
  ) {
    return _acl_get_fd_np(
      fd,
      type.value,
    );
  }

  late final _acl_get_fd_npPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int, ffi.UnsignedInt)>>(
          'acl_get_fd_np');
  late final _acl_get_fd_np =
      _acl_get_fd_npPtr.asFunction<acl_t Function(int, int)>();

  acl_t acl_get_file(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
  ) {
    return _acl_get_file(
      path_p,
      type.value,
    );
  }

  late final _acl_get_filePtr = _lookup<
      ffi.NativeFunction<
          acl_t Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('acl_get_file');
  late final _acl_get_file =
      _acl_get_filePtr.asFunction<acl_t Function(ffi.Pointer<ffi.Char>, int)>();

  acl_t acl_get_link_np(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
  ) {
    return _acl_get_link_np(
      path_p,
      type.value,
    );
  }

  late final _acl_get_link_npPtr = _lookup<
      ffi.NativeFunction<
          acl_t Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('acl_get_link_np');
  late final _acl_get_link_np = _acl_get_link_npPtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Char>, int)>();

  int acl_set_fd(
    int fd,
    acl_t acl,
  ) {
    return _acl_set_fd(
      fd,
      acl,
    );
  }

  late final _acl_set_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, acl_t)>>(
          'acl_set_fd');
  late final _acl_set_fd =
      _acl_set_fdPtr.asFunction<int Function(int, acl_t)>();

  int acl_set_fd_np(
    int fd,
    acl_t acl,
    acl_type_t acl_type,
  ) {
    return _acl_set_fd_np(
      fd,
      acl,
      acl_type.value,
    );
  }

  late final _acl_set_fd_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, acl_t, ffi.UnsignedInt)>>('acl_set_fd_np');
  late final _acl_set_fd_np =
      _acl_set_fd_npPtr.asFunction<int Function(int, acl_t, int)>();

  int acl_set_file(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_set_file(
      path_p,
      type.value,
      acl,
    );
  }

  late final _acl_set_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt, acl_t)>>('acl_set_file');
  late final _acl_set_file = _acl_set_filePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_set_link_np(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_set_link_np(
      path_p,
      type.value,
      acl,
    );
  }

  late final _acl_set_link_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              acl_t)>>('acl_set_link_np');
  late final _acl_set_link_np = _acl_set_link_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_copy_ext(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_extPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext');
  late final _acl_copy_ext = _acl_copy_extPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  int acl_copy_ext_native(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext_native(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_ext_nativePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext_native');
  late final _acl_copy_ext_native = _acl_copy_ext_nativePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  acl_t acl_copy_int(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int(
      buf_p,
    );
  }

  late final _acl_copy_intPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int');
  late final _acl_copy_int =
      _acl_copy_intPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_copy_int_native(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int_native(
      buf_p,
    );
  }

  late final _acl_copy_int_nativePtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int_native');
  late final _acl_copy_int_native = _acl_copy_int_nativePtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_from_text(
    ffi.Pointer<ffi.Char> buf_p,
  ) {
    return _acl_from_text(
      buf_p,
    );
  }

  late final _acl_from_textPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Char>)>>(
          'acl_from_text');
  late final _acl_from_text =
      _acl_from_textPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Char>)>();

  int acl_size(
    acl_t acl,
  ) {
    return _acl_size(
      acl,
    );
  }

  late final _acl_sizePtr =
      _lookup<ffi.NativeFunction<ssize_t Function(acl_t)>>('acl_size');
  late final _acl_size = _acl_sizePtr.asFunction<int Function(acl_t)>();

  ffi.Pointer<ffi.Char> acl_to_text(
    acl_t acl,
    ffi.Pointer<ssize_t> len_p,
  ) {
    return _acl_to_text(
      acl,
      len_p,
    );
  }

  late final _acl_to_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              acl_t, ffi.Pointer<ssize_t>)>>('acl_to_text');
  late final _acl_to_text = _acl_to_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(acl_t, ffi.Pointer<ssize_t>)>();

  int CFFileSecurityGetTypeID() {
    return _CFFileSecurityGetTypeID();
  }

  late final _CFFileSecurityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID =
      _CFFileSecurityGetTypeIDPtr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate(
      allocator,
    );
  }

  late final _CFFileSecurityCreatePtr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate = _CFFileSecurityCreatePtr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy =
      _CFFileSecurityCreateCopyPtr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID = _CFFileSecurityCopyOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID = _CFFileSecuritySetOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID = _CFFileSecurityCopyGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID = _CFFileSecuritySetGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlListPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList =
      _CFFileSecurityCopyAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlListPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList =
      _CFFileSecuritySetAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t> owner,
  ) {
    return _CFFileSecurityGetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner = _CFFileSecurityGetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t>)>();

  int CFFileSecuritySetOwner(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwnerPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner = _CFFileSecuritySetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroupPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup = _CFFileSecurityGetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroupPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup = _CFFileSecuritySetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t> mode,
  ) {
    return _CFFileSecurityGetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetModePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode = _CFFileSecurityGetModePtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t>)>();

  int CFFileSecuritySetMode(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetModePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode = _CFFileSecuritySetModePtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  DartBoolean CFFileSecurityClearProperties(
    CFFileSecurityRef fileSec,
    CFFileSecurityClearOptions clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties(
      fileSec,
      clearPropertyMask.value,
    );
  }

  late final _CFFileSecurityClearPropertiesPtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFFileSecurityRef, CFOptionFlags)>>(
      'CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties = _CFFileSecurityClearPropertiesPtr
      .asFunction<int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(
          CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    DartCFIndex index,
  ) {
    return CFStringTokenizerTokenType.fromValue(
        _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    ));
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          CFOptionFlags Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return CFStringTokenizerTokenType.fromValue(
        _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    ));
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID() {
    return _CFFileDescriptorGetTypeID();
  }

  late final _CFFileDescriptorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID =
      _CFFileDescriptorGetTypeIDPtr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate = _CFFileDescriptorCreatePtr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptorPtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor =
      _CFFileDescriptorGetNativeDescriptorPtr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext =
      _CFFileDescriptorGetContextPtr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks =
      _CFFileDescriptorEnableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks =
      _CFFileDescriptorDisableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate(
      f,
    );
  }

  late final _CFFileDescriptorInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate = _CFFileDescriptorInvalidatePtr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid(
      f,
    );
  }

  late final _CFFileDescriptorIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid = _CFFileDescriptorIsValidPtr.asFunction<
      int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource =
      _CFFileDescriptorCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID() {
    return _CFUserNotificationGetTypeID();
  }

  late final _CFUserNotificationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID =
      _CFUserNotificationGetTypeIDPtr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreatePtr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate =
      _CFUserNotificationCreatePtr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponsePtr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse =
      _CFUserNotificationReceiveResponsePtr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue =
      _CFUserNotificationGetResponseValuePtr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionaryPtr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary =
      _CFUserNotificationGetResponseDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdatePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate =
      _CFUserNotificationUpdatePtr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel(
      userNotification,
    );
  }

  late final _CFUserNotificationCancelPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel = _CFUserNotificationCancelPtr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource =
      _CFUserNotificationCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNoticePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice =
      _CFUserNotificationDisplayNoticePtr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlertPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert =
      _CFUserNotificationDisplayAlertPtr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationIconURLKey =
      _lookup<CFStringRef>('kCFUserNotificationIconURLKey');

  CFStringRef get kCFUserNotificationIconURLKey =>
      _kCFUserNotificationIconURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationSoundURLKey =
      _lookup<CFStringRef>('kCFUserNotificationSoundURLKey');

  CFStringRef get kCFUserNotificationSoundURLKey =>
      _kCFUserNotificationSoundURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationLocalizationURLKey =
      _lookup<CFStringRef>('kCFUserNotificationLocalizationURLKey');

  CFStringRef get kCFUserNotificationLocalizationURLKey =>
      _kCFUserNotificationLocalizationURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertHeaderKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertHeaderKey');

  CFStringRef get kCFUserNotificationAlertHeaderKey =>
      _kCFUserNotificationAlertHeaderKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertMessageKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertMessageKey');

  CFStringRef get kCFUserNotificationAlertMessageKey =>
      _kCFUserNotificationAlertMessageKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationDefaultButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationDefaultButtonTitleKey');

  CFStringRef get kCFUserNotificationDefaultButtonTitleKey =>
      _kCFUserNotificationDefaultButtonTitleKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationAlternateButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationAlternateButtonTitleKey');

  CFStringRef get kCFUserNotificationAlternateButtonTitleKey =>
      _kCFUserNotificationAlternateButtonTitleKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationOtherButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationOtherButtonTitleKey');

  CFStringRef get kCFUserNotificationOtherButtonTitleKey =>
      _kCFUserNotificationOtherButtonTitleKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationProgressIndicatorValueKey =
      _lookup<CFStringRef>('kCFUserNotificationProgressIndicatorValueKey');

  CFStringRef get kCFUserNotificationProgressIndicatorValueKey =>
      _kCFUserNotificationProgressIndicatorValueKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpTitlesKey');

  CFStringRef get kCFUserNotificationPopUpTitlesKey =>
      _kCFUserNotificationPopUpTitlesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldTitlesKey');

  CFStringRef get kCFUserNotificationTextFieldTitlesKey =>
      _kCFUserNotificationTextFieldTitlesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationCheckBoxTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationCheckBoxTitlesKey');

  CFStringRef get kCFUserNotificationCheckBoxTitlesKey =>
      _kCFUserNotificationCheckBoxTitlesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldValuesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldValuesKey');

  CFStringRef get kCFUserNotificationTextFieldValuesKey =>
      _kCFUserNotificationTextFieldValuesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpSelectionKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpSelectionKey');

  CFStringRef get kCFUserNotificationPopUpSelectionKey =>
      _kCFUserNotificationPopUpSelectionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertTopMostKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertTopMostKey');

  CFStringRef get kCFUserNotificationAlertTopMostKey =>
      _kCFUserNotificationAlertTopMostKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationKeyboardTypesKey =
      _lookup<CFStringRef>('kCFUserNotificationKeyboardTypesKey');

  CFStringRef get kCFUserNotificationKeyboardTypesKey =>
      _kCFUserNotificationKeyboardTypesKey.value;

  int CFXMLNodeGetTypeID() {
    return _CFXMLNodeGetTypeID();
  }

  late final _CFXMLNodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID =
      _CFXMLNodeGetTypeIDPtr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate(
    CFAllocatorRef alloc,
    CFXMLNodeTypeCode xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    DartCFIndex version,
  ) {
    return _CFXMLNodeCreate(
      alloc,
      xmlType.value,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, CFIndex, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate = _CFXMLNodeCreatePtr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopyPtr = _lookup<
          ffi
          .NativeFunction<CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>>(
      'CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy = _CFXMLNodeCreateCopyPtr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeTypeCode CFXMLNodeGetTypeCode(
    CFXMLNodeRef node,
  ) {
    return CFXMLNodeTypeCode.fromValue(_CFXMLNodeGetTypeCode(
      node,
    ));
  }

  late final _CFXMLNodeGetTypeCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode =
      _CFXMLNodeGetTypeCodePtr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString(
      node,
    );
  }

  late final _CFXMLNodeGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString =
      _CFXMLNodeGetStringPtr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr = _CFXMLNodeGetInfoPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion(
      node,
    );
  }

  late final _CFXMLNodeGetVersionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion =
      _CFXMLNodeGetVersionPtr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNodePtr = _lookup<
          ffi
          .NativeFunction<CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>>(
      'CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode = _CFXMLTreeCreateWithNodePtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode =
      _CFXMLTreeGetNodePtr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID() {
    return _CFXMLParserGetTypeID();
  }

  late final _CFXMLParserGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID =
      _CFXMLParserGetTypeIDPtr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate = _CFXMLParserCreatePtr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURLPtr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL =
      _CFXMLParserCreateWithDataFromURLPtr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext = _CFXMLParserGetContextPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks = _CFXMLParserGetCallBacksPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL = _CFXMLParserGetSourceURLPtr.asFunction<
      CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation(
      parser,
    );
  }

  late final _CFXMLParserGetLocationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation =
      _CFXMLParserGetLocationPtr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumberPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber =
      _CFXMLParserGetLineNumberPtr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument(
      parser,
    );
  }

  late final _CFXMLParserGetDocumentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument = _CFXMLParserGetDocumentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  CFXMLParserStatusCode CFXMLParserGetStatusCode(
    CFXMLParserRef parser,
  ) {
    return CFXMLParserStatusCode.fromValue(_CFXMLParserGetStatusCode(
      parser,
    ));
  }

  late final _CFXMLParserGetStatusCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode =
      _CFXMLParserGetStatusCodePtr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription =
      _CFXMLParserCopyErrorDescriptionPtr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort(
    CFXMLParserRef parser,
    CFXMLParserStatusCode errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort(
      parser,
      errorCode.value,
      errorDescription,
    );
  }

  late final _CFXMLParserAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFXMLParserRef, CFIndex, CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort = _CFXMLParserAbortPtr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse(
      parser,
    );
  }

  late final _CFXMLParserParsePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse =
      _CFXMLParserParsePtr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData = _CFXMLTreeCreateFromDataPtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithErrorPtr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError =
      _CFXMLTreeCreateFromDataWithErrorPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURLPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL =
      _CFXMLTreeCreateWithDataFromURLPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLDataPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData = _CFXMLTreeCreateXMLDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities =
      _CFXMLCreateStringByEscapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities =
      _CFXMLCreateStringByUnescapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorDescription =
      _lookup<CFStringRef>('kCFXMLTreeErrorDescription');

  CFStringRef get kCFXMLTreeErrorDescription =>
      _kCFXMLTreeErrorDescription.value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLineNumber =
      _lookup<CFStringRef>('kCFXMLTreeErrorLineNumber');

  CFStringRef get kCFXMLTreeErrorLineNumber => _kCFXMLTreeErrorLineNumber.value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLocation =
      _lookup<CFStringRef>('kCFXMLTreeErrorLocation');

  CFStringRef get kCFXMLTreeErrorLocation => _kCFXMLTreeErrorLocation.value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorStatusCode =
      _lookup<CFStringRef>('kCFXMLTreeErrorStatusCode');

  CFStringRef get kCFXMLTreeErrorStatusCode => _kCFXMLTreeErrorStatusCode.value;

  late final ffi.Pointer<CSSM_GUID> _gGuidCssm =
      _lookup<CSSM_GUID>('gGuidCssm');

  CSSM_GUID get gGuidCssm => _gGuidCssm.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleFileDL =
      _lookup<CSSM_GUID>('gGuidAppleFileDL');

  CSSM_GUID get gGuidAppleFileDL => _gGuidAppleFileDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSP =
      _lookup<CSSM_GUID>('gGuidAppleCSP');

  CSSM_GUID get gGuidAppleCSP => _gGuidAppleCSP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleCSPDL');

  CSSM_GUID get gGuidAppleCSPDL => _gGuidAppleCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509CL =
      _lookup<CSSM_GUID>('gGuidAppleX509CL');

  CSSM_GUID get gGuidAppleX509CL => _gGuidAppleX509CL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509TP =
      _lookup<CSSM_GUID>('gGuidAppleX509TP');

  CSSM_GUID get gGuidAppleX509TP => _gGuidAppleX509TP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleLDAPDL =
      _lookup<CSSM_GUID>('gGuidAppleLDAPDL');

  CSSM_GUID get gGuidAppleLDAPDL => _gGuidAppleLDAPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacTP =
      _lookup<CSSM_GUID>('gGuidAppleDotMacTP');

  CSSM_GUID get gGuidAppleDotMacTP => _gGuidAppleDotMacTP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleSdCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleSdCSPDL');

  CSSM_GUID get gGuidAppleSdCSPDL => _gGuidAppleSdCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacDL =
      _lookup<CSSM_GUID>('gGuidAppleDotMacDL');

  CSSM_GUID get gGuidAppleDotMacDL => _gGuidAppleDotMacDL.ref;

  void cssmPerror(
    ffi.Pointer<ffi.Char> how,
    int error,
  ) {
    return _cssmPerror(
      how,
      error,
    );
  }

  late final _cssmPerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, CSSM_RETURN)>>('cssmPerror');
  late final _cssmPerror =
      _cssmPerrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  bool cssmOidToAlg(
    ffi.Pointer<SecAsn1Oid> oid,
    ffi.Pointer<CSSM_ALGORITHMS> alg,
  ) {
    return _cssmOidToAlg(
      oid,
      alg,
    );
  }

  late final _cssmOidToAlgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<SecAsn1Oid>,
              ffi.Pointer<CSSM_ALGORITHMS>)>>('cssmOidToAlg');
  late final _cssmOidToAlg = _cssmOidToAlgPtr.asFunction<
      bool Function(ffi.Pointer<SecAsn1Oid>, ffi.Pointer<CSSM_ALGORITHMS>)>();

  ffi.Pointer<SecAsn1Oid> cssmAlgToOid(
    int algId,
  ) {
    return _cssmAlgToOid(
      algId,
    );
  }

  late final _cssmAlgToOidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SecAsn1Oid> Function(CSSM_ALGORITHMS)>>('cssmAlgToOid');
  late final _cssmAlgToOid =
      _cssmAlgToOidPtr.asFunction<ffi.Pointer<SecAsn1Oid> Function(int)>();

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeTitle =
      _lookup<CFStringRef>('kSecPropertyTypeTitle');

  CFStringRef get kSecPropertyTypeTitle => _kSecPropertyTypeTitle.value;

  set kSecPropertyTypeTitle(CFStringRef value) =>
      _kSecPropertyTypeTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeError =
      _lookup<CFStringRef>('kSecPropertyTypeError');

  CFStringRef get kSecPropertyTypeError => _kSecPropertyTypeError.value;

  set kSecPropertyTypeError(CFStringRef value) =>
      _kSecPropertyTypeError.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustEvaluationDate =
      _lookup<CFStringRef>('kSecTrustEvaluationDate');

  CFStringRef get kSecTrustEvaluationDate => _kSecTrustEvaluationDate.value;

  set kSecTrustEvaluationDate(CFStringRef value) =>
      _kSecTrustEvaluationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustExtendedValidation =
      _lookup<CFStringRef>('kSecTrustExtendedValidation');

  CFStringRef get kSecTrustExtendedValidation =>
      _kSecTrustExtendedValidation.value;

  set kSecTrustExtendedValidation(CFStringRef value) =>
      _kSecTrustExtendedValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustOrganizationName =
      _lookup<CFStringRef>('kSecTrustOrganizationName');

  CFStringRef get kSecTrustOrganizationName => _kSecTrustOrganizationName.value;

  set kSecTrustOrganizationName(CFStringRef value) =>
      _kSecTrustOrganizationName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustResultValue =
      _lookup<CFStringRef>('kSecTrustResultValue');

  CFStringRef get kSecTrustResultValue => _kSecTrustResultValue.value;

  set kSecTrustResultValue(CFStringRef value) =>
      _kSecTrustResultValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationChecked =
      _lookup<CFStringRef>('kSecTrustRevocationChecked');

  CFStringRef get kSecTrustRevocationChecked =>
      _kSecTrustRevocationChecked.value;

  set kSecTrustRevocationChecked(CFStringRef value) =>
      _kSecTrustRevocationChecked.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationValidUntilDate =
      _lookup<CFStringRef>('kSecTrustRevocationValidUntilDate');

  CFStringRef get kSecTrustRevocationValidUntilDate =>
      _kSecTrustRevocationValidUntilDate.value;

  set kSecTrustRevocationValidUntilDate(CFStringRef value) =>
      _kSecTrustRevocationValidUntilDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustCertificateTransparency =
      _lookup<CFStringRef>('kSecTrustCertificateTransparency');

  CFStringRef get kSecTrustCertificateTransparency =>
      _kSecTrustCertificateTransparency.value;

  set kSecTrustCertificateTransparency(CFStringRef value) =>
      _kSecTrustCertificateTransparency.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecTrustCertificateTransparencyWhiteList =
      _lookup<CFStringRef>('kSecTrustCertificateTransparencyWhiteList');

  CFStringRef get kSecTrustCertificateTransparencyWhiteList =>
      _kSecTrustCertificateTransparencyWhiteList.value;

  set kSecTrustCertificateTransparencyWhiteList(CFStringRef value) =>
      _kSecTrustCertificateTransparencyWhiteList.value = value;

  int SecTrustGetTypeID() {
    return _SecTrustGetTypeID();
  }

  late final _SecTrustGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecTrustGetTypeID');
  late final _SecTrustGetTypeID =
      _SecTrustGetTypeIDPtr.asFunction<int Function()>();

  int SecTrustCreateWithCertificates(
    CFTypeRef certificates,
    CFTypeRef policies,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SecTrustCreateWithCertificates(
      certificates,
      policies,
      trust,
    );
  }

  late final _SecTrustCreateWithCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFTypeRef, CFTypeRef,
              ffi.Pointer<SecTrustRef>)>>('SecTrustCreateWithCertificates');
  late final _SecTrustCreateWithCertificates =
      _SecTrustCreateWithCertificatesPtr.asFunction<
          int Function(CFTypeRef, CFTypeRef, ffi.Pointer<SecTrustRef>)>();

  int SecTrustSetPolicies(
    SecTrustRef trust,
    CFTypeRef policies,
  ) {
    return _SecTrustSetPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustSetPoliciesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetPolicies');
  late final _SecTrustSetPolicies = _SecTrustSetPoliciesPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustCopyPolicies(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> policies,
  ) {
    return _SecTrustCopyPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustCopyPoliciesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<CFArrayRef>)>>('SecTrustCopyPolicies');
  late final _SecTrustCopyPolicies = _SecTrustCopyPoliciesPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetNetworkFetchAllowed(
    SecTrustRef trust,
    int allowFetch,
  ) {
    return _SecTrustSetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustSetNetworkFetchAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetNetworkFetchAllowed');
  late final _SecTrustSetNetworkFetchAllowed =
      _SecTrustSetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustGetNetworkFetchAllowed(
    SecTrustRef trust,
    ffi.Pointer<Boolean> allowFetch,
  ) {
    return _SecTrustGetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustGetNetworkFetchAllowedPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<Boolean>)>>('SecTrustGetNetworkFetchAllowed');
  late final _SecTrustGetNetworkFetchAllowed =
      _SecTrustGetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<Boolean>)>();

  int SecTrustSetAnchorCertificates(
    SecTrustRef trust,
    CFArrayRef anchorCertificates,
  ) {
    return _SecTrustSetAnchorCertificates(
      trust,
      anchorCertificates,
    );
  }

  late final _SecTrustSetAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetAnchorCertificates');
  late final _SecTrustSetAnchorCertificates = _SecTrustSetAnchorCertificatesPtr
      .asFunction<int Function(SecTrustRef, CFArrayRef)>();

  int SecTrustSetAnchorCertificatesOnly(
    SecTrustRef trust,
    int anchorCertificatesOnly,
  ) {
    return _SecTrustSetAnchorCertificatesOnly(
      trust,
      anchorCertificatesOnly,
    );
  }

  late final _SecTrustSetAnchorCertificatesOnlyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetAnchorCertificatesOnly');
  late final _SecTrustSetAnchorCertificatesOnly =
      _SecTrustSetAnchorCertificatesOnlyPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustCopyCustomAnchorCertificates(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyCustomAnchorCertificates(
      trust,
      anchors,
    );
  }

  late final _SecTrustCopyCustomAnchorCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>>(
      'SecTrustCopyCustomAnchorCertificates');
  late final _SecTrustCopyCustomAnchorCertificates =
      _SecTrustCopyCustomAnchorCertificatesPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetVerifyDate(
    SecTrustRef trust,
    CFDateRef verifyDate,
  ) {
    return _SecTrustSetVerifyDate(
      trust,
      verifyDate,
    );
  }

  late final _SecTrustSetVerifyDatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFDateRef)>>(
          'SecTrustSetVerifyDate');
  late final _SecTrustSetVerifyDate = _SecTrustSetVerifyDatePtr.asFunction<
      int Function(SecTrustRef, CFDateRef)>();

  double SecTrustGetVerifyTime(
    SecTrustRef trust,
  ) {
    return _SecTrustGetVerifyTime(
      trust,
    );
  }

  late final _SecTrustGetVerifyTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(SecTrustRef)>>(
          'SecTrustGetVerifyTime');
  late final _SecTrustGetVerifyTime =
      _SecTrustGetVerifyTimePtr.asFunction<double Function(SecTrustRef)>();

  int SecTrustEvaluate(
    SecTrustRef trust,
    ffi.Pointer<ffi.Uint32> result,
  ) {
    return _SecTrustEvaluate(
      trust,
      result,
    );
  }

  late final _SecTrustEvaluatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Uint32>)>>('SecTrustEvaluate');
  late final _SecTrustEvaluate = _SecTrustEvaluatePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Uint32>)>();

  DartSInt32 SecTrustEvaluateAsync(
    SecTrustRef trust,
    dispatch_queue_t queue,
    DartSecTrustCallback result,
  ) {
    return _SecTrustEvaluateAsync(
      trust,
      queue,
      result.pointer,
    );
  }

  late final _SecTrustEvaluateAsyncPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustCallback)>>('SecTrustEvaluateAsync');
  late final _SecTrustEvaluateAsync = _SecTrustEvaluateAsyncPtr.asFunction<
      int Function(SecTrustRef, dispatch_queue_t, SecTrustCallback)>();

  bool SecTrustEvaluateWithError(
    SecTrustRef trust,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecTrustEvaluateWithError(
      trust,
      error,
    );
  }

  late final _SecTrustEvaluateWithErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(SecTrustRef,
              ffi.Pointer<CFErrorRef>)>>('SecTrustEvaluateWithError');
  late final _SecTrustEvaluateWithError = _SecTrustEvaluateWithErrorPtr
      .asFunction<bool Function(SecTrustRef, ffi.Pointer<CFErrorRef>)>();

  DartSInt32 SecTrustEvaluateAsyncWithError(
    SecTrustRef trust,
    dispatch_queue_t queue,
    DartSecTrustWithErrorCallback result,
  ) {
    return _SecTrustEvaluateAsyncWithError(
      trust,
      queue,
      result.pointer,
    );
  }

  late final _SecTrustEvaluateAsyncWithErrorPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustWithErrorCallback)>>('SecTrustEvaluateAsyncWithError');
  late final _SecTrustEvaluateAsyncWithError =
      _SecTrustEvaluateAsyncWithErrorPtr.asFunction<
          int Function(
              SecTrustRef, dispatch_queue_t, SecTrustWithErrorCallback)>();

  int SecTrustGetTrustResult(
    SecTrustRef trust,
    ffi.Pointer<ffi.Uint32> result,
  ) {
    return _SecTrustGetTrustResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetTrustResultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Uint32>)>>('SecTrustGetTrustResult');
  late final _SecTrustGetTrustResult = _SecTrustGetTrustResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Uint32>)>();

  SecKeyRef SecTrustCopyPublicKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyPublicKey(
      trust,
    );
  }

  late final _SecTrustCopyPublicKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyPublicKey');
  late final _SecTrustCopyPublicKey =
      _SecTrustCopyPublicKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  SecKeyRef SecTrustCopyKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyKey(
      trust,
    );
  }

  late final _SecTrustCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyKey');
  late final _SecTrustCopyKey =
      _SecTrustCopyKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  int SecTrustGetCertificateCount(
    SecTrustRef trust,
  ) {
    return _SecTrustGetCertificateCount(
      trust,
    );
  }

  late final _SecTrustGetCertificateCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(SecTrustRef)>>(
          'SecTrustGetCertificateCount');
  late final _SecTrustGetCertificateCount =
      _SecTrustGetCertificateCountPtr.asFunction<int Function(SecTrustRef)>();

  SecCertificateRef SecTrustGetCertificateAtIndex(
    SecTrustRef trust,
    int ix,
  ) {
    return _SecTrustGetCertificateAtIndex(
      trust,
      ix,
    );
  }

  late final _SecTrustGetCertificateAtIndexPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(SecTrustRef, CFIndex)>>(
      'SecTrustGetCertificateAtIndex');
  late final _SecTrustGetCertificateAtIndex = _SecTrustGetCertificateAtIndexPtr
      .asFunction<SecCertificateRef Function(SecTrustRef, int)>();

  CFDataRef SecTrustCopyExceptions(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyExceptions(
      trust,
    );
  }

  late final _SecTrustCopyExceptionsPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecTrustRef)>>(
          'SecTrustCopyExceptions');
  late final _SecTrustCopyExceptions =
      _SecTrustCopyExceptionsPtr.asFunction<CFDataRef Function(SecTrustRef)>();

  bool SecTrustSetExceptions(
    SecTrustRef trust,
    CFDataRef exceptions,
  ) {
    return _SecTrustSetExceptions(
      trust,
      exceptions,
    );
  }

  late final _SecTrustSetExceptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(SecTrustRef, CFDataRef)>>(
          'SecTrustSetExceptions');
  late final _SecTrustSetExceptions = _SecTrustSetExceptionsPtr.asFunction<
      bool Function(SecTrustRef, CFDataRef)>();

  CFArrayRef SecTrustCopyProperties(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyProperties(
      trust,
    );
  }

  late final _SecTrustCopyPropertiesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyProperties');
  late final _SecTrustCopyProperties =
      _SecTrustCopyPropertiesPtr.asFunction<CFArrayRef Function(SecTrustRef)>();

  CFDictionaryRef SecTrustCopyResult(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyResult(
      trust,
    );
  }

  late final _SecTrustCopyResultPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(SecTrustRef)>>(
          'SecTrustCopyResult');
  late final _SecTrustCopyResult = _SecTrustCopyResultPtr.asFunction<
      CFDictionaryRef Function(SecTrustRef)>();

  int SecTrustSetOCSPResponse(
    SecTrustRef trust,
    CFTypeRef responseData,
  ) {
    return _SecTrustSetOCSPResponse(
      trust,
      responseData,
    );
  }

  late final _SecTrustSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetOCSPResponse');
  late final _SecTrustSetOCSPResponse = _SecTrustSetOCSPResponsePtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustSetSignedCertificateTimestamps(
    SecTrustRef trust,
    CFArrayRef sctArray,
  ) {
    return _SecTrustSetSignedCertificateTimestamps(
      trust,
      sctArray,
    );
  }

  late final _SecTrustSetSignedCertificateTimestampsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetSignedCertificateTimestamps');
  late final _SecTrustSetSignedCertificateTimestamps =
      _SecTrustSetSignedCertificateTimestampsPtr.asFunction<
          int Function(SecTrustRef, CFArrayRef)>();

  CFArrayRef SecTrustCopyCertificateChain(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyCertificateChain(
      trust,
    );
  }

  late final _SecTrustCopyCertificateChainPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyCertificateChain');
  late final _SecTrustCopyCertificateChain = _SecTrustCopyCertificateChainPtr
      .asFunction<CFArrayRef Function(SecTrustRef)>();

  DartSInt32 SecTrustSetOptions(
    SecTrustRef trustRef,
    SecTrustOptionFlags options,
  ) {
    return _SecTrustSetOptions(
      trustRef,
      options.value,
    );
  }

  late final _SecTrustSetOptionsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, ffi.Uint32)>>(
          'SecTrustSetOptions');
  late final _SecTrustSetOptions =
      _SecTrustSetOptionsPtr.asFunction<int Function(SecTrustRef, int)>();

  int SecTrustSetParameters(
    SecTrustRef trustRef,
    int action,
    CFDataRef actionData,
  ) {
    return _SecTrustSetParameters(
      trustRef,
      action,
      actionData,
    );
  }

  late final _SecTrustSetParametersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, CSSM_TP_ACTION,
              CFDataRef)>>('SecTrustSetParameters');
  late final _SecTrustSetParameters = _SecTrustSetParametersPtr.asFunction<
      int Function(SecTrustRef, int, CFDataRef)>();

  int SecTrustSetKeychains(
    SecTrustRef trust,
    CFTypeRef keychainOrArray,
  ) {
    return _SecTrustSetKeychains(
      trust,
      keychainOrArray,
    );
  }

  late final _SecTrustSetKeychainsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetKeychains');
  late final _SecTrustSetKeychains = _SecTrustSetKeychainsPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustGetResult(
    SecTrustRef trustRef,
    ffi.Pointer<ffi.Uint32> result,
    ffi.Pointer<CFArrayRef> certChain,
    ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>> statusChain,
  ) {
    return _SecTrustGetResult(
      trustRef,
      result,
      certChain,
      statusChain,
    );
  }

  late final _SecTrustGetResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<CFArrayRef>,
                  ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>>(
      'SecTrustGetResult');
  late final _SecTrustGetResult = _SecTrustGetResultPtr.asFunction<
      int Function(
          SecTrustRef,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<CFArrayRef>,
          ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>();

  int SecTrustGetCssmResult(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR> result,
  ) {
    return _SecTrustGetCssmResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetCssmResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef,
                  ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>>(
      'SecTrustGetCssmResult');
  late final _SecTrustGetCssmResult = _SecTrustGetCssmResultPtr.asFunction<
      int Function(
          SecTrustRef, ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>();

  int SecTrustGetCssmResultCode(
    SecTrustRef trust,
    ffi.Pointer<OSStatus> resultCode,
  ) {
    return _SecTrustGetCssmResultCode(
      trust,
      resultCode,
    );
  }

  late final _SecTrustGetCssmResultCodePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<OSStatus>)>>('SecTrustGetCssmResultCode');
  late final _SecTrustGetCssmResultCode = _SecTrustGetCssmResultCodePtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<OSStatus>)>();

  int SecTrustGetTPHandle(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_HANDLE> handle,
  ) {
    return _SecTrustGetTPHandle(
      trust,
      handle,
    );
  }

  late final _SecTrustGetTPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecTrustGetTPHandle');
  late final _SecTrustGetTPHandle = _SecTrustGetTPHandlePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  int SecTrustCopyAnchorCertificates(
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyAnchorCertificates(
      anchors,
    );
  }

  late final _SecTrustCopyAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(ffi.Pointer<CFArrayRef>)>>(
          'SecTrustCopyAnchorCertificates');
  late final _SecTrustCopyAnchorCertificates =
      _SecTrustCopyAnchorCertificatesPtr.asFunction<
          int Function(ffi.Pointer<CFArrayRef>)>();

  int SecCertificateGetTypeID() {
    return _SecCertificateGetTypeID();
  }

  late final _SecCertificateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'SecCertificateGetTypeID');
  late final _SecCertificateGetTypeID =
      _SecCertificateGetTypeIDPtr.asFunction<int Function()>();

  SecCertificateRef SecCertificateCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
  ) {
    return _SecCertificateCreateWithData(
      allocator,
      data,
    );
  }

  late final _SecCertificateCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFAllocatorRef, CFDataRef)>>('SecCertificateCreateWithData');
  late final _SecCertificateCreateWithData = _SecCertificateCreateWithDataPtr
      .asFunction<SecCertificateRef Function(CFAllocatorRef, CFDataRef)>();

  CFDataRef SecCertificateCopyData(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyData(
      certificate,
    );
  }

  late final _SecCertificateCopyDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyData');
  late final _SecCertificateCopyData = _SecCertificateCopyDataPtr.asFunction<
      CFDataRef Function(SecCertificateRef)>();

  CFStringRef SecCertificateCopySubjectSummary(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopySubjectSummary(
      certificate,
    );
  }

  late final _SecCertificateCopySubjectSummaryPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(SecCertificateRef)>>(
          'SecCertificateCopySubjectSummary');
  late final _SecCertificateCopySubjectSummary =
      _SecCertificateCopySubjectSummaryPtr.asFunction<
          CFStringRef Function(SecCertificateRef)>();

  int SecCertificateCopyCommonName(
    SecCertificateRef certificate,
    ffi.Pointer<CFStringRef> commonName,
  ) {
    return _SecCertificateCopyCommonName(
      certificate,
      commonName,
    );
  }

  late final _SecCertificateCopyCommonNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFStringRef>)>>('SecCertificateCopyCommonName');
  late final _SecCertificateCopyCommonName = _SecCertificateCopyCommonNamePtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<CFStringRef>)>();

  int SecCertificateCopyEmailAddresses(
    SecCertificateRef certificate,
    ffi.Pointer<CFArrayRef> emailAddresses,
  ) {
    return _SecCertificateCopyEmailAddresses(
      certificate,
      emailAddresses,
    );
  }

  late final _SecCertificateCopyEmailAddressesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFArrayRef>)>>('SecCertificateCopyEmailAddresses');
  late final _SecCertificateCopyEmailAddresses =
      _SecCertificateCopyEmailAddressesPtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CFArrayRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedIssuerSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedIssuerSequence');
  late final _SecCertificateCopyNormalizedIssuerSequence =
      _SecCertificateCopyNormalizedIssuerSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  CFDataRef SecCertificateCopyNormalizedSubjectSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedSubjectSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedSubjectSequence');
  late final _SecCertificateCopyNormalizedSubjectSequence =
      _SecCertificateCopyNormalizedSubjectSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  SecKeyRef SecCertificateCopyKey(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyKey(
      certificate,
    );
  }

  late final _SecCertificateCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecCertificateRef)>>(
          'SecCertificateCopyKey');
  late final _SecCertificateCopyKey = _SecCertificateCopyKeyPtr.asFunction<
      SecKeyRef Function(SecCertificateRef)>();

  int SecCertificateCopyPublicKey(
    SecCertificateRef certificate,
    ffi.Pointer<SecKeyRef> key,
  ) {
    return _SecCertificateCopyPublicKey(
      certificate,
      key,
    );
  }

  late final _SecCertificateCopyPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<SecKeyRef>)>>('SecCertificateCopyPublicKey');
  late final _SecCertificateCopyPublicKey = _SecCertificateCopyPublicKeyPtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<SecKeyRef>)>();

  CFDataRef SecCertificateCopySerialNumberData(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumberData(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumberData');
  late final _SecCertificateCopySerialNumberData =
      _SecCertificateCopySerialNumberDataPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopySerialNumber(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumber(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumber');
  late final _SecCertificateCopySerialNumber =
      _SecCertificateCopySerialNumberPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecCertificateCreateFromData(
    ffi.Pointer<SecAsn1Item> data,
    int type,
    int encoding,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCreateFromData(
      data,
      type,
      encoding,
      certificate,
    );
  }

  late final _SecCertificateCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<SecAsn1Item>,
              CSSM_CERT_TYPE,
              CSSM_CERT_ENCODING,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCreateFromData');
  late final _SecCertificateCreateFromData =
      _SecCertificateCreateFromDataPtr.asFunction<
          int Function(ffi.Pointer<SecAsn1Item>, int, int,
              ffi.Pointer<SecCertificateRef>)>();

  int SecCertificateAddToKeychain(
    SecCertificateRef certificate,
    SecKeychainRef keychain,
  ) {
    return _SecCertificateAddToKeychain(
      certificate,
      keychain,
    );
  }

  late final _SecCertificateAddToKeychainPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecKeychainRef)>>('SecCertificateAddToKeychain');
  late final _SecCertificateAddToKeychain = _SecCertificateAddToKeychainPtr
      .asFunction<int Function(SecCertificateRef, SecKeychainRef)>();

  int SecCertificateGetData(
    SecCertificateRef certificate,
    CSSM_DATA_PTR data,
  ) {
    return _SecCertificateGetData(
      certificate,
      data,
    );
  }

  late final _SecCertificateGetDataPtr = _lookup<
          ffi
          .NativeFunction<OSStatus Function(SecCertificateRef, CSSM_DATA_PTR)>>(
      'SecCertificateGetData');
  late final _SecCertificateGetData = _SecCertificateGetDataPtr.asFunction<
      int Function(SecCertificateRef, CSSM_DATA_PTR)>();

  int SecCertificateGetType(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CERT_TYPE> certificateType,
  ) {
    return _SecCertificateGetType(
      certificate,
      certificateType,
    );
  }

  late final _SecCertificateGetTypePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CERT_TYPE>)>>('SecCertificateGetType');
  late final _SecCertificateGetType = _SecCertificateGetTypePtr.asFunction<
      int Function(SecCertificateRef, ffi.Pointer<CSSM_CERT_TYPE>)>();

  int SecCertificateGetSubject(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> subject,
  ) {
    return _SecCertificateGetSubject(
      certificate,
      subject,
    );
  }

  late final _SecCertificateGetSubjectPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetSubject');
  late final _SecCertificateGetSubject =
      _SecCertificateGetSubjectPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetIssuer(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> issuer,
  ) {
    return _SecCertificateGetIssuer(
      certificate,
      issuer,
    );
  }

  late final _SecCertificateGetIssuerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetIssuer');
  late final _SecCertificateGetIssuer = _SecCertificateGetIssuerPtr.asFunction<
      int Function(
          SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetCLHandle(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CL_HANDLE> clHandle,
  ) {
    return _SecCertificateGetCLHandle(
      certificate,
      clHandle,
    );
  }

  late final _SecCertificateGetCLHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CL_HANDLE>)>>('SecCertificateGetCLHandle');
  late final _SecCertificateGetCLHandle =
      _SecCertificateGetCLHandlePtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CSSM_CL_HANDLE>)>();

  int SecCertificateGetAlgorithmID(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<SecAsn1AlgId>> algid,
  ) {
    return _SecCertificateGetAlgorithmID(
      certificate,
      algid,
    );
  }

  late final _SecCertificateGetAlgorithmIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>>(
      'SecCertificateGetAlgorithmID');
  late final _SecCertificateGetAlgorithmID =
      _SecCertificateGetAlgorithmIDPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>();

  int SecCertificateCopyPreference(
    CFStringRef name,
    int keyUsage,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCopyPreference(
      name,
      keyUsage,
      certificate,
    );
  }

  late final _SecCertificateCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, uint32,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCopyPreference');
  late final _SecCertificateCopyPreference =
      _SecCertificateCopyPreferencePtr.asFunction<
          int Function(CFStringRef, int, ffi.Pointer<SecCertificateRef>)>();

  SecCertificateRef SecCertificateCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateCopyPreferred(
      name,
      keyUsage,
    );
  }

  late final _SecCertificateCopyPreferredPtr = _lookup<
          ffi
          .NativeFunction<SecCertificateRef Function(CFStringRef, CFArrayRef)>>(
      'SecCertificateCopyPreferred');
  late final _SecCertificateCopyPreferred = _SecCertificateCopyPreferredPtr
      .asFunction<SecCertificateRef Function(CFStringRef, CFArrayRef)>();

  int SecCertificateSetPreference(
    SecCertificateRef certificate,
    CFStringRef name,
    int keyUsage,
    CFDateRef date,
  ) {
    return _SecCertificateSetPreference(
      certificate,
      name,
      keyUsage,
      date,
    );
  }

  late final _SecCertificateSetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef, uint32,
              CFDateRef)>>('SecCertificateSetPreference');
  late final _SecCertificateSetPreference =
      _SecCertificateSetPreferencePtr.asFunction<
          int Function(SecCertificateRef, CFStringRef, int, CFDateRef)>();

  int SecCertificateSetPreferred(
    SecCertificateRef certificate,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateSetPreferred(
      certificate,
      name,
      keyUsage,
    );
  }

  late final _SecCertificateSetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef,
              CFArrayRef)>>('SecCertificateSetPreferred');
  late final _SecCertificateSetPreferred = _SecCertificateSetPreferredPtr
      .asFunction<int Function(SecCertificateRef, CFStringRef, CFArrayRef)>();

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyType =
      _lookup<CFStringRef>('kSecPropertyKeyType');

  CFStringRef get kSecPropertyKeyType => _kSecPropertyKeyType.value;

  set kSecPropertyKeyType(CFStringRef value) =>
      _kSecPropertyKeyType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLabel');

  CFStringRef get kSecPropertyKeyLabel => _kSecPropertyKeyLabel.value;

  set kSecPropertyKeyLabel(CFStringRef value) =>
      _kSecPropertyKeyLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLocalizedLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLocalizedLabel');

  CFStringRef get kSecPropertyKeyLocalizedLabel =>
      _kSecPropertyKeyLocalizedLabel.value;

  set kSecPropertyKeyLocalizedLabel(CFStringRef value) =>
      _kSecPropertyKeyLocalizedLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyValue =
      _lookup<CFStringRef>('kSecPropertyKeyValue');

  CFStringRef get kSecPropertyKeyValue => _kSecPropertyKeyValue.value;

  set kSecPropertyKeyValue(CFStringRef value) =>
      _kSecPropertyKeyValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeWarning =
      _lookup<CFStringRef>('kSecPropertyTypeWarning');

  CFStringRef get kSecPropertyTypeWarning => _kSecPropertyTypeWarning.value;

  set kSecPropertyTypeWarning(CFStringRef value) =>
      _kSecPropertyTypeWarning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSuccess =
      _lookup<CFStringRef>('kSecPropertyTypeSuccess');

  CFStringRef get kSecPropertyTypeSuccess => _kSecPropertyTypeSuccess.value;

  set kSecPropertyTypeSuccess(CFStringRef value) =>
      _kSecPropertyTypeSuccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSection =
      _lookup<CFStringRef>('kSecPropertyTypeSection');

  CFStringRef get kSecPropertyTypeSection => _kSecPropertyTypeSection.value;

  set kSecPropertyTypeSection(CFStringRef value) =>
      _kSecPropertyTypeSection.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeData =
      _lookup<CFStringRef>('kSecPropertyTypeData');

  CFStringRef get kSecPropertyTypeData => _kSecPropertyTypeData.value;

  set kSecPropertyTypeData(CFStringRef value) =>
      _kSecPropertyTypeData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeString =
      _lookup<CFStringRef>('kSecPropertyTypeString');

  CFStringRef get kSecPropertyTypeString => _kSecPropertyTypeString.value;

  set kSecPropertyTypeString(CFStringRef value) =>
      _kSecPropertyTypeString.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeURL =
      _lookup<CFStringRef>('kSecPropertyTypeURL');

  CFStringRef get kSecPropertyTypeURL => _kSecPropertyTypeURL.value;

  set kSecPropertyTypeURL(CFStringRef value) =>
      _kSecPropertyTypeURL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeDate =
      _lookup<CFStringRef>('kSecPropertyTypeDate');

  CFStringRef get kSecPropertyTypeDate => _kSecPropertyTypeDate.value;

  set kSecPropertyTypeDate(CFStringRef value) =>
      _kSecPropertyTypeDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeArray =
      _lookup<CFStringRef>('kSecPropertyTypeArray');

  CFStringRef get kSecPropertyTypeArray => _kSecPropertyTypeArray.value;

  set kSecPropertyTypeArray(CFStringRef value) =>
      _kSecPropertyTypeArray.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeNumber =
      _lookup<CFStringRef>('kSecPropertyTypeNumber');

  CFStringRef get kSecPropertyTypeNumber => _kSecPropertyTypeNumber.value;

  set kSecPropertyTypeNumber(CFStringRef value) =>
      _kSecPropertyTypeNumber.value = value;

  CFDictionaryRef SecCertificateCopyValues(
    SecCertificateRef certificate,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyValues(
      certificate,
      keys,
      error,
    );
  }

  late final _SecCertificateCopyValuesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(SecCertificateRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyValues');
  late final _SecCertificateCopyValues =
      _SecCertificateCopyValuesPtr.asFunction<
          CFDictionaryRef Function(
              SecCertificateRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyLongDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyLongDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyLongDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyLongDescription');
  late final _SecCertificateCopyLongDescription =
      _SecCertificateCopyLongDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyShortDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyShortDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyShortDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyShortDescription');
  late final _SecCertificateCopyShortDescription =
      _SecCertificateCopyShortDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedIssuerContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedIssuerContent');
  late final _SecCertificateCopyNormalizedIssuerContent =
      _SecCertificateCopyNormalizedIssuerContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedSubjectContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedSubjectContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedSubjectContent');
  late final _SecCertificateCopyNormalizedSubjectContent =
      _SecCertificateCopyNormalizedSubjectContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecIdentityGetTypeID() {
    return _SecIdentityGetTypeID();
  }

  late final _SecIdentityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID =
      _SecIdentityGetTypeIDPtr.asFunction<int Function()>();

  int SecIdentityCreateWithCertificate(
    CFTypeRef keychainOrArray,
    SecCertificateRef certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate =
      _SecIdentityCreateWithCertificatePtr.asFunction<
          int Function(
              CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>();

  int SecIdentityCopyCertificate(
    SecIdentityRef identityRef,
    ffi.Pointer<SecCertificateRef> certificateRef,
  ) {
    return _SecIdentityCopyCertificate(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecCertificateRef>)>>('SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate =
      _SecIdentityCopyCertificatePtr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<SecCertificateRef>)>();

  int SecIdentityCopyPrivateKey(
    SecIdentityRef identityRef,
    ffi.Pointer<SecKeyRef> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecKeyRef>)>>('SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey = _SecIdentityCopyPrivateKeyPtr
      .asFunction<int Function(SecIdentityRef, ffi.Pointer<SecKeyRef>)>();

  int SecIdentityCopyPreference(
    CFStringRef name,
    int keyUsage,
    CFArrayRef validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, CSSM_KEYUSE, CFArrayRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference =
      _SecIdentityCopyPreferencePtr.asFunction<
          int Function(
              CFStringRef, int, CFArrayRef, ffi.Pointer<SecIdentityRef>)>();

  SecIdentityRef SecIdentityCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
    CFArrayRef validIssuers,
  ) {
    return _SecIdentityCopyPreferred(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef,
              CFArrayRef)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred =
      _SecIdentityCopyPreferredPtr.asFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef, CFArrayRef)>();

  int SecIdentitySetPreference(
    SecIdentityRef identity,
    CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CSSM_KEYUSE)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference = _SecIdentitySetPreferencePtr
      .asFunction<int Function(SecIdentityRef, CFStringRef, int)>();

  int SecIdentitySetPreferred(
    SecIdentityRef identity,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecIdentitySetPreferred(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CFArrayRef)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred = _SecIdentitySetPreferredPtr.asFunction<
      int Function(SecIdentityRef, CFStringRef, CFArrayRef)>();

  int SecIdentityCopySystemIdentity(
    CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>>('SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity =
      _SecIdentityCopySystemIdentityPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>();

  int SecIdentitySetSystemIdentity(
    CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentityPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(CFStringRef, SecIdentityRef)>>(
      'SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity = _SecIdentitySetSystemIdentityPtr
      .asFunction<int Function(CFStringRef, SecIdentityRef)>();

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainDefault =
      _lookup<CFStringRef>('kSecIdentityDomainDefault');

  CFStringRef get kSecIdentityDomainDefault => _kSecIdentityDomainDefault.value;

  set kSecIdentityDomainDefault(CFStringRef value) =>
      _kSecIdentityDomainDefault.value = value;

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainKerberosKDC =
      _lookup<CFStringRef>('kSecIdentityDomainKerberosKDC');

  CFStringRef get kSecIdentityDomainKerberosKDC =>
      _kSecIdentityDomainKerberosKDC.value;

  set kSecIdentityDomainKerberosKDC(CFStringRef value) =>
      _kSecIdentityDomainKerberosKDC.value = value;

  sec_trust_t sec_trust_create(
    SecTrustRef trust,
  ) {
    return _sec_trust_create(
      trust,
    );
  }

  late final _sec_trust_createPtr =
      _lookup<ffi.NativeFunction<sec_trust_t Function(SecTrustRef)>>(
          'sec_trust_create');
  late final _sec_trust_create =
      _sec_trust_createPtr.asFunction<sec_trust_t Function(SecTrustRef)>();

  SecTrustRef sec_trust_copy_ref(
    sec_trust_t trust,
  ) {
    return _sec_trust_copy_ref(
      trust,
    );
  }

  late final _sec_trust_copy_refPtr =
      _lookup<ffi.NativeFunction<SecTrustRef Function(sec_trust_t)>>(
          'sec_trust_copy_ref');
  late final _sec_trust_copy_ref =
      _sec_trust_copy_refPtr.asFunction<SecTrustRef Function(sec_trust_t)>();

  sec_identity_t sec_identity_create(
    SecIdentityRef identity,
  ) {
    return _sec_identity_create(
      identity,
    );
  }

  late final _sec_identity_createPtr =
      _lookup<ffi.NativeFunction<sec_identity_t Function(SecIdentityRef)>>(
          'sec_identity_create');
  late final _sec_identity_create = _sec_identity_createPtr
      .asFunction<sec_identity_t Function(SecIdentityRef)>();

  sec_identity_t sec_identity_create_with_certificates(
    SecIdentityRef identity,
    CFArrayRef certificates,
  ) {
    return _sec_identity_create_with_certificates(
      identity,
      certificates,
    );
  }

  late final _sec_identity_create_with_certificatesPtr = _lookup<
          ffi
          .NativeFunction<sec_identity_t Function(SecIdentityRef, CFArrayRef)>>(
      'sec_identity_create_with_certificates');
  late final _sec_identity_create_with_certificates =
      _sec_identity_create_with_certificatesPtr
          .asFunction<sec_identity_t Function(SecIdentityRef, CFArrayRef)>();

  bool sec_identity_access_certificates(
    sec_identity_t identity,
    ObjCBlock_ffiVoid_seccertificatet handler,
  ) {
    return _sec_identity_access_certificates(
      identity,
      handler.pointer,
    );
  }

  late final _sec_identity_access_certificatesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(sec_identity_t, ffi.Pointer<objc.ObjCBlock>)>>(
      'sec_identity_access_certificates');
  late final _sec_identity_access_certificates =
      _sec_identity_access_certificatesPtr.asFunction<
          bool Function(sec_identity_t, ffi.Pointer<objc.ObjCBlock>)>();

  SecIdentityRef sec_identity_copy_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_ref(
      identity,
    );
  }

  late final _sec_identity_copy_refPtr =
      _lookup<ffi.NativeFunction<SecIdentityRef Function(sec_identity_t)>>(
          'sec_identity_copy_ref');
  late final _sec_identity_copy_ref = _sec_identity_copy_refPtr
      .asFunction<SecIdentityRef Function(sec_identity_t)>();

  CFArrayRef sec_identity_copy_certificates_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_certificates_ref(
      identity,
    );
  }

  late final _sec_identity_copy_certificates_refPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(sec_identity_t)>>(
          'sec_identity_copy_certificates_ref');
  late final _sec_identity_copy_certificates_ref =
      _sec_identity_copy_certificates_refPtr
          .asFunction<CFArrayRef Function(sec_identity_t)>();

  sec_certificate_t sec_certificate_create(
    SecCertificateRef certificate,
  ) {
    return _sec_certificate_create(
      certificate,
    );
  }

  late final _sec_certificate_createPtr = _lookup<
          ffi.NativeFunction<sec_certificate_t Function(SecCertificateRef)>>(
      'sec_certificate_create');
  late final _sec_certificate_create = _sec_certificate_createPtr
      .asFunction<sec_certificate_t Function(SecCertificateRef)>();

  SecCertificateRef sec_certificate_copy_ref(
    sec_certificate_t certificate,
  ) {
    return _sec_certificate_copy_ref(
      certificate,
    );
  }

  late final _sec_certificate_copy_refPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(sec_certificate_t)>>(
      'sec_certificate_copy_ref');
  late final _sec_certificate_copy_ref = _sec_certificate_copy_refPtr
      .asFunction<SecCertificateRef Function(sec_certificate_t)>();

  ffi.Pointer<ffi.Char> sec_protocol_metadata_get_negotiated_protocol(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_protocol');
  late final _sec_protocol_metadata_get_negotiated_protocol =
      _sec_protocol_metadata_get_negotiated_protocolPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_copy_peer_public_key(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_copy_peer_public_key(
      metadata,
    );
  }

  late final _sec_protocol_metadata_copy_peer_public_keyPtr = _lookup<
          ffi
          .NativeFunction<dispatch_data_t Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_copy_peer_public_key');
  late final _sec_protocol_metadata_copy_peer_public_key =
      _sec_protocol_metadata_copy_peer_public_keyPtr
          .asFunction<dispatch_data_t Function(sec_protocol_metadata_t)>();

  tls_protocol_version_t
      sec_protocol_metadata_get_negotiated_tls_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return tls_protocol_version_t
        .fromValue(_sec_protocol_metadata_get_negotiated_tls_protocol_version(
      metadata,
    ));
  }

  late final _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_tls_protocol_version =
      _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  SSLProtocol sec_protocol_metadata_get_negotiated_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return SSLProtocol.fromValue(
        _sec_protocol_metadata_get_negotiated_protocol_version(
      metadata,
    ));
  }

  late final _sec_protocol_metadata_get_negotiated_protocol_versionPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.UnsignedInt Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_protocol_version =
      _sec_protocol_metadata_get_negotiated_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  tls_ciphersuite_t sec_protocol_metadata_get_negotiated_tls_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return tls_ciphersuite_t
        .fromValue(_sec_protocol_metadata_get_negotiated_tls_ciphersuite(
      metadata,
    ));
  }

  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuite =
      _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_ciphersuitePtr = _lookup<
          ffi.NativeFunction<SSLCipherSuite Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_ciphersuite =
      _sec_protocol_metadata_get_negotiated_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_get_early_data_accepted(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_early_data_accepted(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_early_data_acceptedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_early_data_accepted');
  late final _sec_protocol_metadata_get_early_data_accepted =
      _sec_protocol_metadata_get_early_data_acceptedPtr
          .asFunction<bool Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_access_peer_certificate_chain(
    sec_protocol_metadata_t metadata,
    ObjCBlock_ffiVoid_seccertificatet handler,
  ) {
    return _sec_protocol_metadata_access_peer_certificate_chain(
      metadata,
      handler.pointer,
    );
  }

  late final _sec_protocol_metadata_access_peer_certificate_chainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>>(
      'sec_protocol_metadata_access_peer_certificate_chain');
  late final _sec_protocol_metadata_access_peer_certificate_chain =
      _sec_protocol_metadata_access_peer_certificate_chainPtr.asFunction<
          bool Function(
              sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>();

  bool sec_protocol_metadata_access_ocsp_response(
    sec_protocol_metadata_t metadata,
    ObjCBlock_ffiVoid_dispatchdatat handler,
  ) {
    return _sec_protocol_metadata_access_ocsp_response(
      metadata,
      handler.pointer,
    );
  }

  late final _sec_protocol_metadata_access_ocsp_responsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>>(
      'sec_protocol_metadata_access_ocsp_response');
  late final _sec_protocol_metadata_access_ocsp_response =
      _sec_protocol_metadata_access_ocsp_responsePtr.asFunction<
          bool Function(
              sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>();

  bool sec_protocol_metadata_access_supported_signature_algorithms(
    sec_protocol_metadata_t metadata,
    ObjCBlock_ffiVoid_Uint16 handler,
  ) {
    return _sec_protocol_metadata_access_supported_signature_algorithms(
      metadata,
      handler.pointer,
    );
  }

  late final _sec_protocol_metadata_access_supported_signature_algorithmsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>>(
          'sec_protocol_metadata_access_supported_signature_algorithms');
  late final _sec_protocol_metadata_access_supported_signature_algorithms =
      _sec_protocol_metadata_access_supported_signature_algorithmsPtr
          .asFunction<
              bool Function(
                  sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>();

  bool sec_protocol_metadata_access_distinguished_names(
    sec_protocol_metadata_t metadata,
    ObjCBlock_ffiVoid_dispatchdatat handler,
  ) {
    return _sec_protocol_metadata_access_distinguished_names(
      metadata,
      handler.pointer,
    );
  }

  late final _sec_protocol_metadata_access_distinguished_namesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>>(
      'sec_protocol_metadata_access_distinguished_names');
  late final _sec_protocol_metadata_access_distinguished_names =
      _sec_protocol_metadata_access_distinguished_namesPtr.asFunction<
          bool Function(
              sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>();

  bool sec_protocol_metadata_access_pre_shared_keys(
    sec_protocol_metadata_t metadata,
    ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat handler,
  ) {
    return _sec_protocol_metadata_access_pre_shared_keys(
      metadata,
      handler.pointer,
    );
  }

  late final _sec_protocol_metadata_access_pre_shared_keysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>>(
      'sec_protocol_metadata_access_pre_shared_keys');
  late final _sec_protocol_metadata_access_pre_shared_keys =
      _sec_protocol_metadata_access_pre_shared_keysPtr.asFunction<
          bool Function(
              sec_protocol_metadata_t, ffi.Pointer<objc.ObjCBlock>)>();

  ffi.Pointer<ffi.Char> sec_protocol_metadata_get_server_name(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_server_name(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_server_name');
  late final _sec_protocol_metadata_get_server_name =
      _sec_protocol_metadata_get_server_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_peers_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_peers_are_equal(
      metadataA,
      metadataB,
    );
  }

  late final _sec_protocol_metadata_peers_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_peers_are_equal');
  late final _sec_protocol_metadata_peers_are_equal =
      _sec_protocol_metadata_peers_are_equalPtr.asFunction<
          bool Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_challenge_parameters_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_challenge_parameters_are_equal(
      metadataA,
      metadataB,
    );
  }

  late final _sec_protocol_metadata_challenge_parameters_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_challenge_parameters_are_equal');
  late final _sec_protocol_metadata_challenge_parameters_are_equal =
      _sec_protocol_metadata_challenge_parameters_are_equalPtr.asFunction<
          bool Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_create_secret(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<ffi.Char> label,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret(
      metadata,
      label_len,
      label,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secretPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('sec_protocol_metadata_create_secret');
  late final _sec_protocol_metadata_create_secret =
      _sec_protocol_metadata_create_secretPtr.asFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t, int, ffi.Pointer<ffi.Char>, int)>();

  dispatch_data_t sec_protocol_metadata_create_secret_with_context(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<ffi.Char> label,
    int context_len,
    ffi.Pointer<ffi.Uint8> context,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret_with_context(
      metadata,
      label_len,
      label,
      context_len,
      context,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secret_with_contextPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('sec_protocol_metadata_create_secret_with_context');
  late final _sec_protocol_metadata_create_secret_with_context =
      _sec_protocol_metadata_create_secret_with_contextPtr.asFunction<
          dispatch_data_t Function(sec_protocol_metadata_t, int,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Uint8>, int)>();

  bool sec_protocol_options_are_equal(
    sec_protocol_options_t optionsA,
    sec_protocol_options_t optionsB,
  ) {
    return _sec_protocol_options_are_equal(
      optionsA,
      optionsB,
    );
  }

  late final _sec_protocol_options_are_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(sec_protocol_options_t,
              sec_protocol_options_t)>>('sec_protocol_options_are_equal');
  late final _sec_protocol_options_are_equal =
      _sec_protocol_options_are_equalPtr.asFunction<
          bool Function(sec_protocol_options_t, sec_protocol_options_t)>();

  void sec_protocol_options_set_local_identity(
    sec_protocol_options_t options,
    sec_identity_t identity,
  ) {
    return _sec_protocol_options_set_local_identity(
      options,
      identity,
    );
  }

  late final _sec_protocol_options_set_local_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              sec_identity_t)>>('sec_protocol_options_set_local_identity');
  late final _sec_protocol_options_set_local_identity =
      _sec_protocol_options_set_local_identityPtr
          .asFunction<void Function(sec_protocol_options_t, sec_identity_t)>();

  void sec_protocol_options_append_tls_ciphersuite(
    sec_protocol_options_t options,
    tls_ciphersuite_t ciphersuite,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite(
      options,
      ciphersuite.value,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint16)>>('sec_protocol_options_append_tls_ciphersuite');
  late final _sec_protocol_options_append_tls_ciphersuite =
      _sec_protocol_options_append_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLCipherSuite)>>('sec_protocol_options_add_tls_ciphersuite');
  late final _sec_protocol_options_add_tls_ciphersuite =
      _sec_protocol_options_add_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_append_tls_ciphersuite_group(
    sec_protocol_options_t options,
    tls_ciphersuite_group_t group,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite_group(
      options,
      group.value,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuite_groupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint16)>>(
      'sec_protocol_options_append_tls_ciphersuite_group');
  late final _sec_protocol_options_append_tls_ciphersuite_group =
      _sec_protocol_options_append_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite_group(
    sec_protocol_options_t options,
    SSLCiphersuiteGroup group,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite_group(
      options,
      group.value,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuite_groupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.UnsignedInt)>>(
      'sec_protocol_options_add_tls_ciphersuite_group');
  late final _sec_protocol_options_add_tls_ciphersuite_group =
      _sec_protocol_options_add_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_min_version(
    sec_protocol_options_t options,
    SSLProtocol version,
  ) {
    return _sec_protocol_options_set_tls_min_version(
      options,
      version.value,
    );
  }

  late final _sec_protocol_options_set_tls_min_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.UnsignedInt)>>('sec_protocol_options_set_tls_min_version');
  late final _sec_protocol_options_set_tls_min_version =
      _sec_protocol_options_set_tls_min_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_min_tls_protocol_version(
    sec_protocol_options_t options,
    tls_protocol_version_t version,
  ) {
    return _sec_protocol_options_set_min_tls_protocol_version(
      options,
      version.value,
    );
  }

  late final _sec_protocol_options_set_min_tls_protocol_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint16)>>(
      'sec_protocol_options_set_min_tls_protocol_version');
  late final _sec_protocol_options_set_min_tls_protocol_version =
      _sec_protocol_options_set_min_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  tls_protocol_version_t
      sec_protocol_options_get_default_min_tls_protocol_version() {
    return tls_protocol_version_t.fromValue(
        _sec_protocol_options_get_default_min_tls_protocol_version());
  }

  late final _sec_protocol_options_get_default_min_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function()>>(
          'sec_protocol_options_get_default_min_tls_protocol_version');
  late final _sec_protocol_options_get_default_min_tls_protocol_version =
      _sec_protocol_options_get_default_min_tls_protocol_versionPtr
          .asFunction<int Function()>();

  tls_protocol_version_t
      sec_protocol_options_get_default_min_dtls_protocol_version() {
    return tls_protocol_version_t.fromValue(
        _sec_protocol_options_get_default_min_dtls_protocol_version());
  }

  late final _sec_protocol_options_get_default_min_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function()>>(
          'sec_protocol_options_get_default_min_dtls_protocol_version');
  late final _sec_protocol_options_get_default_min_dtls_protocol_version =
      _sec_protocol_options_get_default_min_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  void sec_protocol_options_set_tls_max_version(
    sec_protocol_options_t options,
    SSLProtocol version,
  ) {
    return _sec_protocol_options_set_tls_max_version(
      options,
      version.value,
    );
  }

  late final _sec_protocol_options_set_tls_max_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.UnsignedInt)>>('sec_protocol_options_set_tls_max_version');
  late final _sec_protocol_options_set_tls_max_version =
      _sec_protocol_options_set_tls_max_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_max_tls_protocol_version(
    sec_protocol_options_t options,
    tls_protocol_version_t version,
  ) {
    return _sec_protocol_options_set_max_tls_protocol_version(
      options,
      version.value,
    );
  }

  late final _sec_protocol_options_set_max_tls_protocol_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint16)>>(
      'sec_protocol_options_set_max_tls_protocol_version');
  late final _sec_protocol_options_set_max_tls_protocol_version =
      _sec_protocol_options_set_max_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  tls_protocol_version_t
      sec_protocol_options_get_default_max_tls_protocol_version() {
    return tls_protocol_version_t.fromValue(
        _sec_protocol_options_get_default_max_tls_protocol_version());
  }

  late final _sec_protocol_options_get_default_max_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function()>>(
          'sec_protocol_options_get_default_max_tls_protocol_version');
  late final _sec_protocol_options_get_default_max_tls_protocol_version =
      _sec_protocol_options_get_default_max_tls_protocol_versionPtr
          .asFunction<int Function()>();

  tls_protocol_version_t
      sec_protocol_options_get_default_max_dtls_protocol_version() {
    return tls_protocol_version_t.fromValue(
        _sec_protocol_options_get_default_max_dtls_protocol_version());
  }

  late final _sec_protocol_options_get_default_max_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function()>>(
          'sec_protocol_options_get_default_max_dtls_protocol_version');
  late final _sec_protocol_options_get_default_max_dtls_protocol_version =
      _sec_protocol_options_get_default_max_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  bool sec_protocol_options_get_enable_encrypted_client_hello(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_enable_encrypted_client_hello(
      options,
    );
  }

  late final _sec_protocol_options_get_enable_encrypted_client_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_enable_encrypted_client_hello');
  late final _sec_protocol_options_get_enable_encrypted_client_hello =
      _sec_protocol_options_get_enable_encrypted_client_helloPtr
          .asFunction<bool Function(sec_protocol_options_t)>();

  bool sec_protocol_options_get_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_quic_use_legacy_codepoint(
      options,
    );
  }

  late final _sec_protocol_options_get_quic_use_legacy_codepointPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_quic_use_legacy_codepoint');
  late final _sec_protocol_options_get_quic_use_legacy_codepoint =
      _sec_protocol_options_get_quic_use_legacy_codepointPtr
          .asFunction<bool Function(sec_protocol_options_t)>();

  void sec_protocol_options_add_tls_application_protocol(
    sec_protocol_options_t options,
    ffi.Pointer<ffi.Char> application_protocol,
  ) {
    return _sec_protocol_options_add_tls_application_protocol(
      options,
      application_protocol,
    );
  }

  late final _sec_protocol_options_add_tls_application_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<ffi.Char>)>>(
      'sec_protocol_options_add_tls_application_protocol');
  late final _sec_protocol_options_add_tls_application_protocol =
      _sec_protocol_options_add_tls_application_protocolPtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<ffi.Char>)>();

  void sec_protocol_options_set_tls_server_name(
    sec_protocol_options_t options,
    ffi.Pointer<ffi.Char> server_name,
  ) {
    return _sec_protocol_options_set_tls_server_name(
      options,
      server_name,
    );
  }

  late final _sec_protocol_options_set_tls_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<ffi.Char>)>>(
      'sec_protocol_options_set_tls_server_name');
  late final _sec_protocol_options_set_tls_server_name =
      _sec_protocol_options_set_tls_server_namePtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<ffi.Char>)>();

  void sec_protocol_options_set_tls_diffie_hellman_parameters(
    sec_protocol_options_t options,
    dispatch_data_t params,
  ) {
    return _sec_protocol_options_set_tls_diffie_hellman_parameters(
      options,
      params,
    );
  }

  late final _sec_protocol_options_set_tls_diffie_hellman_parametersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_diffie_hellman_parameters');
  late final _sec_protocol_options_set_tls_diffie_hellman_parameters =
      _sec_protocol_options_set_tls_diffie_hellman_parametersPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_add_pre_shared_key(
    sec_protocol_options_t options,
    dispatch_data_t psk,
    dispatch_data_t psk_identity,
  ) {
    return _sec_protocol_options_add_pre_shared_key(
      options,
      psk,
      psk_identity,
    );
  }

  late final _sec_protocol_options_add_pre_shared_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, dispatch_data_t,
              dispatch_data_t)>>('sec_protocol_options_add_pre_shared_key');
  late final _sec_protocol_options_add_pre_shared_key =
      _sec_protocol_options_add_pre_shared_keyPtr.asFunction<
          void Function(
              sec_protocol_options_t, dispatch_data_t, dispatch_data_t)>();

  void sec_protocol_options_set_tls_pre_shared_key_identity_hint(
    sec_protocol_options_t options,
    dispatch_data_t psk_identity_hint,
  ) {
    return _sec_protocol_options_set_tls_pre_shared_key_identity_hint(
      options,
      psk_identity_hint,
    );
  }

  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_pre_shared_key_identity_hint');
  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hint =
      _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_set_pre_shared_key_selection_block(
    sec_protocol_options_t options,
    Dartsec_protocol_pre_shared_key_selection_t psk_selection_block,
    dispatch_queue_t psk_selection_queue,
  ) {
    return _sec_protocol_options_set_pre_shared_key_selection_block(
      options,
      psk_selection_block.pointer,
      psk_selection_queue,
    );
  }

  late final _sec_protocol_options_set_pre_shared_key_selection_blockPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_options_t,
                      sec_protocol_pre_shared_key_selection_t,
                      dispatch_queue_t)>>(
          'sec_protocol_options_set_pre_shared_key_selection_block');
  late final _sec_protocol_options_set_pre_shared_key_selection_block =
      _sec_protocol_options_set_pre_shared_key_selection_blockPtr.asFunction<
          void Function(sec_protocol_options_t,
              sec_protocol_pre_shared_key_selection_t, dispatch_queue_t)>();

  void sec_protocol_options_set_tls_tickets_enabled(
    sec_protocol_options_t options,
    bool tickets_enabled,
  ) {
    return _sec_protocol_options_set_tls_tickets_enabled(
      options,
      tickets_enabled,
    );
  }

  late final _sec_protocol_options_set_tls_tickets_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_tickets_enabled');
  late final _sec_protocol_options_set_tls_tickets_enabled =
      _sec_protocol_options_set_tls_tickets_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_tls_is_fallback_attempt(
    sec_protocol_options_t options,
    bool is_fallback_attempt,
  ) {
    return _sec_protocol_options_set_tls_is_fallback_attempt(
      options,
      is_fallback_attempt,
    );
  }

  late final _sec_protocol_options_set_tls_is_fallback_attemptPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_is_fallback_attempt');
  late final _sec_protocol_options_set_tls_is_fallback_attempt =
      _sec_protocol_options_set_tls_is_fallback_attemptPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_tls_resumption_enabled(
    sec_protocol_options_t options,
    bool resumption_enabled,
  ) {
    return _sec_protocol_options_set_tls_resumption_enabled(
      options,
      resumption_enabled,
    );
  }

  late final _sec_protocol_options_set_tls_resumption_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_resumption_enabled');
  late final _sec_protocol_options_set_tls_resumption_enabled =
      _sec_protocol_options_set_tls_resumption_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_tls_false_start_enabled(
    sec_protocol_options_t options,
    bool false_start_enabled,
  ) {
    return _sec_protocol_options_set_tls_false_start_enabled(
      options,
      false_start_enabled,
    );
  }

  late final _sec_protocol_options_set_tls_false_start_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_false_start_enabled');
  late final _sec_protocol_options_set_tls_false_start_enabled =
      _sec_protocol_options_set_tls_false_start_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_tls_ocsp_enabled(
    sec_protocol_options_t options,
    bool ocsp_enabled,
  ) {
    return _sec_protocol_options_set_tls_ocsp_enabled(
      options,
      ocsp_enabled,
    );
  }

  late final _sec_protocol_options_set_tls_ocsp_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_ocsp_enabled');
  late final _sec_protocol_options_set_tls_ocsp_enabled =
      _sec_protocol_options_set_tls_ocsp_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_tls_sct_enabled(
    sec_protocol_options_t options,
    bool sct_enabled,
  ) {
    return _sec_protocol_options_set_tls_sct_enabled(
      options,
      sct_enabled,
    );
  }

  late final _sec_protocol_options_set_tls_sct_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_sct_enabled');
  late final _sec_protocol_options_set_tls_sct_enabled =
      _sec_protocol_options_set_tls_sct_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_tls_renegotiation_enabled(
    sec_protocol_options_t options,
    bool renegotiation_enabled,
  ) {
    return _sec_protocol_options_set_tls_renegotiation_enabled(
      options,
      renegotiation_enabled,
    );
  }

  late final _sec_protocol_options_set_tls_renegotiation_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_tls_renegotiation_enabled');
  late final _sec_protocol_options_set_tls_renegotiation_enabled =
      _sec_protocol_options_set_tls_renegotiation_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_peer_authentication_required(
    sec_protocol_options_t options,
    bool peer_authentication_required,
  ) {
    return _sec_protocol_options_set_peer_authentication_required(
      options,
      peer_authentication_required,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_requiredPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
          'sec_protocol_options_set_peer_authentication_required');
  late final _sec_protocol_options_set_peer_authentication_required =
      _sec_protocol_options_set_peer_authentication_requiredPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_peer_authentication_optional(
    sec_protocol_options_t options,
    bool peer_authentication_optional,
  ) {
    return _sec_protocol_options_set_peer_authentication_optional(
      options,
      peer_authentication_optional,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_optionalPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
          'sec_protocol_options_set_peer_authentication_optional');
  late final _sec_protocol_options_set_peer_authentication_optional =
      _sec_protocol_options_set_peer_authentication_optionalPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_enable_encrypted_client_hello(
    sec_protocol_options_t options,
    bool enable_encrypted_client_hello,
  ) {
    return _sec_protocol_options_set_enable_encrypted_client_hello(
      options,
      enable_encrypted_client_hello,
    );
  }

  late final _sec_protocol_options_set_enable_encrypted_client_helloPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
          'sec_protocol_options_set_enable_encrypted_client_hello');
  late final _sec_protocol_options_set_enable_encrypted_client_hello =
      _sec_protocol_options_set_enable_encrypted_client_helloPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
    bool quic_use_legacy_codepoint,
  ) {
    return _sec_protocol_options_set_quic_use_legacy_codepoint(
      options,
      quic_use_legacy_codepoint,
    );
  }

  late final _sec_protocol_options_set_quic_use_legacy_codepointPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(sec_protocol_options_t, ffi.Bool)>>(
      'sec_protocol_options_set_quic_use_legacy_codepoint');
  late final _sec_protocol_options_set_quic_use_legacy_codepoint =
      _sec_protocol_options_set_quic_use_legacy_codepointPtr
          .asFunction<void Function(sec_protocol_options_t, bool)>();

  void sec_protocol_options_set_key_update_block(
    sec_protocol_options_t options,
    Dartsec_protocol_key_update_t key_update_block,
    dispatch_queue_t key_update_queue,
  ) {
    return _sec_protocol_options_set_key_update_block(
      options,
      key_update_block.pointer,
      key_update_queue,
    );
  }

  late final _sec_protocol_options_set_key_update_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>>('sec_protocol_options_set_key_update_block');
  late final _sec_protocol_options_set_key_update_block =
      _sec_protocol_options_set_key_update_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_challenge_block(
    sec_protocol_options_t options,
    Dartsec_protocol_challenge_t challenge_block,
    dispatch_queue_t challenge_queue,
  ) {
    return _sec_protocol_options_set_challenge_block(
      options,
      challenge_block.pointer,
      challenge_queue,
    );
  }

  late final _sec_protocol_options_set_challenge_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>>('sec_protocol_options_set_challenge_block');
  late final _sec_protocol_options_set_challenge_block =
      _sec_protocol_options_set_challenge_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_verify_block(
    sec_protocol_options_t options,
    Dartsec_protocol_verify_t verify_block,
    dispatch_queue_t verify_block_queue,
  ) {
    return _sec_protocol_options_set_verify_block(
      options,
      verify_block.pointer,
      verify_block_queue,
    );
  }

  late final _sec_protocol_options_set_verify_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>>('sec_protocol_options_set_verify_block');
  late final _sec_protocol_options_set_verify_block =
      _sec_protocol_options_set_verify_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_default =
      _lookup<CFStringRef>('kSSLSessionConfig_default');

  CFStringRef get kSSLSessionConfig_default => _kSSLSessionConfig_default.value;

  set kSSLSessionConfig_default(CFStringRef value) =>
      _kSSLSessionConfig_default.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1 =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1');

  CFStringRef get kSSLSessionConfig_ATSv1 => _kSSLSessionConfig_ATSv1.value;

  set kSSLSessionConfig_ATSv1(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1_noPFS =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1_noPFS');

  CFStringRef get kSSLSessionConfig_ATSv1_noPFS =>
      _kSSLSessionConfig_ATSv1_noPFS.value;

  set kSSLSessionConfig_ATSv1_noPFS(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1_noPFS.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_standard =
      _lookup<CFStringRef>('kSSLSessionConfig_standard');

  CFStringRef get kSSLSessionConfig_standard =>
      _kSSLSessionConfig_standard.value;

  set kSSLSessionConfig_standard(CFStringRef value) =>
      _kSSLSessionConfig_standard.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_RC4_fallback');

  CFStringRef get kSSLSessionConfig_RC4_fallback =>
      _kSSLSessionConfig_RC4_fallback.value;

  set kSSLSessionConfig_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_fallback =>
      _kSSLSessionConfig_TLSv1_fallback.value;

  set kSSLSessionConfig_TLSv1_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_RC4_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_RC4_fallback =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value;

  set kSSLSessionConfig_TLSv1_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy');

  CFStringRef get kSSLSessionConfig_legacy => _kSSLSessionConfig_legacy.value;

  set kSSLSessionConfig_legacy(CFStringRef value) =>
      _kSSLSessionConfig_legacy.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy_DHE =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy_DHE');

  CFStringRef get kSSLSessionConfig_legacy_DHE =>
      _kSSLSessionConfig_legacy_DHE.value;

  set kSSLSessionConfig_legacy_DHE(CFStringRef value) =>
      _kSSLSessionConfig_legacy_DHE.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_anonymous =
      _lookup<CFStringRef>('kSSLSessionConfig_anonymous');

  CFStringRef get kSSLSessionConfig_anonymous =>
      _kSSLSessionConfig_anonymous.value;

  set kSSLSessionConfig_anonymous(CFStringRef value) =>
      _kSSLSessionConfig_anonymous.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_3DES_fallback');

  CFStringRef get kSSLSessionConfig_3DES_fallback =>
      _kSSLSessionConfig_3DES_fallback.value;

  set kSSLSessionConfig_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_3DES_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_3DES_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_3DES_fallback =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value;

  set kSSLSessionConfig_TLSv1_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value = value;

  int SSLContextGetTypeID() {
    return _SSLContextGetTypeID();
  }

  late final _SSLContextGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SSLContextGetTypeID');
  late final _SSLContextGetTypeID =
      _SSLContextGetTypeIDPtr.asFunction<int Function()>();

  SSLContextRef SSLCreateContext(
    CFAllocatorRef alloc,
    SSLProtocolSide protocolSide,
    SSLConnectionType connectionType,
  ) {
    return _SSLCreateContext(
      alloc,
      protocolSide.value,
      connectionType.value,
    );
  }

  late final _SSLCreateContextPtr = _lookup<
      ffi.NativeFunction<
          SSLContextRef Function(CFAllocatorRef, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('SSLCreateContext');
  late final _SSLCreateContext = _SSLCreateContextPtr.asFunction<
      SSLContextRef Function(CFAllocatorRef, int, int)>();

  int SSLNewContext(
    int isServer,
    ffi.Pointer<SSLContextRef> contextPtr,
  ) {
    return _SSLNewContext(
      isServer,
      contextPtr,
    );
  }

  late final _SSLNewContextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              Boolean, ffi.Pointer<SSLContextRef>)>>('SSLNewContext');
  late final _SSLNewContext = _SSLNewContextPtr.asFunction<
      int Function(int, ffi.Pointer<SSLContextRef>)>();

  int SSLDisposeContext(
    SSLContextRef context,
  ) {
    return _SSLDisposeContext(
      context,
    );
  }

  late final _SSLDisposeContextPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLDisposeContext');
  late final _SSLDisposeContext =
      _SSLDisposeContextPtr.asFunction<int Function(SSLContextRef)>();

  int SSLGetSessionState(
    SSLContextRef context,
    ffi.Pointer<ffi.UnsignedInt> state,
  ) {
    return _SSLGetSessionState(
      context,
      state,
    );
  }

  late final _SSLGetSessionStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('SSLGetSessionState');
  late final _SSLGetSessionState = _SSLGetSessionStatePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>();

  DartSInt32 SSLSetSessionOption(
    SSLContextRef context,
    SSLSessionOption option,
    DartBoolean value,
  ) {
    return _SSLSetSessionOption(
      context,
      option.value,
      value,
    );
  }

  late final _SSLSetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.UnsignedInt, Boolean)>>('SSLSetSessionOption');
  late final _SSLSetSessionOption = _SSLSetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, int)>();

  DartSInt32 SSLGetSessionOption(
    SSLContextRef context,
    SSLSessionOption option,
    ffi.Pointer<Boolean> value,
  ) {
    return _SSLGetSessionOption(
      context,
      option.value,
      value,
    );
  }

  late final _SSLGetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.UnsignedInt,
              ffi.Pointer<Boolean>)>>('SSLGetSessionOption');
  late final _SSLGetSessionOption = _SSLGetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetIOFuncs(
    SSLContextRef context,
    SSLReadFunc readFunc,
    SSLWriteFunc writeFunc,
  ) {
    return _SSLSetIOFuncs(
      context,
      readFunc,
      writeFunc,
    );
  }

  late final _SSLSetIOFuncsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLReadFunc, SSLWriteFunc)>>('SSLSetIOFuncs');
  late final _SSLSetIOFuncs = _SSLSetIOFuncsPtr.asFunction<
      int Function(SSLContextRef, SSLReadFunc, SSLWriteFunc)>();

  int SSLSetSessionConfig(
    SSLContextRef context,
    CFStringRef config,
  ) {
    return _SSLSetSessionConfig(
      context,
      config,
    );
  }

  late final _SSLSetSessionConfigPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, CFStringRef)>>(
      'SSLSetSessionConfig');
  late final _SSLSetSessionConfig = _SSLSetSessionConfigPtr.asFunction<
      int Function(SSLContextRef, CFStringRef)>();

  DartSInt32 SSLSetProtocolVersionMin(
    SSLContextRef context,
    SSLProtocol minVersion,
  ) {
    return _SSLSetProtocolVersionMin(
      context,
      minVersion.value,
    );
  }

  late final _SSLSetProtocolVersionMinPtr = _lookup<
          ffi
          .NativeFunction<OSStatus Function(SSLContextRef, ffi.UnsignedInt)>>(
      'SSLSetProtocolVersionMin');
  late final _SSLSetProtocolVersionMin = _SSLSetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMin(
    SSLContextRef context,
    ffi.Pointer<ffi.UnsignedInt> minVersion,
  ) {
    return _SSLGetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLGetProtocolVersionMinPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('SSLGetProtocolVersionMin');
  late final _SSLGetProtocolVersionMin = _SSLGetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>();

  DartSInt32 SSLSetProtocolVersionMax(
    SSLContextRef context,
    SSLProtocol maxVersion,
  ) {
    return _SSLSetProtocolVersionMax(
      context,
      maxVersion.value,
    );
  }

  late final _SSLSetProtocolVersionMaxPtr = _lookup<
          ffi
          .NativeFunction<OSStatus Function(SSLContextRef, ffi.UnsignedInt)>>(
      'SSLSetProtocolVersionMax');
  late final _SSLSetProtocolVersionMax = _SSLSetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMax(
    SSLContextRef context,
    ffi.Pointer<ffi.UnsignedInt> maxVersion,
  ) {
    return _SSLGetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLGetProtocolVersionMaxPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('SSLGetProtocolVersionMax');
  late final _SSLGetProtocolVersionMax = _SSLGetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>();

  DartSInt32 SSLSetProtocolVersionEnabled(
    SSLContextRef context,
    SSLProtocol protocol,
    DartBoolean enable,
  ) {
    return _SSLSetProtocolVersionEnabled(
      context,
      protocol.value,
      enable,
    );
  }

  late final _SSLSetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.UnsignedInt,
              Boolean)>>('SSLSetProtocolVersionEnabled');
  late final _SSLSetProtocolVersionEnabled = _SSLSetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, int)>();

  DartSInt32 SSLGetProtocolVersionEnabled(
    SSLContextRef context,
    SSLProtocol protocol,
    ffi.Pointer<Boolean> enable,
  ) {
    return _SSLGetProtocolVersionEnabled(
      context,
      protocol.value,
      enable,
    );
  }

  late final _SSLGetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.UnsignedInt,
              ffi.Pointer<Boolean>)>>('SSLGetProtocolVersionEnabled');
  late final _SSLGetProtocolVersionEnabled = _SSLGetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  DartSInt32 SSLSetProtocolVersion(
    SSLContextRef context,
    SSLProtocol version,
  ) {
    return _SSLSetProtocolVersion(
      context,
      version.value,
    );
  }

  late final _SSLSetProtocolVersionPtr = _lookup<
          ffi
          .NativeFunction<OSStatus Function(SSLContextRef, ffi.UnsignedInt)>>(
      'SSLSetProtocolVersion');
  late final _SSLSetProtocolVersion =
      _SSLSetProtocolVersionPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<ffi.UnsignedInt> protocol,
  ) {
    return _SSLGetProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('SSLGetProtocolVersion');
  late final _SSLGetProtocolVersion = _SSLGetProtocolVersionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>();

  int SSLSetCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetCertificate');
  late final _SSLSetCertificate = _SSLSetCertificatePtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetConnection(
    SSLContextRef context,
    SSLConnectionRef connection,
  ) {
    return _SSLSetConnection(
      context,
      connection,
    );
  }

  late final _SSLSetConnectionPtr = _lookup<
          ffi
          .NativeFunction<OSStatus Function(SSLContextRef, SSLConnectionRef)>>(
      'SSLSetConnection');
  late final _SSLSetConnection = _SSLSetConnectionPtr.asFunction<
      int Function(SSLContextRef, SSLConnectionRef)>();

  int SSLGetConnection(
    SSLContextRef context,
    ffi.Pointer<SSLConnectionRef> connection,
  ) {
    return _SSLGetConnection(
      context,
      connection,
    );
  }

  late final _SSLGetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLConnectionRef>)>>('SSLGetConnection');
  late final _SSLGetConnection = _SSLGetConnectionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLConnectionRef>)>();

  int SSLSetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<ffi.Char> peerName,
    int peerNameLen,
  ) {
    return _SSLSetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLSetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('SSLSetPeerDomainName');
  late final _SSLSetPeerDomainName = _SSLSetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Char>, int)>();

  int SSLGetPeerDomainNameLength(
    SSLContextRef context,
    ffi.Pointer<ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainNameLength(
      context,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Size>)>>('SSLGetPeerDomainNameLength');
  late final _SSLGetPeerDomainNameLength = _SSLGetPeerDomainNameLengthPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLGetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<ffi.Char> peerName,
    ffi.Pointer<ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('SSLGetPeerDomainName');
  late final _SSLGetPeerDomainName = _SSLGetPeerDomainNamePtr.asFunction<
      int Function(
          SSLContextRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int SSLCopyRequestedPeerNameLength(
    SSLContextRef ctx,
    ffi.Pointer<ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerNameLength(
      ctx,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Size>)>>('SSLCopyRequestedPeerNameLength');
  late final _SSLCopyRequestedPeerNameLength =
      _SSLCopyRequestedPeerNameLengthPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLCopyRequestedPeerName(
    SSLContextRef context,
    ffi.Pointer<ffi.Char> peerName,
    ffi.Pointer<ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('SSLCopyRequestedPeerName');
  late final _SSLCopyRequestedPeerName =
      _SSLCopyRequestedPeerNamePtr.asFunction<
          int Function(
              SSLContextRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int SSLSetDatagramHelloCookie(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Void> cookie,
    int cookieLen,
  ) {
    return _SSLSetDatagramHelloCookie(
      dtlsContext,
      cookie,
      cookieLen,
    );
  }

  late final _SSLSetDatagramHelloCookiePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('SSLSetDatagramHelloCookie');
  late final _SSLSetDatagramHelloCookie = _SSLSetDatagramHelloCookiePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    int maxSize,
  ) {
    return _SSLSetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLSetMaxDatagramRecordSizePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Size)>>(
          'SSLSetMaxDatagramRecordSize');
  late final _SSLSetMaxDatagramRecordSize = _SSLSetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Size> maxSize,
  ) {
    return _SSLGetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLGetMaxDatagramRecordSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Size>)>>('SSLGetMaxDatagramRecordSize');
  late final _SSLGetMaxDatagramRecordSize = _SSLGetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLGetNegotiatedProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<ffi.UnsignedInt> protocol,
  ) {
    return _SSLGetNegotiatedProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetNegotiatedProtocolVersionPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>>(
      'SSLGetNegotiatedProtocolVersion');
  late final _SSLGetNegotiatedProtocolVersion =
      _SSLGetNegotiatedProtocolVersionPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>();

  int SSLGetNumberSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberSupportedCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Size>)>>('SSLGetNumberSupportedCiphers');
  late final _SSLGetNumberSupportedCiphers = _SSLGetNumberSupportedCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLGetSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<ffi.Size> numCiphers,
  ) {
    return _SSLGetSupportedCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<ffi.Size>)>>('SSLGetSupportedCiphers');
  late final _SSLGetSupportedCiphers = _SSLGetSupportedCiphersPtr.asFunction<
      int Function(
          SSLContextRef, ffi.Pointer<SSLCipherSuite>, ffi.Pointer<ffi.Size>)>();

  int SSLGetNumberEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberEnabledCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Size>)>>('SSLGetNumberEnabledCiphers');
  late final _SSLGetNumberEnabledCiphers = _SSLGetNumberEnabledCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLSetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    int numCiphers,
  ) {
    return _SSLSetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLSetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Size)>>('SSLSetEnabledCiphers');
  late final _SSLSetEnabledCiphers = _SSLSetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>, int)>();

  int SSLGetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<ffi.Size> numCiphers,
  ) {
    return _SSLGetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<ffi.Size>)>>('SSLGetEnabledCiphers');
  late final _SSLGetEnabledCiphers = _SSLGetEnabledCiphersPtr.asFunction<
      int Function(
          SSLContextRef, ffi.Pointer<SSLCipherSuite>, ffi.Pointer<ffi.Size>)>();

  int SSLSetSessionTicketsEnabled(
    SSLContextRef context,
    int enabled,
  ) {
    return _SSLSetSessionTicketsEnabled(
      context,
      enabled,
    );
  }

  late final _SSLSetSessionTicketsEnabledPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetSessionTicketsEnabled');
  late final _SSLSetSessionTicketsEnabled = _SSLSetSessionTicketsEnabledPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLSetEnableCertVerify(
    SSLContextRef context,
    int enableVerify,
  ) {
    return _SSLSetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLSetEnableCertVerifyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetEnableCertVerify');
  late final _SSLSetEnableCertVerify =
      _SSLSetEnableCertVerifyPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetEnableCertVerify(
    SSLContextRef context,
    ffi.Pointer<Boolean> enableVerify,
  ) {
    return _SSLGetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLGetEnableCertVerifyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetEnableCertVerify');
  late final _SSLGetEnableCertVerify = _SSLGetEnableCertVerifyPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredCerts(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredCertsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredCerts');
  late final _SSLSetAllowsExpiredCerts = _SSLSetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredCerts(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredCertsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredCerts');
  late final _SSLGetAllowsExpiredCerts = _SSLGetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredRoots(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredRootsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredRoots');
  late final _SSLSetAllowsExpiredRoots = _SSLSetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredRoots(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredRoots');
  late final _SSLGetAllowsExpiredRoots = _SSLGetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsAnyRoot(
    SSLContextRef context,
    int anyRoot,
  ) {
    return _SSLSetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLSetAllowsAnyRootPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsAnyRoot');
  late final _SSLSetAllowsAnyRoot =
      _SSLSetAllowsAnyRootPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsAnyRoot(
    SSLContextRef context,
    ffi.Pointer<Boolean> anyRoot,
  ) {
    return _SSLGetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLGetAllowsAnyRootPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetAllowsAnyRoot');
  late final _SSLGetAllowsAnyRoot = _SSLGetAllowsAnyRootPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetTrustedRoots(
    SSLContextRef context,
    CFArrayRef trustedRoots,
    int replaceExisting,
  ) {
    return _SSLSetTrustedRoots(
      context,
      trustedRoots,
      replaceExisting,
    );
  }

  late final _SSLSetTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, CFArrayRef, Boolean)>>('SSLSetTrustedRoots');
  late final _SSLSetTrustedRoots = _SSLSetTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef, int)>();

  int SSLCopyTrustedRoots(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> trustedRoots,
  ) {
    return _SSLCopyTrustedRoots(
      context,
      trustedRoots,
    );
  }

  late final _SSLCopyTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyTrustedRoots');
  late final _SSLCopyTrustedRoots = _SSLCopyTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerCertificates(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certs,
  ) {
    return _SSLCopyPeerCertificates(
      context,
      certs,
    );
  }

  late final _SSLCopyPeerCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyPeerCertificates');
  late final _SSLCopyPeerCertificates = _SSLCopyPeerCertificatesPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerTrust(
    SSLContextRef context,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SSLCopyPeerTrust(
      context,
      trust,
    );
  }

  late final _SSLCopyPeerTrustPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<SecTrustRef>)>>('SSLCopyPeerTrust');
  late final _SSLCopyPeerTrust = _SSLCopyPeerTrustPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SecTrustRef>)>();

  int SSLSetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> peerID,
    int peerIDLen,
  ) {
    return _SSLSetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLSetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Void>, ffi.Size)>>('SSLSetPeerID');
  late final _SSLSetPeerID = _SSLSetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peerID,
    ffi.Pointer<ffi.Size> peerIDLen,
  ) {
    return _SSLGetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLGetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('SSLGetPeerID');
  late final _SSLGetPeerID = _SSLGetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>)>();

  int SSLGetNegotiatedCipher(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> cipherSuite,
  ) {
    return _SSLGetNegotiatedCipher(
      context,
      cipherSuite,
    );
  }

  late final _SSLGetNegotiatedCipherPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLCipherSuite>)>>('SSLGetNegotiatedCipher');
  late final _SSLGetNegotiatedCipher = _SSLGetNegotiatedCipherPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>)>();

  int SSLSetALPNProtocols(
    SSLContextRef context,
    CFArrayRef protocols,
  ) {
    return _SSLSetALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLSetALPNProtocolsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetALPNProtocols');
  late final _SSLSetALPNProtocols = _SSLSetALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLCopyALPNProtocols(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> protocols,
  ) {
    return _SSLCopyALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLCopyALPNProtocolsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyALPNProtocols');
  late final _SSLCopyALPNProtocols = _SSLCopyALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLSetOCSPResponse(
    SSLContextRef context,
    CFDataRef response,
  ) {
    return _SSLSetOCSPResponse(
      context,
      response,
    );
  }

  late final _SSLSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFDataRef)>>(
          'SSLSetOCSPResponse');
  late final _SSLSetOCSPResponse = _SSLSetOCSPResponsePtr.asFunction<
      int Function(SSLContextRef, CFDataRef)>();

  int SSLSetEncryptionCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetEncryptionCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetEncryptionCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetEncryptionCertificate');
  late final _SSLSetEncryptionCertificate = _SSLSetEncryptionCertificatePtr
      .asFunction<int Function(SSLContextRef, CFArrayRef)>();

  DartSInt32 SSLSetClientSideAuthenticate(
    SSLContextRef context,
    SSLAuthenticate auth,
  ) {
    return _SSLSetClientSideAuthenticate(
      context,
      auth.value,
    );
  }

  late final _SSLSetClientSideAuthenticatePtr = _lookup<
          ffi
          .NativeFunction<OSStatus Function(SSLContextRef, ffi.UnsignedInt)>>(
      'SSLSetClientSideAuthenticate');
  late final _SSLSetClientSideAuthenticate = _SSLSetClientSideAuthenticatePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLAddDistinguishedName(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> derDN,
    int derDNLen,
  ) {
    return _SSLAddDistinguishedName(
      context,
      derDN,
      derDNLen,
    );
  }

  late final _SSLAddDistinguishedNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('SSLAddDistinguishedName');
  late final _SSLAddDistinguishedName = _SSLAddDistinguishedNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetCertificateAuthorities(
    SSLContextRef context,
    CFTypeRef certificateOrArray,
    int replaceExisting,
  ) {
    return _SSLSetCertificateAuthorities(
      context,
      certificateOrArray,
      replaceExisting,
    );
  }

  late final _SSLSetCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, CFTypeRef,
              Boolean)>>('SSLSetCertificateAuthorities');
  late final _SSLSetCertificateAuthorities = _SSLSetCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, CFTypeRef, int)>();

  int SSLCopyCertificateAuthorities(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certificates,
  ) {
    return _SSLCopyCertificateAuthorities(
      context,
      certificates,
    );
  }

  late final _SSLCopyCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyCertificateAuthorities');
  late final _SSLCopyCertificateAuthorities = _SSLCopyCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyDistinguishedNames(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> names,
  ) {
    return _SSLCopyDistinguishedNames(
      context,
      names,
    );
  }

  late final _SSLCopyDistinguishedNamesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyDistinguishedNames');
  late final _SSLCopyDistinguishedNames = _SSLCopyDistinguishedNamesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLGetClientCertificateState(
    SSLContextRef context,
    ffi.Pointer<ffi.UnsignedInt> clientState,
  ) {
    return _SSLGetClientCertificateState(
      context,
      clientState,
    );
  }

  late final _SSLGetClientCertificateStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('SSLGetClientCertificateState');
  late final _SSLGetClientCertificateState = _SSLGetClientCertificateStatePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.UnsignedInt>)>();

  int SSLSetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> dhParams,
    int dhParamsLen,
  ) {
    return _SSLSetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLSetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('SSLSetDiffieHellmanParams');
  late final _SSLSetDiffieHellmanParams = _SSLSetDiffieHellmanParamsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dhParams,
    ffi.Pointer<ffi.Size> dhParamsLen,
  ) {
    return _SSLGetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLGetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('SSLGetDiffieHellmanParams');
  late final _SSLGetDiffieHellmanParams =
      _SSLGetDiffieHellmanParamsPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>();

  int SSLSetRsaBlinding(
    SSLContextRef context,
    int blinding,
  ) {
    return _SSLSetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLSetRsaBlindingPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetRsaBlinding');
  late final _SSLSetRsaBlinding =
      _SSLSetRsaBlindingPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetRsaBlinding(
    SSLContextRef context,
    ffi.Pointer<Boolean> blinding,
  ) {
    return _SSLGetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLGetRsaBlindingPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetRsaBlinding');
  late final _SSLGetRsaBlinding = _SSLGetRsaBlindingPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLHandshake(
    SSLContextRef context,
  ) {
    return _SSLHandshake(
      context,
    );
  }

  late final _SSLHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLHandshake');
  late final _SSLHandshake =
      _SSLHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLReHandshake(
    SSLContextRef context,
  ) {
    return _SSLReHandshake(
      context,
    );
  }

  late final _SSLReHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLReHandshake');
  late final _SSLReHandshake =
      _SSLReHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLWrite(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<ffi.Size> processed,
  ) {
    return _SSLWrite(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLWritePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('SSLWrite');
  late final _SSLWrite = _SSLWritePtr.asFunction<
      int Function(
          SSLContextRef, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Size>)>();

  int SSLRead(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<ffi.Size> processed,
  ) {
    return _SSLRead(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLReadPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('SSLRead');
  late final _SSLRead = _SSLReadPtr.asFunction<
      int Function(
          SSLContextRef, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Size>)>();

  int SSLGetBufferedReadSize(
    SSLContextRef context,
    ffi.Pointer<ffi.Size> bufferSize,
  ) {
    return _SSLGetBufferedReadSize(
      context,
      bufferSize,
    );
  }

  late final _SSLGetBufferedReadSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Size>)>>('SSLGetBufferedReadSize');
  late final _SSLGetBufferedReadSize = _SSLGetBufferedReadSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLGetDatagramWriteSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Size> bufSize,
  ) {
    return _SSLGetDatagramWriteSize(
      dtlsContext,
      bufSize,
    );
  }

  late final _SSLGetDatagramWriteSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Size>)>>('SSLGetDatagramWriteSize');
  late final _SSLGetDatagramWriteSize = _SSLGetDatagramWriteSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Size>)>();

  int SSLClose(
    SSLContextRef context,
  ) {
    return _SSLClose(
      context,
    );
  }

  late final _SSLClosePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>('SSLClose');
  late final _SSLClose = _SSLClosePtr.asFunction<int Function(SSLContextRef)>();

  int SSLSetError(
    SSLContextRef context,
    int status,
  ) {
    return _SSLSetError(
      context,
      status,
    );
  }

  late final _SSLSetErrorPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, OSStatus)>>(
          'SSLSetError');
  late final _SSLSetError =
      _SSLSetErrorPtr.asFunction<int Function(SSLContextRef, int)>();

  /// -1LL
  late final ffi.Pointer<ffi.Int64> _NSURLSessionTransferSizeUnknown =
      _lookup<ffi.Int64>('NSURLSessionTransferSizeUnknown');

  int get NSURLSessionTransferSizeUnknown =>
      _NSURLSessionTransferSizeUnknown.value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityDefault =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityDefault');

  double get NSURLSessionTaskPriorityDefault =>
      _NSURLSessionTaskPriorityDefault.value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityLow =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityLow');

  double get NSURLSessionTaskPriorityLow => _NSURLSessionTaskPriorityLow.value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityHigh =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityHigh');

  double get NSURLSessionTaskPriorityHigh =>
      _NSURLSessionTaskPriorityHigh.value;

  /// Key in the userInfo dictionary of an NSError received during a failed download.
  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSURLSessionDownloadTaskResumeData =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSURLSessionDownloadTaskResumeData');

  ffi.Pointer<objc.ObjCObject> get NSURLSessionDownloadTaskResumeData =>
      _NSURLSessionDownloadTaskResumeData.value;

  set NSURLSessionDownloadTaskResumeData(ffi.Pointer<objc.ObjCObject> value) =>
      _NSURLSessionDownloadTaskResumeData.value = value;

  /// Key in the userInfo dictionary of an NSError received during a failed upload.
  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSURLSessionUploadTaskResumeData =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSURLSessionUploadTaskResumeData');

  ffi.Pointer<objc.ObjCObject> get NSURLSessionUploadTaskResumeData =>
      _NSURLSessionUploadTaskResumeData.value;

  set NSURLSessionUploadTaskResumeData(ffi.Pointer<objc.ObjCObject> value) =>
      _NSURLSessionUploadTaskResumeData.value = value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSItemProviderPreferredImageSizeKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSItemProviderPreferredImageSizeKey');

  ffi.Pointer<objc.ObjCObject> get NSItemProviderPreferredImageSizeKey =>
      _NSItemProviderPreferredImageSizeKey.value;

  set NSItemProviderPreferredImageSizeKey(ffi.Pointer<objc.ObjCObject> value) =>
      _NSItemProviderPreferredImageSizeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSExtensionJavaScriptPreprocessingResultsKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSExtensionJavaScriptPreprocessingResultsKey');

  ffi.Pointer<objc.ObjCObject>
      get NSExtensionJavaScriptPreprocessingResultsKey =>
          _NSExtensionJavaScriptPreprocessingResultsKey.value;

  set NSExtensionJavaScriptPreprocessingResultsKey(
          ffi.Pointer<objc.ObjCObject> value) =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value = value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSExtensionJavaScriptFinalizeArgumentKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSExtensionJavaScriptFinalizeArgumentKey');

  ffi.Pointer<objc.ObjCObject> get NSExtensionJavaScriptFinalizeArgumentKey =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value;

  set NSExtensionJavaScriptFinalizeArgumentKey(
          ffi.Pointer<objc.ObjCObject> value) =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value = value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSItemProviderErrorDomain =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSItemProviderErrorDomain');

  ffi.Pointer<objc.ObjCObject> get NSItemProviderErrorDomain =>
      _NSItemProviderErrorDomain.value;

  set NSItemProviderErrorDomain(ffi.Pointer<objc.ObjCObject> value) =>
      _NSItemProviderErrorDomain.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToKatakana =
      _lookup<NSStringTransform>('NSStringTransformLatinToKatakana');

  NSStringTransform get NSStringTransformLatinToKatakana =>
      _NSStringTransformLatinToKatakana.value;

  set NSStringTransformLatinToKatakana(NSStringTransform value) =>
      _NSStringTransformLatinToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHiragana =
      _lookup<NSStringTransform>('NSStringTransformLatinToHiragana');

  NSStringTransform get NSStringTransformLatinToHiragana =>
      _NSStringTransformLatinToHiragana.value;

  set NSStringTransformLatinToHiragana(NSStringTransform value) =>
      _NSStringTransformLatinToHiragana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHangul =
      _lookup<NSStringTransform>('NSStringTransformLatinToHangul');

  NSStringTransform get NSStringTransformLatinToHangul =>
      _NSStringTransformLatinToHangul.value;

  set NSStringTransformLatinToHangul(NSStringTransform value) =>
      _NSStringTransformLatinToHangul.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToArabic =
      _lookup<NSStringTransform>('NSStringTransformLatinToArabic');

  NSStringTransform get NSStringTransformLatinToArabic =>
      _NSStringTransformLatinToArabic.value;

  set NSStringTransformLatinToArabic(NSStringTransform value) =>
      _NSStringTransformLatinToArabic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHebrew =
      _lookup<NSStringTransform>('NSStringTransformLatinToHebrew');

  NSStringTransform get NSStringTransformLatinToHebrew =>
      _NSStringTransformLatinToHebrew.value;

  set NSStringTransformLatinToHebrew(NSStringTransform value) =>
      _NSStringTransformLatinToHebrew.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToThai =
      _lookup<NSStringTransform>('NSStringTransformLatinToThai');

  NSStringTransform get NSStringTransformLatinToThai =>
      _NSStringTransformLatinToThai.value;

  set NSStringTransformLatinToThai(NSStringTransform value) =>
      _NSStringTransformLatinToThai.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToCyrillic =
      _lookup<NSStringTransform>('NSStringTransformLatinToCyrillic');

  NSStringTransform get NSStringTransformLatinToCyrillic =>
      _NSStringTransformLatinToCyrillic.value;

  set NSStringTransformLatinToCyrillic(NSStringTransform value) =>
      _NSStringTransformLatinToCyrillic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToGreek =
      _lookup<NSStringTransform>('NSStringTransformLatinToGreek');

  NSStringTransform get NSStringTransformLatinToGreek =>
      _NSStringTransformLatinToGreek.value;

  set NSStringTransformLatinToGreek(NSStringTransform value) =>
      _NSStringTransformLatinToGreek.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToLatin =
      _lookup<NSStringTransform>('NSStringTransformToLatin');

  NSStringTransform get NSStringTransformToLatin =>
      _NSStringTransformToLatin.value;

  set NSStringTransformToLatin(NSStringTransform value) =>
      _NSStringTransformToLatin.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformMandarinToLatin =
      _lookup<NSStringTransform>('NSStringTransformMandarinToLatin');

  NSStringTransform get NSStringTransformMandarinToLatin =>
      _NSStringTransformMandarinToLatin.value;

  set NSStringTransformMandarinToLatin(NSStringTransform value) =>
      _NSStringTransformMandarinToLatin.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformHiraganaToKatakana =
      _lookup<NSStringTransform>('NSStringTransformHiraganaToKatakana');

  NSStringTransform get NSStringTransformHiraganaToKatakana =>
      _NSStringTransformHiraganaToKatakana.value;

  set NSStringTransformHiraganaToKatakana(NSStringTransform value) =>
      _NSStringTransformHiraganaToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformFullwidthToHalfwidth =
      _lookup<NSStringTransform>('NSStringTransformFullwidthToHalfwidth');

  NSStringTransform get NSStringTransformFullwidthToHalfwidth =>
      _NSStringTransformFullwidthToHalfwidth.value;

  set NSStringTransformFullwidthToHalfwidth(NSStringTransform value) =>
      _NSStringTransformFullwidthToHalfwidth.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToXMLHex =
      _lookup<NSStringTransform>('NSStringTransformToXMLHex');

  NSStringTransform get NSStringTransformToXMLHex =>
      _NSStringTransformToXMLHex.value;

  set NSStringTransformToXMLHex(NSStringTransform value) =>
      _NSStringTransformToXMLHex.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToUnicodeName =
      _lookup<NSStringTransform>('NSStringTransformToUnicodeName');

  NSStringTransform get NSStringTransformToUnicodeName =>
      _NSStringTransformToUnicodeName.value;

  set NSStringTransformToUnicodeName(NSStringTransform value) =>
      _NSStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformStripCombiningMarks =
      _lookup<NSStringTransform>('NSStringTransformStripCombiningMarks');

  NSStringTransform get NSStringTransformStripCombiningMarks =>
      _NSStringTransformStripCombiningMarks.value;

  set NSStringTransformStripCombiningMarks(NSStringTransform value) =>
      _NSStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformStripDiacritics =
      _lookup<NSStringTransform>('NSStringTransformStripDiacritics');

  NSStringTransform get NSStringTransformStripDiacritics =>
      _NSStringTransformStripDiacritics.value;

  set NSStringTransformStripDiacritics(NSStringTransform value) =>
      _NSStringTransformStripDiacritics.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionSuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionSuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionSuggestedEncodingsKey =>
          _NSStringEncodingDetectionSuggestedEncodingsKey.value;

  set NSStringEncodingDetectionSuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionSuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionDisallowedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionDisallowedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionDisallowedEncodingsKey =>
          _NSStringEncodingDetectionDisallowedEncodingsKey.value;

  set NSStringEncodingDetectionDisallowedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionDisallowedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionUseOnlySuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =>
          _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value;

  set NSStringEncodingDetectionUseOnlySuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionAllowLossyKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionAllowLossyKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionAllowLossyKey =>
          _NSStringEncodingDetectionAllowLossyKey.value;

  set NSStringEncodingDetectionAllowLossyKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionAllowLossyKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionFromWindowsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionFromWindowsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionFromWindowsKey =>
          _NSStringEncodingDetectionFromWindowsKey.value;

  set NSStringEncodingDetectionFromWindowsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionFromWindowsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLossySubstitutionKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLossySubstitutionKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLossySubstitutionKey =>
          _NSStringEncodingDetectionLossySubstitutionKey.value;

  set NSStringEncodingDetectionLossySubstitutionKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLossySubstitutionKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLikelyLanguageKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLikelyLanguageKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLikelyLanguageKey =>
          _NSStringEncodingDetectionLikelyLanguageKey.value;

  set NSStringEncodingDetectionLikelyLanguageKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLikelyLanguageKey.value = value;

  late final ffi.Pointer<NSExceptionName> _NSCharacterConversionException =
      _lookup<NSExceptionName>('NSCharacterConversionException');

  NSExceptionName get NSCharacterConversionException =>
      _NSCharacterConversionException.value;

  set NSCharacterConversionException(NSExceptionName value) =>
      _NSCharacterConversionException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSParseErrorException =
      _lookup<NSExceptionName>('NSParseErrorException');

  NSExceptionName get NSParseErrorException => _NSParseErrorException.value;

  set NSParseErrorException(NSExceptionName value) =>
      _NSParseErrorException.value = value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSHTTPPropertyStatusCodeKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSHTTPPropertyStatusCodeKey');

  ffi.Pointer<objc.ObjCObject> get NSHTTPPropertyStatusCodeKey =>
      _NSHTTPPropertyStatusCodeKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSHTTPPropertyStatusReasonKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSHTTPPropertyStatusReasonKey');

  ffi.Pointer<objc.ObjCObject> get NSHTTPPropertyStatusReasonKey =>
      _NSHTTPPropertyStatusReasonKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSHTTPPropertyServerHTTPVersionKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSHTTPPropertyServerHTTPVersionKey');

  ffi.Pointer<objc.ObjCObject> get NSHTTPPropertyServerHTTPVersionKey =>
      _NSHTTPPropertyServerHTTPVersionKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSHTTPPropertyRedirectionHeadersKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSHTTPPropertyRedirectionHeadersKey');

  ffi.Pointer<objc.ObjCObject> get NSHTTPPropertyRedirectionHeadersKey =>
      _NSHTTPPropertyRedirectionHeadersKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSHTTPPropertyErrorPageDataKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSHTTPPropertyErrorPageDataKey');

  ffi.Pointer<objc.ObjCObject> get NSHTTPPropertyErrorPageDataKey =>
      _NSHTTPPropertyErrorPageDataKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSHTTPPropertyHTTPProxy =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSHTTPPropertyHTTPProxy');

  ffi.Pointer<objc.ObjCObject> get NSHTTPPropertyHTTPProxy =>
      _NSHTTPPropertyHTTPProxy.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSFTPPropertyUserLoginKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSFTPPropertyUserLoginKey');

  ffi.Pointer<objc.ObjCObject> get NSFTPPropertyUserLoginKey =>
      _NSFTPPropertyUserLoginKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSFTPPropertyUserPasswordKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSFTPPropertyUserPasswordKey');

  ffi.Pointer<objc.ObjCObject> get NSFTPPropertyUserPasswordKey =>
      _NSFTPPropertyUserPasswordKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSFTPPropertyActiveTransferModeKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>(
          'NSFTPPropertyActiveTransferModeKey');

  ffi.Pointer<objc.ObjCObject> get NSFTPPropertyActiveTransferModeKey =>
      _NSFTPPropertyActiveTransferModeKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _NSFTPPropertyFileOffsetKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSFTPPropertyFileOffsetKey');

  ffi.Pointer<objc.ObjCObject> get NSFTPPropertyFileOffsetKey =>
      _NSFTPPropertyFileOffsetKey.value;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>> _NSFTPPropertyFTPProxy =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSFTPPropertyFTPProxy');

  ffi.Pointer<objc.ObjCObject> get NSFTPPropertyFTPProxy =>
      _NSFTPPropertyFTPProxy.value;

  /// A string constant for the "file" URL scheme. If you are using this to compare to a URL's scheme to see if it is a file URL, you should instead use the NSURL fileURL property -- the fileURL property is much faster.
  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>> _NSURLFileScheme =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSURLFileScheme');

  ffi.Pointer<objc.ObjCObject> get NSURLFileScheme => _NSURLFileScheme.value;

  set NSURLFileScheme(ffi.Pointer<objc.ObjCObject> value) =>
      _NSURLFileScheme.value = value;

  /// Key for the resource properties that have not been set after setResourceValues:error: returns an error, returned as an array of of strings.
  late final ffi.Pointer<NSURLResourceKey> _NSURLKeysOfUnsetValuesKey =
      _lookup<NSURLResourceKey>('NSURLKeysOfUnsetValuesKey');

  NSURLResourceKey get NSURLKeysOfUnsetValuesKey =>
      _NSURLKeysOfUnsetValuesKey.value;

  set NSURLKeysOfUnsetValuesKey(NSURLResourceKey value) =>
      _NSURLKeysOfUnsetValuesKey.value = value;

  /// The resource name provided by the file system (Read-write, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLNameKey =
      _lookup<NSURLResourceKey>('NSURLNameKey');

  NSURLResourceKey get NSURLNameKey => _NSURLNameKey.value;

  set NSURLNameKey(NSURLResourceKey value) => _NSURLNameKey.value = value;

  /// Localized or extension-hidden name as displayed to users (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedNameKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedNameKey');

  NSURLResourceKey get NSURLLocalizedNameKey => _NSURLLocalizedNameKey.value;

  set NSURLLocalizedNameKey(NSURLResourceKey value) =>
      _NSURLLocalizedNameKey.value = value;

  /// True for regular files (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsRegularFileKey =
      _lookup<NSURLResourceKey>('NSURLIsRegularFileKey');

  NSURLResourceKey get NSURLIsRegularFileKey => _NSURLIsRegularFileKey.value;

  set NSURLIsRegularFileKey(NSURLResourceKey value) =>
      _NSURLIsRegularFileKey.value = value;

  /// True for directories (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsDirectoryKey =
      _lookup<NSURLResourceKey>('NSURLIsDirectoryKey');

  NSURLResourceKey get NSURLIsDirectoryKey => _NSURLIsDirectoryKey.value;

  set NSURLIsDirectoryKey(NSURLResourceKey value) =>
      _NSURLIsDirectoryKey.value = value;

  /// True for symlinks (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSymbolicLinkKey =
      _lookup<NSURLResourceKey>('NSURLIsSymbolicLinkKey');

  NSURLResourceKey get NSURLIsSymbolicLinkKey => _NSURLIsSymbolicLinkKey.value;

  set NSURLIsSymbolicLinkKey(NSURLResourceKey value) =>
      _NSURLIsSymbolicLinkKey.value = value;

  /// True for the root directory of a volume (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsVolumeKey =
      _lookup<NSURLResourceKey>('NSURLIsVolumeKey');

  NSURLResourceKey get NSURLIsVolumeKey => _NSURLIsVolumeKey.value;

  set NSURLIsVolumeKey(NSURLResourceKey value) =>
      _NSURLIsVolumeKey.value = value;

  /// True for packaged directories (Read-only 10_6 and 10_7, read-write 10_8, value type boolean NSNumber). Note: You can only set or clear this property on directories; if you try to set this property on non-directory objects, the property is ignored. If the directory is a package for some other reason (extension type, etc), setting this property to false will have no effect.
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsPackageKey =
      _lookup<NSURLResourceKey>('NSURLIsPackageKey');

  NSURLResourceKey get NSURLIsPackageKey => _NSURLIsPackageKey.value;

  set NSURLIsPackageKey(NSURLResourceKey value) =>
      _NSURLIsPackageKey.value = value;

  /// True if resource is an application (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsApplicationKey =
      _lookup<NSURLResourceKey>('NSURLIsApplicationKey');

  NSURLResourceKey get NSURLIsApplicationKey => _NSURLIsApplicationKey.value;

  set NSURLIsApplicationKey(NSURLResourceKey value) =>
      _NSURLIsApplicationKey.value = value;

  /// True if the resource is scriptable. Only applies to applications (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLApplicationIsScriptableKey =
      _lookup<NSURLResourceKey>('NSURLApplicationIsScriptableKey');

  NSURLResourceKey get NSURLApplicationIsScriptableKey =>
      _NSURLApplicationIsScriptableKey.value;

  set NSURLApplicationIsScriptableKey(NSURLResourceKey value) =>
      _NSURLApplicationIsScriptableKey.value = value;

  /// True for system-immutable resources (Read-write, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSystemImmutableKey =
      _lookup<NSURLResourceKey>('NSURLIsSystemImmutableKey');

  NSURLResourceKey get NSURLIsSystemImmutableKey =>
      _NSURLIsSystemImmutableKey.value;

  set NSURLIsSystemImmutableKey(NSURLResourceKey value) =>
      _NSURLIsSystemImmutableKey.value = value;

  /// True for user-immutable resources (Read-write, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsUserImmutableKey =
      _lookup<NSURLResourceKey>('NSURLIsUserImmutableKey');

  NSURLResourceKey get NSURLIsUserImmutableKey =>
      _NSURLIsUserImmutableKey.value;

  set NSURLIsUserImmutableKey(NSURLResourceKey value) =>
      _NSURLIsUserImmutableKey.value = value;

  /// True for resources normally not displayed to users (Read-write, value type boolean NSNumber). Note: If the resource is a hidden because its name starts with a period, setting this property to false will not change the property.
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsHiddenKey =
      _lookup<NSURLResourceKey>('NSURLIsHiddenKey');

  NSURLResourceKey get NSURLIsHiddenKey => _NSURLIsHiddenKey.value;

  set NSURLIsHiddenKey(NSURLResourceKey value) =>
      _NSURLIsHiddenKey.value = value;

  /// True for resources whose filename extension is removed from the localized name property (Read-write, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLHasHiddenExtensionKey =
      _lookup<NSURLResourceKey>('NSURLHasHiddenExtensionKey');

  NSURLResourceKey get NSURLHasHiddenExtensionKey =>
      _NSURLHasHiddenExtensionKey.value;

  set NSURLHasHiddenExtensionKey(NSURLResourceKey value) =>
      _NSURLHasHiddenExtensionKey.value = value;

  /// The date the resource was created (Read-write, value type NSDate)
  late final ffi.Pointer<NSURLResourceKey> _NSURLCreationDateKey =
      _lookup<NSURLResourceKey>('NSURLCreationDateKey');

  NSURLResourceKey get NSURLCreationDateKey => _NSURLCreationDateKey.value;

  set NSURLCreationDateKey(NSURLResourceKey value) =>
      _NSURLCreationDateKey.value = value;

  /// The date the resource was last accessed (Read-write, value type NSDate)
  late final ffi.Pointer<NSURLResourceKey> _NSURLContentAccessDateKey =
      _lookup<NSURLResourceKey>('NSURLContentAccessDateKey');

  NSURLResourceKey get NSURLContentAccessDateKey =>
      _NSURLContentAccessDateKey.value;

  set NSURLContentAccessDateKey(NSURLResourceKey value) =>
      _NSURLContentAccessDateKey.value = value;

  /// The time the resource content was last modified (Read-write, value type NSDate)
  late final ffi.Pointer<NSURLResourceKey> _NSURLContentModificationDateKey =
      _lookup<NSURLResourceKey>('NSURLContentModificationDateKey');

  NSURLResourceKey get NSURLContentModificationDateKey =>
      _NSURLContentModificationDateKey.value;

  set NSURLContentModificationDateKey(NSURLResourceKey value) =>
      _NSURLContentModificationDateKey.value = value;

  /// The time the resource's attributes were last modified (Read-only, value type NSDate)
  late final ffi.Pointer<NSURLResourceKey> _NSURLAttributeModificationDateKey =
      _lookup<NSURLResourceKey>('NSURLAttributeModificationDateKey');

  NSURLResourceKey get NSURLAttributeModificationDateKey =>
      _NSURLAttributeModificationDateKey.value;

  set NSURLAttributeModificationDateKey(NSURLResourceKey value) =>
      _NSURLAttributeModificationDateKey.value = value;

  /// Number of hard links to the resource (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLLinkCountKey =
      _lookup<NSURLResourceKey>('NSURLLinkCountKey');

  NSURLResourceKey get NSURLLinkCountKey => _NSURLLinkCountKey.value;

  set NSURLLinkCountKey(NSURLResourceKey value) =>
      _NSURLLinkCountKey.value = value;

  /// The resource's parent directory, if any (Read-only, value type NSURL)
  late final ffi.Pointer<NSURLResourceKey> _NSURLParentDirectoryURLKey =
      _lookup<NSURLResourceKey>('NSURLParentDirectoryURLKey');

  NSURLResourceKey get NSURLParentDirectoryURLKey =>
      _NSURLParentDirectoryURLKey.value;

  set NSURLParentDirectoryURLKey(NSURLResourceKey value) =>
      _NSURLParentDirectoryURLKey.value = value;

  /// URL of the volume on which the resource is stored (Read-only, value type NSURL)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeURLKey =
      _lookup<NSURLResourceKey>('NSURLVolumeURLKey');

  NSURLResourceKey get NSURLVolumeURLKey => _NSURLVolumeURLKey.value;

  set NSURLVolumeURLKey(NSURLResourceKey value) =>
      _NSURLVolumeURLKey.value = value;

  /// Uniform type identifier (UTI) for the resource (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLTypeIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLTypeIdentifierKey');

  NSURLResourceKey get NSURLTypeIdentifierKey => _NSURLTypeIdentifierKey.value;

  set NSURLTypeIdentifierKey(NSURLResourceKey value) =>
      _NSURLTypeIdentifierKey.value = value;

  /// File type (UTType) for the resource (Read-only, value type UTType)
  late final ffi.Pointer<NSURLResourceKey> _NSURLContentTypeKey =
      _lookup<NSURLResourceKey>('NSURLContentTypeKey');

  NSURLResourceKey get NSURLContentTypeKey => _NSURLContentTypeKey.value;

  set NSURLContentTypeKey(NSURLResourceKey value) =>
      _NSURLContentTypeKey.value = value;

  /// User-visible type or "kind" description (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedTypeDescriptionKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedTypeDescriptionKey');

  NSURLResourceKey get NSURLLocalizedTypeDescriptionKey =>
      _NSURLLocalizedTypeDescriptionKey.value;

  set NSURLLocalizedTypeDescriptionKey(NSURLResourceKey value) =>
      _NSURLLocalizedTypeDescriptionKey.value = value;

  /// The label number assigned to the resource (Read-write, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLLabelNumberKey =
      _lookup<NSURLResourceKey>('NSURLLabelNumberKey');

  NSURLResourceKey get NSURLLabelNumberKey => _NSURLLabelNumberKey.value;

  set NSURLLabelNumberKey(NSURLResourceKey value) =>
      _NSURLLabelNumberKey.value = value;

  /// The color of the assigned label (Read-only, value type NSColor)
  late final ffi.Pointer<NSURLResourceKey> _NSURLLabelColorKey =
      _lookup<NSURLResourceKey>('NSURLLabelColorKey');

  NSURLResourceKey get NSURLLabelColorKey => _NSURLLabelColorKey.value;

  set NSURLLabelColorKey(NSURLResourceKey value) =>
      _NSURLLabelColorKey.value = value;

  /// The user-visible label text (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedLabelKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedLabelKey');

  NSURLResourceKey get NSURLLocalizedLabelKey => _NSURLLocalizedLabelKey.value;

  set NSURLLocalizedLabelKey(NSURLResourceKey value) =>
      _NSURLLocalizedLabelKey.value = value;

  /// The icon normally displayed for the resource (Read-only, value type NSImage)
  late final ffi.Pointer<NSURLResourceKey> _NSURLEffectiveIconKey =
      _lookup<NSURLResourceKey>('NSURLEffectiveIconKey');

  NSURLResourceKey get NSURLEffectiveIconKey => _NSURLEffectiveIconKey.value;

  set NSURLEffectiveIconKey(NSURLResourceKey value) =>
      _NSURLEffectiveIconKey.value = value;

  /// The custom icon assigned to the resource, if any (Currently not implemented, value type NSImage)
  late final ffi.Pointer<NSURLResourceKey> _NSURLCustomIconKey =
      _lookup<NSURLResourceKey>('NSURLCustomIconKey');

  NSURLResourceKey get NSURLCustomIconKey => _NSURLCustomIconKey.value;

  set NSURLCustomIconKey(NSURLResourceKey value) =>
      _NSURLCustomIconKey.value = value;

  /// An identifier which can be used to compare two file system objects for equality using -isEqual (i.e, two object identifiers are equal if they have the same file system path or if the paths are linked to same inode on the same file system). This identifier is not persistent across system restarts. (Read-only, value type id <NSCopying, NSCoding, NSSecureCoding, NSObject>)
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileResourceIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileResourceIdentifierKey');

  NSURLResourceKey get NSURLFileResourceIdentifierKey =>
      _NSURLFileResourceIdentifierKey.value;

  set NSURLFileResourceIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileResourceIdentifierKey.value = value;

  /// An identifier that can be used to identify the volume the file system object is on. Other objects on the same volume will have the same volume identifier and can be compared using for equality using -isEqual. This identifier is not persistent across system restarts. (Read-only, value type id <NSCopying, NSCoding, NSSecureCoding, NSObject>)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIdentifierKey');

  NSURLResourceKey get NSURLVolumeIdentifierKey =>
      _NSURLVolumeIdentifierKey.value;

  set NSURLVolumeIdentifierKey(NSURLResourceKey value) =>
      _NSURLVolumeIdentifierKey.value = value;

  /// The optimal block size when reading or writing this file's data, or nil if not available. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLPreferredIOBlockSizeKey =
      _lookup<NSURLResourceKey>('NSURLPreferredIOBlockSizeKey');

  NSURLResourceKey get NSURLPreferredIOBlockSizeKey =>
      _NSURLPreferredIOBlockSizeKey.value;

  set NSURLPreferredIOBlockSizeKey(NSURLResourceKey value) =>
      _NSURLPreferredIOBlockSizeKey.value = value;

  /// true if this process (as determined by EUID) can read the resource. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsReadableKey =
      _lookup<NSURLResourceKey>('NSURLIsReadableKey');

  NSURLResourceKey get NSURLIsReadableKey => _NSURLIsReadableKey.value;

  set NSURLIsReadableKey(NSURLResourceKey value) =>
      _NSURLIsReadableKey.value = value;

  /// true if this process (as determined by EUID) can write to the resource. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsWritableKey =
      _lookup<NSURLResourceKey>('NSURLIsWritableKey');

  NSURLResourceKey get NSURLIsWritableKey => _NSURLIsWritableKey.value;

  set NSURLIsWritableKey(NSURLResourceKey value) =>
      _NSURLIsWritableKey.value = value;

  /// true if this process (as determined by EUID) can execute a file resource or search a directory resource. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsExecutableKey =
      _lookup<NSURLResourceKey>('NSURLIsExecutableKey');

  NSURLResourceKey get NSURLIsExecutableKey => _NSURLIsExecutableKey.value;

  set NSURLIsExecutableKey(NSURLResourceKey value) =>
      _NSURLIsExecutableKey.value = value;

  /// The file system object's security information encapsulated in a NSFileSecurity object. (Read-write, Value type NSFileSecurity)
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileSecurityKey =
      _lookup<NSURLResourceKey>('NSURLFileSecurityKey');

  NSURLResourceKey get NSURLFileSecurityKey => _NSURLFileSecurityKey.value;

  set NSURLFileSecurityKey(NSURLResourceKey value) =>
      _NSURLFileSecurityKey.value = value;

  /// true if resource should be excluded from backups, false otherwise (Read-write, value type boolean NSNumber). This property is only useful for excluding cache and other application support files which are not needed in a backup. Some operations commonly made to user documents will cause this property to be reset to false and so this property should not be used on user documents.
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsExcludedFromBackupKey =
      _lookup<NSURLResourceKey>('NSURLIsExcludedFromBackupKey');

  NSURLResourceKey get NSURLIsExcludedFromBackupKey =>
      _NSURLIsExcludedFromBackupKey.value;

  set NSURLIsExcludedFromBackupKey(NSURLResourceKey value) =>
      _NSURLIsExcludedFromBackupKey.value = value;

  /// The array of Tag names (Read-write, value type NSArray of NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLTagNamesKey =
      _lookup<NSURLResourceKey>('NSURLTagNamesKey');

  NSURLResourceKey get NSURLTagNamesKey => _NSURLTagNamesKey.value;

  set NSURLTagNamesKey(NSURLResourceKey value) =>
      _NSURLTagNamesKey.value = value;

  /// the URL's path as a file system path (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLPathKey =
      _lookup<NSURLResourceKey>('NSURLPathKey');

  NSURLResourceKey get NSURLPathKey => _NSURLPathKey.value;

  set NSURLPathKey(NSURLResourceKey value) => _NSURLPathKey.value = value;

  /// the URL's path as a canonical absolute file system path (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLCanonicalPathKey =
      _lookup<NSURLResourceKey>('NSURLCanonicalPathKey');

  NSURLResourceKey get NSURLCanonicalPathKey => _NSURLCanonicalPathKey.value;

  set NSURLCanonicalPathKey(NSURLResourceKey value) =>
      _NSURLCanonicalPathKey.value = value;

  /// true if this URL is a file system trigger directory. Traversing or opening a file system trigger will cause an attempt to mount a file system on the trigger directory. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsMountTriggerKey =
      _lookup<NSURLResourceKey>('NSURLIsMountTriggerKey');

  NSURLResourceKey get NSURLIsMountTriggerKey => _NSURLIsMountTriggerKey.value;

  set NSURLIsMountTriggerKey(NSURLResourceKey value) =>
      _NSURLIsMountTriggerKey.value = value;

  /// An opaque generation identifier which can be compared using isEqual: to determine if the data in a document has been modified. For URLs which refer to the same file inode, the generation identifier will change when the data in the file's data fork is changed (changes to extended attributes or other file system metadata do not change the generation identifier). For URLs which refer to the same directory inode, the generation identifier will change when direct children of that directory are added, removed or renamed (changes to the data of the direct children of that directory will not change the generation identifier). The generation identifier is persistent across system restarts. The generation identifier is tied to a specific document on a specific volume and is not transferred when the document is copied to another volume. This property is not supported by all volumes. (Read-only, value type id <NSCopying, NSCoding, NSSecureCoding, NSObject>)
  late final ffi.Pointer<NSURLResourceKey> _NSURLGenerationIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLGenerationIdentifierKey');

  NSURLResourceKey get NSURLGenerationIdentifierKey =>
      _NSURLGenerationIdentifierKey.value;

  set NSURLGenerationIdentifierKey(NSURLResourceKey value) =>
      _NSURLGenerationIdentifierKey.value = value;

  /// The document identifier -- a value assigned by the kernel to a document (which can be either a file or directory) and is used to identify the document regardless of where it gets moved on a volume. The document identifier survives "safe save” operations; i.e it is sticky to the path it was assigned to (-replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error: is the preferred safe-save API). The document identifier is persistent across system restarts. The document identifier is not transferred when the file is copied. Document identifiers are only unique within a single volume. This property is not supported by all volumes. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLDocumentIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLDocumentIdentifierKey');

  NSURLResourceKey get NSURLDocumentIdentifierKey =>
      _NSURLDocumentIdentifierKey.value;

  set NSURLDocumentIdentifierKey(NSURLResourceKey value) =>
      _NSURLDocumentIdentifierKey.value = value;

  /// The date the resource was created, or renamed into or within its parent directory. Note that inconsistent behavior may be observed when this attribute is requested on hard-linked items. This property is not supported by all volumes. (Read-only before macOS 10.15, iOS 13.0, watchOS 6.0, and tvOS 13.0; Read-write after, value type NSDate)
  late final ffi.Pointer<NSURLResourceKey> _NSURLAddedToDirectoryDateKey =
      _lookup<NSURLResourceKey>('NSURLAddedToDirectoryDateKey');

  NSURLResourceKey get NSURLAddedToDirectoryDateKey =>
      _NSURLAddedToDirectoryDateKey.value;

  set NSURLAddedToDirectoryDateKey(NSURLResourceKey value) =>
      _NSURLAddedToDirectoryDateKey.value = value;

  /// The quarantine properties as defined in LSQuarantine.h. To remove quarantine information from a file, pass NSNull as the value when setting this property. (Read-write, value type NSDictionary)
  late final ffi.Pointer<NSURLResourceKey> _NSURLQuarantinePropertiesKey =
      _lookup<NSURLResourceKey>('NSURLQuarantinePropertiesKey');

  NSURLResourceKey get NSURLQuarantinePropertiesKey =>
      _NSURLQuarantinePropertiesKey.value;

  set NSURLQuarantinePropertiesKey(NSURLResourceKey value) =>
      _NSURLQuarantinePropertiesKey.value = value;

  /// Returns the file system object type. (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileResourceTypeKey =
      _lookup<NSURLResourceKey>('NSURLFileResourceTypeKey');

  NSURLResourceKey get NSURLFileResourceTypeKey =>
      _NSURLFileResourceTypeKey.value;

  set NSURLFileResourceTypeKey(NSURLResourceKey value) =>
      _NSURLFileResourceTypeKey.value = value;

  /// The file system's internal inode identifier for the item. This value is not stable for all file systems or across all mounts, so it should be used sparingly and not persisted. It is useful, for example, to match URLs from the URL enumerator with paths from FSEvents. (Read-only, value type NSNumber containing an unsigned long long).
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileIdentifierKey');

  NSURLResourceKey get NSURLFileIdentifierKey => _NSURLFileIdentifierKey.value;

  set NSURLFileIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileIdentifierKey.value = value;

  /// A 64-bit value assigned by APFS that identifies a file's content data stream. Only cloned files and their originals can have the same identifier. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileContentIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileContentIdentifierKey');

  NSURLResourceKey get NSURLFileContentIdentifierKey =>
      _NSURLFileContentIdentifierKey.value;

  set NSURLFileContentIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileContentIdentifierKey.value = value;

  /// True for cloned files and their originals that may share all, some, or no data blocks. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLMayShareFileContentKey =
      _lookup<NSURLResourceKey>('NSURLMayShareFileContentKey');

  NSURLResourceKey get NSURLMayShareFileContentKey =>
      _NSURLMayShareFileContentKey.value;

  set NSURLMayShareFileContentKey(NSURLResourceKey value) =>
      _NSURLMayShareFileContentKey.value = value;

  /// True if the file has extended attributes. False guarantees there are none. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLMayHaveExtendedAttributesKey =
      _lookup<NSURLResourceKey>('NSURLMayHaveExtendedAttributesKey');

  NSURLResourceKey get NSURLMayHaveExtendedAttributesKey =>
      _NSURLMayHaveExtendedAttributesKey.value;

  set NSURLMayHaveExtendedAttributesKey(NSURLResourceKey value) =>
      _NSURLMayHaveExtendedAttributesKey.value = value;

  /// True if the file can be deleted by the file system when asked to free space. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsPurgeableKey =
      _lookup<NSURLResourceKey>('NSURLIsPurgeableKey');

  NSURLResourceKey get NSURLIsPurgeableKey => _NSURLIsPurgeableKey.value;

  set NSURLIsPurgeableKey(NSURLResourceKey value) =>
      _NSURLIsPurgeableKey.value = value;

  /// True if the file has sparse regions. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSparseKey =
      _lookup<NSURLResourceKey>('NSURLIsSparseKey');

  NSURLResourceKey get NSURLIsSparseKey => _NSURLIsSparseKey.value;

  set NSURLIsSparseKey(NSURLResourceKey value) =>
      _NSURLIsSparseKey.value = value;

  /// The file system object type values returned for the NSURLFileResourceTypeKey
  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeNamedPipe =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeNamedPipe');

  NSURLFileResourceType get NSURLFileResourceTypeNamedPipe =>
      _NSURLFileResourceTypeNamedPipe.value;

  set NSURLFileResourceTypeNamedPipe(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeCharacterSpecial =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeCharacterSpecial');

  NSURLFileResourceType get NSURLFileResourceTypeCharacterSpecial =>
      _NSURLFileResourceTypeCharacterSpecial.value;

  set NSURLFileResourceTypeCharacterSpecial(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeDirectory =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeDirectory');

  NSURLFileResourceType get NSURLFileResourceTypeDirectory =>
      _NSURLFileResourceTypeDirectory.value;

  set NSURLFileResourceTypeDirectory(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeBlockSpecial =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeBlockSpecial');

  NSURLFileResourceType get NSURLFileResourceTypeBlockSpecial =>
      _NSURLFileResourceTypeBlockSpecial.value;

  set NSURLFileResourceTypeBlockSpecial(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeRegular =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeRegular');

  NSURLFileResourceType get NSURLFileResourceTypeRegular =>
      _NSURLFileResourceTypeRegular.value;

  set NSURLFileResourceTypeRegular(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeSymbolicLink =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeSymbolicLink');

  NSURLFileResourceType get NSURLFileResourceTypeSymbolicLink =>
      _NSURLFileResourceTypeSymbolicLink.value;

  set NSURLFileResourceTypeSymbolicLink(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeSocket =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeSocket');

  NSURLFileResourceType get NSURLFileResourceTypeSocket =>
      _NSURLFileResourceTypeSocket.value;

  set NSURLFileResourceTypeSocket(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeUnknown =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeUnknown');

  NSURLFileResourceType get NSURLFileResourceTypeUnknown =>
      _NSURLFileResourceTypeUnknown.value;

  set NSURLFileResourceTypeUnknown(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeUnknown.value = value;

  /// dictionary of NSImage/UIImage objects keyed by size
  late final ffi.Pointer<NSURLResourceKey> _NSURLThumbnailDictionaryKey =
      _lookup<NSURLResourceKey>('NSURLThumbnailDictionaryKey');

  NSURLResourceKey get NSURLThumbnailDictionaryKey =>
      _NSURLThumbnailDictionaryKey.value;

  set NSURLThumbnailDictionaryKey(NSURLResourceKey value) =>
      _NSURLThumbnailDictionaryKey.value = value;

  /// returns all thumbnails as a single NSImage
  late final ffi.Pointer<NSURLResourceKey> _NSURLThumbnailKey =
      _lookup<NSURLResourceKey>('NSURLThumbnailKey');

  NSURLResourceKey get NSURLThumbnailKey => _NSURLThumbnailKey.value;

  set NSURLThumbnailKey(NSURLResourceKey value) =>
      _NSURLThumbnailKey.value = value;

  /// size key for a 1024 x 1024 thumbnail image
  late final ffi.Pointer<NSURLThumbnailDictionaryItem>
      _NSThumbnail1024x1024SizeKey =
      _lookup<NSURLThumbnailDictionaryItem>('NSThumbnail1024x1024SizeKey');

  NSURLThumbnailDictionaryItem get NSThumbnail1024x1024SizeKey =>
      _NSThumbnail1024x1024SizeKey.value;

  set NSThumbnail1024x1024SizeKey(NSURLThumbnailDictionaryItem value) =>
      _NSThumbnail1024x1024SizeKey.value = value;

  /// Total file size in bytes (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLFileSizeKey');

  NSURLResourceKey get NSURLFileSizeKey => _NSURLFileSizeKey.value;

  set NSURLFileSizeKey(NSURLResourceKey value) =>
      _NSURLFileSizeKey.value = value;

  /// Total size allocated on disk for the file in bytes (number of blocks times block size) (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileAllocatedSizeKey =
      _lookup<NSURLResourceKey>('NSURLFileAllocatedSizeKey');

  NSURLResourceKey get NSURLFileAllocatedSizeKey =>
      _NSURLFileAllocatedSizeKey.value;

  set NSURLFileAllocatedSizeKey(NSURLResourceKey value) =>
      _NSURLFileAllocatedSizeKey.value = value;

  /// Total displayable size of the file in bytes (this may include space used by metadata), or nil if not available. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLTotalFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLTotalFileSizeKey');

  NSURLResourceKey get NSURLTotalFileSizeKey => _NSURLTotalFileSizeKey.value;

  set NSURLTotalFileSizeKey(NSURLResourceKey value) =>
      _NSURLTotalFileSizeKey.value = value;

  /// Total allocated size of the file in bytes (this may include space used by metadata), or nil if not available. This can be less than the value returned by NSURLTotalFileSizeKey if the resource is compressed. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLTotalFileAllocatedSizeKey =
      _lookup<NSURLResourceKey>('NSURLTotalFileAllocatedSizeKey');

  NSURLResourceKey get NSURLTotalFileAllocatedSizeKey =>
      _NSURLTotalFileAllocatedSizeKey.value;

  set NSURLTotalFileAllocatedSizeKey(NSURLResourceKey value) =>
      _NSURLTotalFileAllocatedSizeKey.value = value;

  /// true if the resource is a Finder alias file or a symlink, false otherwise ( Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsAliasFileKey =
      _lookup<NSURLResourceKey>('NSURLIsAliasFileKey');

  NSURLResourceKey get NSURLIsAliasFileKey => _NSURLIsAliasFileKey.value;

  set NSURLIsAliasFileKey(NSURLResourceKey value) =>
      _NSURLIsAliasFileKey.value = value;

  /// The protection level for this file
  late final ffi.Pointer<NSURLResourceKey> _NSURLFileProtectionKey =
      _lookup<NSURLResourceKey>('NSURLFileProtectionKey');

  NSURLResourceKey get NSURLFileProtectionKey => _NSURLFileProtectionKey.value;

  set NSURLFileProtectionKey(NSURLResourceKey value) =>
      _NSURLFileProtectionKey.value = value;

  /// The file has no special protections associated with it. It can be read from or written to at any time.
  late final ffi.Pointer<NSURLFileProtectionType> _NSURLFileProtectionNone =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionNone');

  NSURLFileProtectionType get NSURLFileProtectionNone =>
      _NSURLFileProtectionNone.value;

  set NSURLFileProtectionNone(NSURLFileProtectionType value) =>
      _NSURLFileProtectionNone.value = value;

  /// The file is stored in an encrypted format on disk and cannot be read from or written to while the device is locked or booting. Transient data files with this protection type should be excluded from backups using NSURLIsExcludedFromBackupKey.
  late final ffi.Pointer<NSURLFileProtectionType> _NSURLFileProtectionComplete =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionComplete');

  NSURLFileProtectionType get NSURLFileProtectionComplete =>
      _NSURLFileProtectionComplete.value;

  set NSURLFileProtectionComplete(NSURLFileProtectionType value) =>
      _NSURLFileProtectionComplete.value = value;

  /// The file is stored in an encrypted format on disk. Files can be created while the device is locked, but once closed, cannot be opened again until the device is unlocked. If the file is opened when unlocked, you may continue to access the file normally, even if the user locks the device. There is a small performance penalty when the file is created and opened, though not when being written to or read from. This can be mitigated by changing the file protection to NSURLFileProtectionComplete when the device is unlocked. Transient data files with this protection type should be excluded from backups using NSURLIsExcludedFromBackupKey.
  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteUnlessOpen =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionCompleteUnlessOpen');

  NSURLFileProtectionType get NSURLFileProtectionCompleteUnlessOpen =>
      _NSURLFileProtectionCompleteUnlessOpen.value;

  set NSURLFileProtectionCompleteUnlessOpen(NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteUnlessOpen.value = value;

  /// The file is stored in an encrypted format on disk and cannot be accessed until after the device has booted. After the user unlocks the device for the first time, your app can access the file and continue to access it even if the user subsequently locks the device.
  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<NSURLFileProtectionType>(
          'NSURLFileProtectionCompleteUntilFirstUserAuthentication');

  NSURLFileProtectionType
      get NSURLFileProtectionCompleteUntilFirstUserAuthentication =>
          _NSURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set NSURLFileProtectionCompleteUntilFirstUserAuthentication(
          NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  /// The file is stored in an encrypted format on disk and cannot be accessed until after first unlock after the device has booted. After this first unlock, your app can access the file even while the device is locked until access expiry. Access is renewed once the user unlocks the device again.
  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteWhenUserInactive =
      _lookup<NSURLFileProtectionType>(
          'NSURLFileProtectionCompleteWhenUserInactive');

  NSURLFileProtectionType get NSURLFileProtectionCompleteWhenUserInactive =>
      _NSURLFileProtectionCompleteWhenUserInactive.value;

  set NSURLFileProtectionCompleteWhenUserInactive(
          NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteWhenUserInactive.value = value;

  /// Returns the count of file system objects contained in the directory. This is a count of objects actually stored in the file system, so excludes virtual items like "." and "..". The property is useful for quickly identifying an empty directory for backup and syncing. If the URL is not a directory or the file system cannot cheaply compute the value, `nil` is returned. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLDirectoryEntryCountKey =
      _lookup<NSURLResourceKey>('NSURLDirectoryEntryCountKey');

  NSURLResourceKey get NSURLDirectoryEntryCountKey =>
      _NSURLDirectoryEntryCountKey.value;

  set NSURLDirectoryEntryCountKey(NSURLResourceKey value) =>
      _NSURLDirectoryEntryCountKey.value = value;

  /// The user-visible volume format (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeLocalizedFormatDescriptionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeLocalizedFormatDescriptionKey');

  NSURLResourceKey get NSURLVolumeLocalizedFormatDescriptionKey =>
      _NSURLVolumeLocalizedFormatDescriptionKey.value;

  set NSURLVolumeLocalizedFormatDescriptionKey(NSURLResourceKey value) =>
      _NSURLVolumeLocalizedFormatDescriptionKey.value = value;

  /// Total volume capacity in bytes (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeTotalCapacityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeTotalCapacityKey');

  NSURLResourceKey get NSURLVolumeTotalCapacityKey =>
      _NSURLVolumeTotalCapacityKey.value;

  set NSURLVolumeTotalCapacityKey(NSURLResourceKey value) =>
      _NSURLVolumeTotalCapacityKey.value = value;

  /// Total free space in bytes (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeAvailableCapacityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeAvailableCapacityKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityKey =>
      _NSURLVolumeAvailableCapacityKey.value;

  set NSURLVolumeAvailableCapacityKey(NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityKey.value = value;

  /// Total number of resources on the volume (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeResourceCountKey =
      _lookup<NSURLResourceKey>('NSURLVolumeResourceCountKey');

  NSURLResourceKey get NSURLVolumeResourceCountKey =>
      _NSURLVolumeResourceCountKey.value;

  set NSURLVolumeResourceCountKey(NSURLResourceKey value) =>
      _NSURLVolumeResourceCountKey.value = value;

  /// true if the volume format supports persistent object identifiers and can look up file system objects by their IDs (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsPersistentIDsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsPersistentIDsKey');

  NSURLResourceKey get NSURLVolumeSupportsPersistentIDsKey =>
      _NSURLVolumeSupportsPersistentIDsKey.value;

  set NSURLVolumeSupportsPersistentIDsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsPersistentIDsKey.value = value;

  /// true if the volume format supports symbolic links (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsSymbolicLinksKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSymbolicLinksKey');

  NSURLResourceKey get NSURLVolumeSupportsSymbolicLinksKey =>
      _NSURLVolumeSupportsSymbolicLinksKey.value;

  set NSURLVolumeSupportsSymbolicLinksKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSymbolicLinksKey.value = value;

  /// true if the volume format supports hard links (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsHardLinksKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsHardLinksKey');

  NSURLResourceKey get NSURLVolumeSupportsHardLinksKey =>
      _NSURLVolumeSupportsHardLinksKey.value;

  set NSURLVolumeSupportsHardLinksKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsHardLinksKey.value = value;

  /// true if the volume format supports a journal used to speed recovery in case of unplanned restart (such as a power outage or crash). This does not necessarily mean the volume is actively using a journal. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsJournalingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsJournalingKey');

  NSURLResourceKey get NSURLVolumeSupportsJournalingKey =>
      _NSURLVolumeSupportsJournalingKey.value;

  set NSURLVolumeSupportsJournalingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsJournalingKey.value = value;

  /// true if the volume is currently using a journal for speedy recovery after an unplanned restart. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsJournalingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsJournalingKey');

  NSURLResourceKey get NSURLVolumeIsJournalingKey =>
      _NSURLVolumeIsJournalingKey.value;

  set NSURLVolumeIsJournalingKey(NSURLResourceKey value) =>
      _NSURLVolumeIsJournalingKey.value = value;

  /// true if the volume format supports sparse files, that is, files which can have 'holes' that have never been written to, and thus do not consume space on disk. A sparse file may have an allocated size on disk that is less than its logical length (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsSparseFilesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSparseFilesKey');

  NSURLResourceKey get NSURLVolumeSupportsSparseFilesKey =>
      _NSURLVolumeSupportsSparseFilesKey.value;

  set NSURLVolumeSupportsSparseFilesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSparseFilesKey.value = value;

  /// For security reasons, parts of a file (runs) that have never been written to must appear to contain zeroes. true if the volume keeps track of allocated but unwritten runs of a file so that it can substitute zeroes without actually writing zeroes to the media. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsZeroRunsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsZeroRunsKey');

  NSURLResourceKey get NSURLVolumeSupportsZeroRunsKey =>
      _NSURLVolumeSupportsZeroRunsKey.value;

  set NSURLVolumeSupportsZeroRunsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsZeroRunsKey.value = value;

  /// true if the volume format treats upper and lower case characters in file and directory names as different. Otherwise an upper case character is equivalent to a lower case character, and you can't have two names that differ solely in the case of the characters. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCaseSensitiveNamesKey');

  NSURLResourceKey get NSURLVolumeSupportsCaseSensitiveNamesKey =>
      _NSURLVolumeSupportsCaseSensitiveNamesKey.value;

  set NSURLVolumeSupportsCaseSensitiveNamesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  /// true if the volume format preserves the case of file and directory names.  Otherwise the volume may change the case of some characters (typically making them all upper or all lower case). (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsCasePreservedNamesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCasePreservedNamesKey');

  NSURLResourceKey get NSURLVolumeSupportsCasePreservedNamesKey =>
      _NSURLVolumeSupportsCasePreservedNamesKey.value;

  set NSURLVolumeSupportsCasePreservedNamesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCasePreservedNamesKey.value = value;

  /// true if the volume supports reliable storage of times for the root directory. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsRootDirectoryDatesKey');

  NSURLResourceKey get NSURLVolumeSupportsRootDirectoryDatesKey =>
      _NSURLVolumeSupportsRootDirectoryDatesKey.value;

  set NSURLVolumeSupportsRootDirectoryDatesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsRootDirectoryDatesKey.value = value;

  /// true if the volume supports returning volume size values (NSURLVolumeTotalCapacityKey and NSURLVolumeAvailableCapacityKey). (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsVolumeSizesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsVolumeSizesKey');

  NSURLResourceKey get NSURLVolumeSupportsVolumeSizesKey =>
      _NSURLVolumeSupportsVolumeSizesKey.value;

  set NSURLVolumeSupportsVolumeSizesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsVolumeSizesKey.value = value;

  /// true if the volume can be renamed. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsRenamingKey =>
      _NSURLVolumeSupportsRenamingKey.value;

  set NSURLVolumeSupportsRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsRenamingKey.value = value;

  /// true if the volume implements whole-file flock(2) style advisory locks, and the O_EXLOCK and O_SHLOCK flags of the open(2) call. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsAdvisoryFileLockingKey');

  NSURLResourceKey get NSURLVolumeSupportsAdvisoryFileLockingKey =>
      _NSURLVolumeSupportsAdvisoryFileLockingKey.value;

  set NSURLVolumeSupportsAdvisoryFileLockingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  /// true if the volume implements extended security (ACLs). (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsExtendedSecurityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsExtendedSecurityKey');

  NSURLResourceKey get NSURLVolumeSupportsExtendedSecurityKey =>
      _NSURLVolumeSupportsExtendedSecurityKey.value;

  set NSURLVolumeSupportsExtendedSecurityKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsExtendedSecurityKey.value = value;

  /// true if the volume should be visible via the GUI (i.e., appear on the Desktop as a separate volume). (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsBrowsableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsBrowsableKey');

  NSURLResourceKey get NSURLVolumeIsBrowsableKey =>
      _NSURLVolumeIsBrowsableKey.value;

  set NSURLVolumeIsBrowsableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsBrowsableKey.value = value;

  /// The largest file size (in bytes) supported by this file system, or nil if this cannot be determined. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeMaximumFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLVolumeMaximumFileSizeKey');

  NSURLResourceKey get NSURLVolumeMaximumFileSizeKey =>
      _NSURLVolumeMaximumFileSizeKey.value;

  set NSURLVolumeMaximumFileSizeKey(NSURLResourceKey value) =>
      _NSURLVolumeMaximumFileSizeKey.value = value;

  /// true if the volume's media is ejectable from the drive mechanism under software control. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsEjectableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsEjectableKey');

  NSURLResourceKey get NSURLVolumeIsEjectableKey =>
      _NSURLVolumeIsEjectableKey.value;

  set NSURLVolumeIsEjectableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsEjectableKey.value = value;

  /// true if the volume's media is removable from the drive mechanism. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsRemovableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsRemovableKey');

  NSURLResourceKey get NSURLVolumeIsRemovableKey =>
      _NSURLVolumeIsRemovableKey.value;

  set NSURLVolumeIsRemovableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsRemovableKey.value = value;

  /// true if the volume's device is connected to an internal bus, false if connected to an external bus, or nil if not available. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsInternalKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsInternalKey');

  NSURLResourceKey get NSURLVolumeIsInternalKey =>
      _NSURLVolumeIsInternalKey.value;

  set NSURLVolumeIsInternalKey(NSURLResourceKey value) =>
      _NSURLVolumeIsInternalKey.value = value;

  /// true if the volume is automounted. Note: do not mistake this with the functionality provided by kCFURLVolumeSupportsBrowsingKey. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsAutomountedKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsAutomountedKey');

  NSURLResourceKey get NSURLVolumeIsAutomountedKey =>
      _NSURLVolumeIsAutomountedKey.value;

  set NSURLVolumeIsAutomountedKey(NSURLResourceKey value) =>
      _NSURLVolumeIsAutomountedKey.value = value;

  /// true if the volume is stored on a local device. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsLocalKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsLocalKey');

  NSURLResourceKey get NSURLVolumeIsLocalKey => _NSURLVolumeIsLocalKey.value;

  set NSURLVolumeIsLocalKey(NSURLResourceKey value) =>
      _NSURLVolumeIsLocalKey.value = value;

  /// true if the volume is read-only. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsReadOnlyKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsReadOnlyKey');

  NSURLResourceKey get NSURLVolumeIsReadOnlyKey =>
      _NSURLVolumeIsReadOnlyKey.value;

  set NSURLVolumeIsReadOnlyKey(NSURLResourceKey value) =>
      _NSURLVolumeIsReadOnlyKey.value = value;

  /// The volume's creation date, or nil if this cannot be determined. (Read-only, value type NSDate)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeCreationDateKey =
      _lookup<NSURLResourceKey>('NSURLVolumeCreationDateKey');

  NSURLResourceKey get NSURLVolumeCreationDateKey =>
      _NSURLVolumeCreationDateKey.value;

  set NSURLVolumeCreationDateKey(NSURLResourceKey value) =>
      _NSURLVolumeCreationDateKey.value = value;

  /// The NSURL needed to remount a network volume, or nil if not available. (Read-only, value type NSURL)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeURLForRemountingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeURLForRemountingKey');

  NSURLResourceKey get NSURLVolumeURLForRemountingKey =>
      _NSURLVolumeURLForRemountingKey.value;

  set NSURLVolumeURLForRemountingKey(NSURLResourceKey value) =>
      _NSURLVolumeURLForRemountingKey.value = value;

  /// The volume's persistent UUID as a string, or nil if a persistent UUID is not available for the volume. (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeUUIDStringKey =
      _lookup<NSURLResourceKey>('NSURLVolumeUUIDStringKey');

  NSURLResourceKey get NSURLVolumeUUIDStringKey =>
      _NSURLVolumeUUIDStringKey.value;

  set NSURLVolumeUUIDStringKey(NSURLResourceKey value) =>
      _NSURLVolumeUUIDStringKey.value = value;

  /// The name of the volume (Read-write if NSURLVolumeSupportsRenamingKey is YES, otherwise read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeNameKey');

  NSURLResourceKey get NSURLVolumeNameKey => _NSURLVolumeNameKey.value;

  set NSURLVolumeNameKey(NSURLResourceKey value) =>
      _NSURLVolumeNameKey.value = value;

  /// The user-presentable name of the volume (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeLocalizedNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeLocalizedNameKey');

  NSURLResourceKey get NSURLVolumeLocalizedNameKey =>
      _NSURLVolumeLocalizedNameKey.value;

  set NSURLVolumeLocalizedNameKey(NSURLResourceKey value) =>
      _NSURLVolumeLocalizedNameKey.value = value;

  /// true if the volume is encrypted. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsEncryptedKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsEncryptedKey');

  NSURLResourceKey get NSURLVolumeIsEncryptedKey =>
      _NSURLVolumeIsEncryptedKey.value;

  set NSURLVolumeIsEncryptedKey(NSURLResourceKey value) =>
      _NSURLVolumeIsEncryptedKey.value = value;

  /// true if the volume is the root filesystem. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsRootFileSystemKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsRootFileSystemKey');

  NSURLResourceKey get NSURLVolumeIsRootFileSystemKey =>
      _NSURLVolumeIsRootFileSystemKey.value;

  set NSURLVolumeIsRootFileSystemKey(NSURLResourceKey value) =>
      _NSURLVolumeIsRootFileSystemKey.value = value;

  /// true if the volume supports transparent decompression of compressed files using decmpfs. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsCompressionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCompressionKey');

  NSURLResourceKey get NSURLVolumeSupportsCompressionKey =>
      _NSURLVolumeSupportsCompressionKey.value;

  set NSURLVolumeSupportsCompressionKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCompressionKey.value = value;

  /// true if the volume supports clonefile(2) (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsFileCloningKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsFileCloningKey');

  NSURLResourceKey get NSURLVolumeSupportsFileCloningKey =>
      _NSURLVolumeSupportsFileCloningKey.value;

  set NSURLVolumeSupportsFileCloningKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsFileCloningKey.value = value;

  /// true if the volume supports renamex_np(2)'s RENAME_SWAP option (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsSwapRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSwapRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsSwapRenamingKey =>
      _NSURLVolumeSupportsSwapRenamingKey.value;

  set NSURLVolumeSupportsSwapRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSwapRenamingKey.value = value;

  /// true if the volume supports renamex_np(2)'s RENAME_EXCL option (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsExclusiveRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsExclusiveRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsExclusiveRenamingKey =>
      _NSURLVolumeSupportsExclusiveRenamingKey.value;

  set NSURLVolumeSupportsExclusiveRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsExclusiveRenamingKey.value = value;

  /// true if the volume supports making files immutable with the NSURLIsUserImmutableKey or NSURLIsSystemImmutableKey properties (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsImmutableFilesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsImmutableFilesKey');

  NSURLResourceKey get NSURLVolumeSupportsImmutableFilesKey =>
      _NSURLVolumeSupportsImmutableFilesKey.value;

  set NSURLVolumeSupportsImmutableFilesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsImmutableFilesKey.value = value;

  /// true if the volume supports setting POSIX access permissions with the NSURLFileSecurityKey property (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsAccessPermissionsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsAccessPermissionsKey');

  NSURLResourceKey get NSURLVolumeSupportsAccessPermissionsKey =>
      _NSURLVolumeSupportsAccessPermissionsKey.value;

  set NSURLVolumeSupportsAccessPermissionsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsAccessPermissionsKey.value = value;

  /// True if the volume supports the File Protection attribute (see NSURLFileProtectionKey). (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsFileProtectionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsFileProtectionKey');

  NSURLResourceKey get NSURLVolumeSupportsFileProtectionKey =>
      _NSURLVolumeSupportsFileProtectionKey.value;

  set NSURLVolumeSupportsFileProtectionKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsFileProtectionKey.value = value;

  /// (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<NSURLResourceKey>(
          'NSURLVolumeAvailableCapacityForImportantUsageKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityForImportantUsageKey =>
      _NSURLVolumeAvailableCapacityForImportantUsageKey.value;

  set NSURLVolumeAvailableCapacityForImportantUsageKey(
          NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  /// (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<NSURLResourceKey>(
          'NSURLVolumeAvailableCapacityForOpportunisticUsageKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set NSURLVolumeAvailableCapacityForOpportunisticUsageKey(
          NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  /// The name of the file system type. (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeTypeNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeTypeNameKey');

  NSURLResourceKey get NSURLVolumeTypeNameKey => _NSURLVolumeTypeNameKey.value;

  set NSURLVolumeTypeNameKey(NSURLResourceKey value) =>
      _NSURLVolumeTypeNameKey.value = value;

  /// The file system subtype value. (Read-only, value type NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSubtypeKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSubtypeKey');

  NSURLResourceKey get NSURLVolumeSubtypeKey => _NSURLVolumeSubtypeKey.value;

  set NSURLVolumeSubtypeKey(NSURLResourceKey value) =>
      _NSURLVolumeSubtypeKey.value = value;

  /// The volume mounted from location. (Read-only, value type NSString)
  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeMountFromLocationKey =
      _lookup<NSURLResourceKey>('NSURLVolumeMountFromLocationKey');

  NSURLResourceKey get NSURLVolumeMountFromLocationKey =>
      _NSURLVolumeMountFromLocationKey.value;

  set NSURLVolumeMountFromLocationKey(NSURLResourceKey value) =>
      _NSURLVolumeMountFromLocationKey.value = value;

  /// true if this item is synced to the cloud, false if it is only a local file. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLIsUbiquitousItemKey =
      _lookup<NSURLResourceKey>('NSURLIsUbiquitousItemKey');

  NSURLResourceKey get NSURLIsUbiquitousItemKey =>
      _NSURLIsUbiquitousItemKey.value;

  set NSURLIsUbiquitousItemKey(NSURLResourceKey value) =>
      _NSURLIsUbiquitousItemKey.value = value;

  /// true if this item has conflicts outstanding. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemHasUnresolvedConflictsKey');

  NSURLResourceKey get NSURLUbiquitousItemHasUnresolvedConflictsKey =>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set NSURLUbiquitousItemHasUnresolvedConflictsKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  /// equivalent to NSURLUbiquitousItemDownloadingStatusKey == NSURLUbiquitousItemDownloadingStatusCurrent. Has never behaved as documented in earlier releases, hence deprecated.  (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsDownloadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsDownloadedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsDownloadedKey =>
      _NSURLUbiquitousItemIsDownloadedKey.value;

  set NSURLUbiquitousItemIsDownloadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsDownloadedKey.value = value;

  /// true if data is being downloaded for this item. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemIsDownloadingKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsDownloadingKey');

  NSURLResourceKey get NSURLUbiquitousItemIsDownloadingKey =>
      _NSURLUbiquitousItemIsDownloadingKey.value;

  set NSURLUbiquitousItemIsDownloadingKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsDownloadingKey.value = value;

  /// true if there is data present in the cloud for this item. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsUploadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsUploadedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsUploadedKey =>
      _NSURLUbiquitousItemIsUploadedKey.value;

  set NSURLUbiquitousItemIsUploadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsUploadedKey.value = value;

  /// true if data is being uploaded for this item. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsUploadingKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsUploadingKey');

  NSURLResourceKey get NSURLUbiquitousItemIsUploadingKey =>
      _NSURLUbiquitousItemIsUploadingKey.value;

  set NSURLUbiquitousItemIsUploadingKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsUploadingKey.value = value;

  /// Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemPercentDownloadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemPercentDownloadedKey');

  NSURLResourceKey get NSURLUbiquitousItemPercentDownloadedKey =>
      _NSURLUbiquitousItemPercentDownloadedKey.value;

  set NSURLUbiquitousItemPercentDownloadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemPercentDownloadedKey.value = value;

  /// Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemPercentUploadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemPercentUploadedKey');

  NSURLResourceKey get NSURLUbiquitousItemPercentUploadedKey =>
      _NSURLUbiquitousItemPercentUploadedKey.value;

  set NSURLUbiquitousItemPercentUploadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemPercentUploadedKey.value = value;

  /// returns the download status of this item. (Read-only, value type NSString). Possible values below.
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadingStatusKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadingStatusKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadingStatusKey =>
      _NSURLUbiquitousItemDownloadingStatusKey.value;

  set NSURLUbiquitousItemDownloadingStatusKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadingStatusKey.value = value;

  /// returns the error when downloading the item from iCloud failed, see the NSUbiquitousFile section in FoundationErrors.h (Read-only, value type NSError)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadingErrorKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadingErrorKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadingErrorKey =>
      _NSURLUbiquitousItemDownloadingErrorKey.value;

  set NSURLUbiquitousItemDownloadingErrorKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadingErrorKey.value = value;

  /// returns the error when uploading the item to iCloud failed, see the NSUbiquitousFile section in FoundationErrors.h (Read-only, value type NSError)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemUploadingErrorKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemUploadingErrorKey');

  NSURLResourceKey get NSURLUbiquitousItemUploadingErrorKey =>
      _NSURLUbiquitousItemUploadingErrorKey.value;

  set NSURLUbiquitousItemUploadingErrorKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemUploadingErrorKey.value = value;

  /// returns whether a download of this item has already been requested with an API like -startDownloadingUbiquitousItemAtURL:error: (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadRequestedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadRequestedKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadRequestedKey =>
      _NSURLUbiquitousItemDownloadRequestedKey.value;

  set NSURLUbiquitousItemDownloadRequestedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadRequestedKey.value = value;

  /// returns the name of this item's container as displayed to users.
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemContainerDisplayNameKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemContainerDisplayNameKey');

  NSURLResourceKey get NSURLUbiquitousItemContainerDisplayNameKey =>
      _NSURLUbiquitousItemContainerDisplayNameKey.value;

  set NSURLUbiquitousItemContainerDisplayNameKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemContainerDisplayNameKey.value = value;

  /// true if the item is excluded from sync, which means it is locally on disk but won't be available on the server. An excluded item is no longer ubiquitous. (Read-write, value type boolean NSNumber
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsExcludedFromSyncKey');

  NSURLResourceKey get NSURLUbiquitousItemIsExcludedFromSyncKey =>
      _NSURLUbiquitousItemIsExcludedFromSyncKey.value;

  set NSURLUbiquitousItemIsExcludedFromSyncKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  /// true if the ubiquitous item is shared. (Read-only, value type boolean NSNumber)
  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsSharedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsSharedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsSharedKey =>
      _NSURLUbiquitousItemIsSharedKey.value;

  set NSURLUbiquitousItemIsSharedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsSharedKey.value = value;

  /// returns the current user's role for this shared item, or nil if not shared. (Read-only, value type NSString). Possible values below.
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousSharedItemCurrentUserRoleKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemCurrentUserRoleKey =>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey.value;

  set NSURLUbiquitousSharedItemCurrentUserRoleKey(NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey.value = value;

  /// returns the permissions for the current user, or nil if not shared. (Read-only, value type NSString). Possible values below.
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemCurrentUserPermissionsKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemCurrentUserPermissionsKey =>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey.value;

  set NSURLUbiquitousSharedItemCurrentUserPermissionsKey(
          NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey.value = value;

  /// returns a NSPersonNameComponents, or nil if the current user. (Read-only, value type NSPersonNameComponents)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemOwnerNameComponentsKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemOwnerNameComponentsKey =>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey.value;

  set NSURLUbiquitousSharedItemOwnerNameComponentsKey(NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey.value = value;

  /// returns a NSPersonNameComponents for the most recent editor of the document, or nil if it is the current user. (Read-only, value type NSPersonNameComponents)
  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey');

  NSURLResourceKey
      get NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey =>
          _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey.value;

  set NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey(
          NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey.value = value;

  /// this item has not been downloaded yet. Use startDownloadingUbiquitousItemAtURL:error: to download it.
  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusNotDownloaded');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusNotDownloaded =>
          _NSURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set NSURLUbiquitousItemDownloadingStatusNotDownloaded(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  /// there is a local version of this item available. The most current version will get downloaded as soon as possible.
  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusDownloaded');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusDownloaded =>
          _NSURLUbiquitousItemDownloadingStatusDownloaded.value;

  set NSURLUbiquitousItemDownloadingStatusDownloaded(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  /// there is a local version of this item and it is the most up-to-date version known to this device.
  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusCurrent');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusCurrent =>
          _NSURLUbiquitousItemDownloadingStatusCurrent.value;

  set NSURLUbiquitousItemDownloadingStatusCurrent(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusCurrent.value = value;

  /// the current user is the owner of this shared item.
  late final ffi.Pointer<NSURLUbiquitousSharedItemRole>
      _NSURLUbiquitousSharedItemRoleOwner =
      _lookup<NSURLUbiquitousSharedItemRole>(
          'NSURLUbiquitousSharedItemRoleOwner');

  NSURLUbiquitousSharedItemRole get NSURLUbiquitousSharedItemRoleOwner =>
      _NSURLUbiquitousSharedItemRoleOwner.value;

  set NSURLUbiquitousSharedItemRoleOwner(NSURLUbiquitousSharedItemRole value) =>
      _NSURLUbiquitousSharedItemRoleOwner.value = value;

  /// the current user is a participant of this shared item.
  late final ffi.Pointer<NSURLUbiquitousSharedItemRole>
      _NSURLUbiquitousSharedItemRoleParticipant =
      _lookup<NSURLUbiquitousSharedItemRole>(
          'NSURLUbiquitousSharedItemRoleParticipant');

  NSURLUbiquitousSharedItemRole get NSURLUbiquitousSharedItemRoleParticipant =>
      _NSURLUbiquitousSharedItemRoleParticipant.value;

  set NSURLUbiquitousSharedItemRoleParticipant(
          NSURLUbiquitousSharedItemRole value) =>
      _NSURLUbiquitousSharedItemRoleParticipant.value = value;

  /// the current user is only allowed to read this item
  late final ffi.Pointer<NSURLUbiquitousSharedItemPermissions>
      _NSURLUbiquitousSharedItemPermissionsReadOnly =
      _lookup<NSURLUbiquitousSharedItemPermissions>(
          'NSURLUbiquitousSharedItemPermissionsReadOnly');

  NSURLUbiquitousSharedItemPermissions
      get NSURLUbiquitousSharedItemPermissionsReadOnly =>
          _NSURLUbiquitousSharedItemPermissionsReadOnly.value;

  set NSURLUbiquitousSharedItemPermissionsReadOnly(
          NSURLUbiquitousSharedItemPermissions value) =>
      _NSURLUbiquitousSharedItemPermissionsReadOnly.value = value;

  /// the current user is allowed to both read and write this item
  late final ffi.Pointer<NSURLUbiquitousSharedItemPermissions>
      _NSURLUbiquitousSharedItemPermissionsReadWrite =
      _lookup<NSURLUbiquitousSharedItemPermissions>(
          'NSURLUbiquitousSharedItemPermissionsReadWrite');

  NSURLUbiquitousSharedItemPermissions
      get NSURLUbiquitousSharedItemPermissionsReadWrite =>
          _NSURLUbiquitousSharedItemPermissionsReadWrite.value;

  set NSURLUbiquitousSharedItemPermissionsReadWrite(
          NSURLUbiquitousSharedItemPermissions value) =>
      _NSURLUbiquitousSharedItemPermissionsReadWrite.value = value;

  late final ffi.Pointer<NSExceptionName> _NSGenericException =
      _lookup<NSExceptionName>('NSGenericException');

  NSExceptionName get NSGenericException => _NSGenericException.value;

  set NSGenericException(NSExceptionName value) =>
      _NSGenericException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSRangeException =
      _lookup<NSExceptionName>('NSRangeException');

  NSExceptionName get NSRangeException => _NSRangeException.value;

  set NSRangeException(NSExceptionName value) =>
      _NSRangeException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInvalidArgumentException =
      _lookup<NSExceptionName>('NSInvalidArgumentException');

  NSExceptionName get NSInvalidArgumentException =>
      _NSInvalidArgumentException.value;

  set NSInvalidArgumentException(NSExceptionName value) =>
      _NSInvalidArgumentException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInternalInconsistencyException =
      _lookup<NSExceptionName>('NSInternalInconsistencyException');

  NSExceptionName get NSInternalInconsistencyException =>
      _NSInternalInconsistencyException.value;

  set NSInternalInconsistencyException(NSExceptionName value) =>
      _NSInternalInconsistencyException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSMallocException =
      _lookup<NSExceptionName>('NSMallocException');

  NSExceptionName get NSMallocException => _NSMallocException.value;

  set NSMallocException(NSExceptionName value) =>
      _NSMallocException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSObjectInaccessibleException =
      _lookup<NSExceptionName>('NSObjectInaccessibleException');

  NSExceptionName get NSObjectInaccessibleException =>
      _NSObjectInaccessibleException.value;

  set NSObjectInaccessibleException(NSExceptionName value) =>
      _NSObjectInaccessibleException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSObjectNotAvailableException =
      _lookup<NSExceptionName>('NSObjectNotAvailableException');

  NSExceptionName get NSObjectNotAvailableException =>
      _NSObjectNotAvailableException.value;

  set NSObjectNotAvailableException(NSExceptionName value) =>
      _NSObjectNotAvailableException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSDestinationInvalidException =
      _lookup<NSExceptionName>('NSDestinationInvalidException');

  NSExceptionName get NSDestinationInvalidException =>
      _NSDestinationInvalidException.value;

  set NSDestinationInvalidException(NSExceptionName value) =>
      _NSDestinationInvalidException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSPortTimeoutException =
      _lookup<NSExceptionName>('NSPortTimeoutException');

  NSExceptionName get NSPortTimeoutException => _NSPortTimeoutException.value;

  set NSPortTimeoutException(NSExceptionName value) =>
      _NSPortTimeoutException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInvalidSendPortException =
      _lookup<NSExceptionName>('NSInvalidSendPortException');

  NSExceptionName get NSInvalidSendPortException =>
      _NSInvalidSendPortException.value;

  set NSInvalidSendPortException(NSExceptionName value) =>
      _NSInvalidSendPortException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInvalidReceivePortException =
      _lookup<NSExceptionName>('NSInvalidReceivePortException');

  NSExceptionName get NSInvalidReceivePortException =>
      _NSInvalidReceivePortException.value;

  set NSInvalidReceivePortException(NSExceptionName value) =>
      _NSInvalidReceivePortException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSPortSendException =
      _lookup<NSExceptionName>('NSPortSendException');

  NSExceptionName get NSPortSendException => _NSPortSendException.value;

  set NSPortSendException(NSExceptionName value) =>
      _NSPortSendException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSPortReceiveException =
      _lookup<NSExceptionName>('NSPortReceiveException');

  NSExceptionName get NSPortReceiveException => _NSPortReceiveException.value;

  set NSPortReceiveException(NSExceptionName value) =>
      _NSPortReceiveException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSOldStyleException =
      _lookup<NSExceptionName>('NSOldStyleException');

  NSExceptionName get NSOldStyleException => _NSOldStyleException.value;

  set NSOldStyleException(NSExceptionName value) =>
      _NSOldStyleException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInconsistentArchiveException =
      _lookup<NSExceptionName>('NSInconsistentArchiveException');

  NSExceptionName get NSInconsistentArchiveException =>
      _NSInconsistentArchiveException.value;

  set NSInconsistentArchiveException(NSExceptionName value) =>
      _NSInconsistentArchiveException.value = value;

  ffi.Pointer<NSUncaughtExceptionHandler> NSGetUncaughtExceptionHandler() {
    return _NSGetUncaughtExceptionHandler();
  }

  late final _NSGetUncaughtExceptionHandlerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<NSUncaughtExceptionHandler> Function()>>(
      'NSGetUncaughtExceptionHandler');
  late final _NSGetUncaughtExceptionHandler = _NSGetUncaughtExceptionHandlerPtr
      .asFunction<ffi.Pointer<NSUncaughtExceptionHandler> Function()>();

  void NSSetUncaughtExceptionHandler(
    ffi.Pointer<NSUncaughtExceptionHandler> arg0,
  ) {
    return _NSSetUncaughtExceptionHandler(
      arg0,
    );
  }

  late final _NSSetUncaughtExceptionHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<NSUncaughtExceptionHandler>)>>(
      'NSSetUncaughtExceptionHandler');
  late final _NSSetUncaughtExceptionHandler = _NSSetUncaughtExceptionHandlerPtr
      .asFunction<void Function(ffi.Pointer<NSUncaughtExceptionHandler>)>();

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>> _NSAssertionHandlerKey =
      _lookup<ffi.Pointer<objc.ObjCObject>>('NSAssertionHandlerKey');

  ffi.Pointer<objc.ObjCObject> get NSAssertionHandlerKey =>
      _NSAssertionHandlerKey.value;

  set NSAssertionHandlerKey(ffi.Pointer<objc.ObjCObject> value) =>
      _NSAssertionHandlerKey.value = value;

  late final ffi.Pointer<NSExceptionName>
      _NSInvocationOperationVoidResultException =
      _lookup<NSExceptionName>('NSInvocationOperationVoidResultException');

  NSExceptionName get NSInvocationOperationVoidResultException =>
      _NSInvocationOperationVoidResultException.value;

  set NSInvocationOperationVoidResultException(NSExceptionName value) =>
      _NSInvocationOperationVoidResultException.value = value;

  late final ffi.Pointer<NSExceptionName>
      _NSInvocationOperationCancelledException =
      _lookup<NSExceptionName>('NSInvocationOperationCancelledException');

  NSExceptionName get NSInvocationOperationCancelledException =>
      _NSInvocationOperationCancelledException.value;

  set NSInvocationOperationCancelledException(NSExceptionName value) =>
      _NSInvocationOperationCancelledException.value = value;

  late final ffi.Pointer<NSInteger>
      _NSOperationQueueDefaultMaxConcurrentOperationCount =
      _lookup<NSInteger>('NSOperationQueueDefaultMaxConcurrentOperationCount');

  int get NSOperationQueueDefaultMaxConcurrentOperationCount =>
      _NSOperationQueueDefaultMaxConcurrentOperationCount.value;

  /// Predefined domain for errors from most AppKit and Foundation APIs.
  late final ffi.Pointer<NSErrorDomain> _NSCocoaErrorDomain =
      _lookup<NSErrorDomain>('NSCocoaErrorDomain');

  NSErrorDomain get NSCocoaErrorDomain => _NSCocoaErrorDomain.value;

  set NSCocoaErrorDomain(NSErrorDomain value) =>
      _NSCocoaErrorDomain.value = value;

  /// Other predefined domains; value of "code" will correspond to preexisting values in these domains.
  late final ffi.Pointer<NSErrorDomain> _NSPOSIXErrorDomain =
      _lookup<NSErrorDomain>('NSPOSIXErrorDomain');

  NSErrorDomain get NSPOSIXErrorDomain => _NSPOSIXErrorDomain.value;

  set NSPOSIXErrorDomain(NSErrorDomain value) =>
      _NSPOSIXErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSOSStatusErrorDomain =
      _lookup<NSErrorDomain>('NSOSStatusErrorDomain');

  NSErrorDomain get NSOSStatusErrorDomain => _NSOSStatusErrorDomain.value;

  set NSOSStatusErrorDomain(NSErrorDomain value) =>
      _NSOSStatusErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSMachErrorDomain =
      _lookup<NSErrorDomain>('NSMachErrorDomain');

  NSErrorDomain get NSMachErrorDomain => _NSMachErrorDomain.value;

  set NSMachErrorDomain(NSErrorDomain value) =>
      _NSMachErrorDomain.value = value;

  /// Key in userInfo. A recommended standard way to embed NSErrors from underlying calls. The value of this key should be an NSError.
  late final ffi.Pointer<NSErrorUserInfoKey> _NSUnderlyingErrorKey =
      _lookup<NSErrorUserInfoKey>('NSUnderlyingErrorKey');

  NSErrorUserInfoKey get NSUnderlyingErrorKey => _NSUnderlyingErrorKey.value;

  set NSUnderlyingErrorKey(NSErrorUserInfoKey value) =>
      _NSUnderlyingErrorKey.value = value;

  /// Key in userInfo. A recommended standard way to embed a list of several NSErrors from underlying calls. The value of this key should be an NSArray of NSError. This value is independent from the value of `NSUnderlyingErrorKey` - neither, one, or both may be set.
  late final ffi.Pointer<NSErrorUserInfoKey> _NSMultipleUnderlyingErrorsKey =
      _lookup<NSErrorUserInfoKey>('NSMultipleUnderlyingErrorsKey');

  NSErrorUserInfoKey get NSMultipleUnderlyingErrorsKey =>
      _NSMultipleUnderlyingErrorsKey.value;

  set NSMultipleUnderlyingErrorsKey(NSErrorUserInfoKey value) =>
      _NSMultipleUnderlyingErrorsKey.value = value;

  /// NSString, a complete sentence (or more) describing ideally both what failed and why it failed.
  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedDescriptionKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedDescriptionKey');

  NSErrorUserInfoKey get NSLocalizedDescriptionKey =>
      _NSLocalizedDescriptionKey.value;

  set NSLocalizedDescriptionKey(NSErrorUserInfoKey value) =>
      _NSLocalizedDescriptionKey.value = value;

  /// NSString, a complete sentence (or more) describing why the operation failed.
  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedFailureReasonErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedFailureReasonErrorKey');

  NSErrorUserInfoKey get NSLocalizedFailureReasonErrorKey =>
      _NSLocalizedFailureReasonErrorKey.value;

  set NSLocalizedFailureReasonErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedFailureReasonErrorKey.value = value;

  /// NSString, a complete sentence (or more) describing what the user can do to fix the problem.
  late final ffi.Pointer<NSErrorUserInfoKey>
      _NSLocalizedRecoverySuggestionErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedRecoverySuggestionErrorKey');

  NSErrorUserInfoKey get NSLocalizedRecoverySuggestionErrorKey =>
      _NSLocalizedRecoverySuggestionErrorKey.value;

  set NSLocalizedRecoverySuggestionErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedRecoverySuggestionErrorKey.value = value;

  /// NSArray of NSStrings corresponding to button titles.
  late final ffi.Pointer<NSErrorUserInfoKey>
      _NSLocalizedRecoveryOptionsErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedRecoveryOptionsErrorKey');

  NSErrorUserInfoKey get NSLocalizedRecoveryOptionsErrorKey =>
      _NSLocalizedRecoveryOptionsErrorKey.value;

  set NSLocalizedRecoveryOptionsErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedRecoveryOptionsErrorKey.value = value;

  /// Instance of a subclass of NSObject that conforms to the NSErrorRecoveryAttempting informal protocol
  late final ffi.Pointer<NSErrorUserInfoKey> _NSRecoveryAttempterErrorKey =
      _lookup<NSErrorUserInfoKey>('NSRecoveryAttempterErrorKey');

  NSErrorUserInfoKey get NSRecoveryAttempterErrorKey =>
      _NSRecoveryAttempterErrorKey.value;

  set NSRecoveryAttempterErrorKey(NSErrorUserInfoKey value) =>
      _NSRecoveryAttempterErrorKey.value = value;

  /// NSString containing a help anchor
  late final ffi.Pointer<NSErrorUserInfoKey> _NSHelpAnchorErrorKey =
      _lookup<NSErrorUserInfoKey>('NSHelpAnchorErrorKey');

  NSErrorUserInfoKey get NSHelpAnchorErrorKey => _NSHelpAnchorErrorKey.value;

  set NSHelpAnchorErrorKey(NSErrorUserInfoKey value) =>
      _NSHelpAnchorErrorKey.value = value;

  /// NSString. This provides a string which will be shown when constructing the debugDescription of the NSError, to be used when debugging or when formatting the error with %@.  This string will never be used in localizedDescription, so will not be shown to the user.
  late final ffi.Pointer<NSErrorUserInfoKey> _NSDebugDescriptionErrorKey =
      _lookup<NSErrorUserInfoKey>('NSDebugDescriptionErrorKey');

  NSErrorUserInfoKey get NSDebugDescriptionErrorKey =>
      _NSDebugDescriptionErrorKey.value;

  set NSDebugDescriptionErrorKey(NSErrorUserInfoKey value) =>
      _NSDebugDescriptionErrorKey.value = value;

  /// NSString, a complete sentence (or more) describing what failed.  Setting a value for this key in userInfo dictionary of errors received from framework APIs is a good way to customize and fine tune the localizedDescription of an NSError.  As an example, for Foundation error code NSFileWriteOutOfSpaceError, setting the value of this key to "The image library could not be saved." will allow the localizedDescription of the error to come out as "The image library could not be saved. The volume Macintosh HD is out of space." rather than the default (say) “You can't save the file ImgDatabaseV2 because the volume Macintosh HD is out of space."
  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedFailureErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedFailureErrorKey');

  NSErrorUserInfoKey get NSLocalizedFailureErrorKey =>
      _NSLocalizedFailureErrorKey.value;

  set NSLocalizedFailureErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedFailureErrorKey.value = value;

  /// NSNumber containing NSStringEncoding
  late final ffi.Pointer<NSErrorUserInfoKey> _NSStringEncodingErrorKey =
      _lookup<NSErrorUserInfoKey>('NSStringEncodingErrorKey');

  NSErrorUserInfoKey get NSStringEncodingErrorKey =>
      _NSStringEncodingErrorKey.value;

  set NSStringEncodingErrorKey(NSErrorUserInfoKey value) =>
      _NSStringEncodingErrorKey.value = value;

  /// NSURL
  late final ffi.Pointer<NSErrorUserInfoKey> _NSURLErrorKey =
      _lookup<NSErrorUserInfoKey>('NSURLErrorKey');

  NSErrorUserInfoKey get NSURLErrorKey => _NSURLErrorKey.value;

  set NSURLErrorKey(NSErrorUserInfoKey value) => _NSURLErrorKey.value = value;

  /// NSString
  late final ffi.Pointer<NSErrorUserInfoKey> _NSFilePathErrorKey =
      _lookup<NSErrorUserInfoKey>('NSFilePathErrorKey');

  NSErrorUserInfoKey get NSFilePathErrorKey => _NSFilePathErrorKey.value;

  set NSFilePathErrorKey(NSErrorUserInfoKey value) =>
      _NSFilePathErrorKey.value = value;

  /// Is this an error handle?
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsError(
    Object handle,
  ) {
    return _Dart_IsError(
      handle,
    );
  }

  late final _Dart_IsErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsError');
  late final _Dart_IsError =
      _Dart_IsErrorPtr.asFunction<bool Function(Object)>();

  /// Is this an api error handle?
  ///
  /// Api error handles are produced when an api function is misused.
  /// This happens when a Dart embedding api function is called with
  /// invalid arguments or in an invalid context.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsApiError(
    Object handle,
  ) {
    return _Dart_IsApiError(
      handle,
    );
  }

  late final _Dart_IsApiErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsApiError');
  late final _Dart_IsApiError =
      _Dart_IsApiErrorPtr.asFunction<bool Function(Object)>();

  /// Is this an unhandled exception error handle?
  ///
  /// Unhandled exception error handles are produced when, during the
  /// execution of Dart code, an exception is thrown but not caught.
  /// This can occur in any function which triggers the execution of Dart
  /// code.
  ///
  /// See Dart_ErrorGetException and Dart_ErrorGetStackTrace.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsUnhandledExceptionError(
    Object handle,
  ) {
    return _Dart_IsUnhandledExceptionError(
      handle,
    );
  }

  late final _Dart_IsUnhandledExceptionErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsUnhandledExceptionError');
  late final _Dart_IsUnhandledExceptionError =
      _Dart_IsUnhandledExceptionErrorPtr.asFunction<bool Function(Object)>();

  /// Is this a compilation error handle?
  ///
  /// Compilation error handles are produced when, during the execution
  /// of Dart code, a compile-time error occurs.  This can occur in any
  /// function which triggers the execution of Dart code.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsCompilationError(
    Object handle,
  ) {
    return _Dart_IsCompilationError(
      handle,
    );
  }

  late final _Dart_IsCompilationErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsCompilationError');
  late final _Dart_IsCompilationError =
      _Dart_IsCompilationErrorPtr.asFunction<bool Function(Object)>();

  /// Is this a fatal error handle?
  ///
  /// Fatal error handles are produced when the system wants to shut down
  /// the current isolate.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsFatalError(
    Object handle,
  ) {
    return _Dart_IsFatalError(
      handle,
    );
  }

  late final _Dart_IsFatalErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsFatalError');
  late final _Dart_IsFatalError =
      _Dart_IsFatalErrorPtr.asFunction<bool Function(Object)>();

  /// Gets the error message from an error handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A C string containing an error message if the handle is
  /// error. An empty C string ("") if the handle is valid. This C
  /// String is scope allocated and is only valid until the next call
  /// to Dart_ExitScope.
  ffi.Pointer<ffi.Char> Dart_GetError(
    Object handle,
  ) {
    return _Dart_GetError(
      handle,
    );
  }

  late final _Dart_GetErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'Dart_GetError');
  late final _Dart_GetError =
      _Dart_GetErrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  /// Is this an error handle for an unhandled exception?
  bool Dart_ErrorHasException(
    Object handle,
  ) {
    return _Dart_ErrorHasException(
      handle,
    );
  }

  late final _Dart_ErrorHasExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_ErrorHasException');
  late final _Dart_ErrorHasException =
      _Dart_ErrorHasExceptionPtr.asFunction<bool Function(Object)>();

  /// Gets the exception Object from an unhandled exception error handle.
  Object Dart_ErrorGetException(
    Object handle,
  ) {
    return _Dart_ErrorGetException(
      handle,
    );
  }

  late final _Dart_ErrorGetExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ErrorGetException');
  late final _Dart_ErrorGetException =
      _Dart_ErrorGetExceptionPtr.asFunction<Object Function(Object)>();

  /// Gets the stack trace Object from an unhandled exception error handle.
  Object Dart_ErrorGetStackTrace(
    Object handle,
  ) {
    return _Dart_ErrorGetStackTrace(
      handle,
    );
  }

  late final _Dart_ErrorGetStackTracePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ErrorGetStackTrace');
  late final _Dart_ErrorGetStackTrace =
      _Dart_ErrorGetStackTracePtr.asFunction<Object Function(Object)>();

  /// Produces an api error handle with the provided error message.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param error the error message.
  Object Dart_NewApiError(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _Dart_NewApiError(
      error,
    );
  }

  late final _Dart_NewApiErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewApiError');
  late final _Dart_NewApiError =
      _Dart_NewApiErrorPtr.asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object Dart_NewCompilationError(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _Dart_NewCompilationError(
      error,
    );
  }

  late final _Dart_NewCompilationErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewCompilationError');
  late final _Dart_NewCompilationError = _Dart_NewCompilationErrorPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  /// Produces a new unhandled exception error handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param exception An instance of a Dart object to be thrown or
  /// an ApiError or CompilationError handle.
  /// When an ApiError or CompilationError handle is passed in
  /// a string object of the error message is created and it becomes
  /// the Dart object to be thrown.
  Object Dart_NewUnhandledExceptionError(
    Object exception,
  ) {
    return _Dart_NewUnhandledExceptionError(
      exception,
    );
  }

  late final _Dart_NewUnhandledExceptionErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewUnhandledExceptionError');
  late final _Dart_NewUnhandledExceptionError =
      _Dart_NewUnhandledExceptionErrorPtr.asFunction<Object Function(Object)>();

  /// Propagates an error.
  ///
  /// If the provided handle is an unhandled exception error, this
  /// function will cause the unhandled exception to be rethrown.  This
  /// will proceed in the standard way, walking up Dart frames until an
  /// appropriate 'catch' block is found, executing 'finally' blocks,
  /// etc.
  ///
  /// If the error is not an unhandled exception error, we will unwind
  /// the stack to the next C frame.  Intervening Dart frames will be
  /// discarded; specifically, 'finally' blocks will not execute.  This
  /// is the standard way that compilation errors (and the like) are
  /// handled by the Dart runtime.
  ///
  /// In either case, when an error is propagated any current scopes
  /// created by Dart_EnterScope will be exited.
  ///
  /// See the additional discussion under "Propagating Errors" at the
  /// beginning of this file.
  ///
  /// \param An error handle (See Dart_IsError)
  ///
  /// \return On success, this function does not return.  On failure, the
  /// process is terminated.
  void Dart_PropagateError(
    Object handle,
  ) {
    return _Dart_PropagateError(
      handle,
    );
  }

  late final _Dart_PropagateErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_PropagateError');
  late final _Dart_PropagateError =
      _Dart_PropagateErrorPtr.asFunction<void Function(Object)>();

  /// Converts an object to a string.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return The converted string if no error occurs during
  /// the conversion. If an error does occur, an error handle is
  /// returned.
  Object Dart_ToString(
    Object object,
  ) {
    return _Dart_ToString(
      object,
    );
  }

  late final _Dart_ToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ToString');
  late final _Dart_ToString =
      _Dart_ToStringPtr.asFunction<Object Function(Object)>();

  /// Checks to see if two handles refer to identically equal objects.
  ///
  /// If both handles refer to instances, this is equivalent to using the top-level
  /// function identical() from dart:core. Otherwise, returns whether the two
  /// argument handles refer to the same object.
  ///
  /// \param obj1 An object to be compared.
  /// \param obj2 An object to be compared.
  ///
  /// \return True if the objects are identically equal.  False otherwise.
  bool Dart_IdentityEquals(
    Object obj1,
    Object obj2,
  ) {
    return _Dart_IdentityEquals(
      obj1,
      obj2,
    );
  }

  late final _Dart_IdentityEqualsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle, ffi.Handle)>>(
          'Dart_IdentityEquals');
  late final _Dart_IdentityEquals =
      _Dart_IdentityEqualsPtr.asFunction<bool Function(Object, Object)>();

  /// Allocates a handle in the current scope from a persistent handle.
  Object Dart_HandleFromPersistent(
    Object object,
  ) {
    return _Dart_HandleFromPersistent(
      object,
    );
  }

  late final _Dart_HandleFromPersistentPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_HandleFromPersistent');
  late final _Dart_HandleFromPersistent =
      _Dart_HandleFromPersistentPtr.asFunction<Object Function(Object)>();

  /// Allocates a handle in the current scope from a weak persistent handle.
  ///
  /// This will be a handle to Dart_Null if the object has been garbage collected.
  Object Dart_HandleFromWeakPersistent(
    Dart_WeakPersistentHandle object,
  ) {
    return _Dart_HandleFromWeakPersistent(
      object,
    );
  }

  late final _Dart_HandleFromWeakPersistentPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_WeakPersistentHandle)>>(
      'Dart_HandleFromWeakPersistent');
  late final _Dart_HandleFromWeakPersistent = _Dart_HandleFromWeakPersistentPtr
      .asFunction<Object Function(Dart_WeakPersistentHandle)>();

  /// Allocates a persistent handle for an object.
  ///
  /// This handle has the lifetime of the current isolate unless it is
  /// explicitly deallocated by calling Dart_DeletePersistentHandle.
  ///
  /// Requires there to be a current isolate.
  Object Dart_NewPersistentHandle(
    Object object,
  ) {
    return _Dart_NewPersistentHandle(
      object,
    );
  }

  late final _Dart_NewPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewPersistentHandle');
  late final _Dart_NewPersistentHandle =
      _Dart_NewPersistentHandlePtr.asFunction<Object Function(Object)>();

  /// Assign value of local handle to a persistent handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param obj1 A persistent handle whose value needs to be set.
  /// \param obj2 An object whose value needs to be set to the persistent handle.
  ///
  /// \return Success if the persistent handle was set
  /// Otherwise, returns an error.
  void Dart_SetPersistentHandle(
    Object obj1,
    Object obj2,
  ) {
    return _Dart_SetPersistentHandle(
      obj1,
      obj2,
    );
  }

  late final _Dart_SetPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'Dart_SetPersistentHandle');
  late final _Dart_SetPersistentHandle =
      _Dart_SetPersistentHandlePtr.asFunction<void Function(Object, Object)>();

  /// Deallocates a persistent handle.
  ///
  /// Requires there to be a current isolate group.
  void Dart_DeletePersistentHandle(
    Object object,
  ) {
    return _Dart_DeletePersistentHandle(
      object,
    );
  }

  late final _Dart_DeletePersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_DeletePersistentHandle');
  late final _Dart_DeletePersistentHandle =
      _Dart_DeletePersistentHandlePtr.asFunction<void Function(Object)>();

  /// Allocates a weak persistent handle for an object.
  ///
  /// This handle has the lifetime of the current isolate. The handle can also be
  /// explicitly deallocated by calling Dart_DeleteWeakPersistentHandle.
  ///
  /// If the object becomes unreachable the callback is invoked with the peer as
  /// argument. The callback can be executed on any thread, will have a current
  /// isolate group, but will not have a current isolate. The callback can only
  /// call Dart_DeletePersistentHandle or Dart_DeleteWeakPersistentHandle. This
  /// gives the embedder the ability to cleanup data associated with the object.
  /// The handle will point to the Dart_Null object after the finalizer has been
  /// run. It is illegal to call into the VM with any other Dart_* functions from
  /// the callback. If the handle is deleted before the object becomes
  /// unreachable, the callback is never invoked.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param object An object with identity.
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The weak persistent handle or NULL. NULL is returned in case of bad
  /// parameters.
  Dart_WeakPersistentHandle Dart_NewWeakPersistentHandle(
    Object object,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewWeakPersistentHandle(
      object,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewWeakPersistentHandlePtr = _lookup<
      ffi.NativeFunction<
          Dart_WeakPersistentHandle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewWeakPersistentHandle');
  late final _Dart_NewWeakPersistentHandle =
      _Dart_NewWeakPersistentHandlePtr.asFunction<
          Dart_WeakPersistentHandle Function(
              Object, ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Deletes the given weak persistent [object] handle.
  ///
  /// Requires there to be a current isolate group.
  void Dart_DeleteWeakPersistentHandle(
    Dart_WeakPersistentHandle object,
  ) {
    return _Dart_DeleteWeakPersistentHandle(
      object,
    );
  }

  late final _Dart_DeleteWeakPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_WeakPersistentHandle)>>(
          'Dart_DeleteWeakPersistentHandle');
  late final _Dart_DeleteWeakPersistentHandle =
      _Dart_DeleteWeakPersistentHandlePtr.asFunction<
          void Function(Dart_WeakPersistentHandle)>();

  /// Updates the external memory size for the given weak persistent handle.
  ///
  /// May trigger garbage collection.
  void Dart_UpdateExternalSize(
    Dart_WeakPersistentHandle object,
    int external_allocation_size,
  ) {
    return _Dart_UpdateExternalSize(
      object,
      external_allocation_size,
    );
  }

  late final _Dart_UpdateExternalSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_WeakPersistentHandle,
              ffi.IntPtr)>>('Dart_UpdateExternalSize');
  late final _Dart_UpdateExternalSize = _Dart_UpdateExternalSizePtr.asFunction<
      void Function(Dart_WeakPersistentHandle, int)>();

  /// Allocates a finalizable handle for an object.
  ///
  /// This handle has the lifetime of the current isolate group unless the object
  /// pointed to by the handle is garbage collected, in this case the VM
  /// automatically deletes the handle after invoking the callback associated
  /// with the handle. The handle can also be explicitly deallocated by
  /// calling Dart_DeleteFinalizableHandle.
  ///
  /// If the object becomes unreachable the callback is invoked with the
  /// the peer as argument. The callback can be executed on any thread, will have
  /// an isolate group, but will not have a current isolate. The callback can only
  /// call Dart_DeletePersistentHandle or Dart_DeleteWeakPersistentHandle.
  /// This gives the embedder the ability to cleanup data associated with the
  /// object and clear out any cached references to the handle. All references to
  /// this handle after the callback will be invalid. It is illegal to call into
  /// the VM with any other Dart_* functions from the callback. If the handle is
  /// deleted before the object becomes unreachable, the callback is never
  /// invoked.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param object An object with identity.
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The finalizable handle or NULL. NULL is returned in case of bad
  /// parameters.
  Dart_FinalizableHandle Dart_NewFinalizableHandle(
    Object object,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewFinalizableHandle(
      object,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewFinalizableHandlePtr = _lookup<
      ffi.NativeFunction<
          Dart_FinalizableHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.IntPtr, Dart_HandleFinalizer)>>('Dart_NewFinalizableHandle');
  late final _Dart_NewFinalizableHandle =
      _Dart_NewFinalizableHandlePtr.asFunction<
          Dart_FinalizableHandle Function(
              Object, ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Deletes the given finalizable [object] handle.
  ///
  /// The caller has to provide the actual Dart object the handle was created from
  /// to prove the object (and therefore the finalizable handle) is still alive.
  ///
  /// Requires there to be a current isolate.
  void Dart_DeleteFinalizableHandle(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
  ) {
    return _Dart_DeleteFinalizableHandle(
      object,
      strong_ref_to_object,
    );
  }

  late final _Dart_DeleteFinalizableHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_FinalizableHandle,
              ffi.Handle)>>('Dart_DeleteFinalizableHandle');
  late final _Dart_DeleteFinalizableHandle = _Dart_DeleteFinalizableHandlePtr
      .asFunction<void Function(Dart_FinalizableHandle, Object)>();

  /// Updates the external memory size for the given finalizable handle.
  ///
  /// The caller has to provide the actual Dart object the handle was created from
  /// to prove the object (and therefore the finalizable handle) is still alive.
  ///
  /// May trigger garbage collection.
  void Dart_UpdateFinalizableExternalSize(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
    int external_allocation_size,
  ) {
    return _Dart_UpdateFinalizableExternalSize(
      object,
      strong_ref_to_object,
      external_allocation_size,
    );
  }

  late final _Dart_UpdateFinalizableExternalSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_FinalizableHandle, ffi.Handle,
              ffi.IntPtr)>>('Dart_UpdateFinalizableExternalSize');
  late final _Dart_UpdateFinalizableExternalSize =
      _Dart_UpdateFinalizableExternalSizePtr.asFunction<
          void Function(Dart_FinalizableHandle, Object, int)>();

  /// Gets the version string for the Dart VM.
  ///
  /// The version of the Dart VM can be accessed without initializing the VM.
  ///
  /// \return The version string for the embedded Dart VM.
  ffi.Pointer<ffi.Char> Dart_VersionString() {
    return _Dart_VersionString();
  }

  late final _Dart_VersionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Dart_VersionString');
  late final _Dart_VersionString =
      _Dart_VersionStringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Initialize Dart_IsolateFlags with correct version and default values.
  void Dart_IsolateFlagsInitialize(
    ffi.Pointer<Dart_IsolateFlags> flags,
  ) {
    return _Dart_IsolateFlagsInitialize(
      flags,
    );
  }

  late final _Dart_IsolateFlagsInitializePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<Dart_IsolateFlags>)>>(
      'Dart_IsolateFlagsInitialize');
  late final _Dart_IsolateFlagsInitialize = _Dart_IsolateFlagsInitializePtr
      .asFunction<void Function(ffi.Pointer<Dart_IsolateFlags>)>();

  /// Initializes the VM.
  ///
  /// \param params A struct containing initialization information. The version
  /// field of the struct must be DART_INITIALIZE_PARAMS_CURRENT_VERSION.
  ///
  /// \return NULL if initialization is successful. Returns an error message
  /// otherwise. The caller is responsible for freeing the error message.
  ffi.Pointer<ffi.Char> Dart_Initialize(
    ffi.Pointer<Dart_InitializeParams> params,
  ) {
    return _Dart_Initialize(
      params,
    );
  }

  late final _Dart_InitializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Dart_InitializeParams>)>>('Dart_Initialize');
  late final _Dart_Initialize = _Dart_InitializePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Dart_InitializeParams>)>();

  /// Cleanup state in the VM before process termination.
  ///
  /// \return NULL if cleanup is successful. Returns an error message otherwise.
  /// The caller is responsible for freeing the error message.
  ///
  /// NOTE: This function must not be called on a thread that was created by the VM
  /// itself.
  ffi.Pointer<ffi.Char> Dart_Cleanup() {
    return _Dart_Cleanup();
  }

  late final _Dart_CleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Dart_Cleanup');
  late final _Dart_Cleanup =
      _Dart_CleanupPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Sets command line flags. Should be called before Dart_Initialize.
  ///
  /// \param argc The length of the arguments array.
  /// \param argv An array of arguments.
  ///
  /// \return NULL if successful. Returns an error message otherwise.
  /// The caller is responsible for freeing the error message.
  ///
  /// NOTE: This call does not store references to the passed in c-strings.
  ffi.Pointer<ffi.Char> Dart_SetVMFlags(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _Dart_SetVMFlags(
      argc,
      argv,
    );
  }

  late final _Dart_SetVMFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_SetVMFlags');
  late final _Dart_SetVMFlags = _Dart_SetVMFlagsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Returns true if the named VM flag is of boolean type, specified, and set to
  /// true.
  ///
  /// \param flag_name The name of the flag without leading punctuation
  /// (example: "enable_asserts").
  bool Dart_IsVMFlagSet(
    ffi.Pointer<ffi.Char> flag_name,
  ) {
    return _Dart_IsVMFlagSet(
      flag_name,
    );
  }

  late final _Dart_IsVMFlagSetPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_IsVMFlagSet');
  late final _Dart_IsVMFlagSet =
      _Dart_IsVMFlagSetPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  /// Creates a new isolate. The new isolate becomes the current isolate.
  ///
  /// A snapshot can be used to restore the VM quickly to a saved state
  /// and is useful for fast startup. If snapshot data is provided, the
  /// isolate will be started using that snapshot data. Requires a core snapshot or
  /// an app snapshot created by Dart_CreateSnapshot or
  /// Dart_CreatePrecompiledSnapshot* from a VM with the same version.
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param script_uri The main source file or snapshot this isolate will load.
  /// The VM will provide this URI to the Dart_IsolateGroupCreateCallback when a child
  /// isolate is created by Isolate.spawn. The embedder should use a URI that
  /// allows it to load the same program into such a child isolate.
  /// \param name A short name for the isolate to improve debugging messages.
  /// Typically of the format 'foo.dart:main()'.
  /// \param isolate_snapshot_data
  /// \param isolate_snapshot_instructions Buffers containing a snapshot of the
  /// isolate or NULL if no snapshot is provided. If provided, the buffers must
  /// remain valid until the isolate shuts down.
  /// \param flags Pointer to VM specific flags or NULL for default flags.
  /// \param isolate_group_data Embedder group data. This data can be obtained
  /// by calling Dart_IsolateGroupData and will be passed to the
  /// Dart_IsolateShutdownCallback, Dart_IsolateCleanupCallback, and
  /// Dart_IsolateGroupCleanupCallback.
  /// \param isolate_data Embedder data.  This data will be passed to
  /// the Dart_IsolateGroupCreateCallback when new isolates are spawned from
  /// this parent isolate.
  /// \param error Returns NULL if creation is successful, an error message
  /// otherwise. The caller is responsible for calling free() on the error
  /// message.
  ///
  /// \return The new isolate on success, or NULL if isolate creation failed.
  Dart_Isolate Dart_CreateIsolateGroup(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Uint8> isolate_snapshot_data,
    ffi.Pointer<ffi.Uint8> isolate_snapshot_instructions,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateGroup(
      script_uri,
      name,
      isolate_snapshot_data,
      isolate_snapshot_instructions,
      flags,
      isolate_group_data,
      isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateGroupPtr = _lookup<
      ffi.NativeFunction<
          Dart_Isolate Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<Dart_IsolateFlags>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_CreateIsolateGroup');
  late final _Dart_CreateIsolateGroup = _Dart_CreateIsolateGroupPtr.asFunction<
      Dart_Isolate Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<Dart_IsolateFlags>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Creates a new isolate inside the isolate group of [group_member].
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param group_member An isolate from the same group into which the newly created
  /// isolate should be born into. Other threads may not have entered / enter this
  /// member isolate.
  /// \param name A short name for the isolate for debugging purposes.
  /// \param shutdown_callback A callback to be called when the isolate is being
  /// shutdown (may be NULL).
  /// \param cleanup_callback A callback to be called when the isolate is being
  /// cleaned up (may be NULL).
  /// \param isolate_data The embedder-specific data associated with this isolate.
  /// \param error Set to NULL if creation is successful, set to an error
  /// message otherwise. The caller is responsible for calling free() on the
  /// error message.
  ///
  /// \return The newly created isolate on success, or NULL if isolate creation
  /// failed.
  ///
  /// If successful, the newly created isolate will become the current isolate.
  Dart_Isolate Dart_CreateIsolateInGroup(
    Dart_Isolate group_member,
    ffi.Pointer<ffi.Char> name,
    Dart_IsolateShutdownCallback shutdown_callback,
    Dart_IsolateCleanupCallback cleanup_callback,
    ffi.Pointer<ffi.Void> child_isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateInGroup(
      group_member,
      name,
      shutdown_callback,
      cleanup_callback,
      child_isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateInGroupPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  Dart_Isolate,
                  ffi.Pointer<ffi.Char>,
                  Dart_IsolateShutdownCallback,
                  Dart_IsolateCleanupCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Dart_CreateIsolateInGroup');
  late final _Dart_CreateIsolateInGroup =
      _Dart_CreateIsolateInGroupPtr.asFunction<
          Dart_Isolate Function(
              Dart_Isolate,
              ffi.Pointer<ffi.Char>,
              Dart_IsolateShutdownCallback,
              Dart_IsolateCleanupCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Creates a new isolate from a Dart Kernel file. The new isolate
  /// becomes the current isolate.
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param script_uri The main source file or snapshot this isolate will load.
  /// The VM will provide this URI to the Dart_IsolateGroupCreateCallback when a child
  /// isolate is created by Isolate.spawn. The embedder should use a URI that
  /// allows it to load the same program into such a child isolate.
  /// \param name A short name for the isolate to improve debugging messages.
  /// Typically of the format 'foo.dart:main()'.
  /// \param kernel_buffer
  /// \param kernel_buffer_size A buffer which contains a kernel/DIL program. Must
  /// remain valid until isolate shutdown.
  /// \param flags Pointer to VM specific flags or NULL for default flags.
  /// \param isolate_group_data Embedder group data. This data can be obtained
  /// by calling Dart_IsolateGroupData and will be passed to the
  /// Dart_IsolateShutdownCallback, Dart_IsolateCleanupCallback, and
  /// Dart_IsolateGroupCleanupCallback.
  /// \param isolate_data Embedder data.  This data will be passed to
  /// the Dart_IsolateGroupCreateCallback when new isolates are spawned from
  /// this parent isolate.
  /// \param error Returns NULL if creation is successful, an error message
  /// otherwise. The caller is responsible for calling free() on the error
  /// message.
  ///
  /// \return The new isolate on success, or NULL if isolate creation failed.
  Dart_Isolate Dart_CreateIsolateGroupFromKernel(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateGroupFromKernel(
      script_uri,
      name,
      kernel_buffer,
      kernel_buffer_size,
      flags,
      isolate_group_data,
      isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateGroupFromKernelPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.IntPtr,
                  ffi.Pointer<Dart_IsolateFlags>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Dart_CreateIsolateGroupFromKernel');
  late final _Dart_CreateIsolateGroupFromKernel =
      _Dart_CreateIsolateGroupFromKernelPtr.asFunction<
          Dart_Isolate Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<Dart_IsolateFlags>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Shuts down the current isolate. After this call, the current isolate is NULL.
  /// Any current scopes created by Dart_EnterScope will be exited. Invokes the
  /// shutdown callback and any callbacks of remaining weak persistent handles.
  ///
  /// Requires there to be a current isolate.
  void Dart_ShutdownIsolate() {
    return _Dart_ShutdownIsolate();
  }

  late final _Dart_ShutdownIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ShutdownIsolate');
  late final _Dart_ShutdownIsolate =
      _Dart_ShutdownIsolatePtr.asFunction<void Function()>();

  /// Returns the current isolate. Will return NULL if there is no
  /// current isolate.
  Dart_Isolate Dart_CurrentIsolate() {
    return _Dart_CurrentIsolate();
  }

  late final _Dart_CurrentIsolatePtr =
      _lookup<ffi.NativeFunction<Dart_Isolate Function()>>(
          'Dart_CurrentIsolate');
  late final _Dart_CurrentIsolate =
      _Dart_CurrentIsolatePtr.asFunction<Dart_Isolate Function()>();

  /// Returns the callback data associated with the current isolate. This
  /// data was set when the isolate got created or initialized.
  ffi.Pointer<ffi.Void> Dart_CurrentIsolateData() {
    return _Dart_CurrentIsolateData();
  }

  late final _Dart_CurrentIsolateDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Dart_CurrentIsolateData');
  late final _Dart_CurrentIsolateData = _Dart_CurrentIsolateDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function()>();

  /// Returns the callback data associated with the given isolate. This
  /// data was set when the isolate got created or initialized.
  ffi.Pointer<ffi.Void> Dart_IsolateData(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateData(
      isolate,
    );
  }

  late final _Dart_IsolateDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>(
          'Dart_IsolateData');
  late final _Dart_IsolateData = _Dart_IsolateDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Dart_Isolate)>();

  /// Returns the current isolate group. Will return NULL if there is no
  /// current isolate group.
  Dart_IsolateGroup Dart_CurrentIsolateGroup() {
    return _Dart_CurrentIsolateGroup();
  }

  late final _Dart_CurrentIsolateGroupPtr =
      _lookup<ffi.NativeFunction<Dart_IsolateGroup Function()>>(
          'Dart_CurrentIsolateGroup');
  late final _Dart_CurrentIsolateGroup =
      _Dart_CurrentIsolateGroupPtr.asFunction<Dart_IsolateGroup Function()>();

  /// Returns the callback data associated with the current isolate group. This
  /// data was passed to the isolate group when it was created.
  ffi.Pointer<ffi.Void> Dart_CurrentIsolateGroupData() {
    return _Dart_CurrentIsolateGroupData();
  }

  late final _Dart_CurrentIsolateGroupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Dart_CurrentIsolateGroupData');
  late final _Dart_CurrentIsolateGroupData = _Dart_CurrentIsolateGroupDataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Returns the callback data associated with the specified isolate group. This
  /// data was passed to the isolate when it was created.
  /// The embedder is responsible for ensuring the consistency of this data
  /// with respect to the lifecycle of an isolate group.
  ffi.Pointer<ffi.Void> Dart_IsolateGroupData(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateGroupData(
      isolate,
    );
  }

  late final _Dart_IsolateGroupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>(
          'Dart_IsolateGroupData');
  late final _Dart_IsolateGroupData = _Dart_IsolateGroupDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Dart_Isolate)>();

  /// Returns the debugging name for the current isolate.
  ///
  /// This name is unique to each isolate and should only be used to make
  /// debugging messages more comprehensible.
  Object Dart_DebugName() {
    return _Dart_DebugName();
  }

  late final _Dart_DebugNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_DebugName');
  late final _Dart_DebugName =
      _Dart_DebugNamePtr.asFunction<Object Function()>();

  /// Returns the ID for an isolate which is used to query the service protocol.
  ///
  /// It is the responsibility of the caller to free the returned ID.
  ffi.Pointer<ffi.Char> Dart_IsolateServiceId(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateServiceId(
      isolate,
    );
  }

  late final _Dart_IsolateServiceIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>>(
          'Dart_IsolateServiceId');
  late final _Dart_IsolateServiceId = _Dart_IsolateServiceIdPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(Dart_Isolate)>();

  /// Enters an isolate. After calling this function,
  /// the current isolate will be set to the provided isolate.
  ///
  /// Requires there to be no current isolate. Multiple threads may not be in
  /// the same isolate at once.
  void Dart_EnterIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_EnterIsolate(
      isolate,
    );
  }

  late final _Dart_EnterIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>(
          'Dart_EnterIsolate');
  late final _Dart_EnterIsolate =
      _Dart_EnterIsolatePtr.asFunction<void Function(Dart_Isolate)>();

  /// Kills the given isolate.
  ///
  /// This function has the same effect as dart:isolate's
  /// Isolate.kill(priority:immediate).
  /// It can interrupt ordinary Dart code but not native code. If the isolate is
  /// in the middle of a long running native function, the isolate will not be
  /// killed until control returns to Dart.
  ///
  /// Does not require a current isolate. It is safe to kill the current isolate if
  /// there is one.
  void Dart_KillIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_KillIsolate(
      isolate,
    );
  }

  late final _Dart_KillIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>(
          'Dart_KillIsolate');
  late final _Dart_KillIsolate =
      _Dart_KillIsolatePtr.asFunction<void Function(Dart_Isolate)>();

  /// Notifies the VM that the embedder expects |size| bytes of memory have become
  /// unreachable. The VM may use this hint to adjust the garbage collector's
  /// growth policy.
  ///
  /// Multiple calls are interpreted as increasing, not replacing, the estimate of
  /// unreachable memory.
  ///
  /// Requires there to be a current isolate.
  void Dart_HintFreed(
    int size,
  ) {
    return _Dart_HintFreed(
      size,
    );
  }

  late final _Dart_HintFreedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr)>>(
          'Dart_HintFreed');
  late final _Dart_HintFreed =
      _Dart_HintFreedPtr.asFunction<void Function(int)>();

  /// Notifies the VM that the embedder expects to be idle until |deadline|. The VM
  /// may use this time to perform garbage collection or other tasks to avoid
  /// delays during execution of Dart code in the future.
  ///
  /// |deadline| is measured in microseconds against the system's monotonic time.
  /// This clock can be accessed via Dart_TimelineGetMicros().
  ///
  /// Requires there to be a current isolate.
  void Dart_NotifyIdle(
    int deadline,
  ) {
    return _Dart_NotifyIdle(
      deadline,
    );
  }

  late final _Dart_NotifyIdlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'Dart_NotifyIdle');
  late final _Dart_NotifyIdle =
      _Dart_NotifyIdlePtr.asFunction<void Function(int)>();

  /// Notifies the VM that the system is running low on memory.
  ///
  /// Does not require a current isolate. Only valid after calling Dart_Initialize.
  void Dart_NotifyLowMemory() {
    return _Dart_NotifyLowMemory();
  }

  late final _Dart_NotifyLowMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_NotifyLowMemory');
  late final _Dart_NotifyLowMemory =
      _Dart_NotifyLowMemoryPtr.asFunction<void Function()>();

  /// Starts the CPU sampling profiler.
  void Dart_StartProfiling() {
    return _Dart_StartProfiling();
  }

  late final _Dart_StartProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_StartProfiling');
  late final _Dart_StartProfiling =
      _Dart_StartProfilingPtr.asFunction<void Function()>();

  /// Stops the CPU sampling profiler.
  ///
  /// Note that some profile samples might still be taken after this fucntion
  /// returns due to the asynchronous nature of the implementation on some
  /// platforms.
  void Dart_StopProfiling() {
    return _Dart_StopProfiling();
  }

  late final _Dart_StopProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_StopProfiling');
  late final _Dart_StopProfiling =
      _Dart_StopProfilingPtr.asFunction<void Function()>();

  /// Notifies the VM that the current thread should not be profiled until a
  /// matching call to Dart_ThreadEnableProfiling is made.
  ///
  /// NOTE: By default, if a thread has entered an isolate it will be profiled.
  /// This function should be used when an embedder knows a thread is about
  /// to make a blocking call and wants to avoid unnecessary interrupts by
  /// the profiler.
  void Dart_ThreadDisableProfiling() {
    return _Dart_ThreadDisableProfiling();
  }

  late final _Dart_ThreadDisableProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Dart_ThreadDisableProfiling');
  late final _Dart_ThreadDisableProfiling =
      _Dart_ThreadDisableProfilingPtr.asFunction<void Function()>();

  /// Notifies the VM that the current thread should be profiled.
  ///
  /// NOTE: It is only legal to call this function *after* calling
  /// Dart_ThreadDisableProfiling.
  ///
  /// NOTE: By default, if a thread has entered an isolate it will be profiled.
  void Dart_ThreadEnableProfiling() {
    return _Dart_ThreadEnableProfiling();
  }

  late final _Dart_ThreadEnableProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Dart_ThreadEnableProfiling');
  late final _Dart_ThreadEnableProfiling =
      _Dart_ThreadEnableProfilingPtr.asFunction<void Function()>();

  /// Register symbol information for the Dart VM's profiler and crash dumps.
  ///
  /// This consumes the output of //topaz/runtime/dart/profiler_symbols, which
  /// should be treated as opaque.
  void Dart_AddSymbols(
    ffi.Pointer<ffi.Char> dso_name,
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _Dart_AddSymbols(
      dso_name,
      buffer,
      buffer_size,
    );
  }

  late final _Dart_AddSymbolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('Dart_AddSymbols');
  late final _Dart_AddSymbols = _Dart_AddSymbolsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  /// Exits an isolate. After this call, Dart_CurrentIsolate will
  /// return NULL.
  ///
  /// Requires there to be a current isolate.
  void Dart_ExitIsolate() {
    return _Dart_ExitIsolate();
  }

  late final _Dart_ExitIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ExitIsolate');
  late final _Dart_ExitIsolate =
      _Dart_ExitIsolatePtr.asFunction<void Function()>();

  /// Creates a full snapshot of the current isolate heap.
  ///
  /// A full snapshot is a compact representation of the dart vm isolate heap
  /// and dart isolate heap states. These snapshots are used to initialize
  /// the vm isolate on startup and fast initialization of an isolate.
  /// A Snapshot of the heap is created before any dart code has executed.
  ///
  /// Requires there to be a current isolate. Not available in the precompiled
  /// runtime (check Dart_IsPrecompiledRuntime).
  ///
  /// \param buffer Returns a pointer to a buffer containing the
  /// snapshot. This buffer is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param size Returns the size of the buffer.
  /// \param is_core Create a snapshot containing core libraries.
  /// Such snapshot should be agnostic to null safety mode.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateSnapshot(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    bool is_core,
  ) {
    return _Dart_CreateSnapshot(
      vm_snapshot_data_buffer,
      vm_snapshot_data_size,
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      is_core,
    );
  }

  late final _Dart_CreateSnapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Bool)>>('Dart_CreateSnapshot');
  late final _Dart_CreateSnapshot = _Dart_CreateSnapshotPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>,
          bool)>();

  /// Returns whether the buffer contains a kernel file.
  ///
  /// \param buffer Pointer to a buffer that might contain a kernel binary.
  /// \param buffer_size Size of the buffer.
  ///
  /// \return Whether the buffer contains a kernel binary (full or partial).
  bool Dart_IsKernel(
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_size,
  ) {
    return _Dart_IsKernel(
      buffer,
      buffer_size,
    );
  }

  late final _Dart_IsKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('Dart_IsKernel');
  late final _Dart_IsKernel = _Dart_IsKernelPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Make isolate runnable.
  ///
  /// When isolates are spawned, this function is used to indicate that
  /// the creation and initialization (including script loading) of the
  /// isolate is complete and the isolate can start.
  /// This function expects there to be no current isolate.
  ///
  /// \param isolate The isolate to be made runnable.
  ///
  /// \return NULL if successful. Returns an error message otherwise. The caller
  /// is responsible for freeing the error message.
  ffi.Pointer<ffi.Char> Dart_IsolateMakeRunnable(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateMakeRunnable(
      isolate,
    );
  }

  late final _Dart_IsolateMakeRunnablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>>(
          'Dart_IsolateMakeRunnable');
  late final _Dart_IsolateMakeRunnable = _Dart_IsolateMakeRunnablePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(Dart_Isolate)>();

  /// Allows embedders to provide an alternative wakeup mechanism for the
  /// delivery of inter-isolate messages. This setting only applies to
  /// the current isolate.
  ///
  /// Most embedders will only call this function once, before isolate
  /// execution begins. If this function is called after isolate
  /// execution begins, the embedder is responsible for threading issues.
  void Dart_SetMessageNotifyCallback(
    Dart_MessageNotifyCallback message_notify_callback,
  ) {
    return _Dart_SetMessageNotifyCallback(
      message_notify_callback,
    );
  }

  late final _Dart_SetMessageNotifyCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Dart_MessageNotifyCallback)>>(
      'Dart_SetMessageNotifyCallback');
  late final _Dart_SetMessageNotifyCallback = _Dart_SetMessageNotifyCallbackPtr
      .asFunction<void Function(Dart_MessageNotifyCallback)>();

  /// Query the current message notify callback for the isolate.
  ///
  /// \return The current message notify callback for the isolate.
  Dart_MessageNotifyCallback Dart_GetMessageNotifyCallback() {
    return _Dart_GetMessageNotifyCallback();
  }

  late final _Dart_GetMessageNotifyCallbackPtr =
      _lookup<ffi.NativeFunction<Dart_MessageNotifyCallback Function()>>(
          'Dart_GetMessageNotifyCallback');
  late final _Dart_GetMessageNotifyCallback = _Dart_GetMessageNotifyCallbackPtr
      .asFunction<Dart_MessageNotifyCallback Function()>();

  /// If the VM flag `--pause-isolates-on-start` was passed this will be true.
  ///
  /// \return A boolean value indicating if pause on start was requested.
  bool Dart_ShouldPauseOnStart() {
    return _Dart_ShouldPauseOnStart();
  }

  late final _Dart_ShouldPauseOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_ShouldPauseOnStart');
  late final _Dart_ShouldPauseOnStart =
      _Dart_ShouldPauseOnStartPtr.asFunction<bool Function()>();

  /// Override the VM flag `--pause-isolates-on-start` for the current isolate.
  ///
  /// \param should_pause Should the isolate be paused on start?
  ///
  /// NOTE: This must be called before Dart_IsolateMakeRunnable.
  void Dart_SetShouldPauseOnStart(
    bool should_pause,
  ) {
    return _Dart_SetShouldPauseOnStart(
      should_pause,
    );
  }

  late final _Dart_SetShouldPauseOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetShouldPauseOnStart');
  late final _Dart_SetShouldPauseOnStart =
      _Dart_SetShouldPauseOnStartPtr.asFunction<void Function(bool)>();

  /// Is the current isolate paused on start?
  ///
  /// \return A boolean value indicating if the isolate is paused on start.
  bool Dart_IsPausedOnStart() {
    return _Dart_IsPausedOnStart();
  }

  late final _Dart_IsPausedOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_IsPausedOnStart');
  late final _Dart_IsPausedOnStart =
      _Dart_IsPausedOnStartPtr.asFunction<bool Function()>();

  /// Called when the embedder has paused the current isolate on start and when
  /// the embedder has resumed the isolate.
  ///
  /// \param paused Is the isolate paused on start?
  void Dart_SetPausedOnStart(
    bool paused,
  ) {
    return _Dart_SetPausedOnStart(
      paused,
    );
  }

  late final _Dart_SetPausedOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetPausedOnStart');
  late final _Dart_SetPausedOnStart =
      _Dart_SetPausedOnStartPtr.asFunction<void Function(bool)>();

  /// If the VM flag `--pause-isolates-on-exit` was passed this will be true.
  ///
  /// \return A boolean value indicating if pause on exit was requested.
  bool Dart_ShouldPauseOnExit() {
    return _Dart_ShouldPauseOnExit();
  }

  late final _Dart_ShouldPauseOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_ShouldPauseOnExit');
  late final _Dart_ShouldPauseOnExit =
      _Dart_ShouldPauseOnExitPtr.asFunction<bool Function()>();

  /// Override the VM flag `--pause-isolates-on-exit` for the current isolate.
  ///
  /// \param should_pause Should the isolate be paused on exit?
  void Dart_SetShouldPauseOnExit(
    bool should_pause,
  ) {
    return _Dart_SetShouldPauseOnExit(
      should_pause,
    );
  }

  late final _Dart_SetShouldPauseOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetShouldPauseOnExit');
  late final _Dart_SetShouldPauseOnExit =
      _Dart_SetShouldPauseOnExitPtr.asFunction<void Function(bool)>();

  /// Is the current isolate paused on exit?
  ///
  /// \return A boolean value indicating if the isolate is paused on exit.
  bool Dart_IsPausedOnExit() {
    return _Dart_IsPausedOnExit();
  }

  late final _Dart_IsPausedOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_IsPausedOnExit');
  late final _Dart_IsPausedOnExit =
      _Dart_IsPausedOnExitPtr.asFunction<bool Function()>();

  /// Called when the embedder has paused the current isolate on exit and when
  /// the embedder has resumed the isolate.
  ///
  /// \param paused Is the isolate paused on exit?
  void Dart_SetPausedOnExit(
    bool paused,
  ) {
    return _Dart_SetPausedOnExit(
      paused,
    );
  }

  late final _Dart_SetPausedOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Dart_SetPausedOnExit');
  late final _Dart_SetPausedOnExit =
      _Dart_SetPausedOnExitPtr.asFunction<void Function(bool)>();

  /// Called when the embedder has caught a top level unhandled exception error
  /// in the current isolate.
  ///
  /// NOTE: It is illegal to call this twice on the same isolate without first
  /// clearing the sticky error to null.
  ///
  /// \param error The unhandled exception error.
  void Dart_SetStickyError(
    Object error,
  ) {
    return _Dart_SetStickyError(
      error,
    );
  }

  late final _Dart_SetStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_SetStickyError');
  late final _Dart_SetStickyError =
      _Dart_SetStickyErrorPtr.asFunction<void Function(Object)>();

  /// Does the current isolate have a sticky error?
  bool Dart_HasStickyError() {
    return _Dart_HasStickyError();
  }

  late final _Dart_HasStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_HasStickyError');
  late final _Dart_HasStickyError =
      _Dart_HasStickyErrorPtr.asFunction<bool Function()>();

  /// Gets the sticky error for the current isolate.
  ///
  /// \return A handle to the sticky error object or null.
  Object Dart_GetStickyError() {
    return _Dart_GetStickyError();
  }

  late final _Dart_GetStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_GetStickyError');
  late final _Dart_GetStickyError =
      _Dart_GetStickyErrorPtr.asFunction<Object Function()>();

  /// Handles the next pending message for the current isolate.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_HandleMessage() {
    return _Dart_HandleMessage();
  }

  late final _Dart_HandleMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_HandleMessage');
  late final _Dart_HandleMessage =
      _Dart_HandleMessagePtr.asFunction<Object Function()>();

  /// Drains the microtask queue, then blocks the calling thread until the current
  /// isolate recieves a message, then handles all messages.
  ///
  /// \param timeout_millis When non-zero, the call returns after the indicated
  /// number of milliseconds even if no message was received.
  /// \return A valid handle if no error occurs, otherwise an error handle.
  Object Dart_WaitForEvent(
    int timeout_millis,
  ) {
    return _Dart_WaitForEvent(
      timeout_millis,
    );
  }

  late final _Dart_WaitForEventPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'Dart_WaitForEvent');
  late final _Dart_WaitForEvent =
      _Dart_WaitForEventPtr.asFunction<Object Function(int)>();

  /// Handles any pending messages for the vm service for the current
  /// isolate.
  ///
  /// This function may be used by an embedder at a breakpoint to avoid
  /// pausing the vm service.
  ///
  /// This function can indirectly cause the message notify callback to
  /// be called.
  ///
  /// \return true if the vm service requests the program resume
  /// execution, false otherwise
  bool Dart_HandleServiceMessages() {
    return _Dart_HandleServiceMessages();
  }

  late final _Dart_HandleServiceMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_HandleServiceMessages');
  late final _Dart_HandleServiceMessages =
      _Dart_HandleServiceMessagesPtr.asFunction<bool Function()>();

  /// Does the current isolate have pending service messages?
  ///
  /// \return true if the isolate has pending service messages, false otherwise.
  bool Dart_HasServiceMessages() {
    return _Dart_HasServiceMessages();
  }

  late final _Dart_HasServiceMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_HasServiceMessages');
  late final _Dart_HasServiceMessages =
      _Dart_HasServiceMessagesPtr.asFunction<bool Function()>();

  /// Processes any incoming messages for the current isolate.
  ///
  /// This function may only be used when the embedder has not provided
  /// an alternate message delivery mechanism with
  /// Dart_SetMessageCallbacks. It is provided for convenience.
  ///
  /// This function waits for incoming messages for the current
  /// isolate. As new messages arrive, they are handled using
  /// Dart_HandleMessage. The routine exits when all ports to the
  /// current isolate are closed.
  ///
  /// \return A valid handle if the run loop exited successfully.  If an
  /// exception or other error occurs while processing messages, an
  /// error handle is returned.
  Object Dart_RunLoop() {
    return _Dart_RunLoop();
  }

  late final _Dart_RunLoopPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_RunLoop');
  late final _Dart_RunLoop = _Dart_RunLoopPtr.asFunction<Object Function()>();

  /// Lets the VM run message processing for the isolate.
  ///
  /// This function expects there to a current isolate and the current isolate
  /// must not have an active api scope. The VM will take care of making the
  /// isolate runnable (if not already), handles its message loop and will take
  /// care of shutting the isolate down once it's done.
  ///
  /// \param errors_are_fatal Whether uncaught errors should be fatal.
  /// \param on_error_port A port to notify on uncaught errors (or ILLEGAL_PORT).
  /// \param on_exit_port A port to notify on exit (or ILLEGAL_PORT).
  /// \param error A non-NULL pointer which will hold an error message if the call
  /// fails. The error has to be free()ed by the caller.
  ///
  /// \return If successfull the VM takes owernship of the isolate and takes care
  /// of its message loop. If not successful the caller retains owernship of the
  /// isolate.
  bool Dart_RunLoopAsync(
    bool errors_are_fatal,
    int on_error_port,
    int on_exit_port,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_RunLoopAsync(
      errors_are_fatal,
      on_error_port,
      on_exit_port,
      error,
    );
  }

  late final _Dart_RunLoopAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Bool, Dart_Port, Dart_Port,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_RunLoopAsync');
  late final _Dart_RunLoopAsync = _Dart_RunLoopAsyncPtr.asFunction<
      bool Function(bool, int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Gets the main port id for the current isolate.
  int Dart_GetMainPortId() {
    return _Dart_GetMainPortId();
  }

  late final _Dart_GetMainPortIdPtr =
      _lookup<ffi.NativeFunction<Dart_Port Function()>>('Dart_GetMainPortId');
  late final _Dart_GetMainPortId =
      _Dart_GetMainPortIdPtr.asFunction<int Function()>();

  /// Does the current isolate have live ReceivePorts?
  ///
  /// A ReceivePort is live when it has not been closed.
  bool Dart_HasLivePorts() {
    return _Dart_HasLivePorts();
  }

  late final _Dart_HasLivePortsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Dart_HasLivePorts');
  late final _Dart_HasLivePorts =
      _Dart_HasLivePortsPtr.asFunction<bool Function()>();

  /// Posts a message for some isolate. The message is a serialized
  /// object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param port The destination port.
  /// \param object An object from the current isolate.
  ///
  /// \return True if the message was posted.
  bool Dart_Post(
    int port_id,
    Object object,
  ) {
    return _Dart_Post(
      port_id,
      object,
    );
  }

  late final _Dart_PostPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port, ffi.Handle)>>(
          'Dart_Post');
  late final _Dart_Post =
      _Dart_PostPtr.asFunction<bool Function(int, Object)>();

  /// Returns a new SendPort with the provided port id.
  ///
  /// \param port_id The destination port.
  ///
  /// \return A new SendPort if no errors occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewSendPort(
    int port_id,
  ) {
    return _Dart_NewSendPort(
      port_id,
    );
  }

  late final _Dart_NewSendPortPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(Dart_Port)>>(
          'Dart_NewSendPort');
  late final _Dart_NewSendPort =
      _Dart_NewSendPortPtr.asFunction<Object Function(int)>();

  /// Gets the SendPort id for the provided SendPort.
  /// \param port A SendPort object whose id is desired.
  /// \param port_id Returns the id of the SendPort.
  /// \return Success if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_SendPortGetId(
    Object port,
    ffi.Pointer<Dart_Port> port_id,
  ) {
    return _Dart_SendPortGetId(
      port,
      port_id,
    );
  }

  late final _Dart_SendPortGetIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<Dart_Port>)>>('Dart_SendPortGetId');
  late final _Dart_SendPortGetId = _Dart_SendPortGetIdPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_Port>)>();

  /// Enters a new scope.
  ///
  /// All new local handles will be created in this scope. Additionally,
  /// some functions may return "scope allocated" memory which is only
  /// valid within this scope.
  ///
  /// Requires there to be a current isolate.
  void Dart_EnterScope() {
    return _Dart_EnterScope();
  }

  late final _Dart_EnterScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_EnterScope');
  late final _Dart_EnterScope =
      _Dart_EnterScopePtr.asFunction<void Function()>();

  /// Exits a scope.
  ///
  /// The previous scope (if any) becomes the current scope.
  ///
  /// Requires there to be a current isolate.
  void Dart_ExitScope() {
    return _Dart_ExitScope();
  }

  late final _Dart_ExitScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ExitScope');
  late final _Dart_ExitScope = _Dart_ExitScopePtr.asFunction<void Function()>();

  /// The Dart VM uses "zone allocation" for temporary structures. Zones
  /// support very fast allocation of small chunks of memory. The chunks
  /// cannot be deallocated individually, but instead zones support
  /// deallocating all chunks in one fast operation.
  ///
  /// This function makes it possible for the embedder to allocate
  /// temporary data in the VMs zone allocator.
  ///
  /// Zone allocation is possible:
  /// 1. when inside a scope where local handles can be allocated
  /// 2. when processing a message from a native port in a native port
  /// handler
  ///
  /// All the memory allocated this way will be reclaimed either on the
  /// next call to Dart_ExitScope or when the native port handler exits.
  ///
  /// \param size Size of the memory to allocate.
  ///
  /// \return A pointer to the allocated memory. NULL if allocation
  /// failed. Failure might due to is no current VM zone.
  ffi.Pointer<ffi.Uint8> Dart_ScopeAllocate(
    int size,
  ) {
    return _Dart_ScopeAllocate(
      size,
    );
  }

  late final _Dart_ScopeAllocatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr)>>(
          'Dart_ScopeAllocate');
  late final _Dart_ScopeAllocate =
      _Dart_ScopeAllocatePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  /// Returns the null object.
  ///
  /// \return A handle to the null object.
  Object Dart_Null() {
    return _Dart_Null();
  }

  late final _Dart_NullPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_Null');
  late final _Dart_Null = _Dart_NullPtr.asFunction<Object Function()>();

  /// Is this object null?
  bool Dart_IsNull(
    Object object,
  ) {
    return _Dart_IsNull(
      object,
    );
  }

  late final _Dart_IsNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsNull');
  late final _Dart_IsNull = _Dart_IsNullPtr.asFunction<bool Function(Object)>();

  /// Returns the empty string object.
  ///
  /// \return A handle to the empty string object.
  Object Dart_EmptyString() {
    return _Dart_EmptyString();
  }

  late final _Dart_EmptyStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_EmptyString');
  late final _Dart_EmptyString =
      _Dart_EmptyStringPtr.asFunction<Object Function()>();

  /// Returns types that are not classes, and which therefore cannot be looked up
  /// as library members by Dart_GetType.
  ///
  /// \return A handle to the dynamic, void or Never type.
  Object Dart_TypeDynamic() {
    return _Dart_TypeDynamic();
  }

  late final _Dart_TypeDynamicPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeDynamic');
  late final _Dart_TypeDynamic =
      _Dart_TypeDynamicPtr.asFunction<Object Function()>();

  Object Dart_TypeVoid() {
    return _Dart_TypeVoid();
  }

  late final _Dart_TypeVoidPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeVoid');
  late final _Dart_TypeVoid = _Dart_TypeVoidPtr.asFunction<Object Function()>();

  Object Dart_TypeNever() {
    return _Dart_TypeNever();
  }

  late final _Dart_TypeNeverPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeNever');
  late final _Dart_TypeNever =
      _Dart_TypeNeverPtr.asFunction<Object Function()>();

  /// Checks if the two objects are equal.
  ///
  /// The result of the comparison is returned through the 'equal'
  /// parameter. The return value itself is used to indicate success or
  /// failure, not equality.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param obj1 An object to be compared.
  /// \param obj2 An object to be compared.
  /// \param equal Returns the result of the equality comparison.
  ///
  /// \return A valid handle if no error occurs during the comparison.
  Object Dart_ObjectEquals(
    Object obj1,
    Object obj2,
    ffi.Pointer<ffi.Bool> equal,
  ) {
    return _Dart_ObjectEquals(
      obj1,
      obj2,
      equal,
    );
  }

  late final _Dart_ObjectEqualsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Pointer<ffi.Bool>)>>('Dart_ObjectEquals');
  late final _Dart_ObjectEquals = _Dart_ObjectEqualsPtr.asFunction<
      Object Function(Object, Object, ffi.Pointer<ffi.Bool>)>();

  /// Is this object an instance of some type?
  ///
  /// The result of the test is returned through the 'instanceof' parameter.
  /// The return value itself is used to indicate success or failure.
  ///
  /// \param object An object.
  /// \param type A type.
  /// \param instanceof Return true if 'object' is an instance of type 'type'.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ObjectIsType(
    Object object,
    Object type,
    ffi.Pointer<ffi.Bool> instanceof,
  ) {
    return _Dart_ObjectIsType(
      object,
      type,
      instanceof,
    );
  }

  late final _Dart_ObjectIsTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Pointer<ffi.Bool>)>>('Dart_ObjectIsType');
  late final _Dart_ObjectIsType = _Dart_ObjectIsTypePtr.asFunction<
      Object Function(Object, Object, ffi.Pointer<ffi.Bool>)>();

  /// Query object type.
  ///
  /// \param object Some Object.
  ///
  /// \return true if Object is of the specified type.
  bool Dart_IsInstance(
    Object object,
  ) {
    return _Dart_IsInstance(
      object,
    );
  }

  late final _Dart_IsInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsInstance');
  late final _Dart_IsInstance =
      _Dart_IsInstancePtr.asFunction<bool Function(Object)>();

  bool Dart_IsNumber(
    Object object,
  ) {
    return _Dart_IsNumber(
      object,
    );
  }

  late final _Dart_IsNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsNumber');
  late final _Dart_IsNumber =
      _Dart_IsNumberPtr.asFunction<bool Function(Object)>();

  bool Dart_IsInteger(
    Object object,
  ) {
    return _Dart_IsInteger(
      object,
    );
  }

  late final _Dart_IsIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsInteger');
  late final _Dart_IsInteger =
      _Dart_IsIntegerPtr.asFunction<bool Function(Object)>();

  bool Dart_IsDouble(
    Object object,
  ) {
    return _Dart_IsDouble(
      object,
    );
  }

  late final _Dart_IsDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsDouble');
  late final _Dart_IsDouble =
      _Dart_IsDoublePtr.asFunction<bool Function(Object)>();

  bool Dart_IsBoolean(
    Object object,
  ) {
    return _Dart_IsBoolean(
      object,
    );
  }

  late final _Dart_IsBooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsBoolean');
  late final _Dart_IsBoolean =
      _Dart_IsBooleanPtr.asFunction<bool Function(Object)>();

  bool Dart_IsString(
    Object object,
  ) {
    return _Dart_IsString(
      object,
    );
  }

  late final _Dart_IsStringPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsString');
  late final _Dart_IsString =
      _Dart_IsStringPtr.asFunction<bool Function(Object)>();

  bool Dart_IsStringLatin1(
    Object object,
  ) {
    return _Dart_IsStringLatin1(
      object,
    );
  }

  late final _Dart_IsStringLatin1Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsStringLatin1');
  late final _Dart_IsStringLatin1 =
      _Dart_IsStringLatin1Ptr.asFunction<bool Function(Object)>();

  bool Dart_IsExternalString(
    Object object,
  ) {
    return _Dart_IsExternalString(
      object,
    );
  }

  late final _Dart_IsExternalStringPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsExternalString');
  late final _Dart_IsExternalString =
      _Dart_IsExternalStringPtr.asFunction<bool Function(Object)>();

  bool Dart_IsList(
    Object object,
  ) {
    return _Dart_IsList(
      object,
    );
  }

  late final _Dart_IsListPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsList');
  late final _Dart_IsList = _Dart_IsListPtr.asFunction<bool Function(Object)>();

  bool Dart_IsMap(
    Object object,
  ) {
    return _Dart_IsMap(
      object,
    );
  }

  late final _Dart_IsMapPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsMap');
  late final _Dart_IsMap = _Dart_IsMapPtr.asFunction<bool Function(Object)>();

  bool Dart_IsLibrary(
    Object object,
  ) {
    return _Dart_IsLibrary(
      object,
    );
  }

  late final _Dart_IsLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsLibrary');
  late final _Dart_IsLibrary =
      _Dart_IsLibraryPtr.asFunction<bool Function(Object)>();

  bool Dart_IsType(
    Object handle,
  ) {
    return _Dart_IsType(
      handle,
    );
  }

  late final _Dart_IsTypePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('Dart_IsType');
  late final _Dart_IsType = _Dart_IsTypePtr.asFunction<bool Function(Object)>();

  bool Dart_IsFunction(
    Object handle,
  ) {
    return _Dart_IsFunction(
      handle,
    );
  }

  late final _Dart_IsFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsFunction');
  late final _Dart_IsFunction =
      _Dart_IsFunctionPtr.asFunction<bool Function(Object)>();

  bool Dart_IsVariable(
    Object handle,
  ) {
    return _Dart_IsVariable(
      handle,
    );
  }

  late final _Dart_IsVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsVariable');
  late final _Dart_IsVariable =
      _Dart_IsVariablePtr.asFunction<bool Function(Object)>();

  bool Dart_IsTypeVariable(
    Object handle,
  ) {
    return _Dart_IsTypeVariable(
      handle,
    );
  }

  late final _Dart_IsTypeVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsTypeVariable');
  late final _Dart_IsTypeVariable =
      _Dart_IsTypeVariablePtr.asFunction<bool Function(Object)>();

  bool Dart_IsClosure(
    Object object,
  ) {
    return _Dart_IsClosure(
      object,
    );
  }

  late final _Dart_IsClosurePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsClosure');
  late final _Dart_IsClosure =
      _Dart_IsClosurePtr.asFunction<bool Function(Object)>();

  bool Dart_IsTypedData(
    Object object,
  ) {
    return _Dart_IsTypedData(
      object,
    );
  }

  late final _Dart_IsTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsTypedData');
  late final _Dart_IsTypedData =
      _Dart_IsTypedDataPtr.asFunction<bool Function(Object)>();

  bool Dart_IsByteBuffer(
    Object object,
  ) {
    return _Dart_IsByteBuffer(
      object,
    );
  }

  late final _Dart_IsByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsByteBuffer');
  late final _Dart_IsByteBuffer =
      _Dart_IsByteBufferPtr.asFunction<bool Function(Object)>();

  bool Dart_IsFuture(
    Object object,
  ) {
    return _Dart_IsFuture(
      object,
    );
  }

  late final _Dart_IsFuturePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsFuture');
  late final _Dart_IsFuture =
      _Dart_IsFuturePtr.asFunction<bool Function(Object)>();

  /// Gets the type of a Dart language object.
  ///
  /// \param instance Some Dart object.
  ///
  /// \return If no error occurs, the type is returned. Otherwise an
  /// error handle is returned.
  Object Dart_InstanceGetType(
    Object instance,
  ) {
    return _Dart_InstanceGetType(
      instance,
    );
  }

  late final _Dart_InstanceGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_InstanceGetType');
  late final _Dart_InstanceGetType =
      _Dart_InstanceGetTypePtr.asFunction<Object Function(Object)>();

  /// Returns the name for the provided class type.
  ///
  /// \return A valid string handle if no error occurs during the
  /// operation.
  Object Dart_ClassName(
    Object cls_type,
  ) {
    return _Dart_ClassName(
      cls_type,
    );
  }

  late final _Dart_ClassNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClassName');
  late final _Dart_ClassName =
      _Dart_ClassNamePtr.asFunction<Object Function(Object)>();

  /// Returns the name for the provided function or method.
  ///
  /// \return A valid string handle if no error occurs during the
  /// operation.
  Object Dart_FunctionName(
    Object function,
  ) {
    return _Dart_FunctionName(
      function,
    );
  }

  late final _Dart_FunctionNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_FunctionName');
  late final _Dart_FunctionName =
      _Dart_FunctionNamePtr.asFunction<Object Function(Object)>();

  /// Returns a handle to the owner of a function.
  ///
  /// The owner of an instance method or a static method is its defining
  /// class. The owner of a top-level function is its defining
  /// library. The owner of the function of a non-implicit closure is the
  /// function of the method or closure that defines the non-implicit
  /// closure.
  ///
  /// \return A valid handle to the owner of the function, or an error
  /// handle if the argument is not a valid handle to a function.
  Object Dart_FunctionOwner(
    Object function,
  ) {
    return _Dart_FunctionOwner(
      function,
    );
  }

  late final _Dart_FunctionOwnerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_FunctionOwner');
  late final _Dart_FunctionOwner =
      _Dart_FunctionOwnerPtr.asFunction<Object Function(Object)>();

  /// Determines whether a function handle referes to a static function
  /// of method.
  ///
  /// For the purposes of the embedding API, a top-level function is
  /// implicitly declared static.
  ///
  /// \param function A handle to a function or method declaration.
  /// \param is_static Returns whether the function or method is declared static.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_FunctionIsStatic(
    Object function,
    ffi.Pointer<ffi.Bool> is_static,
  ) {
    return _Dart_FunctionIsStatic(
      function,
      is_static,
    );
  }

  late final _Dart_FunctionIsStaticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_FunctionIsStatic');
  late final _Dart_FunctionIsStatic = _Dart_FunctionIsStaticPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Is this object a closure resulting from a tear-off (closurized method)?
  ///
  /// Returns true for closures produced when an ordinary method is accessed
  /// through a getter call. Returns false otherwise, in particular for closures
  /// produced from local function declarations.
  ///
  /// \param object Some Object.
  ///
  /// \return true if Object is a tear-off.
  bool Dart_IsTearOff(
    Object object,
  ) {
    return _Dart_IsTearOff(
      object,
    );
  }

  late final _Dart_IsTearOffPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>(
          'Dart_IsTearOff');
  late final _Dart_IsTearOff =
      _Dart_IsTearOffPtr.asFunction<bool Function(Object)>();

  /// Retrieves the function of a closure.
  ///
  /// \return A handle to the function of the closure, or an error handle if the
  /// argument is not a closure.
  Object Dart_ClosureFunction(
    Object closure,
  ) {
    return _Dart_ClosureFunction(
      closure,
    );
  }

  late final _Dart_ClosureFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClosureFunction');
  late final _Dart_ClosureFunction =
      _Dart_ClosureFunctionPtr.asFunction<Object Function(Object)>();

  /// Returns a handle to the library which contains class.
  ///
  /// \return A valid handle to the library with owns class, null if the class
  /// has no library or an error handle if the argument is not a valid handle
  /// to a class type.
  Object Dart_ClassLibrary(
    Object cls_type,
  ) {
    return _Dart_ClassLibrary(
      cls_type,
    );
  }

  late final _Dart_ClassLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClassLibrary');
  late final _Dart_ClassLibrary =
      _Dart_ClassLibraryPtr.asFunction<Object Function(Object)>();

  /// Does this Integer fit into a 64-bit signed integer?
  ///
  /// \param integer An integer.
  /// \param fits Returns true if the integer fits into a 64-bit signed integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerFitsIntoInt64(
    Object integer,
    ffi.Pointer<ffi.Bool> fits,
  ) {
    return _Dart_IntegerFitsIntoInt64(
      integer,
      fits,
    );
  }

  late final _Dart_IntegerFitsIntoInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IntegerFitsIntoInt64');
  late final _Dart_IntegerFitsIntoInt64 = _Dart_IntegerFitsIntoInt64Ptr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Does this Integer fit into a 64-bit unsigned integer?
  ///
  /// \param integer An integer.
  /// \param fits Returns true if the integer fits into a 64-bit unsigned integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerFitsIntoUint64(
    Object integer,
    ffi.Pointer<ffi.Bool> fits,
  ) {
    return _Dart_IntegerFitsIntoUint64(
      integer,
      fits,
    );
  }

  late final _Dart_IntegerFitsIntoUint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Bool>)>>('Dart_IntegerFitsIntoUint64');
  late final _Dart_IntegerFitsIntoUint64 = _Dart_IntegerFitsIntoUint64Ptr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The value of the integer.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewInteger(
    int value,
  ) {
    return _Dart_NewInteger(
      value,
    );
  }

  late final _Dart_NewIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'Dart_NewInteger');
  late final _Dart_NewInteger =
      _Dart_NewIntegerPtr.asFunction<Object Function(int)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The unsigned value of the integer.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewIntegerFromUint64(
    int value,
  ) {
    return _Dart_NewIntegerFromUint64(
      value,
    );
  }

  late final _Dart_NewIntegerFromUint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Uint64)>>(
          'Dart_NewIntegerFromUint64');
  late final _Dart_NewIntegerFromUint64 =
      _Dart_NewIntegerFromUint64Ptr.asFunction<Object Function(int)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The value of the integer represented as a C string
  /// containing a hexadecimal number.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewIntegerFromHexCString(
    ffi.Pointer<ffi.Char> value,
  ) {
    return _Dart_NewIntegerFromHexCString(
      value,
    );
  }

  late final _Dart_NewIntegerFromHexCStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewIntegerFromHexCString');
  late final _Dart_NewIntegerFromHexCString = _Dart_NewIntegerFromHexCStringPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  /// Gets the value of an Integer.
  ///
  /// The integer must fit into a 64-bit signed integer, otherwise an error occurs.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToInt64(
    Object integer,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _Dart_IntegerToInt64(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Int64>)>>('Dart_IntegerToInt64');
  late final _Dart_IntegerToInt64 = _Dart_IntegerToInt64Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Int64>)>();

  /// Gets the value of an Integer.
  ///
  /// The integer must fit into a 64-bit unsigned integer, otherwise an
  /// error occurs.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToUint64(
    Object integer,
    ffi.Pointer<ffi.Uint64> value,
  ) {
    return _Dart_IntegerToUint64(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToUint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint64>)>>('Dart_IntegerToUint64');
  late final _Dart_IntegerToUint64 = _Dart_IntegerToUint64Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint64>)>();

  /// Gets the value of an integer as a hexadecimal C string.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer as a hexadecimal C
  /// string. This C string is scope allocated and is only valid until
  /// the next call to Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToHexCString(
    Object integer,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _Dart_IntegerToHexCString(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToHexCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_IntegerToHexCString');
  late final _Dart_IntegerToHexCString =
      _Dart_IntegerToHexCStringPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Returns a Double with the provided value.
  ///
  /// \param value A double.
  ///
  /// \return The Double object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewDouble(
    double value,
  ) {
    return _Dart_NewDouble(
      value,
    );
  }

  late final _Dart_NewDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Double)>>(
          'Dart_NewDouble');
  late final _Dart_NewDouble =
      _Dart_NewDoublePtr.asFunction<Object Function(double)>();

  /// Gets the value of a Double
  ///
  /// \param double_obj A Double
  /// \param value Returns the value of the Double.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_DoubleValue(
    Object double_obj,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _Dart_DoubleValue(
      double_obj,
      value,
    );
  }

  late final _Dart_DoubleValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Double>)>>('Dart_DoubleValue');
  late final _Dart_DoubleValue = _Dart_DoubleValuePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Double>)>();

  /// Returns a closure of static function 'function_name' in the class 'class_name'
  /// in the exported namespace of specified 'library'.
  ///
  /// \param library Library object
  /// \param cls_type Type object representing a Class
  /// \param function_name Name of the static function in the class
  ///
  /// \return A valid Dart instance if no error occurs during the operation.
  Object Dart_GetStaticMethodClosure(
    Object library1,
    Object cls_type,
    Object function_name,
  ) {
    return _Dart_GetStaticMethodClosure(
      library1,
      cls_type,
      function_name,
    );
  }

  late final _Dart_GetStaticMethodClosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Handle)>>('Dart_GetStaticMethodClosure');
  late final _Dart_GetStaticMethodClosure = _Dart_GetStaticMethodClosurePtr
      .asFunction<Object Function(Object, Object, Object)>();

  /// Returns the True object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A handle to the True object.
  Object Dart_True() {
    return _Dart_True();
  }

  late final _Dart_TruePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_True');
  late final _Dart_True = _Dart_TruePtr.asFunction<Object Function()>();

  /// Returns the False object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A handle to the False object.
  Object Dart_False() {
    return _Dart_False();
  }

  late final _Dart_FalsePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_False');
  late final _Dart_False = _Dart_FalsePtr.asFunction<Object Function()>();

  /// Returns a Boolean with the provided value.
  ///
  /// \param value true or false.
  ///
  /// \return The Boolean object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewBoolean(
    bool value,
  ) {
    return _Dart_NewBoolean(
      value,
    );
  }

  late final _Dart_NewBooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Bool)>>(
          'Dart_NewBoolean');
  late final _Dart_NewBoolean =
      _Dart_NewBooleanPtr.asFunction<Object Function(bool)>();

  /// Gets the value of a Boolean
  ///
  /// \param boolean_obj A Boolean
  /// \param value Returns the value of the Boolean.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_BooleanValue(
    Object boolean_obj,
    ffi.Pointer<ffi.Bool> value,
  ) {
    return _Dart_BooleanValue(
      boolean_obj,
      value,
    );
  }

  late final _Dart_BooleanValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_BooleanValue');
  late final _Dart_BooleanValue = _Dart_BooleanValuePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Gets the length of a String.
  ///
  /// \param str A String.
  /// \param length Returns the length of the String.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringLength(
    Object str,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringLength(
      str,
      length,
    );
  }

  late final _Dart_StringLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_StringLength');
  late final _Dart_StringLength = _Dart_StringLengthPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Returns a String built from the provided C string
  /// (There is an implicit assumption that the C string passed in contains
  /// UTF-8 encoded characters and '\0' is considered as a termination
  /// character).
  ///
  /// \param value A C String
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromCString(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _Dart_NewStringFromCString(
      str,
    );
  }

  late final _Dart_NewStringFromCStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'Dart_NewStringFromCString');
  late final _Dart_NewStringFromCString = _Dart_NewStringFromCStringPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  /// Returns a String built from an array of UTF-8 encoded characters.
  ///
  /// \param utf8_array An array of UTF-8 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF8(
    ffi.Pointer<ffi.Uint8> utf8_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF8(
      utf8_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('Dart_NewStringFromUTF8');
  late final _Dart_NewStringFromUTF8 = _Dart_NewStringFromUTF8Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Returns a String built from an array of UTF-16 encoded characters.
  ///
  /// \param utf16_array An array of UTF-16 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF16(
    ffi.Pointer<ffi.Uint16> utf16_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF16(
      utf16_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>, ffi.IntPtr)>>('Dart_NewStringFromUTF16');
  late final _Dart_NewStringFromUTF16 = _Dart_NewStringFromUTF16Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Uint16>, int)>();

  /// Returns a String built from an array of UTF-32 encoded characters.
  ///
  /// \param utf32_array An array of UTF-32 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF32(
    ffi.Pointer<ffi.Int32> utf32_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF32(
      utf32_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Int32>, ffi.IntPtr)>>('Dart_NewStringFromUTF32');
  late final _Dart_NewStringFromUTF32 = _Dart_NewStringFromUTF32Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Int32>, int)>();

  /// Returns a String which references an external array of
  /// Latin-1 (ISO-8859-1) encoded characters.
  ///
  /// \param latin1_array Array of Latin-1 encoded characters. This must not move.
  /// \param length The length of the characters array.
  /// \param peer An external pointer to associate with this string.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A callback to be called when this string is finalized.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalLatin1String(
    ffi.Pointer<ffi.Uint8> latin1_array,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalLatin1String(
      latin1_array,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalLatin1StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalLatin1String');
  late final _Dart_NewExternalLatin1String =
      _Dart_NewExternalLatin1StringPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Void>,
              int, Dart_HandleFinalizer)>();

  /// Returns a String which references an external array of UTF-16 encoded
  /// characters.
  ///
  /// \param utf16_array An array of UTF-16 encoded characters. This must not move.
  /// \param length The length of the characters array.
  /// \param peer An external pointer to associate with this string.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A callback to be called when this string is finalized.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalUTF16String(
    ffi.Pointer<ffi.Uint16> utf16_array,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalUTF16String(
      utf16_array,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalUTF16StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalUTF16String');
  late final _Dart_NewExternalUTF16String =
      _Dart_NewExternalUTF16StringPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Void>,
              int, Dart_HandleFinalizer)>();

  /// Gets the C string representation of a String.
  /// (It is a sequence of UTF-8 encoded values with a '\0' termination.)
  ///
  /// \param str A string.
  /// \param cstr Returns the String represented as a C string.
  /// This C string is scope allocated and is only valid until
  /// the next call to Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToCString(
    Object str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cstr,
  ) {
    return _Dart_StringToCString(
      str,
      cstr,
    );
  }

  late final _Dart_StringToCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Dart_StringToCString');
  late final _Dart_StringToCString = _Dart_StringToCStringPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Gets a UTF-8 encoded representation of a String.
  ///
  /// Any unpaired surrogate code points in the string will be converted as
  /// replacement characters (U+FFFD, 0xEF 0xBF 0xBD in UTF-8). If you need
  /// to preserve unpaired surrogates, use the Dart_StringToUTF16 function.
  ///
  /// \param str A string.
  /// \param utf8_array Returns the String represented as UTF-8 code
  /// units.  This UTF-8 array is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param length Used to return the length of the array which was
  /// actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToUTF8(
    Object str,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> utf8_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToUTF8(
      str,
      utf8_array,
      length,
    );
  }

  late final _Dart_StringToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToUTF8');
  late final _Dart_StringToUTF8 = _Dart_StringToUTF8Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the data corresponding to the string object. This function returns
  /// the data only for Latin-1 (ISO-8859-1) string objects. For all other
  /// string objects it returns an error.
  ///
  /// \param str A string.
  /// \param latin1_array An array allocated by the caller, used to return
  /// the string data.
  /// \param length Used to pass in the length of the provided array.
  /// Used to return the length of the array which was actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToLatin1(
    Object str,
    ffi.Pointer<ffi.Uint8> latin1_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToLatin1(
      str,
      latin1_array,
      length,
    );
  }

  late final _Dart_StringToLatin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToLatin1');
  late final _Dart_StringToLatin1 = _Dart_StringToLatin1Ptr.asFunction<
      Object Function(
          Object, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the UTF-16 encoded representation of a string.
  ///
  /// \param str A string.
  /// \param utf16_array An array allocated by the caller, used to return
  /// the array of UTF-16 encoded characters.
  /// \param length Used to pass in the length of the provided array.
  /// Used to return the length of the array which was actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToUTF16(
    Object str,
    ffi.Pointer<ffi.Uint16> utf16_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToUTF16(
      str,
      utf16_array,
      length,
    );
  }

  late final _Dart_StringToUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToUTF16');
  late final _Dart_StringToUTF16 = _Dart_StringToUTF16Ptr.asFunction<
      Object Function(
          Object, ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the storage size in bytes of a String.
  ///
  /// \param str A String.
  /// \param length Returns the storage size in bytes of the String.
  /// This is the size in bytes needed to store the String.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringStorageSize(
    Object str,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    return _Dart_StringStorageSize(
      str,
      size,
    );
  }

  late final _Dart_StringStorageSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_StringStorageSize');
  late final _Dart_StringStorageSize = _Dart_StringStorageSizePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Retrieves some properties associated with a String.
  /// Properties retrieved are:
  /// - character size of the string (one or two byte)
  /// - length of the string
  /// - peer pointer of string if it is an external string.
  /// \param str A String.
  /// \param char_size Returns the character size of the String.
  /// \param str_len Returns the length of the String.
  /// \param peer Returns the peer pointer associated with the String or 0 if
  /// there is no peer pointer for it.
  /// \return Success if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_StringGetProperties(
    Object str,
    ffi.Pointer<ffi.IntPtr> char_size,
    ffi.Pointer<ffi.IntPtr> str_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_StringGetProperties(
      str,
      char_size,
      str_len,
      peer,
    );
  }

  late final _Dart_StringGetPropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('Dart_StringGetProperties');
  late final _Dart_StringGetProperties =
      _Dart_StringGetPropertiesPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Returns a List<dynamic> of the desired length.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewList(
    int length,
  ) {
    return _Dart_NewList(
      length,
    );
  }

  late final _Dart_NewListPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>(
          'Dart_NewList');
  late final _Dart_NewList =
      _Dart_NewListPtr.asFunction<Object Function(int)>();

  /// TODO(bkonyi): convert this to use nullable types once NNBD is enabled.
  /// /**
  ///  * Returns a List of the desired length with the desired legacy element type.
  ///  *
  ///  * \param element_type_id The type of elements of the list.
  ///  * \param length The length of the list.
  ///  *
  ///  * \return The List object if no error occurs. Otherwise returns an error
  ///  * handle.
  ///  */
  Object Dart_NewListOf(
    Dart_CoreType_Id element_type_id,
    int length,
  ) {
    return _Dart_NewListOf(
      element_type_id.value,
      length,
    );
  }

  late final _Dart_NewListOfPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(ffi.UnsignedInt, ffi.IntPtr)>>(
      'Dart_NewListOf');
  late final _Dart_NewListOf =
      _Dart_NewListOfPtr.asFunction<Object Function(int, int)>();

  /// Returns a List of the desired length with the desired element type.
  ///
  /// \param element_type Handle to a nullable type object. E.g., from
  /// Dart_GetType or Dart_GetNullableType.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewListOfType(
    Object element_type,
    int length,
  ) {
    return _Dart_NewListOfType(
      element_type,
      length,
    );
  }

  late final _Dart_NewListOfTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>(
          'Dart_NewListOfType');
  late final _Dart_NewListOfType =
      _Dart_NewListOfTypePtr.asFunction<Object Function(Object, int)>();

  /// Returns a List of the desired length with the desired element type, filled
  /// with the provided object.
  ///
  /// \param element_type Handle to a type object. E.g., from Dart_GetType.
  ///
  /// \param fill_object Handle to an object of type 'element_type' that will be
  /// used to populate the list. This parameter can only be Dart_Null() if the
  /// length of the list is 0 or 'element_type' is a nullable type.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewListOfTypeFilled(
    Object element_type,
    Object fill_object,
    int length,
  ) {
    return _Dart_NewListOfTypeFilled(
      element_type,
      fill_object,
      length,
    );
  }

  late final _Dart_NewListOfTypeFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Handle, ffi.IntPtr)>>('Dart_NewListOfTypeFilled');
  late final _Dart_NewListOfTypeFilled = _Dart_NewListOfTypeFilledPtr
      .asFunction<Object Function(Object, Object, int)>();

  /// Gets the length of a List.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param length Returns the length of the List.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ListLength(
    Object list,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_ListLength(
      list,
      length,
    );
  }

  late final _Dart_ListLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_ListLength');
  late final _Dart_ListLength = _Dart_ListLengthPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the Object at some index of a List.
  ///
  /// If the index is out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param index A valid index into the List.
  ///
  /// \return The Object in the List at the specified index if no error
  /// occurs. Otherwise returns an error handle.
  Object Dart_ListGetAt(
    Object list,
    int index,
  ) {
    return _Dart_ListGetAt(
      list,
      index,
    );
  }

  late final _Dart_ListGetAtPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>(
          'Dart_ListGetAt');
  late final _Dart_ListGetAt =
      _Dart_ListGetAtPtr.asFunction<Object Function(Object, int)>();

  /// Gets a range of Objects from a List.
  ///
  /// If any of the requested index values are out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param offset The offset of the first item to get.
  /// \param length The number of items to get.
  /// \param result A pointer to fill with the objects.
  ///
  /// \return Success if no error occurs during the operation.
  Object Dart_ListGetRange(
    Object list,
    int offset,
    int length,
    ffi.Pointer<ffi.Handle> result,
  ) {
    return _Dart_ListGetRange(
      list,
      offset,
      length,
      result,
    );
  }

  late final _Dart_ListGetRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_ListGetRange');
  late final _Dart_ListGetRange = _Dart_ListGetRangePtr.asFunction<
      Object Function(Object, int, int, ffi.Pointer<ffi.Handle>)>();

  /// Sets the Object at some index of a List.
  ///
  /// If the index is out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param array A List.
  /// \param index A valid index into the List.
  /// \param value The Object to put in the List.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ListSetAt(
    Object list,
    int index,
    Object value,
  ) {
    return _Dart_ListSetAt(
      list,
      index,
      value,
    );
  }

  late final _Dart_ListSetAtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.IntPtr, ffi.Handle)>>('Dart_ListSetAt');
  late final _Dart_ListSetAt =
      _Dart_ListSetAtPtr.asFunction<Object Function(Object, int, Object)>();

  /// May generate an unhandled exception error.
  Object Dart_ListGetAsBytes(
    Object list,
    int offset,
    ffi.Pointer<ffi.Uint8> native_array,
    int length,
  ) {
    return _Dart_ListGetAsBytes(
      list,
      offset,
      native_array,
      length,
    );
  }

  late final _Dart_ListGetAsBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_ListGetAsBytes');
  late final _Dart_ListGetAsBytes = _Dart_ListGetAsBytesPtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// May generate an unhandled exception error.
  Object Dart_ListSetAsBytes(
    Object list,
    int offset,
    ffi.Pointer<ffi.Uint8> native_array,
    int length,
  ) {
    return _Dart_ListSetAsBytes(
      list,
      offset,
      native_array,
      length,
    );
  }

  late final _Dart_ListSetAsBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_ListSetAsBytes');
  late final _Dart_ListSetAsBytes = _Dart_ListSetAsBytesPtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Gets the Object at some key of a Map.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  /// \param key An Object.
  ///
  /// \return The value in the map at the specified key, null if the map does not
  /// contain the key, or an error handle.
  Object Dart_MapGetAt(
    Object map,
    Object key,
  ) {
    return _Dart_MapGetAt(
      map,
      key,
    );
  }

  late final _Dart_MapGetAtPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_MapGetAt');
  late final _Dart_MapGetAt =
      _Dart_MapGetAtPtr.asFunction<Object Function(Object, Object)>();

  /// Returns whether the Map contains a given key.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  ///
  /// \return A handle on a boolean indicating whether map contains the key.
  /// Otherwise returns an error handle.
  Object Dart_MapContainsKey(
    Object map,
    Object key,
  ) {
    return _Dart_MapContainsKey(
      map,
      key,
    );
  }

  late final _Dart_MapContainsKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_MapContainsKey');
  late final _Dart_MapContainsKey =
      _Dart_MapContainsKeyPtr.asFunction<Object Function(Object, Object)>();

  /// Gets the list of keys of a Map.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  ///
  /// \return The list of key Objects if no error occurs. Otherwise returns an
  /// error handle.
  Object Dart_MapKeys(
    Object map,
  ) {
    return _Dart_MapKeys(
      map,
    );
  }

  late final _Dart_MapKeysPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_MapKeys');
  late final _Dart_MapKeys =
      _Dart_MapKeysPtr.asFunction<Object Function(Object)>();

  /// Return type if this object is a TypedData object.
  ///
  /// \return kInvalid if the object is not a TypedData object or the appropriate
  /// Dart_TypedData_Type.
  Dart_TypedData_Type Dart_GetTypeOfTypedData(
    Object object,
  ) {
    return Dart_TypedData_Type.fromValue(_Dart_GetTypeOfTypedData(
      object,
    ));
  }

  late final _Dart_GetTypeOfTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Handle)>>(
          'Dart_GetTypeOfTypedData');
  late final _Dart_GetTypeOfTypedData =
      _Dart_GetTypeOfTypedDataPtr.asFunction<int Function(Object)>();

  /// Return type if this object is an external TypedData object.
  ///
  /// \return kInvalid if the object is not an external TypedData object or
  /// the appropriate Dart_TypedData_Type.
  Dart_TypedData_Type Dart_GetTypeOfExternalTypedData(
    Object object,
  ) {
    return Dart_TypedData_Type.fromValue(_Dart_GetTypeOfExternalTypedData(
      object,
    ));
  }

  late final _Dart_GetTypeOfExternalTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Handle)>>(
          'Dart_GetTypeOfExternalTypedData');
  late final _Dart_GetTypeOfExternalTypedData =
      _Dart_GetTypeOfExternalTypedDataPtr.asFunction<int Function(Object)>();

  /// Returns a TypedData object of the desired length and type.
  ///
  /// \param type The type of the TypedData object.
  /// \param length The length of the TypedData object (length in type units).
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewTypedData(
    Dart_TypedData_Type type,
    int length,
  ) {
    return _Dart_NewTypedData(
      type.value,
      length,
    );
  }

  late final _Dart_NewTypedDataPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(ffi.UnsignedInt, ffi.IntPtr)>>(
      'Dart_NewTypedData');
  late final _Dart_NewTypedData =
      _Dart_NewTypedDataPtr.asFunction<Object Function(int, int)>();

  /// Returns a TypedData object which references an external data array.
  ///
  /// \param type The type of the data array.
  /// \param data A data array. This array must not move.
  /// \param length The length of the data array (length in type units).
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalTypedData(
    Dart_TypedData_Type type,
    ffi.Pointer<ffi.Void> data,
    int length,
  ) {
    return _Dart_NewExternalTypedData(
      type.value,
      data,
      length,
    );
  }

  late final _Dart_NewExternalTypedDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('Dart_NewExternalTypedData');
  late final _Dart_NewExternalTypedData = _Dart_NewExternalTypedDataPtr
      .asFunction<Object Function(int, ffi.Pointer<ffi.Void>, int)>();

  /// Returns a TypedData object which references an external data array.
  ///
  /// \param type The type of the data array.
  /// \param data A data array. This array must not move.
  /// \param length The length of the data array (length in type units).
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalTypedDataWithFinalizer(
    Dart_TypedData_Type type,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalTypedDataWithFinalizer(
      type.value,
      data,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalTypedDataWithFinalizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalTypedDataWithFinalizer');
  late final _Dart_NewExternalTypedDataWithFinalizer =
      _Dart_NewExternalTypedDataWithFinalizerPtr.asFunction<
          Object Function(int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Returns a ByteBuffer object for the typed data.
  ///
  /// \param type_data The TypedData object.
  ///
  /// \return The ByteBuffer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewByteBuffer(
    Object typed_data,
  ) {
    return _Dart_NewByteBuffer(
      typed_data,
    );
  }

  late final _Dart_NewByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewByteBuffer');
  late final _Dart_NewByteBuffer =
      _Dart_NewByteBufferPtr.asFunction<Object Function(Object)>();

  /// Acquires access to the internal data address of a TypedData object.
  ///
  /// \param object The typed data object whose internal data address is to
  /// be accessed.
  /// \param type The type of the object is returned here.
  /// \param data The internal data address is returned here.
  /// \param len Size of the typed array is returned here.
  ///
  /// Notes:
  /// When the internal address of the object is acquired any calls to a
  /// Dart API function that could potentially allocate an object or run
  /// any Dart code will return an error.
  ///
  /// Any Dart API functions for accessing the data should not be called
  /// before the corresponding release. In particular, the object should
  /// not be acquired again before its release. This leads to undefined
  /// behavior.
  ///
  /// \return Success if the internal data address is acquired successfully.
  /// Otherwise, returns an error handle.
  Object Dart_TypedDataAcquireData(
    Object object,
    ffi.Pointer<ffi.UnsignedInt> type,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> len,
  ) {
    return _Dart_TypedDataAcquireData(
      object,
      type,
      data,
      len,
    );
  }

  late final _Dart_TypedDataAcquireDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_TypedDataAcquireData');
  late final _Dart_TypedDataAcquireData =
      _Dart_TypedDataAcquireDataPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.IntPtr>)>();

  /// Releases access to the internal data address that was acquired earlier using
  /// Dart_TypedDataAcquireData.
  ///
  /// \param object The typed data object whose internal data address is to be
  /// released.
  ///
  /// \return Success if the internal data address is released successfully.
  /// Otherwise, returns an error handle.
  Object Dart_TypedDataReleaseData(
    Object object,
  ) {
    return _Dart_TypedDataReleaseData(
      object,
    );
  }

  late final _Dart_TypedDataReleaseDataPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypedDataReleaseData');
  late final _Dart_TypedDataReleaseData =
      _Dart_TypedDataReleaseDataPtr.asFunction<Object Function(Object)>();

  /// Returns the TypedData object associated with the ByteBuffer object.
  ///
  /// \param byte_buffer The ByteBuffer object.
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_GetDataFromByteBuffer(
    Object byte_buffer,
  ) {
    return _Dart_GetDataFromByteBuffer(
      byte_buffer,
    );
  }

  late final _Dart_GetDataFromByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_GetDataFromByteBuffer');
  late final _Dart_GetDataFromByteBuffer =
      _Dart_GetDataFromByteBufferPtr.asFunction<Object Function(Object)>();

  /// Invokes a constructor, creating a new object.
  ///
  /// This function allows hidden constructors (constructors with leading
  /// underscores) to be called.
  ///
  /// \param type Type of object to be constructed.
  /// \param constructor_name The name of the constructor to invoke.  Use
  /// Dart_Null() or Dart_EmptyString() to invoke the unnamed constructor.
  /// This name should not include the name of the class.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the constructor.
  ///
  /// \return If the constructor is called and completes successfully,
  /// then the new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_New(
    Object type,
    Object constructor_name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_New(
      type,
      constructor_name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_New');
  late final _Dart_New = _Dart_NewPtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Allocate a new object without invoking a constructor.
  ///
  /// \param type The type of an object to be allocated.
  ///
  /// \return The new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_Allocate(
    Object type,
  ) {
    return _Dart_Allocate(
      type,
    );
  }

  late final _Dart_AllocatePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_Allocate');
  late final _Dart_Allocate =
      _Dart_AllocatePtr.asFunction<Object Function(Object)>();

  /// Allocate a new object without invoking a constructor, and sets specified
  /// native fields.
  ///
  /// \param type The type of an object to be allocated.
  /// \param num_native_fields The number of native fields to set.
  /// \param native_fields An array containing the value of native fields.
  ///
  /// \return The new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_AllocateWithNativeFields(
    Object type,
    int num_native_fields,
    ffi.Pointer<ffi.IntPtr> native_fields,
  ) {
    return _Dart_AllocateWithNativeFields(
      type,
      num_native_fields,
      native_fields,
    );
  }

  late final _Dart_AllocateWithNativeFieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_AllocateWithNativeFields');
  late final _Dart_AllocateWithNativeFields = _Dart_AllocateWithNativeFieldsPtr
      .asFunction<Object Function(Object, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Invokes a method or function.
  ///
  /// The 'target' parameter may be an object, type, or library.  If
  /// 'target' is an object, then this function will invoke an instance
  /// method.  If 'target' is a type, then this function will invoke a
  /// static method.  If 'target' is a library, then this function will
  /// invoke a top-level function from that library.
  /// NOTE: This API call cannot be used to invoke methods of a type object.
  ///
  /// This function ignores visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param target An object, type, or library.
  /// \param name The name of the function or method to invoke.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the function.
  ///
  /// \return If the function or method is called and completes
  /// successfully, then the return value is returned. If an error
  /// occurs during execution, then an error handle is returned.
  Object Dart_Invoke(
    Object target,
    Object name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_Invoke(
      target,
      name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_Invoke');
  late final _Dart_Invoke = _Dart_InvokePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Invokes a Closure with the given arguments.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return If no error occurs during execution, then the result of
  /// invoking the closure is returned. If an error occurs during
  /// execution, then an error handle is returned.
  Object Dart_InvokeClosure(
    Object closure,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_InvokeClosure(
      closure,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokeClosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_InvokeClosure');
  late final _Dart_InvokeClosure = _Dart_InvokeClosurePtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Invokes a Generative Constructor on an object that was previously
  /// allocated using Dart_Allocate/Dart_AllocateWithNativeFields.
  ///
  /// The 'target' parameter must be an object.
  ///
  /// This function ignores visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param target An object.
  /// \param name The name of the constructor to invoke.
  /// Use Dart_Null() or Dart_EmptyString() to invoke the unnamed constructor.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the function.
  ///
  /// \return If the constructor is called and completes
  /// successfully, then the object is returned. If an error
  /// occurs during execution, then an error handle is returned.
  Object Dart_InvokeConstructor(
    Object object,
    Object name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_InvokeConstructor(
      object,
      name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokeConstructorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_InvokeConstructor');
  late final _Dart_InvokeConstructor = _Dart_InvokeConstructorPtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Gets the value of a field.
  ///
  /// The 'container' parameter may be an object, type, or library.  If
  /// 'container' is an object, then this function will access an
  /// instance field.  If 'container' is a type, then this function will
  /// access a static field.  If 'container' is a library, then this
  /// function will access a top-level variable.
  /// NOTE: This API call cannot be used to access fields of a type object.
  ///
  /// This function ignores field visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param container An object, type, or library.
  /// \param name A field name.
  ///
  /// \return If no error occurs, then the value of the field is
  /// returned. Otherwise an error handle is returned.
  Object Dart_GetField(
    Object container,
    Object name,
  ) {
    return _Dart_GetField(
      container,
      name,
    );
  }

  late final _Dart_GetFieldPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_GetField');
  late final _Dart_GetField =
      _Dart_GetFieldPtr.asFunction<Object Function(Object, Object)>();

  /// Sets the value of a field.
  ///
  /// The 'container' parameter may actually be an object, type, or
  /// library.  If 'container' is an object, then this function will
  /// access an instance field.  If 'container' is a type, then this
  /// function will access a static field.  If 'container' is a library,
  /// then this function will access a top-level variable.
  /// NOTE: This API call cannot be used to access fields of a type object.
  ///
  /// This function ignores field visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param container An object, type, or library.
  /// \param name A field name.
  /// \param value The new field value.
  ///
  /// \return A valid handle if no error occurs.
  Object Dart_SetField(
    Object container,
    Object name,
    Object value,
  ) {
    return _Dart_SetField(
      container,
      name,
      value,
    );
  }

  late final _Dart_SetFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Handle, ffi.Handle)>>('Dart_SetField');
  late final _Dart_SetField =
      _Dart_SetFieldPtr.asFunction<Object Function(Object, Object, Object)>();

  /// Throws an exception.
  ///
  /// This function causes a Dart language exception to be thrown. This
  /// will proceed in the standard way, walking up Dart frames until an
  /// appropriate 'catch' block is found, executing 'finally' blocks,
  /// etc.
  ///
  /// If an error handle is passed into this function, the error is
  /// propagated immediately.  See Dart_PropagateError for a discussion
  /// of error propagation.
  ///
  /// If successful, this function does not return. Note that this means
  /// that the destructors of any stack-allocated C++ objects will not be
  /// called. If there are no Dart frames on the stack, an error occurs.
  ///
  /// \return An error handle if the exception was not thrown.
  /// Otherwise the function does not return.
  Object Dart_ThrowException(
    Object exception,
  ) {
    return _Dart_ThrowException(
      exception,
    );
  }

  late final _Dart_ThrowExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ThrowException');
  late final _Dart_ThrowException =
      _Dart_ThrowExceptionPtr.asFunction<Object Function(Object)>();

  /// Rethrows an exception.
  ///
  /// Rethrows an exception, unwinding all dart frames on the stack. If
  /// successful, this function does not return. Note that this means
  /// that the destructors of any stack-allocated C++ objects will not be
  /// called. If there are no Dart frames on the stack, an error occurs.
  ///
  /// \return An error handle if the exception was not thrown.
  /// Otherwise the function does not return.
  Object Dart_ReThrowException(
    Object exception,
    Object stacktrace,
  ) {
    return _Dart_ReThrowException(
      exception,
      stacktrace,
    );
  }

  late final _Dart_ReThrowExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_ReThrowException');
  late final _Dart_ReThrowException =
      _Dart_ReThrowExceptionPtr.asFunction<Object Function(Object, Object)>();

  /// Gets the number of native instance fields in an object.
  Object Dart_GetNativeInstanceFieldCount(
    Object obj,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _Dart_GetNativeInstanceFieldCount(
      obj,
      count,
    );
  }

  late final _Dart_GetNativeInstanceFieldCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Int>)>>('Dart_GetNativeInstanceFieldCount');
  late final _Dart_GetNativeInstanceFieldCount =
      _Dart_GetNativeInstanceFieldCountPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Int>)>();

  /// Gets the value of a native field.
  ///
  /// TODO(turnidge): Document.
  Object Dart_GetNativeInstanceField(
    Object obj,
    int index,
    ffi.Pointer<ffi.IntPtr> value,
  ) {
    return _Dart_GetNativeInstanceField(
      obj,
      index,
      value,
    );
  }

  late final _Dart_GetNativeInstanceFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeInstanceField');
  late final _Dart_GetNativeInstanceField = _Dart_GetNativeInstanceFieldPtr
      .asFunction<Object Function(Object, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Sets the value of a native field.
  ///
  /// TODO(turnidge): Document.
  Object Dart_SetNativeInstanceField(
    Object obj,
    int index,
    int value,
  ) {
    return _Dart_SetNativeInstanceField(
      obj,
      index,
      value,
    );
  }

  late final _Dart_SetNativeInstanceFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Int, ffi.IntPtr)>>('Dart_SetNativeInstanceField');
  late final _Dart_SetNativeInstanceField = _Dart_SetNativeInstanceFieldPtr
      .asFunction<Object Function(Object, int, int)>();

  /// Extracts current isolate group data from the native arguments structure.
  ffi.Pointer<ffi.Void> Dart_GetNativeIsolateGroupData(
    Dart_NativeArguments args,
  ) {
    return _Dart_GetNativeIsolateGroupData(
      args,
    );
  }

  late final _Dart_GetNativeIsolateGroupDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              Dart_NativeArguments)>>('Dart_GetNativeIsolateGroupData');
  late final _Dart_GetNativeIsolateGroupData =
      _Dart_GetNativeIsolateGroupDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(Dart_NativeArguments)>();

  /// Gets the native arguments based on the types passed in and populates
  /// the passed arguments buffer with appropriate native values.
  ///
  /// \param args the Native arguments block passed into the native call.
  /// \param num_arguments length of argument descriptor array and argument
  /// values array passed in.
  /// \param arg_descriptors an array that describes the arguments that
  /// need to be retrieved. For each argument to be retrieved the descriptor
  /// contains the argument number (0, 1 etc.) and the argument type
  /// described using Dart_NativeArgument_Type, e.g:
  /// DART_NATIVE_ARG_DESCRIPTOR(Dart_NativeArgument_kBool, 1) indicates
  /// that the first argument is to be retrieved and it should be a boolean.
  /// \param arg_values array into which the native arguments need to be
  /// extracted into, the array is allocated by the caller (it could be
  /// stack allocated to avoid the malloc/free performance overhead).
  ///
  /// \return Success if all the arguments could be extracted correctly,
  /// returns an error handle if there were any errors while extracting the
  /// arguments (mismatched number of arguments, incorrect types, etc.).
  Object Dart_GetNativeArguments(
    Dart_NativeArguments args,
    int num_arguments,
    ffi.Pointer<Dart_NativeArgument_Descriptor> arg_descriptors,
    ffi.Pointer<Dart_NativeArgument_Value> arg_values,
  ) {
    return _Dart_GetNativeArguments(
      args,
      num_arguments,
      arg_descriptors,
      arg_values,
    );
  }

  late final _Dart_GetNativeArgumentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments,
                  ffi.Int,
                  ffi.Pointer<Dart_NativeArgument_Descriptor>,
                  ffi.Pointer<Dart_NativeArgument_Value>)>>(
      'Dart_GetNativeArguments');
  late final _Dart_GetNativeArguments = _Dart_GetNativeArgumentsPtr.asFunction<
      Object Function(
          Dart_NativeArguments,
          int,
          ffi.Pointer<Dart_NativeArgument_Descriptor>,
          ffi.Pointer<Dart_NativeArgument_Value>)>();

  /// Gets the native argument at some index.
  Object Dart_GetNativeArgument(
    Dart_NativeArguments args,
    int index,
  ) {
    return _Dart_GetNativeArgument(
      args,
      index,
    );
  }

  late final _Dart_GetNativeArgumentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Handle Function(Dart_NativeArguments, ffi.Int)>>(
      'Dart_GetNativeArgument');
  late final _Dart_GetNativeArgument = _Dart_GetNativeArgumentPtr.asFunction<
      Object Function(Dart_NativeArguments, int)>();

  /// Gets the number of native arguments.
  int Dart_GetNativeArgumentCount(
    Dart_NativeArguments args,
  ) {
    return _Dart_GetNativeArgumentCount(
      args,
    );
  }

  late final _Dart_GetNativeArgumentCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Dart_NativeArguments)>>(
          'Dart_GetNativeArgumentCount');
  late final _Dart_GetNativeArgumentCount = _Dart_GetNativeArgumentCountPtr
      .asFunction<int Function(Dart_NativeArguments)>();

  /// Gets all the native fields of the native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param num_fields size of the intptr_t array 'field_values' passed in.
  /// \param field_values intptr_t array in which native field values are returned.
  /// \return Success if the native fields where copied in successfully. Otherwise
  /// returns an error handle. On success the native field values are copied
  /// into the 'field_values' array, if the argument at 'arg_index' is a
  /// null object then 0 is copied as the native field values into the
  /// 'field_values' array.
  Object Dart_GetNativeFieldsOfArgument(
    Dart_NativeArguments args,
    int arg_index,
    int num_fields,
    ffi.Pointer<ffi.IntPtr> field_values,
  ) {
    return _Dart_GetNativeFieldsOfArgument(
      args,
      arg_index,
      num_fields,
      field_values,
    );
  }

  late final _Dart_GetNativeFieldsOfArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeFieldsOfArgument');
  late final _Dart_GetNativeFieldsOfArgument =
      _Dart_GetNativeFieldsOfArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the native field of the receiver.
  Object Dart_GetNativeReceiver(
    Dart_NativeArguments args,
    ffi.Pointer<ffi.IntPtr> value,
  ) {
    return _Dart_GetNativeReceiver(
      args,
      value,
    );
  }

  late final _Dart_GetNativeReceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeReceiver');
  late final _Dart_GetNativeReceiver = _Dart_GetNativeReceiverPtr.asFunction<
      Object Function(Dart_NativeArguments, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets a string native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param peer Returns the peer pointer if the string argument has one.
  /// \return Success if the string argument has a peer, if it does not
  /// have a peer then the String object is returned. Otherwise returns
  /// an error handle (argument is not a String object).
  Object Dart_GetNativeStringArgument(
    Dart_NativeArguments args,
    int arg_index,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_GetNativeStringArgument(
      args,
      arg_index,
      peer,
    );
  }

  late final _Dart_GetNativeStringArgumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(Dart_NativeArguments, ffi.Int,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'Dart_GetNativeStringArgument');
  late final _Dart_GetNativeStringArgument =
      _Dart_GetNativeStringArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Gets an integer native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param value Returns the integer value if the argument is an Integer.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeIntegerArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _Dart_GetNativeIntegerArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeIntegerArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int,
              ffi.Pointer<ffi.Int64>)>>('Dart_GetNativeIntegerArgument');
  late final _Dart_GetNativeIntegerArgument =
      _Dart_GetNativeIntegerArgumentPtr.asFunction<
          Object Function(Dart_NativeArguments, int, ffi.Pointer<ffi.Int64>)>();

  /// Gets a boolean native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param value Returns the boolean value if the argument is a Boolean.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeBooleanArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Bool> value,
  ) {
    return _Dart_GetNativeBooleanArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeBooleanArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int,
              ffi.Pointer<ffi.Bool>)>>('Dart_GetNativeBooleanArgument');
  late final _Dart_GetNativeBooleanArgument =
      _Dart_GetNativeBooleanArgumentPtr.asFunction<
          Object Function(Dart_NativeArguments, int, ffi.Pointer<ffi.Bool>)>();

  /// Gets a double native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param value Returns the double value if the argument is a double.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeDoubleArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _Dart_GetNativeDoubleArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeDoubleArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, ffi.Int,
              ffi.Pointer<ffi.Double>)>>('Dart_GetNativeDoubleArgument');
  late final _Dart_GetNativeDoubleArgument =
      _Dart_GetNativeDoubleArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, ffi.Pointer<ffi.Double>)>();

  /// Sets the return value for a native function.
  ///
  /// If retval is an Error handle, then error will be propagated once
  /// the native functions exits. See Dart_PropagateError for a
  /// discussion of how different types of errors are propagated.
  void Dart_SetReturnValue(
    Dart_NativeArguments args,
    Object retval,
  ) {
    return _Dart_SetReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetReturnValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Dart_NativeArguments, ffi.Handle)>>(
      'Dart_SetReturnValue');
  late final _Dart_SetReturnValue = _Dart_SetReturnValuePtr.asFunction<
      void Function(Dart_NativeArguments, Object)>();

  void Dart_SetWeakHandleReturnValue(
    Dart_NativeArguments args,
    Dart_WeakPersistentHandle rval,
  ) {
    return _Dart_SetWeakHandleReturnValue(
      args,
      rval,
    );
  }

  late final _Dart_SetWeakHandleReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_NativeArguments,
              Dart_WeakPersistentHandle)>>('Dart_SetWeakHandleReturnValue');
  late final _Dart_SetWeakHandleReturnValue =
      _Dart_SetWeakHandleReturnValuePtr.asFunction<
          void Function(Dart_NativeArguments, Dart_WeakPersistentHandle)>();

  void Dart_SetBooleanReturnValue(
    Dart_NativeArguments args,
    bool retval,
  ) {
    return _Dart_SetBooleanReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetBooleanReturnValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Dart_NativeArguments, ffi.Bool)>>(
      'Dart_SetBooleanReturnValue');
  late final _Dart_SetBooleanReturnValue = _Dart_SetBooleanReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, bool)>();

  void Dart_SetIntegerReturnValue(
    Dart_NativeArguments args,
    int retval,
  ) {
    return _Dart_SetIntegerReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetIntegerReturnValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Dart_NativeArguments, ffi.Int64)>>(
      'Dart_SetIntegerReturnValue');
  late final _Dart_SetIntegerReturnValue = _Dart_SetIntegerReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, int)>();

  void Dart_SetDoubleReturnValue(
    Dart_NativeArguments args,
    double retval,
  ) {
    return _Dart_SetDoubleReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetDoubleReturnValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Dart_NativeArguments, ffi.Double)>>(
      'Dart_SetDoubleReturnValue');
  late final _Dart_SetDoubleReturnValue = _Dart_SetDoubleReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, double)>();

  /// Sets the environment callback for the current isolate. This
  /// callback is used to lookup environment values by name in the
  /// current environment. This enables the embedder to supply values for
  /// the const constructors bool.fromEnvironment, int.fromEnvironment
  /// and String.fromEnvironment.
  Object Dart_SetEnvironmentCallback(
    Dart_EnvironmentCallback callback,
  ) {
    return _Dart_SetEnvironmentCallback(
      callback,
    );
  }

  late final _Dart_SetEnvironmentCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_EnvironmentCallback)>>(
      'Dart_SetEnvironmentCallback');
  late final _Dart_SetEnvironmentCallback = _Dart_SetEnvironmentCallbackPtr
      .asFunction<Object Function(Dart_EnvironmentCallback)>();

  /// Sets the callback used to resolve native functions for a library.
  ///
  /// \param library A library.
  /// \param resolver A native entry resolver.
  ///
  /// \return A valid handle if the native resolver was set successfully.
  Object Dart_SetNativeResolver(
    Object library1,
    Dart_NativeEntryResolver resolver,
    Dart_NativeEntrySymbol symbol,
  ) {
    return _Dart_SetNativeResolver(
      library1,
      resolver,
      symbol,
    );
  }

  late final _Dart_SetNativeResolverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, Dart_NativeEntryResolver,
              Dart_NativeEntrySymbol)>>('Dart_SetNativeResolver');
  late final _Dart_SetNativeResolver = _Dart_SetNativeResolverPtr.asFunction<
      Object Function(
          Object, Dart_NativeEntryResolver, Dart_NativeEntrySymbol)>();

  /// Returns the callback used to resolve native functions for a library.
  ///
  /// \param library A library.
  /// \param resolver a pointer to a Dart_NativeEntryResolver
  ///
  /// \return A valid handle if the library was found.
  Object Dart_GetNativeResolver(
    Object library1,
    ffi.Pointer<Dart_NativeEntryResolver> resolver,
  ) {
    return _Dart_GetNativeResolver(
      library1,
      resolver,
    );
  }

  late final _Dart_GetNativeResolverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<Dart_NativeEntryResolver>)>>(
      'Dart_GetNativeResolver');
  late final _Dart_GetNativeResolver = _Dart_GetNativeResolverPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_NativeEntryResolver>)>();

  /// Returns the callback used to resolve native function symbols for a library.
  ///
  /// \param library A library.
  /// \param resolver a pointer to a Dart_NativeEntrySymbol.
  ///
  /// \return A valid handle if the library was found.
  Object Dart_GetNativeSymbol(
    Object library1,
    ffi.Pointer<Dart_NativeEntrySymbol> resolver,
  ) {
    return _Dart_GetNativeSymbol(
      library1,
      resolver,
    );
  }

  late final _Dart_GetNativeSymbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<Dart_NativeEntrySymbol>)>>('Dart_GetNativeSymbol');
  late final _Dart_GetNativeSymbol = _Dart_GetNativeSymbolPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_NativeEntrySymbol>)>();

  /// Sets the callback used to resolve FFI native functions for a library.
  /// The resolved functions are expected to be a C function pointer of the
  /// correct signature (as specified in the `@FfiNative<NFT>()` function
  /// annotation in Dart code).
  ///
  /// NOTE: This is an experimental feature and might change in the future.
  ///
  /// \param library A library.
  /// \param resolver A native function resolver.
  ///
  /// \return A valid handle if the native resolver was set successfully.
  Object Dart_SetFfiNativeResolver(
    Object library1,
    Dart_FfiNativeResolver resolver,
  ) {
    return _Dart_SetFfiNativeResolver(
      library1,
      resolver,
    );
  }

  late final _Dart_SetFfiNativeResolverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              Dart_FfiNativeResolver)>>('Dart_SetFfiNativeResolver');
  late final _Dart_SetFfiNativeResolver = _Dart_SetFfiNativeResolverPtr
      .asFunction<Object Function(Object, Dart_FfiNativeResolver)>();

  /// Sets library tag handler for the current isolate. This handler is
  /// used to handle the various tags encountered while loading libraries
  /// or scripts in the isolate.
  ///
  /// \param handler Handler code to be used for handling the various tags
  /// encountered while loading libraries or scripts in the isolate.
  ///
  /// \return If no error occurs, the handler is set for the isolate.
  /// Otherwise an error handle is returned.
  ///
  /// TODO(turnidge): Document.
  Object Dart_SetLibraryTagHandler(
    Dart_LibraryTagHandler handler,
  ) {
    return _Dart_SetLibraryTagHandler(
      handler,
    );
  }

  late final _Dart_SetLibraryTagHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(Dart_LibraryTagHandler)>>(
          'Dart_SetLibraryTagHandler');
  late final _Dart_SetLibraryTagHandler = _Dart_SetLibraryTagHandlerPtr
      .asFunction<Object Function(Dart_LibraryTagHandler)>();

  /// Sets the deferred load handler for the current isolate. This handler is
  /// used to handle loading deferred imports in an AppJIT or AppAOT program.
  Object Dart_SetDeferredLoadHandler(
    Dart_DeferredLoadHandler handler,
  ) {
    return _Dart_SetDeferredLoadHandler(
      handler,
    );
  }

  late final _Dart_SetDeferredLoadHandlerPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_DeferredLoadHandler)>>(
      'Dart_SetDeferredLoadHandler');
  late final _Dart_SetDeferredLoadHandler = _Dart_SetDeferredLoadHandlerPtr
      .asFunction<Object Function(Dart_DeferredLoadHandler)>();

  /// Notifies the VM that a deferred load completed successfully. This function
  /// will eventually cause the corresponding `prefix.loadLibrary()` futures to
  /// complete.
  ///
  /// Requires the current isolate to be the same current isolate during the
  /// invocation of the Dart_DeferredLoadHandler.
  Object Dart_DeferredLoadComplete(
    int loading_unit_id,
    ffi.Pointer<ffi.Uint8> snapshot_data,
    ffi.Pointer<ffi.Uint8> snapshot_instructions,
  ) {
    return _Dart_DeferredLoadComplete(
      loading_unit_id,
      snapshot_data,
      snapshot_instructions,
    );
  }

  late final _Dart_DeferredLoadCompletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('Dart_DeferredLoadComplete');
  late final _Dart_DeferredLoadComplete =
      _Dart_DeferredLoadCompletePtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Notifies the VM that a deferred load failed. This function
  /// will eventually cause the corresponding `prefix.loadLibrary()` futures to
  /// complete with an error.
  ///
  /// If `transient` is true, future invocations of `prefix.loadLibrary()` will
  /// trigger new load requests. If false, futures invocation will complete with
  /// the same error.
  ///
  /// Requires the current isolate to be the same current isolate during the
  /// invocation of the Dart_DeferredLoadHandler.
  Object Dart_DeferredLoadCompleteError(
    int loading_unit_id,
    ffi.Pointer<ffi.Char> error_message,
    bool transient,
  ) {
    return _Dart_DeferredLoadCompleteError(
      loading_unit_id,
      error_message,
      transient,
    );
  }

  late final _Dart_DeferredLoadCompleteErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.IntPtr, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('Dart_DeferredLoadCompleteError');
  late final _Dart_DeferredLoadCompleteError =
      _Dart_DeferredLoadCompleteErrorPtr.asFunction<
          Object Function(int, ffi.Pointer<ffi.Char>, bool)>();

  /// Canonicalizes a url with respect to some library.
  ///
  /// The url is resolved with respect to the library's url and some url
  /// normalizations are performed.
  ///
  /// This canonicalization function should be sufficient for most
  /// embedders to implement the Dart_kCanonicalizeUrl tag.
  ///
  /// \param base_url The base url relative to which the url is
  /// being resolved.
  /// \param url The url being resolved and canonicalized.  This
  /// parameter is a string handle.
  ///
  /// \return If no error occurs, a String object is returned.  Otherwise
  /// an error handle is returned.
  Object Dart_DefaultCanonicalizeUrl(
    Object base_url,
    Object url,
  ) {
    return _Dart_DefaultCanonicalizeUrl(
      base_url,
      url,
    );
  }

  late final _Dart_DefaultCanonicalizeUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_DefaultCanonicalizeUrl');
  late final _Dart_DefaultCanonicalizeUrl = _Dart_DefaultCanonicalizeUrlPtr
      .asFunction<Object Function(Object, Object)>();

  /// Loads the root library for the current isolate.
  ///
  /// Requires there to be no current root library.
  ///
  /// \param buffer A buffer which contains a kernel binary (see
  /// pkg/kernel/binary.md). Must remain valid until isolate group shutdown.
  /// \param buffer_size Length of the passed in buffer.
  ///
  /// \return A handle to the root library, or an error.
  Object Dart_LoadScriptFromKernel(
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_size,
  ) {
    return _Dart_LoadScriptFromKernel(
      kernel_buffer,
      kernel_size,
    );
  }

  late final _Dart_LoadScriptFromKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_LoadScriptFromKernel');
  late final _Dart_LoadScriptFromKernel = _Dart_LoadScriptFromKernelPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Gets the library for the root script for the current isolate.
  ///
  /// If the root script has not yet been set for the current isolate,
  /// this function returns Dart_Null().  This function never returns an
  /// error handle.
  ///
  /// \return Returns the root Library for the current isolate or Dart_Null().
  Object Dart_RootLibrary() {
    return _Dart_RootLibrary();
  }

  late final _Dart_RootLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_RootLibrary');
  late final _Dart_RootLibrary =
      _Dart_RootLibraryPtr.asFunction<Object Function()>();

  /// Sets the root library for the current isolate.
  ///
  /// \return Returns an error handle if `library` is not a library handle.
  Object Dart_SetRootLibrary(
    Object library1,
  ) {
    return _Dart_SetRootLibrary(
      library1,
    );
  }

  late final _Dart_SetRootLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_SetRootLibrary');
  late final _Dart_SetRootLibrary =
      _Dart_SetRootLibraryPtr.asFunction<Object Function(Object)>();

  /// Lookup or instantiate a legacy type by name and type arguments from a
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetType');
  late final _Dart_GetType = _Dart_GetTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Lookup or instantiate a nullable type by name and type arguments from
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetNullableType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetNullableType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetNullableType');
  late final _Dart_GetNullableType = _Dart_GetNullableTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Lookup or instantiate a non-nullable type by name and type arguments from
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetNonNullableType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetNonNullableType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetNonNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetNonNullableType');
  late final _Dart_GetNonNullableType = _Dart_GetNonNullableTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Creates a nullable version of the provided type.
  ///
  /// \param type The type to be converted to a nullable type.
  ///
  /// \return If no error occurs, a nullable type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_TypeToNullableType(
    Object type,
  ) {
    return _Dart_TypeToNullableType(
      type,
    );
  }

  late final _Dart_TypeToNullableTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypeToNullableType');
  late final _Dart_TypeToNullableType =
      _Dart_TypeToNullableTypePtr.asFunction<Object Function(Object)>();

  /// Creates a non-nullable version of the provided type.
  ///
  /// \param type The type to be converted to a non-nullable type.
  ///
  /// \return If no error occurs, a non-nullable type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_TypeToNonNullableType(
    Object type,
  ) {
    return _Dart_TypeToNonNullableType(
      type,
    );
  }

  late final _Dart_TypeToNonNullableTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypeToNonNullableType');
  late final _Dart_TypeToNonNullableType =
      _Dart_TypeToNonNullableTypePtr.asFunction<Object Function(Object)>();

  /// A type's nullability.
  ///
  /// \param type A Dart type.
  /// \param result An out parameter containing the result of the check. True if
  /// the type is of the specified nullability, false otherwise.
  ///
  /// \return Returns an error handle if type is not of type Type.
  Object Dart_IsNullableType(
    Object type,
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _Dart_IsNullableType(
      type,
      result,
    );
  }

  late final _Dart_IsNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IsNullableType');
  late final _Dart_IsNullableType = _Dart_IsNullableTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  Object Dart_IsNonNullableType(
    Object type,
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _Dart_IsNonNullableType(
      type,
      result,
    );
  }

  late final _Dart_IsNonNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IsNonNullableType');
  late final _Dart_IsNonNullableType = _Dart_IsNonNullableTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  Object Dart_IsLegacyType(
    Object type,
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _Dart_IsLegacyType(
      type,
      result,
    );
  }

  late final _Dart_IsLegacyTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Bool>)>>('Dart_IsLegacyType');
  late final _Dart_IsLegacyType = _Dart_IsLegacyTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Bool>)>();

  /// Lookup a class or interface by name from a Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The name of the class or interface.
  ///
  /// \return If no error occurs, the class or interface is
  /// returned. Otherwise an error handle is returned.
  Object Dart_GetClass(
    Object library1,
    Object class_name,
  ) {
    return _Dart_GetClass(
      library1,
      class_name,
    );
  }

  late final _Dart_GetClassPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_GetClass');
  late final _Dart_GetClass =
      _Dart_GetClassPtr.asFunction<Object Function(Object, Object)>();

  /// Returns an import path to a Library, such as "file:///test.dart" or
  /// "dart:core".
  Object Dart_LibraryUrl(
    Object library1,
  ) {
    return _Dart_LibraryUrl(
      library1,
    );
  }

  late final _Dart_LibraryUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LibraryUrl');
  late final _Dart_LibraryUrl =
      _Dart_LibraryUrlPtr.asFunction<Object Function(Object)>();

  /// Returns a URL from which a Library was loaded.
  Object Dart_LibraryResolvedUrl(
    Object library1,
  ) {
    return _Dart_LibraryResolvedUrl(
      library1,
    );
  }

  late final _Dart_LibraryResolvedUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LibraryResolvedUrl');
  late final _Dart_LibraryResolvedUrl =
      _Dart_LibraryResolvedUrlPtr.asFunction<Object Function(Object)>();

  /// \return An array of libraries.
  Object Dart_GetLoadedLibraries() {
    return _Dart_GetLoadedLibraries();
  }

  late final _Dart_GetLoadedLibrariesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'Dart_GetLoadedLibraries');
  late final _Dart_GetLoadedLibraries =
      _Dart_GetLoadedLibrariesPtr.asFunction<Object Function()>();

  Object Dart_LookupLibrary(
    Object url,
  ) {
    return _Dart_LookupLibrary(
      url,
    );
  }

  late final _Dart_LookupLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LookupLibrary');
  late final _Dart_LookupLibrary =
      _Dart_LookupLibraryPtr.asFunction<Object Function(Object)>();

  /// Report an loading error for the library.
  ///
  /// \param library The library that failed to load.
  /// \param error The Dart error instance containing the load error.
  ///
  /// \return If the VM handles the error, the return value is
  /// a null handle. If it doesn't handle the error, the error
  /// object is returned.
  Object Dart_LibraryHandleError(
    Object library1,
    Object error,
  ) {
    return _Dart_LibraryHandleError(
      library1,
      error,
    );
  }

  late final _Dart_LibraryHandleErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_LibraryHandleError');
  late final _Dart_LibraryHandleError =
      _Dart_LibraryHandleErrorPtr.asFunction<Object Function(Object, Object)>();

  /// Called by the embedder to load a partial program. Does not set the root
  /// library.
  ///
  /// \param buffer A buffer which contains a kernel binary (see
  /// pkg/kernel/binary.md). Must remain valid until isolate shutdown.
  /// \param buffer_size Length of the passed in buffer.
  ///
  /// \return A handle to the main library of the compilation unit, or an error.
  Object Dart_LoadLibraryFromKernel(
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
  ) {
    return _Dart_LoadLibraryFromKernel(
      kernel_buffer,
      kernel_buffer_size,
    );
  }

  late final _Dart_LoadLibraryFromKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_LoadLibraryFromKernel');
  late final _Dart_LoadLibraryFromKernel = _Dart_LoadLibraryFromKernelPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Indicates that all outstanding load requests have been satisfied.
  /// This finalizes all the new classes loaded and optionally completes
  /// deferred library futures.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param complete_futures Specify true if all deferred library
  /// futures should be completed, false otherwise.
  ///
  /// \return Success if all classes have been finalized and deferred library
  /// futures are completed. Otherwise, returns an error.
  Object Dart_FinalizeLoading(
    bool complete_futures,
  ) {
    return _Dart_FinalizeLoading(
      complete_futures,
    );
  }

  late final _Dart_FinalizeLoadingPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Bool)>>(
          'Dart_FinalizeLoading');
  late final _Dart_FinalizeLoading =
      _Dart_FinalizeLoadingPtr.asFunction<Object Function(bool)>();

  /// Returns the value of peer field of 'object' in 'peer'.
  ///
  /// \param object An object.
  /// \param peer An out parameter that returns the value of the peer
  /// field.
  ///
  /// \return Returns an error if 'object' is a subtype of Null, num, or
  /// bool.
  Object Dart_GetPeer(
    Object object,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_GetPeer(
      object,
      peer,
    );
  }

  late final _Dart_GetPeerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('Dart_GetPeer');
  late final _Dart_GetPeer = _Dart_GetPeerPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Sets the value of the peer field of 'object' to the value of
  /// 'peer'.
  ///
  /// \param object An object.
  /// \param peer A value to store in the peer field.
  ///
  /// \return Returns an error if 'object' is a subtype of Null, num, or
  /// bool.
  Object Dart_SetPeer(
    Object object,
    ffi.Pointer<ffi.Void> peer,
  ) {
    return _Dart_SetPeer(
      object,
      peer,
    );
  }

  late final _Dart_SetPeerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Void>)>>('Dart_SetPeer');
  late final _Dart_SetPeer = _Dart_SetPeerPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Void>)>();

  bool Dart_IsKernelIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsKernelIsolate(
      isolate,
    );
  }

  late final _Dart_IsKernelIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Isolate)>>(
          'Dart_IsKernelIsolate');
  late final _Dart_IsKernelIsolate =
      _Dart_IsKernelIsolatePtr.asFunction<bool Function(Dart_Isolate)>();

  bool Dart_KernelIsolateIsRunning() {
    return _Dart_KernelIsolateIsRunning();
  }

  late final _Dart_KernelIsolateIsRunningPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_KernelIsolateIsRunning');
  late final _Dart_KernelIsolateIsRunning =
      _Dart_KernelIsolateIsRunningPtr.asFunction<bool Function()>();

  int Dart_KernelPort() {
    return _Dart_KernelPort();
  }

  late final _Dart_KernelPortPtr =
      _lookup<ffi.NativeFunction<Dart_Port Function()>>('Dart_KernelPort');
  late final _Dart_KernelPort =
      _Dart_KernelPortPtr.asFunction<int Function()>();

  /// Compiles the given `script_uri` to a kernel file.
  ///
  /// \param platform_kernel A buffer containing the kernel of the platform (e.g.
  /// `vm_platform_strong.dill`). The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  ///
  /// \param snapshot_compile Set to `true` when the compilation is for a snapshot.
  /// This is used by the frontend to determine if compilation related information
  /// should be printed to console (e.g., null safety mode).
  ///
  /// \param verbosity Specifies the logging behavior of the kernel compilation
  /// service.
  ///
  /// \return Returns the result of the compilation.
  ///
  /// On a successful compilation the returned [Dart_KernelCompilationResult] has
  /// a status of [Dart_KernelCompilationStatus_Ok] and the `kernel`/`kernel_size`
  /// fields are set. The caller takes ownership of the malloc()ed buffer.
  ///
  /// On a failed compilation the `error` might be set describing the reason for
  /// the failed compilation. The caller takes ownership of the malloc()ed
  /// error.
  ///
  /// Requires there to be a current isolate.
  Dart_KernelCompilationResult Dart_CompileToKernel(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
    bool incremental_compile,
    bool snapshot_compile,
    ffi.Pointer<ffi.Char> package_config,
    Dart_KernelCompilationVerbosityLevel verbosity,
  ) {
    return _Dart_CompileToKernel(
      script_uri,
      platform_kernel,
      platform_kernel_size,
      incremental_compile,
      snapshot_compile,
      package_config,
      verbosity.value,
    );
  }

  late final _Dart_CompileToKernelPtr = _lookup<
      ffi.NativeFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('Dart_CompileToKernel');
  late final _Dart_CompileToKernel = _Dart_CompileToKernelPtr.asFunction<
      Dart_KernelCompilationResult Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          int,
          bool,
          bool,
          ffi.Pointer<ffi.Char>,
          int)>();

  Dart_KernelCompilationResult Dart_KernelListDependencies() {
    return _Dart_KernelListDependencies();
  }

  late final _Dart_KernelListDependenciesPtr =
      _lookup<ffi.NativeFunction<Dart_KernelCompilationResult Function()>>(
          'Dart_KernelListDependencies');
  late final _Dart_KernelListDependencies = _Dart_KernelListDependenciesPtr
      .asFunction<Dart_KernelCompilationResult Function()>();

  /// Sets the kernel buffer which will be used to load Dart SDK sources
  /// dynamically at runtime.
  ///
  /// \param platform_kernel A buffer containing kernel which has sources for the
  /// Dart SDK populated. Note: The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  void Dart_SetDartLibrarySourcesKernel(
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
  ) {
    return _Dart_SetDartLibrarySourcesKernel(
      platform_kernel,
      platform_kernel_size,
    );
  }

  late final _Dart_SetDartLibrarySourcesKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_SetDartLibrarySourcesKernel');
  late final _Dart_SetDartLibrarySourcesKernel =
      _Dart_SetDartLibrarySourcesKernelPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Detect the null safety opt-in status.
  ///
  /// When running from source, it is based on the opt-in status of `script_uri`.
  /// When running from a kernel buffer, it is based on the mode used when
  /// generating `kernel_buffer`.
  /// When running from an appJIT or AOT snapshot, it is based on the mode used
  /// when generating `snapshot_data`.
  ///
  /// \param script_uri Uri of the script that contains the source code
  ///
  /// \param package_config Uri of the package configuration file (either in format
  /// of .packages or .dart_tool/package_config.json) for the null safety
  /// detection to resolve package imports against. If this parameter is not
  /// passed the package resolution of the parent isolate should be used.
  ///
  /// \param original_working_directory current working directory when the VM
  /// process was launched, this is used to correctly resolve the path specified
  /// for package_config.
  ///
  /// \param snapshot_data
  ///
  /// \param snapshot_instructions Buffers containing a snapshot of the
  /// isolate or NULL if no snapshot is provided. If provided, the buffers must
  /// remain valid until the isolate shuts down.
  ///
  /// \param kernel_buffer
  ///
  /// \param kernel_buffer_size A buffer which contains a kernel/DIL program. Must
  /// remain valid until isolate shutdown.
  ///
  /// \return Returns true if the null safety is opted in by the input being
  /// run `script_uri`, `snapshot_data` or `kernel_buffer`.
  bool Dart_DetectNullSafety(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> package_config,
    ffi.Pointer<ffi.Char> original_working_directory,
    ffi.Pointer<ffi.Uint8> snapshot_data,
    ffi.Pointer<ffi.Uint8> snapshot_instructions,
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
  ) {
    return _Dart_DetectNullSafety(
      script_uri,
      package_config,
      original_working_directory,
      snapshot_data,
      snapshot_instructions,
      kernel_buffer,
      kernel_buffer_size,
    );
  }

  late final _Dart_DetectNullSafetyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_DetectNullSafety');
  late final _Dart_DetectNullSafety = _Dart_DetectNullSafetyPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  /// Returns true if isolate is the service isolate.
  ///
  /// \param isolate An isolate
  ///
  /// \return Returns true if 'isolate' is the service isolate.
  bool Dart_IsServiceIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsServiceIsolate(
      isolate,
    );
  }

  late final _Dart_IsServiceIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Isolate)>>(
          'Dart_IsServiceIsolate');
  late final _Dart_IsServiceIsolate =
      _Dart_IsServiceIsolatePtr.asFunction<bool Function(Dart_Isolate)>();

  /// Writes the CPU profile to the timeline as a series of 'instant' events.
  ///
  /// Note that this is an expensive operation.
  ///
  /// \param main_port The main port of the Isolate whose profile samples to write.
  /// \param error An optional error, must be free()ed by caller.
  ///
  /// \return Returns true if the profile is successfully written and false
  /// otherwise.
  bool Dart_WriteProfileToTimeline(
    int main_port,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _Dart_WriteProfileToTimeline(
      main_port,
      error,
    );
  }

  late final _Dart_WriteProfileToTimelinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  Dart_Port, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Dart_WriteProfileToTimeline');
  late final _Dart_WriteProfileToTimeline = _Dart_WriteProfileToTimelinePtr
      .asFunction<bool Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Compiles all functions reachable from entry points and marks
  /// the isolate to disallow future compilation.
  ///
  /// Entry points should be specified using `@pragma("vm:entry-point")`
  /// annotation.
  ///
  /// \return An error handle if a compilation error or runtime error running const
  /// constructors was encountered.
  Object Dart_Precompile() {
    return _Dart_Precompile();
  }

  late final _Dart_PrecompilePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_Precompile');
  late final _Dart_Precompile =
      _Dart_PrecompilePtr.asFunction<Object Function()>();

  Object Dart_LoadingUnitLibraryUris(
    int loading_unit_id,
  ) {
    return _Dart_LoadingUnitLibraryUris(
      loading_unit_id,
    );
  }

  late final _Dart_LoadingUnitLibraryUrisPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>(
          'Dart_LoadingUnitLibraryUris');
  late final _Dart_LoadingUnitLibraryUris =
      _Dart_LoadingUnitLibraryUrisPtr.asFunction<Object Function(int)>();

  /// Creates a precompiled snapshot.
  /// - A root library must have been loaded.
  /// - Dart_Precompile must have been called.
  ///
  /// Outputs an assembly file defining the symbols listed in the definitions
  /// above.
  ///
  /// The assembly should be compiled as a static or shared library and linked or
  /// loaded by the embedder. Running this snapshot requires a VM compiled with
  /// DART_PRECOMPILED_SNAPSHOT. The kDartVmSnapshotData and
  /// kDartVmSnapshotInstructions should be passed to Dart_Initialize. The
  /// kDartIsolateSnapshotData and kDartIsolateSnapshotInstructions should be
  /// passed to Dart_CreateIsolateGroup.
  ///
  /// The callback will be invoked one or more times to provide the assembly code.
  ///
  /// If stripped is true, then the assembly code will not include DWARF
  /// debugging sections.
  ///
  /// If debug_callback_data is provided, debug_callback_data will be used with
  /// the callback to provide separate debugging information.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppAOTSnapshotAsAssembly(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
    bool stripped,
    ffi.Pointer<ffi.Void> debug_callback_data,
  ) {
    return _Dart_CreateAppAOTSnapshotAsAssembly(
      callback,
      callback_data,
      stripped,
      debug_callback_data,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsAssemblyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateAppAOTSnapshotAsAssembly');
  late final _Dart_CreateAppAOTSnapshotAsAssembly =
      _Dart_CreateAppAOTSnapshotAsAssemblyPtr.asFunction<
          Object Function(Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>,
              bool, ffi.Pointer<ffi.Void>)>();

  Object Dart_CreateAppAOTSnapshotAsAssemblies(
    Dart_CreateLoadingUnitCallback next_callback,
    ffi.Pointer<ffi.Void> next_callback_data,
    bool stripped,
    Dart_StreamingWriteCallback write_callback,
    Dart_StreamingCloseCallback close_callback,
  ) {
    return _Dart_CreateAppAOTSnapshotAsAssemblies(
      next_callback,
      next_callback_data,
      stripped,
      write_callback,
      close_callback,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsAssembliesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_CreateLoadingUnitCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Bool,
                  Dart_StreamingWriteCallback,
                  Dart_StreamingCloseCallback)>>(
      'Dart_CreateAppAOTSnapshotAsAssemblies');
  late final _Dart_CreateAppAOTSnapshotAsAssemblies =
      _Dart_CreateAppAOTSnapshotAsAssembliesPtr.asFunction<
          Object Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              bool,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>();

  /// Creates a precompiled snapshot.
  /// - A root library must have been loaded.
  /// - Dart_Precompile must have been called.
  ///
  /// Outputs an ELF shared library defining the symbols
  /// - _kDartVmSnapshotData
  /// - _kDartVmSnapshotInstructions
  /// - _kDartIsolateSnapshotData
  /// - _kDartIsolateSnapshotInstructions
  ///
  /// The shared library should be dynamically loaded by the embedder.
  /// Running this snapshot requires a VM compiled with DART_PRECOMPILED_SNAPSHOT.
  /// The kDartVmSnapshotData and kDartVmSnapshotInstructions should be passed to
  /// Dart_Initialize. The kDartIsolateSnapshotData and
  /// kDartIsolateSnapshotInstructions should be passed to Dart_CreateIsolate.
  ///
  /// The callback will be invoked one or more times to provide the binary output.
  ///
  /// If stripped is true, then the binary output will not include DWARF
  /// debugging sections.
  ///
  /// If debug_callback_data is provided, debug_callback_data will be used with
  /// the callback to provide separate debugging information.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppAOTSnapshotAsElf(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
    bool stripped,
    ffi.Pointer<ffi.Void> debug_callback_data,
  ) {
    return _Dart_CreateAppAOTSnapshotAsElf(
      callback,
      callback_data,
      stripped,
      debug_callback_data,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsElfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateAppAOTSnapshotAsElf');
  late final _Dart_CreateAppAOTSnapshotAsElf =
      _Dart_CreateAppAOTSnapshotAsElfPtr.asFunction<
          Object Function(Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>,
              bool, ffi.Pointer<ffi.Void>)>();

  Object Dart_CreateAppAOTSnapshotAsElfs(
    Dart_CreateLoadingUnitCallback next_callback,
    ffi.Pointer<ffi.Void> next_callback_data,
    bool stripped,
    Dart_StreamingWriteCallback write_callback,
    Dart_StreamingCloseCallback close_callback,
  ) {
    return _Dart_CreateAppAOTSnapshotAsElfs(
      next_callback,
      next_callback_data,
      stripped,
      write_callback,
      close_callback,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsElfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>>('Dart_CreateAppAOTSnapshotAsElfs');
  late final _Dart_CreateAppAOTSnapshotAsElfs =
      _Dart_CreateAppAOTSnapshotAsElfsPtr.asFunction<
          Object Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              bool,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>();

  /// Like Dart_CreateAppAOTSnapshotAsAssembly, but only includes
  /// kDartVmSnapshotData and kDartVmSnapshotInstructions. It also does
  /// not strip DWARF information from the generated assembly or allow for
  /// separate debug information.
  Object Dart_CreateVMAOTSnapshotAsAssembly(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
  ) {
    return _Dart_CreateVMAOTSnapshotAsAssembly(
      callback,
      callback_data,
    );
  }

  late final _Dart_CreateVMAOTSnapshotAsAssemblyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateVMAOTSnapshotAsAssembly');
  late final _Dart_CreateVMAOTSnapshotAsAssembly =
      _Dart_CreateVMAOTSnapshotAsAssemblyPtr.asFunction<
          Object Function(
              Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>)>();

  /// Sorts the class-ids in depth first traversal order of the inheritance
  /// tree. This is a costly operation, but it can make method dispatch
  /// more efficient and is done before writing snapshots.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_SortClasses() {
    return _Dart_SortClasses();
  }

  late final _Dart_SortClassesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_SortClasses');
  late final _Dart_SortClasses =
      _Dart_SortClassesPtr.asFunction<Object Function()>();

  /// Creates a snapshot that caches compiled code and type feedback for faster
  /// startup and quicker warmup in a subsequent process.
  ///
  /// Outputs a snapshot in two pieces. The pieces should be passed to
  /// Dart_CreateIsolateGroup in a VM using the same VM snapshot pieces used in the
  /// current VM. The instructions piece must be loaded with read and execute
  /// permissions; the data piece may be loaded as read-only.
  ///
  /// - Requires the VM to have not been started with --precompilation.
  /// - Not supported when targeting IA32.
  /// - The VM writing the snapshot and the VM reading the snapshot must be the
  /// same version, must be built in the same DEBUG/RELEASE/PRODUCT mode, must
  /// be targeting the same architecture, and must both be in checked mode or
  /// both in unchecked mode.
  ///
  /// The buffers are scope allocated and are only valid until the next call to
  /// Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppJITSnapshotAsBlobs(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_instructions_size,
  ) {
    return _Dart_CreateAppJITSnapshotAsBlobs(
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      isolate_snapshot_instructions_buffer,
      isolate_snapshot_instructions_size,
    );
  }

  late final _Dart_CreateAppJITSnapshotAsBlobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_CreateAppJITSnapshotAsBlobs');
  late final _Dart_CreateAppJITSnapshotAsBlobs =
      _Dart_CreateAppJITSnapshotAsBlobsPtr.asFunction<
          Object Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Like Dart_CreateAppJITSnapshotAsBlobs, but also creates a new VM snapshot.
  Object Dart_CreateCoreJITSnapshotAsBlobs(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_instructions_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_instructions_size,
  ) {
    return _Dart_CreateCoreJITSnapshotAsBlobs(
      vm_snapshot_data_buffer,
      vm_snapshot_data_size,
      vm_snapshot_instructions_buffer,
      vm_snapshot_instructions_size,
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      isolate_snapshot_instructions_buffer,
      isolate_snapshot_instructions_size,
    );
  }

  late final _Dart_CreateCoreJITSnapshotAsBlobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_CreateCoreJITSnapshotAsBlobs');
  late final _Dart_CreateCoreJITSnapshotAsBlobs =
      _Dart_CreateCoreJITSnapshotAsBlobsPtr.asFunction<
          Object Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Get obfuscation map for precompiled code.
  ///
  /// Obfuscation map is encoded as a JSON array of pairs (original name,
  /// obfuscated name).
  ///
  /// \return Returns an error handler if the VM was built in a mode that does not
  /// support obfuscation.
  Object Dart_GetObfuscationMap(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<ffi.IntPtr> buffer_length,
  ) {
    return _Dart_GetObfuscationMap(
      buffer,
      buffer_length,
    );
  }

  late final _Dart_GetObfuscationMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetObfuscationMap');
  late final _Dart_GetObfuscationMap = _Dart_GetObfuscationMapPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.IntPtr>)>();

  /// Returns whether the VM only supports running from precompiled snapshots and
  /// not from any other kind of snapshot or from source (that is, the VM was
  /// compiled with DART_PRECOMPILED_RUNTIME).
  bool Dart_IsPrecompiledRuntime() {
    return _Dart_IsPrecompiledRuntime();
  }

  late final _Dart_IsPrecompiledRuntimePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Dart_IsPrecompiledRuntime');
  late final _Dart_IsPrecompiledRuntime =
      _Dart_IsPrecompiledRuntimePtr.asFunction<bool Function()>();

  /// Print a native stack trace. Used for crash handling.
  ///
  /// If context is NULL, prints the current stack trace. Otherwise, context
  /// should be a CONTEXT* (Windows) or ucontext_t* (POSIX) from a signal handler
  /// running on the current thread.
  void Dart_DumpNativeStackTrace(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _Dart_DumpNativeStackTrace(
      context,
    );
  }

  late final _Dart_DumpNativeStackTracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_DumpNativeStackTrace');
  late final _Dart_DumpNativeStackTrace = _Dart_DumpNativeStackTracePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Indicate that the process is about to abort, and the Dart VM should not
  /// attempt to cleanup resources.
  void Dart_PrepareToAbort() {
    return _Dart_PrepareToAbort();
  }

  late final _Dart_PrepareToAbortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_PrepareToAbort');
  late final _Dart_PrepareToAbort =
      _Dart_PrepareToAbortPtr.asFunction<void Function()>();

  /// Posts a message on some port. The message will contain the Dart_CObject
  /// object graph rooted in 'message'.
  ///
  /// While the message is being sent the state of the graph of Dart_CObject
  /// structures rooted in 'message' should not be accessed, as the message
  /// generation will make temporary modifications to the data. When the message
  /// has been sent the graph will be fully restored.
  ///
  /// If true is returned, the message was enqueued, and finalizers for external
  /// typed data will eventually run, even if the receiving isolate shuts down
  /// before processing the message. If false is returned, the message was not
  /// enqueued and ownership of external typed data in the message remains with the
  /// caller.
  ///
  /// This function may be called on any thread when the VM is running (that is,
  /// after Dart_Initialize has returned and before Dart_Cleanup has been called).
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  bool Dart_PostCObject(
    int port_id,
    ffi.Pointer<Dart_CObject> message,
  ) {
    return _Dart_PostCObject(
      port_id,
      message,
    );
  }

  late final _Dart_PostCObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              Dart_Port, ffi.Pointer<Dart_CObject>)>>('Dart_PostCObject');
  late final _Dart_PostCObject = _Dart_PostCObjectPtr.asFunction<
      bool Function(int, ffi.Pointer<Dart_CObject>)>();

  /// Posts a message on some port. The message will contain the integer 'message'.
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  bool Dart_PostInteger(
    int port_id,
    int message,
  ) {
    return _Dart_PostInteger(
      port_id,
      message,
    );
  }

  late final _Dart_PostIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port, ffi.Int64)>>(
          'Dart_PostInteger');
  late final _Dart_PostInteger =
      _Dart_PostIntegerPtr.asFunction<bool Function(int, int)>();

  /// Creates a new native port.  When messages are received on this
  /// native port, then they will be dispatched to the provided native
  /// message handler.
  ///
  /// \param name The name of this port in debugging messages.
  /// \param handler The C handler to run when messages arrive on the port.
  /// \param handle_concurrently Is it okay to process requests on this
  /// native port concurrently?
  ///
  /// \return If successful, returns the port id for the native port.  In
  /// case of error, returns ILLEGAL_PORT.
  int Dart_NewNativePort(
    ffi.Pointer<ffi.Char> name,
    Dart_NativeMessageHandler handler,
    bool handle_concurrently,
  ) {
    return _Dart_NewNativePort(
      name,
      handler,
      handle_concurrently,
    );
  }

  late final _Dart_NewNativePortPtr = _lookup<
      ffi.NativeFunction<
          Dart_Port Function(ffi.Pointer<ffi.Char>, Dart_NativeMessageHandler,
              ffi.Bool)>>('Dart_NewNativePort');
  late final _Dart_NewNativePort = _Dart_NewNativePortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, Dart_NativeMessageHandler, bool)>();

  /// Closes the native port with the given id.
  ///
  /// The port must have been allocated by a call to Dart_NewNativePort.
  ///
  /// \param native_port_id The id of the native port to close.
  ///
  /// \return Returns true if the port was closed successfully.
  bool Dart_CloseNativePort(
    int native_port_id,
  ) {
    return _Dart_CloseNativePort(
      native_port_id,
    );
  }

  late final _Dart_CloseNativePortPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port)>>(
          'Dart_CloseNativePort');
  late final _Dart_CloseNativePort =
      _Dart_CloseNativePortPtr.asFunction<bool Function(int)>();

  /// Forces all loaded classes and functions to be compiled eagerly in
  /// the current isolate..
  ///
  /// TODO(turnidge): Document.
  Object Dart_CompileAll() {
    return _Dart_CompileAll();
  }

  late final _Dart_CompileAllPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_CompileAll');
  late final _Dart_CompileAll =
      _Dart_CompileAllPtr.asFunction<Object Function()>();

  /// Finalizes all classes.
  Object Dart_FinalizeAllClasses() {
    return _Dart_FinalizeAllClasses();
  }

  late final _Dart_FinalizeAllClassesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'Dart_FinalizeAllClasses');
  late final _Dart_FinalizeAllClasses =
      _Dart_FinalizeAllClassesPtr.asFunction<Object Function()>();

  /// This function is intentionally undocumented.
  ///
  /// It should not be used outside internal tests.
  ffi.Pointer<ffi.Void> Dart_ExecuteInternalCommand(
    ffi.Pointer<ffi.Char> command,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _Dart_ExecuteInternalCommand(
      command,
      arg,
    );
  }

  late final _Dart_ExecuteInternalCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('Dart_ExecuteInternalCommand');
  late final _Dart_ExecuteInternalCommand =
      _Dart_ExecuteInternalCommandPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// \mainpage Dynamically Linked Dart API
  ///
  /// This exposes a subset of symbols from dart_api.h and dart_native_api.h
  /// available in every Dart embedder through dynamic linking.
  ///
  /// All symbols are postfixed with _DL to indicate that they are dynamically
  /// linked and to prevent conflicts with the original symbol.
  ///
  /// Link `dart_api_dl.c` file into your library and invoke
  /// `Dart_InitializeApiDL` with `NativeApi.initializeApiDLData`.
  int Dart_InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _Dart_InitializeApiDL(
      data,
    );
  }

  late final _Dart_InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_InitializeApiDL');
  late final _Dart_InitializeApiDL = _Dart_InitializeApiDLPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<Dart_PostCObject_Type> _Dart_PostCObject_DL =
      _lookup<Dart_PostCObject_Type>('Dart_PostCObject_DL');

  Dart_PostCObject_Type get Dart_PostCObject_DL => _Dart_PostCObject_DL.value;

  set Dart_PostCObject_DL(Dart_PostCObject_Type value) =>
      _Dart_PostCObject_DL.value = value;

  late final ffi.Pointer<Dart_PostInteger_Type> _Dart_PostInteger_DL =
      _lookup<Dart_PostInteger_Type>('Dart_PostInteger_DL');

  Dart_PostInteger_Type get Dart_PostInteger_DL => _Dart_PostInteger_DL.value;

  set Dart_PostInteger_DL(Dart_PostInteger_Type value) =>
      _Dart_PostInteger_DL.value = value;

  late final ffi.Pointer<Dart_NewNativePort_Type> _Dart_NewNativePort_DL =
      _lookup<Dart_NewNativePort_Type>('Dart_NewNativePort_DL');

  Dart_NewNativePort_Type get Dart_NewNativePort_DL =>
      _Dart_NewNativePort_DL.value;

  set Dart_NewNativePort_DL(Dart_NewNativePort_Type value) =>
      _Dart_NewNativePort_DL.value = value;

  late final ffi.Pointer<Dart_CloseNativePort_Type> _Dart_CloseNativePort_DL =
      _lookup<Dart_CloseNativePort_Type>('Dart_CloseNativePort_DL');

  Dart_CloseNativePort_Type get Dart_CloseNativePort_DL =>
      _Dart_CloseNativePort_DL.value;

  set Dart_CloseNativePort_DL(Dart_CloseNativePort_Type value) =>
      _Dart_CloseNativePort_DL.value = value;

  late final ffi.Pointer<Dart_IsError_Type> _Dart_IsError_DL =
      _lookup<Dart_IsError_Type>('Dart_IsError_DL');

  Dart_IsError_Type get Dart_IsError_DL => _Dart_IsError_DL.value;

  set Dart_IsError_DL(Dart_IsError_Type value) =>
      _Dart_IsError_DL.value = value;

  late final ffi.Pointer<Dart_IsApiError_Type> _Dart_IsApiError_DL =
      _lookup<Dart_IsApiError_Type>('Dart_IsApiError_DL');

  Dart_IsApiError_Type get Dart_IsApiError_DL => _Dart_IsApiError_DL.value;

  set Dart_IsApiError_DL(Dart_IsApiError_Type value) =>
      _Dart_IsApiError_DL.value = value;

  late final ffi.Pointer<Dart_IsUnhandledExceptionError_Type>
      _Dart_IsUnhandledExceptionError_DL =
      _lookup<Dart_IsUnhandledExceptionError_Type>(
          'Dart_IsUnhandledExceptionError_DL');

  Dart_IsUnhandledExceptionError_Type get Dart_IsUnhandledExceptionError_DL =>
      _Dart_IsUnhandledExceptionError_DL.value;

  set Dart_IsUnhandledExceptionError_DL(
          Dart_IsUnhandledExceptionError_Type value) =>
      _Dart_IsUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<Dart_IsCompilationError_Type>
      _Dart_IsCompilationError_DL =
      _lookup<Dart_IsCompilationError_Type>('Dart_IsCompilationError_DL');

  Dart_IsCompilationError_Type get Dart_IsCompilationError_DL =>
      _Dart_IsCompilationError_DL.value;

  set Dart_IsCompilationError_DL(Dart_IsCompilationError_Type value) =>
      _Dart_IsCompilationError_DL.value = value;

  late final ffi.Pointer<Dart_IsFatalError_Type> _Dart_IsFatalError_DL =
      _lookup<Dart_IsFatalError_Type>('Dart_IsFatalError_DL');

  Dart_IsFatalError_Type get Dart_IsFatalError_DL =>
      _Dart_IsFatalError_DL.value;

  set Dart_IsFatalError_DL(Dart_IsFatalError_Type value) =>
      _Dart_IsFatalError_DL.value = value;

  late final ffi.Pointer<Dart_GetError_Type> _Dart_GetError_DL =
      _lookup<Dart_GetError_Type>('Dart_GetError_DL');

  Dart_GetError_Type get Dart_GetError_DL => _Dart_GetError_DL.value;

  set Dart_GetError_DL(Dart_GetError_Type value) =>
      _Dart_GetError_DL.value = value;

  late final ffi.Pointer<Dart_ErrorHasException_Type>
      _Dart_ErrorHasException_DL =
      _lookup<Dart_ErrorHasException_Type>('Dart_ErrorHasException_DL');

  Dart_ErrorHasException_Type get Dart_ErrorHasException_DL =>
      _Dart_ErrorHasException_DL.value;

  set Dart_ErrorHasException_DL(Dart_ErrorHasException_Type value) =>
      _Dart_ErrorHasException_DL.value = value;

  late final ffi.Pointer<Dart_ErrorGetException_Type>
      _Dart_ErrorGetException_DL =
      _lookup<Dart_ErrorGetException_Type>('Dart_ErrorGetException_DL');

  Dart_ErrorGetException_Type get Dart_ErrorGetException_DL =>
      _Dart_ErrorGetException_DL.value;

  set Dart_ErrorGetException_DL(Dart_ErrorGetException_Type value) =>
      _Dart_ErrorGetException_DL.value = value;

  late final ffi.Pointer<Dart_ErrorGetStackTrace_Type>
      _Dart_ErrorGetStackTrace_DL =
      _lookup<Dart_ErrorGetStackTrace_Type>('Dart_ErrorGetStackTrace_DL');

  Dart_ErrorGetStackTrace_Type get Dart_ErrorGetStackTrace_DL =>
      _Dart_ErrorGetStackTrace_DL.value;

  set Dart_ErrorGetStackTrace_DL(Dart_ErrorGetStackTrace_Type value) =>
      _Dart_ErrorGetStackTrace_DL.value = value;

  late final ffi.Pointer<Dart_NewApiError_Type> _Dart_NewApiError_DL =
      _lookup<Dart_NewApiError_Type>('Dart_NewApiError_DL');

  Dart_NewApiError_Type get Dart_NewApiError_DL => _Dart_NewApiError_DL.value;

  set Dart_NewApiError_DL(Dart_NewApiError_Type value) =>
      _Dart_NewApiError_DL.value = value;

  late final ffi.Pointer<Dart_NewCompilationError_Type>
      _Dart_NewCompilationError_DL =
      _lookup<Dart_NewCompilationError_Type>('Dart_NewCompilationError_DL');

  Dart_NewCompilationError_Type get Dart_NewCompilationError_DL =>
      _Dart_NewCompilationError_DL.value;

  set Dart_NewCompilationError_DL(Dart_NewCompilationError_Type value) =>
      _Dart_NewCompilationError_DL.value = value;

  late final ffi.Pointer<Dart_NewUnhandledExceptionError_Type>
      _Dart_NewUnhandledExceptionError_DL =
      _lookup<Dart_NewUnhandledExceptionError_Type>(
          'Dart_NewUnhandledExceptionError_DL');

  Dart_NewUnhandledExceptionError_Type get Dart_NewUnhandledExceptionError_DL =>
      _Dart_NewUnhandledExceptionError_DL.value;

  set Dart_NewUnhandledExceptionError_DL(
          Dart_NewUnhandledExceptionError_Type value) =>
      _Dart_NewUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<Dart_PropagateError_Type> _Dart_PropagateError_DL =
      _lookup<Dart_PropagateError_Type>('Dart_PropagateError_DL');

  Dart_PropagateError_Type get Dart_PropagateError_DL =>
      _Dart_PropagateError_DL.value;

  set Dart_PropagateError_DL(Dart_PropagateError_Type value) =>
      _Dart_PropagateError_DL.value = value;

  late final ffi.Pointer<Dart_HandleFromPersistent_Type>
      _Dart_HandleFromPersistent_DL =
      _lookup<Dart_HandleFromPersistent_Type>('Dart_HandleFromPersistent_DL');

  Dart_HandleFromPersistent_Type get Dart_HandleFromPersistent_DL =>
      _Dart_HandleFromPersistent_DL.value;

  set Dart_HandleFromPersistent_DL(Dart_HandleFromPersistent_Type value) =>
      _Dart_HandleFromPersistent_DL.value = value;

  late final ffi.Pointer<Dart_HandleFromWeakPersistent_Type>
      _Dart_HandleFromWeakPersistent_DL =
      _lookup<Dart_HandleFromWeakPersistent_Type>(
          'Dart_HandleFromWeakPersistent_DL');

  Dart_HandleFromWeakPersistent_Type get Dart_HandleFromWeakPersistent_DL =>
      _Dart_HandleFromWeakPersistent_DL.value;

  set Dart_HandleFromWeakPersistent_DL(
          Dart_HandleFromWeakPersistent_Type value) =>
      _Dart_HandleFromWeakPersistent_DL.value = value;

  late final ffi.Pointer<Dart_NewPersistentHandle_Type>
      _Dart_NewPersistentHandle_DL =
      _lookup<Dart_NewPersistentHandle_Type>('Dart_NewPersistentHandle_DL');

  Dart_NewPersistentHandle_Type get Dart_NewPersistentHandle_DL =>
      _Dart_NewPersistentHandle_DL.value;

  set Dart_NewPersistentHandle_DL(Dart_NewPersistentHandle_Type value) =>
      _Dart_NewPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_SetPersistentHandle_Type>
      _Dart_SetPersistentHandle_DL =
      _lookup<Dart_SetPersistentHandle_Type>('Dart_SetPersistentHandle_DL');

  Dart_SetPersistentHandle_Type get Dart_SetPersistentHandle_DL =>
      _Dart_SetPersistentHandle_DL.value;

  set Dart_SetPersistentHandle_DL(Dart_SetPersistentHandle_Type value) =>
      _Dart_SetPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeletePersistentHandle_Type>
      _Dart_DeletePersistentHandle_DL =
      _lookup<Dart_DeletePersistentHandle_Type>(
          'Dart_DeletePersistentHandle_DL');

  Dart_DeletePersistentHandle_Type get Dart_DeletePersistentHandle_DL =>
      _Dart_DeletePersistentHandle_DL.value;

  set Dart_DeletePersistentHandle_DL(Dart_DeletePersistentHandle_Type value) =>
      _Dart_DeletePersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_NewWeakPersistentHandle_Type>
      _Dart_NewWeakPersistentHandle_DL =
      _lookup<Dart_NewWeakPersistentHandle_Type>(
          'Dart_NewWeakPersistentHandle_DL');

  Dart_NewWeakPersistentHandle_Type get Dart_NewWeakPersistentHandle_DL =>
      _Dart_NewWeakPersistentHandle_DL.value;

  set Dart_NewWeakPersistentHandle_DL(
          Dart_NewWeakPersistentHandle_Type value) =>
      _Dart_NewWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeleteWeakPersistentHandle_Type>
      _Dart_DeleteWeakPersistentHandle_DL =
      _lookup<Dart_DeleteWeakPersistentHandle_Type>(
          'Dart_DeleteWeakPersistentHandle_DL');

  Dart_DeleteWeakPersistentHandle_Type get Dart_DeleteWeakPersistentHandle_DL =>
      _Dart_DeleteWeakPersistentHandle_DL.value;

  set Dart_DeleteWeakPersistentHandle_DL(
          Dart_DeleteWeakPersistentHandle_Type value) =>
      _Dart_DeleteWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_UpdateExternalSize_Type>
      _Dart_UpdateExternalSize_DL =
      _lookup<Dart_UpdateExternalSize_Type>('Dart_UpdateExternalSize_DL');

  Dart_UpdateExternalSize_Type get Dart_UpdateExternalSize_DL =>
      _Dart_UpdateExternalSize_DL.value;

  set Dart_UpdateExternalSize_DL(Dart_UpdateExternalSize_Type value) =>
      _Dart_UpdateExternalSize_DL.value = value;

  late final ffi.Pointer<Dart_NewFinalizableHandle_Type>
      _Dart_NewFinalizableHandle_DL =
      _lookup<Dart_NewFinalizableHandle_Type>('Dart_NewFinalizableHandle_DL');

  Dart_NewFinalizableHandle_Type get Dart_NewFinalizableHandle_DL =>
      _Dart_NewFinalizableHandle_DL.value;

  set Dart_NewFinalizableHandle_DL(Dart_NewFinalizableHandle_Type value) =>
      _Dart_NewFinalizableHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeleteFinalizableHandle_Type>
      _Dart_DeleteFinalizableHandle_DL =
      _lookup<Dart_DeleteFinalizableHandle_Type>(
          'Dart_DeleteFinalizableHandle_DL');

  Dart_DeleteFinalizableHandle_Type get Dart_DeleteFinalizableHandle_DL =>
      _Dart_DeleteFinalizableHandle_DL.value;

  set Dart_DeleteFinalizableHandle_DL(
          Dart_DeleteFinalizableHandle_Type value) =>
      _Dart_DeleteFinalizableHandle_DL.value = value;

  late final ffi.Pointer<Dart_UpdateFinalizableExternalSize_Type>
      _Dart_UpdateFinalizableExternalSize_DL =
      _lookup<Dart_UpdateFinalizableExternalSize_Type>(
          'Dart_UpdateFinalizableExternalSize_DL');

  Dart_UpdateFinalizableExternalSize_Type
      get Dart_UpdateFinalizableExternalSize_DL =>
          _Dart_UpdateFinalizableExternalSize_DL.value;

  set Dart_UpdateFinalizableExternalSize_DL(
          Dart_UpdateFinalizableExternalSize_Type value) =>
      _Dart_UpdateFinalizableExternalSize_DL.value = value;

  late final ffi.Pointer<Dart_Post_Type> _Dart_Post_DL =
      _lookup<Dart_Post_Type>('Dart_Post_DL');

  Dart_Post_Type get Dart_Post_DL => _Dart_Post_DL.value;

  set Dart_Post_DL(Dart_Post_Type value) => _Dart_Post_DL.value = value;

  late final ffi.Pointer<Dart_NewSendPort_Type> _Dart_NewSendPort_DL =
      _lookup<Dart_NewSendPort_Type>('Dart_NewSendPort_DL');

  Dart_NewSendPort_Type get Dart_NewSendPort_DL => _Dart_NewSendPort_DL.value;

  set Dart_NewSendPort_DL(Dart_NewSendPort_Type value) =>
      _Dart_NewSendPort_DL.value = value;

  late final ffi.Pointer<Dart_SendPortGetId_Type> _Dart_SendPortGetId_DL =
      _lookup<Dart_SendPortGetId_Type>('Dart_SendPortGetId_DL');

  Dart_SendPortGetId_Type get Dart_SendPortGetId_DL =>
      _Dart_SendPortGetId_DL.value;

  set Dart_SendPortGetId_DL(Dart_SendPortGetId_Type value) =>
      _Dart_SendPortGetId_DL.value = value;

  late final ffi.Pointer<Dart_EnterScope_Type> _Dart_EnterScope_DL =
      _lookup<Dart_EnterScope_Type>('Dart_EnterScope_DL');

  Dart_EnterScope_Type get Dart_EnterScope_DL => _Dart_EnterScope_DL.value;

  set Dart_EnterScope_DL(Dart_EnterScope_Type value) =>
      _Dart_EnterScope_DL.value = value;

  late final ffi.Pointer<Dart_ExitScope_Type> _Dart_ExitScope_DL =
      _lookup<Dart_ExitScope_Type>('Dart_ExitScope_DL');

  Dart_ExitScope_Type get Dart_ExitScope_DL => _Dart_ExitScope_DL.value;

  set Dart_ExitScope_DL(Dart_ExitScope_Type value) =>
      _Dart_ExitScope_DL.value = value;

  /// Creates a `Dart_CObject` containing the given `NSObject` pointer as an int.
  Dart_CObject NSObjectToCObject(
    objc.NSObject n,
  ) {
    return _NSObjectToCObject(
      n.pointer,
    );
  }

  late final _NSObjectToCObjectPtr = _lookup<
          ffi
          .NativeFunction<Dart_CObject Function(ffi.Pointer<objc.ObjCObject>)>>(
      'NSObjectToCObject');
  late final _NSObjectToCObject = _NSObjectToCObjectPtr.asFunction<
      Dart_CObject Function(ffi.Pointer<objc.ObjCObject>)>();

  /// Executes [NSURLSessionWebSocketTask sendMessage:completionHandler:] and
  /// sends the results of the completion handler to the given `Dart_Port`.
  void CUPHTTPSendMessage(
    NSURLSessionWebSocketTask task,
    NSURLSessionWebSocketMessage message,
    DartDart_Port sendPort,
  ) {
    return _CUPHTTPSendMessage(
      task.pointer,
      message.pointer,
      sendPort,
    );
  }

  late final _CUPHTTPSendMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, Dart_Port)>>('CUPHTTPSendMessage');
  late final _CUPHTTPSendMessage = _CUPHTTPSendMessagePtr.asFunction<
      void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, int)>();

  /// Executes [NSURLSessionWebSocketTask receiveMessageWithCompletionHandler:]
  /// and sends the results of the completion handler to the given `Dart_Port`.
  void CUPHTTPReceiveMessage(
    NSURLSessionWebSocketTask task,
    DartDart_Port sendPort,
  ) {
    return _CUPHTTPReceiveMessage(
      task.pointer,
      sendPort,
    );
  }

  late final _CUPHTTPReceiveMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              Dart_Port)>>('CUPHTTPReceiveMessage');
  late final _CUPHTTPReceiveMessage = _CUPHTTPReceiveMessagePtr.asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, int)>();

  late final ffi.Pointer<NSStreamPropertyKey> _NSStreamSocketSecurityLevelKey =
      _lookup<NSStreamPropertyKey>('NSStreamSocketSecurityLevelKey');

  NSStreamPropertyKey get NSStreamSocketSecurityLevelKey =>
      _NSStreamSocketSecurityLevelKey.value;

  set NSStreamSocketSecurityLevelKey(NSStreamPropertyKey value) =>
      _NSStreamSocketSecurityLevelKey.value = value;

  late final ffi.Pointer<NSStreamSocketSecurityLevel>
      _NSStreamSocketSecurityLevelNone =
      _lookup<NSStreamSocketSecurityLevel>('NSStreamSocketSecurityLevelNone');

  NSStreamSocketSecurityLevel get NSStreamSocketSecurityLevelNone =>
      _NSStreamSocketSecurityLevelNone.value;

  set NSStreamSocketSecurityLevelNone(NSStreamSocketSecurityLevel value) =>
      _NSStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<NSStreamSocketSecurityLevel>
      _NSStreamSocketSecurityLevelSSLv2 =
      _lookup<NSStreamSocketSecurityLevel>('NSStreamSocketSecurityLevelSSLv2');

  NSStreamSocketSecurityLevel get NSStreamSocketSecurityLevelSSLv2 =>
      _NSStreamSocketSecurityLevelSSLv2.value;

  set NSStreamSocketSecurityLevelSSLv2(NSStreamSocketSecurityLevel value) =>
      _NSStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<NSStreamSocketSecurityLevel>
      _NSStreamSocketSecurityLevelSSLv3 =
      _lookup<NSStreamSocketSecurityLevel>('NSStreamSocketSecurityLevelSSLv3');

  NSStreamSocketSecurityLevel get NSStreamSocketSecurityLevelSSLv3 =>
      _NSStreamSocketSecurityLevelSSLv3.value;

  set NSStreamSocketSecurityLevelSSLv3(NSStreamSocketSecurityLevel value) =>
      _NSStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<NSStreamSocketSecurityLevel>
      _NSStreamSocketSecurityLevelTLSv1 =
      _lookup<NSStreamSocketSecurityLevel>('NSStreamSocketSecurityLevelTLSv1');

  NSStreamSocketSecurityLevel get NSStreamSocketSecurityLevelTLSv1 =>
      _NSStreamSocketSecurityLevelTLSv1.value;

  set NSStreamSocketSecurityLevelTLSv1(NSStreamSocketSecurityLevel value) =>
      _NSStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<NSStreamSocketSecurityLevel>
      _NSStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<NSStreamSocketSecurityLevel>(
          'NSStreamSocketSecurityLevelNegotiatedSSL');

  NSStreamSocketSecurityLevel get NSStreamSocketSecurityLevelNegotiatedSSL =>
      _NSStreamSocketSecurityLevelNegotiatedSSL.value;

  set NSStreamSocketSecurityLevelNegotiatedSSL(
          NSStreamSocketSecurityLevel value) =>
      _NSStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<NSStreamPropertyKey>
      _NSStreamSOCKSProxyConfigurationKey =
      _lookup<NSStreamPropertyKey>('NSStreamSOCKSProxyConfigurationKey');

  NSStreamPropertyKey get NSStreamSOCKSProxyConfigurationKey =>
      _NSStreamSOCKSProxyConfigurationKey.value;

  set NSStreamSOCKSProxyConfigurationKey(NSStreamPropertyKey value) =>
      _NSStreamSOCKSProxyConfigurationKey.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyConfiguration>
      _NSStreamSOCKSProxyHostKey =
      _lookup<NSStreamSOCKSProxyConfiguration>('NSStreamSOCKSProxyHostKey');

  NSStreamSOCKSProxyConfiguration get NSStreamSOCKSProxyHostKey =>
      _NSStreamSOCKSProxyHostKey.value;

  set NSStreamSOCKSProxyHostKey(NSStreamSOCKSProxyConfiguration value) =>
      _NSStreamSOCKSProxyHostKey.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyConfiguration>
      _NSStreamSOCKSProxyPortKey =
      _lookup<NSStreamSOCKSProxyConfiguration>('NSStreamSOCKSProxyPortKey');

  NSStreamSOCKSProxyConfiguration get NSStreamSOCKSProxyPortKey =>
      _NSStreamSOCKSProxyPortKey.value;

  set NSStreamSOCKSProxyPortKey(NSStreamSOCKSProxyConfiguration value) =>
      _NSStreamSOCKSProxyPortKey.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyConfiguration>
      _NSStreamSOCKSProxyVersionKey =
      _lookup<NSStreamSOCKSProxyConfiguration>('NSStreamSOCKSProxyVersionKey');

  NSStreamSOCKSProxyConfiguration get NSStreamSOCKSProxyVersionKey =>
      _NSStreamSOCKSProxyVersionKey.value;

  set NSStreamSOCKSProxyVersionKey(NSStreamSOCKSProxyConfiguration value) =>
      _NSStreamSOCKSProxyVersionKey.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyConfiguration>
      _NSStreamSOCKSProxyUserKey =
      _lookup<NSStreamSOCKSProxyConfiguration>('NSStreamSOCKSProxyUserKey');

  NSStreamSOCKSProxyConfiguration get NSStreamSOCKSProxyUserKey =>
      _NSStreamSOCKSProxyUserKey.value;

  set NSStreamSOCKSProxyUserKey(NSStreamSOCKSProxyConfiguration value) =>
      _NSStreamSOCKSProxyUserKey.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyConfiguration>
      _NSStreamSOCKSProxyPasswordKey =
      _lookup<NSStreamSOCKSProxyConfiguration>('NSStreamSOCKSProxyPasswordKey');

  NSStreamSOCKSProxyConfiguration get NSStreamSOCKSProxyPasswordKey =>
      _NSStreamSOCKSProxyPasswordKey.value;

  set NSStreamSOCKSProxyPasswordKey(NSStreamSOCKSProxyConfiguration value) =>
      _NSStreamSOCKSProxyPasswordKey.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyVersion>
      _NSStreamSOCKSProxyVersion4 =
      _lookup<NSStreamSOCKSProxyVersion>('NSStreamSOCKSProxyVersion4');

  NSStreamSOCKSProxyVersion get NSStreamSOCKSProxyVersion4 =>
      _NSStreamSOCKSProxyVersion4.value;

  set NSStreamSOCKSProxyVersion4(NSStreamSOCKSProxyVersion value) =>
      _NSStreamSOCKSProxyVersion4.value = value;

  late final ffi.Pointer<NSStreamSOCKSProxyVersion>
      _NSStreamSOCKSProxyVersion5 =
      _lookup<NSStreamSOCKSProxyVersion>('NSStreamSOCKSProxyVersion5');

  NSStreamSOCKSProxyVersion get NSStreamSOCKSProxyVersion5 =>
      _NSStreamSOCKSProxyVersion5.value;

  set NSStreamSOCKSProxyVersion5(NSStreamSOCKSProxyVersion value) =>
      _NSStreamSOCKSProxyVersion5.value = value;

  late final ffi.Pointer<NSStreamPropertyKey>
      _NSStreamDataWrittenToMemoryStreamKey =
      _lookup<NSStreamPropertyKey>('NSStreamDataWrittenToMemoryStreamKey');

  NSStreamPropertyKey get NSStreamDataWrittenToMemoryStreamKey =>
      _NSStreamDataWrittenToMemoryStreamKey.value;

  set NSStreamDataWrittenToMemoryStreamKey(NSStreamPropertyKey value) =>
      _NSStreamDataWrittenToMemoryStreamKey.value = value;

  late final ffi.Pointer<NSStreamPropertyKey> _NSStreamFileCurrentOffsetKey =
      _lookup<NSStreamPropertyKey>('NSStreamFileCurrentOffsetKey');

  NSStreamPropertyKey get NSStreamFileCurrentOffsetKey =>
      _NSStreamFileCurrentOffsetKey.value;

  set NSStreamFileCurrentOffsetKey(NSStreamPropertyKey value) =>
      _NSStreamFileCurrentOffsetKey.value = value;

  late final ffi.Pointer<NSErrorDomain1> _NSStreamSocketSSLErrorDomain =
      _lookup<NSErrorDomain1>('NSStreamSocketSSLErrorDomain');

  NSErrorDomain1 get NSStreamSocketSSLErrorDomain =>
      _NSStreamSocketSSLErrorDomain.value;

  set NSStreamSocketSSLErrorDomain(NSErrorDomain1 value) =>
      _NSStreamSocketSSLErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain1> _NSStreamSOCKSErrorDomain =
      _lookup<NSErrorDomain1>('NSStreamSOCKSErrorDomain');

  NSErrorDomain1 get NSStreamSOCKSErrorDomain =>
      _NSStreamSOCKSErrorDomain.value;

  set NSStreamSOCKSErrorDomain(NSErrorDomain1 value) =>
      _NSStreamSOCKSErrorDomain.value = value;

  late final ffi.Pointer<NSStreamPropertyKey> _NSStreamNetworkServiceType =
      _lookup<NSStreamPropertyKey>('NSStreamNetworkServiceType');

  NSStreamPropertyKey get NSStreamNetworkServiceType =>
      _NSStreamNetworkServiceType.value;

  set NSStreamNetworkServiceType(NSStreamPropertyKey value) =>
      _NSStreamNetworkServiceType.value = value;

  late final ffi.Pointer<NSStreamNetworkServiceTypeValue>
      _NSStreamNetworkServiceTypeVoIP =
      _lookup<NSStreamNetworkServiceTypeValue>(
          'NSStreamNetworkServiceTypeVoIP');

  NSStreamNetworkServiceTypeValue get NSStreamNetworkServiceTypeVoIP =>
      _NSStreamNetworkServiceTypeVoIP.value;

  set NSStreamNetworkServiceTypeVoIP(NSStreamNetworkServiceTypeValue value) =>
      _NSStreamNetworkServiceTypeVoIP.value = value;

  late final ffi.Pointer<NSStreamNetworkServiceTypeValue>
      _NSStreamNetworkServiceTypeVideo =
      _lookup<NSStreamNetworkServiceTypeValue>(
          'NSStreamNetworkServiceTypeVideo');

  NSStreamNetworkServiceTypeValue get NSStreamNetworkServiceTypeVideo =>
      _NSStreamNetworkServiceTypeVideo.value;

  set NSStreamNetworkServiceTypeVideo(NSStreamNetworkServiceTypeValue value) =>
      _NSStreamNetworkServiceTypeVideo.value = value;

  late final ffi.Pointer<NSStreamNetworkServiceTypeValue>
      _NSStreamNetworkServiceTypeBackground =
      _lookup<NSStreamNetworkServiceTypeValue>(
          'NSStreamNetworkServiceTypeBackground');

  NSStreamNetworkServiceTypeValue get NSStreamNetworkServiceTypeBackground =>
      _NSStreamNetworkServiceTypeBackground.value;

  set NSStreamNetworkServiceTypeBackground(
          NSStreamNetworkServiceTypeValue value) =>
      _NSStreamNetworkServiceTypeBackground.value = value;

  late final ffi.Pointer<NSStreamNetworkServiceTypeValue>
      _NSStreamNetworkServiceTypeVoice =
      _lookup<NSStreamNetworkServiceTypeValue>(
          'NSStreamNetworkServiceTypeVoice');

  NSStreamNetworkServiceTypeValue get NSStreamNetworkServiceTypeVoice =>
      _NSStreamNetworkServiceTypeVoice.value;

  set NSStreamNetworkServiceTypeVoice(NSStreamNetworkServiceTypeValue value) =>
      _NSStreamNetworkServiceTypeVoice.value = value;

  late final ffi.Pointer<NSStreamNetworkServiceTypeValue>
      _NSStreamNetworkServiceTypeCallSignaling =
      _lookup<NSStreamNetworkServiceTypeValue>(
          'NSStreamNetworkServiceTypeCallSignaling');

  NSStreamNetworkServiceTypeValue get NSStreamNetworkServiceTypeCallSignaling =>
      _NSStreamNetworkServiceTypeCallSignaling.value;

  set NSStreamNetworkServiceTypeCallSignaling(
          NSStreamNetworkServiceTypeValue value) =>
      _NSStreamNetworkServiceTypeCallSignaling.value = value;
}

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSCoder(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSCachedURLResponse(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSNotification(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    symbol: "wrapListenerBlock_ObjCBlock_ffiVoid_NSArray", isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray1(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock> wrapListenerBlock_ObjCBlock_ffiVoid_NSData(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData_bool_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLRequest(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSInputStream(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSError(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLHandle(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString(
  ffi.Pointer<objc.ObjCBlock> block,
);

@ffi.Native<ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCBlock>)>(
    isLeaf: true)
external ffi.Pointer<objc.ObjCBlock>
    wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent(
  ffi.Pointer<objc.ObjCBlock> block,
);

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError("Unknown value for idtype_t: $value"),
      };
}

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_suseconds_t = __int32_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;
void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
) =>
    (objc.getBlockClosure(block) as void Function())();

class ObjCBlock_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunction(void Function() fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_closureTrampoline)
                .cast(),
            () => fn()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid.listener(void Function() fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>)>.listener(
                    _ObjCBlock_ffiVoid_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            () => fn())));
  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>?
      _dartFuncListenerTrampoline;

  void call() => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>)>()(
        pointer,
      );
}

int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<ffi.Void> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>()
        .asFunction<
            int Function(
                ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>()(arg0, arg1);
int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<ffi.Void> arg1) =>
    (objc.getBlockClosure(block) as int Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>))(arg0, arg1);

class ObjCBlock_ffiInt_ffiVoid_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_ffiInt_ffiVoid_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiInt_ffiVoid_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiInt_ffiVoid_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiInt_ffiVoid_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Int Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrTrampoline, 0)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiInt_ffiVoid_ffiVoid.fromFunction(
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Int Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureTrampoline, 0)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1) =>
                fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  int call(ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1) => pointer
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>()(pointer, arg0, arg1);
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

final class objc_class extends ffi.Opaque {}

final class objc_object extends ffi.Struct {
  external ffi.Pointer<objc.ObjCObject> isa;
}

final class objc_selector extends ffi.Opaque {}

typedef objc_objectptr_t = ffi.Pointer<ffi.Void>;

/// NSObject
abstract final class NSObject {
  /// Builds an object that implements the NSObject protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required bool Function(objc.ObjCObjectBase) isEqual_,
      required objc.ObjCObjectBase Function() class1,
      required objc.ObjCObjectBase Function() self,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)
          performSelector_,
      required objc.ObjCObjectBase Function(
              ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          performSelector_withObject_,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
              objc.ObjCObjectBase, objc.ObjCObjectBase)
          performSelector_withObject_withObject_,
      required bool Function() isProxy,
      required bool Function(objc.ObjCObjectBase) isKindOfClass_,
      required bool Function(objc.ObjCObjectBase) isMemberOfClass_,
      required bool Function(objc.Protocol) conformsToProtocol_,
      required bool Function(ffi.Pointer<objc.ObjCSelector>)
          respondsToSelector_,
      required objc.ObjCObjectBase Function() retain,
      required void Function() release,
      required objc.ObjCObjectBase Function() autorelease,
      required DartNSUInteger Function() retainCount,
      required ffi.Pointer<_NSZone> Function() zone,
      required DartNSUInteger Function() hash,
      required objc.ObjCObjectBase Function() superclass,
      required objc.NSString Function() description,
      objc.NSString Function()? debugDescription}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(NSObject.isEqual_, isEqual_);
    builder.implementMethod(NSObject.class1, class1);
    builder.implementMethod(NSObject.self, self);
    builder.implementMethod(NSObject.performSelector_, performSelector_);
    builder.implementMethod(
        NSObject.performSelector_withObject_, performSelector_withObject_);
    builder.implementMethod(NSObject.performSelector_withObject_withObject_,
        performSelector_withObject_withObject_);
    builder.implementMethod(NSObject.isProxy, isProxy);
    builder.implementMethod(NSObject.isKindOfClass_, isKindOfClass_);
    builder.implementMethod(NSObject.isMemberOfClass_, isMemberOfClass_);
    builder.implementMethod(NSObject.conformsToProtocol_, conformsToProtocol_);
    builder.implementMethod(NSObject.respondsToSelector_, respondsToSelector_);
    builder.implementMethod(NSObject.retain, retain);
    builder.implementMethod(NSObject.release, release);
    builder.implementMethod(NSObject.autorelease, autorelease);
    builder.implementMethod(NSObject.retainCount, retainCount);
    builder.implementMethod(NSObject.zone, zone);
    builder.implementMethod(NSObject.hash, hash);
    builder.implementMethod(NSObject.superclass, superclass);
    builder.implementMethod(NSObject.description, description);
    builder.implementMethod(NSObject.debugDescription, debugDescription);
    return builder.build();
  }

  /// Adds the implementation of the NSObject protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required bool Function(objc.ObjCObjectBase) isEqual_,
      required objc.ObjCObjectBase Function() class1,
      required objc.ObjCObjectBase Function() self,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)
          performSelector_,
      required objc.ObjCObjectBase Function(
              ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          performSelector_withObject_,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
              objc.ObjCObjectBase, objc.ObjCObjectBase)
          performSelector_withObject_withObject_,
      required bool Function() isProxy,
      required bool Function(objc.ObjCObjectBase) isKindOfClass_,
      required bool Function(objc.ObjCObjectBase) isMemberOfClass_,
      required bool Function(objc.Protocol) conformsToProtocol_,
      required bool Function(ffi.Pointer<objc.ObjCSelector>)
          respondsToSelector_,
      required objc.ObjCObjectBase Function() retain,
      required void Function() release,
      required objc.ObjCObjectBase Function() autorelease,
      required DartNSUInteger Function() retainCount,
      required ffi.Pointer<_NSZone> Function() zone,
      required DartNSUInteger Function() hash,
      required objc.ObjCObjectBase Function() superclass,
      required objc.NSString Function() description,
      objc.NSString Function()? debugDescription}) {
    builder.implementMethod(NSObject.isEqual_, isEqual_);
    builder.implementMethod(NSObject.class1, class1);
    builder.implementMethod(NSObject.self, self);
    builder.implementMethod(NSObject.performSelector_, performSelector_);
    builder.implementMethod(
        NSObject.performSelector_withObject_, performSelector_withObject_);
    builder.implementMethod(NSObject.performSelector_withObject_withObject_,
        performSelector_withObject_withObject_);
    builder.implementMethod(NSObject.isProxy, isProxy);
    builder.implementMethod(NSObject.isKindOfClass_, isKindOfClass_);
    builder.implementMethod(NSObject.isMemberOfClass_, isMemberOfClass_);
    builder.implementMethod(NSObject.conformsToProtocol_, conformsToProtocol_);
    builder.implementMethod(NSObject.respondsToSelector_, respondsToSelector_);
    builder.implementMethod(NSObject.retain, retain);
    builder.implementMethod(NSObject.release, release);
    builder.implementMethod(NSObject.autorelease, autorelease);
    builder.implementMethod(NSObject.retainCount, retainCount);
    builder.implementMethod(NSObject.zone, zone);
    builder.implementMethod(NSObject.hash, hash);
    builder.implementMethod(NSObject.superclass, superclass);
    builder.implementMethod(NSObject.description, description);
    builder.implementMethod(NSObject.debugDescription, debugDescription);
  }

  /// isEqual:
  static final isEqual_ = objc.ObjCProtocolMethod(
    _sel_isEqual_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isEqual_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(objc.ObjCObjectBase),
    (Function func) => ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase arg1) => func(arg1)),
  );

  /// class
  static final class1 = objc.ObjCProtocolMethod(
    _sel_class,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_class,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// self
  static final self = objc.ObjCProtocolMethod(
    _sel_self,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_self,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// performSelector:
  static final performSelector_ = objc.ObjCProtocolMethod(
    _sel_performSelector_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_performSelector_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>),
    (Function func) =>
        ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector.fromFunction(
            (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> arg1) =>
                func(arg1)),
  );

  /// performSelector:withObject:
  static final performSelector_withObject_ = objc.ObjCProtocolMethod(
    _sel_performSelector_withObject_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_performSelector_withObject_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(
        ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase),
    (Function func) =>
        ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> arg1,
                    objc.ObjCObjectBase arg2) =>
                func(arg1, arg2)),
  );

  /// performSelector:withObject:withObject:
  static final performSelector_withObject_withObject_ = objc.ObjCProtocolMethod(
    _sel_performSelector_withObject_withObject_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_performSelector_withObject_withObject_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(
        ffi.Pointer<objc.ObjCSelector>,
        objc.ObjCObjectBase,
        objc.ObjCObjectBase),
    (Function func) =>
        ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> arg1,
                    objc.ObjCObjectBase arg2,
                    objc.ObjCObjectBase arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// isProxy
  static final isProxy = objc.ObjCProtocolMethod(
    _sel_isProxy,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isProxy,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(),
    (Function func) => ObjCBlock_bool_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// isKindOfClass:
  static final isKindOfClass_ = objc.ObjCProtocolMethod(
    _sel_isKindOfClass_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isKindOfClass_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(objc.ObjCObjectBase),
    (Function func) => ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase arg1) => func(arg1)),
  );

  /// isMemberOfClass:
  static final isMemberOfClass_ = objc.ObjCProtocolMethod(
    _sel_isMemberOfClass_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isMemberOfClass_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(objc.ObjCObjectBase),
    (Function func) => ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase arg1) => func(arg1)),
  );

  /// conformsToProtocol:
  static final conformsToProtocol_ = objc.ObjCProtocolMethod(
    _sel_conformsToProtocol_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_conformsToProtocol_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(objc.Protocol),
    (Function func) => ObjCBlock_bool_ffiVoid_Protocol.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.Protocol arg1) => func(arg1)),
  );

  /// respondsToSelector:
  static final respondsToSelector_ = objc.ObjCProtocolMethod(
    _sel_respondsToSelector_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_respondsToSelector_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(ffi.Pointer<objc.ObjCSelector>),
    (Function func) => ObjCBlock_bool_ffiVoid_objcObjCSelector.fromFunction(
        (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> arg1) =>
            func(arg1)),
  );

  /// retain
  static final retain = objc.ObjCProtocolMethod(
    _sel_retain,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_retain,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// release
  static final release = objc.ObjCProtocolListenableMethod(
    _sel_release,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_release,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid.listener((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// autorelease
  static final autorelease = objc.ObjCProtocolMethod(
    _sel_autorelease,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_autorelease,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// retainCount
  static final retainCount = objc.ObjCProtocolMethod(
    _sel_retainCount,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_retainCount,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is DartNSUInteger Function(),
    (Function func) => ObjCBlock_NSUInteger_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// zone
  static final zone = objc.ObjCProtocolMethod(
    _sel_zone,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_zone,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is ffi.Pointer<_NSZone> Function(),
    (Function func) => ObjCBlock_NSZone_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// hash
  static final hash = objc.ObjCProtocolMethod(
    _sel_hash,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_hash,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is DartNSUInteger Function(),
    (Function func) => ObjCBlock_NSUInteger_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// superclass
  static final superclass = objc.ObjCProtocolMethod(
    _sel_superclass,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_superclass,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.ObjCObjectBase Function(),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// description
  static final description = objc.ObjCProtocolMethod(
    _sel_description,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_description,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.NSString Function(),
    (Function func) => ObjCBlock_NSString_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// debugDescription
  static final debugDescription = objc.ObjCProtocolMethod(
    _sel_debugDescription,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_debugDescription,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.NSString Function(),
    (Function func) => ObjCBlock_NSString_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );
}

late final _protocol_NSObject = objc.getProtocol("NSObject");
late final _sel_isEqual_ = objc.registerName("isEqual:");
bool _ObjCBlock_bool_ffiVoid_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
bool _ObjCBlock_bool_ffiVoid_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_bool_ffiVoid_objcObjCObject extends objc.ObjCBlockBase {
  ObjCBlock_bool_ffiVoid_objcObjCObject._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_ffiVoid_objcObjCObject castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_ffiVoid_objcObjCObject._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunctionPointer(
      ffi
          .Pointer<
              ffi
              .NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc
            .newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_bool_ffiVoid_objcObjCObject_fnPtrTrampoline,
                        false)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
      bool Function(ffi.Pointer<ffi.Void>, objc.ObjCObjectBase) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_ffiVoid_objcObjCObject_closureTrampoline,
                    false)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0, objc.ObjCObjectBase(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(ffi.Pointer<ffi.Void> arg0, objc.ObjCObjectBase arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              bool Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1.pointer);
}

late final _sel_class = objc.registerName("class");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_objcObjCObject_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_objcObjCObject_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_objcObjCObject_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_objcObjCObject_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid.fromFunction(
      objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> arg0) => objc.ObjCObjectBase(
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<ffi.Void>)>()(pointer, arg0),
      retain: false,
      release: true);
}

typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_self = objc.registerName("self");
late final _sel_performSelector_ = objc.registerName("performSelector:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCSelector> arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCSelector> arg1)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCSelector>)>()(arg0, arg1);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCSelector> arg1) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>))(arg0, arg1);

class ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector
    extends objc.ObjCBlockBase {
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCSelector> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector.fromFunction(
      objc.ObjCObjectBase Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCSelector> arg1) =>
                fn(arg0, arg1).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.ObjCObjectBase call(
          ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCSelector> arg1) =>
      objc.ObjCObjectBase(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCSelector> arg1)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCSelector>)>()(pointer, arg0, arg1),
          retain: false,
          release: true);
}

late final _sel_performSelector_withObject_ =
    objc.registerName("performSelector:withObject:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCSelector> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCSelector> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCSelector>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCSelector> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject
    extends objc.ObjCBlockBase {
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCSelector> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject.fromFunction(
      objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCSelector> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(arg0, arg1, objc.ObjCObjectBase(arg2, retain: true, release: true)).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> arg0,
          ffi.Pointer<objc.ObjCSelector> arg1, objc.ObjCObjectBase arg2) =>
      objc.ObjCObjectBase(
          pointer.ref.invoke
                  .cast<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlock> block,
                              ffi.Pointer<ffi.Void> arg0,
                              ffi.Pointer<objc.ObjCSelector> arg1,
                              ffi.Pointer<objc.ObjCObject> arg2)>>()
                  .asFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<objc.ObjCSelector>,
                          ffi.Pointer<objc.ObjCObject>)>()(
              pointer, arg0, arg1, arg2.pointer),
          retain: false,
          release: true);
}

late final _sel_performSelector_withObject_withObject_ =
    objc.registerName("performSelector:withObject:withObject:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCSelector> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCSelector> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCSelector>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCSelector> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject
    extends objc.ObjCBlockBase {
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCSelector> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject.fromFunction(
      objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase, objc.ObjCObjectBase)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCSelector> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(arg0, arg1, objc.ObjCObjectBase(arg2, retain: true, release: true), objc.ObjCObjectBase(arg3, retain: true, release: true)).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.ObjCObjectBase call(
          ffi.Pointer<ffi.Void> arg0,
          ffi.Pointer<objc.ObjCSelector> arg1,
          objc.ObjCObjectBase arg2,
          objc.ObjCObjectBase arg3) =>
      objc.ObjCObjectBase(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCSelector> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCSelector>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1, arg2.pointer, arg3.pointer),
          retain: false,
          release: true);
}

late final _sel_isProxy = objc.registerName("isProxy");
bool _ObjCBlock_bool_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<bool Function(ffi.Pointer<ffi.Void>)>()(arg0);
bool _ObjCBlock_bool_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_bool_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_bool_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_ffiVoid._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc
            .newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>)>(
                        _ObjCBlock_bool_ffiVoid_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid.fromFunction(bool Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_bool_ffiVoid_closureTrampoline, false)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(ffi.Pointer<ffi.Void> arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0)>>()
      .asFunction<
          bool Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<ffi.Void>)>()(pointer, arg0);
}

late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
late final _sel_isMemberOfClass_ = objc.registerName("isMemberOfClass:");
late final _sel_conformsToProtocol_ = objc.registerName("conformsToProtocol:");
bool _ObjCBlock_bool_ffiVoid_Protocol_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
bool _ObjCBlock_bool_ffiVoid_Protocol_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_bool_ffiVoid_Protocol extends objc.ObjCBlockBase {
  ObjCBlock_bool_ffiVoid_Protocol._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_ffiVoid_Protocol castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_ffiVoid_Protocol._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid_Protocol.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_ffiVoid_Protocol_fnPtrTrampoline, false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid_Protocol.fromFunction(
      bool Function(ffi.Pointer<ffi.Void>, objc.Protocol) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_ffiVoid_Protocol_closureTrampoline, false)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0,
                objc.Protocol.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(ffi.Pointer<ffi.Void> arg0, objc.Protocol arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              bool Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1.pointer);
}

late final _sel_respondsToSelector_ = objc.registerName("respondsToSelector:");
bool _ObjCBlock_bool_ffiVoid_objcObjCSelector_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCSelector> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCSelector> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCSelector>)>()(arg0, arg1);
bool _ObjCBlock_bool_ffiVoid_objcObjCSelector_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCSelector> arg1) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>))(arg0, arg1);

class ObjCBlock_bool_ffiVoid_objcObjCSelector extends objc.ObjCBlockBase {
  ObjCBlock_bool_ffiVoid_objcObjCSelector._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_ffiVoid_objcObjCSelector castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_ffiVoid_objcObjCSelector._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid_objcObjCSelector.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCSelector> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>)>(
                    _ObjCBlock_bool_ffiVoid_objcObjCSelector_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiVoid_objcObjCSelector.fromFunction(
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCSelector>)>(
                    _ObjCBlock_bool_ffiVoid_objcObjCSelector_closureTrampoline,
                    false)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCSelector> arg1) =>
                fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCSelector> arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCSelector> arg1)>>()
          .asFunction<
              bool Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCSelector>)>()(pointer, arg0, arg1);
}

late final _sel_retain = objc.registerName("retain");
late final _sel_release = objc.registerName("release");
void _ObjCBlock_ffiVoid_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<void Function(ffi.Pointer<ffi.Void>)>()(arg0);
void _ObjCBlock_ffiVoid_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_ffiVoid_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc
            .newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>)>(
                        _ObjCBlock_ffiVoid_ffiVoid_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid.fromFunction(
      void Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid.listener(void Function(ffi.Pointer<ffi.Void>) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>)>?
      _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<ffi.Void>)>()(pointer, arg0);
}

late final _sel_autorelease = objc.registerName("autorelease");
typedef NSUInteger = ffi.UnsignedLong;
typedef DartNSUInteger = int;
late final _sel_retainCount = objc.registerName("retainCount");
int _ObjCBlock_NSUInteger_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi
            .NativeFunction<NSUInteger Function(ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<int Function(ffi.Pointer<ffi.Void>)>()(arg0);
int _ObjCBlock_NSUInteger_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as int Function(ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_NSUInteger_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_NSUInteger_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSUInteger_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSUInteger_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSUInteger_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi
              .NativeFunction<NSUInteger Function(ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSUInteger Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSUInteger_ffiVoid_fnPtrTrampoline, 0)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSUInteger_ffiVoid.fromFunction(
      DartNSUInteger Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSUInteger Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSUInteger_ffiVoid_closureTrampoline, 0)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  DartNSUInteger call(ffi.Pointer<ffi.Void> arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              NSUInteger Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0)>>()
      .asFunction<
          int Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<ffi.Void>)>()(pointer, arg0);
}

final class _NSZone extends ffi.Opaque {}

late final _sel_zone = objc.registerName("zone");
ffi.Pointer<_NSZone> _ObjCBlock_NSZone_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<_NSZone> _ObjCBlock_NSZone_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<_NSZone> Function(
        ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_NSZone_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_NSZone_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSZone_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSZone_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSZone_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<_NSZone> Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>)>(
                        _ObjCBlock_NSZone_ffiVoid_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSZone_ffiVoid.fromFunction(
      ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<_NSZone> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSZone_ffiVoid_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  ffi.Pointer<_NSZone> call(ffi.Pointer<ffi.Void> arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<_NSZone> Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0)>>()
      .asFunction<
          ffi.Pointer<_NSZone> Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<ffi.Void>)>()(pointer, arg0);
}

late final _sel_hash = objc.registerName("hash");
late final _sel_superclass = objc.registerName("superclass");
late final _sel_description = objc.registerName("description");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSString_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSString_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_NSString_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_NSString_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSString_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSString_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSString_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSString_ffiVoid_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSString_ffiVoid.fromFunction(
      objc.NSString Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSString_ffiVoid_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.NSString call(ffi.Pointer<ffi.Void> arg0) =>
      objc.NSString.castFromPointer(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>)>()(pointer, arg0),
          retain: false,
          release: true);
}

late final _sel_debugDescription = objc.registerName("debugDescription");
typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;

enum NSComparisonResult {
  NSOrderedAscending(-1),
  NSOrderedSame(0),
  NSOrderedDescending(1);

  final int value;
  const NSComparisonResult(this.value);

  static NSComparisonResult fromValue(int value) => switch (value) {
        -1 => NSOrderedAscending,
        0 => NSOrderedSame,
        1 => NSOrderedDescending,
        _ =>
          throw ArgumentError("Unknown value for NSComparisonResult: $value"),
      };
}

enum NSEnumerationOptions {
  NSEnumerationConcurrent(1),
  NSEnumerationReverse(2);

  final int value;
  const NSEnumerationOptions(this.value);

  static NSEnumerationOptions fromValue(int value) => switch (value) {
        1 => NSEnumerationConcurrent,
        2 => NSEnumerationReverse,
        _ =>
          throw ArgumentError("Unknown value for NSEnumerationOptions: $value"),
      };
}

enum NSSortOptions {
  NSSortConcurrent(1),
  NSSortStable(16);

  final int value;
  const NSSortOptions(this.value);

  static NSSortOptions fromValue(int value) => switch (value) {
        1 => NSSortConcurrent,
        16 => NSSortStable,
        _ => throw ArgumentError("Unknown value for NSSortOptions: $value"),
      };
}

enum NSQualityOfService {
  NSQualityOfServiceUserInteractive(33),
  NSQualityOfServiceUserInitiated(25),
  NSQualityOfServiceUtility(17),
  NSQualityOfServiceBackground(9),
  NSQualityOfServiceDefault(-1);

  final int value;
  const NSQualityOfService(this.value);

  static NSQualityOfService fromValue(int value) => switch (value) {
        33 => NSQualityOfServiceUserInteractive,
        25 => NSQualityOfServiceUserInitiated,
        17 => NSQualityOfServiceUtility,
        9 => NSQualityOfServiceBackground,
        -1 => NSQualityOfServiceDefault,
        _ =>
          throw ArgumentError("Unknown value for NSQualityOfService: $value"),
      };
}

typedef NSInteger = ffi.Long;
typedef DartNSInteger = int;

enum ptrauth_key {
  ptrauth_key_none(-1),
  ptrauth_key_asia(0),
  ptrauth_key_asib(1),
  ptrauth_key_asda(2),
  ptrauth_key_asdb(3);

  static const ptrauth_key_process_independent_code = ptrauth_key_asia;
  static const ptrauth_key_process_dependent_code = ptrauth_key_asib;
  static const ptrauth_key_process_independent_data = ptrauth_key_asda;
  static const ptrauth_key_process_dependent_data = ptrauth_key_asdb;
  static const ptrauth_key_function_pointer = ptrauth_key_asia;
  static const ptrauth_key_return_address = ptrauth_key_asib;
  static const ptrauth_key_frame_pointer = ptrauth_key_asdb;
  static const ptrauth_key_block_function = ptrauth_key_asia;
  static const ptrauth_key_cxx_vtable_pointer = ptrauth_key_asda;
  static const ptrauth_key_method_list_pointer = ptrauth_key_asda;
  static const ptrauth_key_objc_isa_pointer = ptrauth_key_asda;
  static const ptrauth_key_objc_super_pointer = ptrauth_key_asda;
  static const ptrauth_key_block_descriptor_pointer = ptrauth_key_asda;
  static const ptrauth_key_objc_sel_pointer = ptrauth_key_asdb;
  static const ptrauth_key_objc_class_ro_pointer = ptrauth_key_asda;

  final int value;
  const ptrauth_key(this.value);

  static ptrauth_key fromValue(int value) => switch (value) {
        -1 => ptrauth_key_none,
        0 => ptrauth_key_asia,
        1 => ptrauth_key_asib,
        2 => ptrauth_key_asda,
        3 => ptrauth_key_asdb,
        _ => throw ArgumentError("Unknown value for ptrauth_key: $value"),
      };

  @override
  String toString() {
    if (this == ptrauth_key_asia)
      return "ptrauth_key.ptrauth_key_asia, ptrauth_key.ptrauth_key_process_independent_code, ptrauth_key.ptrauth_key_function_pointer, ptrauth_key.ptrauth_key_block_function";
    if (this == ptrauth_key_asib)
      return "ptrauth_key.ptrauth_key_asib, ptrauth_key.ptrauth_key_process_dependent_code, ptrauth_key.ptrauth_key_return_address";
    if (this == ptrauth_key_asda)
      return "ptrauth_key.ptrauth_key_asda, ptrauth_key.ptrauth_key_process_independent_data, ptrauth_key.ptrauth_key_cxx_vtable_pointer, ptrauth_key.ptrauth_key_method_list_pointer, ptrauth_key.ptrauth_key_objc_isa_pointer, ptrauth_key.ptrauth_key_objc_super_pointer, ptrauth_key.ptrauth_key_block_descriptor_pointer, ptrauth_key.ptrauth_key_objc_class_ro_pointer";
    if (this == ptrauth_key_asdb)
      return "ptrauth_key.ptrauth_key_asdb, ptrauth_key.ptrauth_key_process_dependent_data, ptrauth_key.ptrauth_key_frame_pointer, ptrauth_key.ptrauth_key_objc_sel_pointer";
    return super.toString();
  }
}

@ffi.Packed(2)
final class wide extends ffi.Struct {
  @UInt32()
  external int lo;

  @SInt32()
  external int hi;
}

typedef UInt32 = ffi.UnsignedInt;
typedef DartUInt32 = int;
typedef SInt32 = ffi.Int;
typedef DartSInt32 = int;

@ffi.Packed(2)
final class UnsignedWide extends ffi.Struct {
  @UInt32()
  external int lo;

  @UInt32()
  external int hi;
}

final class Float80 extends ffi.Struct {
  @SInt16()
  external int exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

typedef SInt16 = ffi.Short;
typedef DartSInt16 = int;
typedef UInt16 = ffi.UnsignedShort;
typedef DartUInt16 = int;

final class Float96 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<SInt16> exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

@ffi.Packed(2)
final class Float32Point extends ffi.Struct {
  @Float32()
  external double x;

  @Float32()
  external double y;
}

typedef Float32 = ffi.Float;
typedef DartFloat32 = double;

@ffi.Packed(2)
final class ProcessSerialNumber extends ffi.Struct {
  @UInt32()
  external int highLongOfPSN;

  @UInt32()
  external int lowLongOfPSN;
}

final class Point extends ffi.Struct {
  @ffi.Short()
  external int v;

  @ffi.Short()
  external int h;
}

final class Rect extends ffi.Struct {
  @ffi.Short()
  external int top;

  @ffi.Short()
  external int left;

  @ffi.Short()
  external int bottom;

  @ffi.Short()
  external int right;
}

@ffi.Packed(2)
final class FixedPoint extends ffi.Struct {
  @Fixed()
  external int x;

  @Fixed()
  external int y;
}

typedef Fixed = SInt32;

@ffi.Packed(2)
final class FixedRect extends ffi.Struct {
  @Fixed()
  external int left;

  @Fixed()
  external int top;

  @Fixed()
  external int right;

  @Fixed()
  external int bottom;
}

final class TimeBaseRecord extends ffi.Opaque {}

@ffi.Packed(2)
final class TimeRecord extends ffi.Struct {
  external CompTimeValue value;

  @TimeScale()
  external int scale;

  external TimeBase base;
}

typedef CompTimeValue = wide;
typedef TimeScale = SInt32;
typedef TimeBase = ffi.Pointer<TimeBaseRecord>;

final class NumVersion extends ffi.Struct {
  @UInt8()
  external int nonRelRev;

  @UInt8()
  external int stage;

  @UInt8()
  external int minorAndBugRev;

  @UInt8()
  external int majorRev;
}

typedef UInt8 = ffi.UnsignedChar;
typedef DartUInt8 = int;

final class NumVersionVariant extends ffi.Union {
  external NumVersion parts;

  @UInt32()
  external int whole;
}

final class VersRec extends ffi.Struct {
  external NumVersion numericVersion;

  @ffi.Short()
  external int countryCode;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> shortVersion;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> reserved;
}

typedef ConstStr255Param = ffi.Pointer<ffi.UnsignedChar>;

final class __CFString extends ffi.Opaque {}

enum CFComparisonResult {
  kCFCompareLessThan(-1),
  kCFCompareEqualTo(0),
  kCFCompareGreaterThan(1);

  final int value;
  const CFComparisonResult(this.value);

  static CFComparisonResult fromValue(int value) => switch (value) {
        -1 => kCFCompareLessThan,
        0 => kCFCompareEqualTo,
        1 => kCFCompareGreaterThan,
        _ =>
          throw ArgumentError("Unknown value for CFComparisonResult: $value"),
      };
}

typedef CFIndex = ffi.Long;
typedef DartCFIndex = int;

final class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

final class __CFNull extends ffi.Opaque {}

typedef CFTypeID = ffi.UnsignedLong;
typedef DartCFTypeID = int;
typedef CFNullRef = ffi.Pointer<__CFNull>;

final class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

final class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

typedef CFAllocatorRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorRetainCallBackFunction>>;
typedef CFAllocatorRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorReleaseCallBackFunction>>;
typedef CFAllocatorReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFAllocatorCopyDescriptionCallBackFunction>>;
typedef CFAllocatorCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);
typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFAllocatorAllocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorAllocateCallBackFunction>>;
typedef CFAllocatorAllocateCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFIndex allocSize, CFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorAllocateCallBackFunction
    = ffi.Pointer<ffi.Void> Function(DartCFIndex allocSize,
        DartCFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef CFOptionFlags = ffi.UnsignedLong;
typedef DartCFOptionFlags = int;
typedef CFAllocatorReallocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorReallocateCallBackFunction>>;
typedef CFAllocatorReallocateCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr,
    CFIndex newsize,
    CFOptionFlags hint,
    ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorReallocateCallBackFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> ptr,
        DartCFIndex newsize,
        DartCFOptionFlags hint,
        ffi.Pointer<ffi.Void> info);
typedef CFAllocatorDeallocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorDeallocateCallBackFunction>>;
typedef CFAllocatorDeallocateCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorDeallocateCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> info);
typedef CFAllocatorPreferredSizeCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorPreferredSizeCallBackFunction>>;
typedef CFAllocatorPreferredSizeCallBackFunction = CFIndex Function(
    CFIndex size, CFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorPreferredSizeCallBackFunction = DartCFIndex Function(
    DartCFIndex size, DartCFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef Boolean = ffi.UnsignedChar;
typedef DartBoolean = int;
typedef CFHashCode = ffi.UnsignedLong;
typedef DartCFHashCode = int;
typedef NSZone = _NSZone;

/// NSCopying
abstract final class NSCopying {
  /// Builds an object that implements the NSCopying protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required objc.ObjCObjectBase Function(ffi.Pointer<NSZone>)
          copyWithZone_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(NSCopying.copyWithZone_, copyWithZone_);
    return builder.build();
  }

  /// Adds the implementation of the NSCopying protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required objc.ObjCObjectBase Function(ffi.Pointer<NSZone>)
          copyWithZone_}) {
    builder.implementMethod(NSCopying.copyWithZone_, copyWithZone_);
  }

  /// copyWithZone:
  static final copyWithZone_ = objc.ObjCProtocolMethod(
    _sel_copyWithZone_,
    objc.getProtocolMethodSignature(
      _protocol_NSCopying,
      _sel_copyWithZone_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is objc.ObjCObjectBase Function(ffi.Pointer<NSZone>),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid_NSZone.fromFunction(
        (ffi.Pointer<ffi.Void> _, ffi.Pointer<NSZone> arg1) => func(arg1)),
  );
}

late final _protocol_NSCopying = objc.getProtocol("NSCopying");
late final _sel_copyWithZone_ = objc.registerName("copyWithZone:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_NSZone_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<NSZone> arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<NSZone> arg1)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<NSZone>)>()(arg0, arg1);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_NSZone_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<NSZone> arg1) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<NSZone>))(arg0, arg1);

class ObjCBlock_objcObjCObject_ffiVoid_NSZone extends objc.ObjCBlockBase {
  ObjCBlock_objcObjCObject_ffiVoid_NSZone._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_objcObjCObject_ffiVoid_NSZone castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_objcObjCObject_ffiVoid_NSZone._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_NSZone.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0, ffi.Pointer<NSZone> arg1)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<objc.ObjCObject> Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<NSZone>)>(
                        _ObjCBlock_objcObjCObject_ffiVoid_NSZone_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_ffiVoid_NSZone.fromFunction(
      objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>, ffi.Pointer<NSZone>)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<NSZone>)>(
                    _ObjCBlock_objcObjCObject_ffiVoid_NSZone_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<NSZone> arg1) =>
                fn(arg0, arg1).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.ObjCObjectBase call(
          ffi.Pointer<ffi.Void> arg0, ffi.Pointer<NSZone> arg1) =>
      objc.ObjCObjectBase(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<NSZone> arg1)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<NSZone>)>()(pointer, arg0, arg1),
          retain: false,
          release: true);
}

/// NSMutableCopying
abstract final class NSMutableCopying {
  /// Builds an object that implements the NSMutableCopying protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required objc.ObjCObjectBase Function(ffi.Pointer<NSZone>)
          mutableCopyWithZone_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSMutableCopying.mutableCopyWithZone_, mutableCopyWithZone_);
    return builder.build();
  }

  /// Adds the implementation of the NSMutableCopying protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required objc.ObjCObjectBase Function(ffi.Pointer<NSZone>)
          mutableCopyWithZone_}) {
    builder.implementMethod(
        NSMutableCopying.mutableCopyWithZone_, mutableCopyWithZone_);
  }

  /// mutableCopyWithZone:
  static final mutableCopyWithZone_ = objc.ObjCProtocolMethod(
    _sel_mutableCopyWithZone_,
    objc.getProtocolMethodSignature(
      _protocol_NSMutableCopying,
      _sel_mutableCopyWithZone_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is objc.ObjCObjectBase Function(ffi.Pointer<NSZone>),
    (Function func) => ObjCBlock_objcObjCObject_ffiVoid_NSZone.fromFunction(
        (ffi.Pointer<ffi.Void> _, ffi.Pointer<NSZone> arg1) => func(arg1)),
  );
}

late final _protocol_NSMutableCopying = objc.getProtocol("NSMutableCopying");
late final _sel_mutableCopyWithZone_ =
    objc.registerName("mutableCopyWithZone:");

/// NSCoding
abstract final class NSCoding {
  /// Builds an object that implements the NSCoding protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required void Function(objc.NSCoder) encodeWithCoder_,
      required Dartinstancetype? Function(objc.NSCoder) initWithCoder_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(NSCoding.encodeWithCoder_, encodeWithCoder_);
    builder.implementMethod(NSCoding.initWithCoder_, initWithCoder_);
    return builder.build();
  }

  /// Adds the implementation of the NSCoding protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required void Function(objc.NSCoder) encodeWithCoder_,
      required Dartinstancetype? Function(objc.NSCoder) initWithCoder_}) {
    builder.implementMethod(NSCoding.encodeWithCoder_, encodeWithCoder_);
    builder.implementMethod(NSCoding.initWithCoder_, initWithCoder_);
  }

  /// encodeWithCoder:
  static final encodeWithCoder_ = objc.ObjCProtocolListenableMethod(
    _sel_encodeWithCoder_,
    objc.getProtocolMethodSignature(
      _protocol_NSCoding,
      _sel_encodeWithCoder_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSCoder),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSCoder.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSCoder arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSCoder.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSCoder arg1) => func(arg1)),
  );

  /// initWithCoder:
  static final initWithCoder_ = objc.ObjCProtocolMethod(
    _sel_initWithCoder_,
    objc.getProtocolMethodSignature(
      _protocol_NSCoding,
      _sel_initWithCoder_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is Dartinstancetype? Function(objc.NSCoder),
    (Function func) => ObjCBlock_instancetype_ffiVoid_NSCoder.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSCoder arg1) => func(arg1)),
  );
}

late final _protocol_NSCoding = objc.getProtocol("NSCoding");
late final _sel_encodeWithCoder_ = objc.registerName("encodeWithCoder:");
void _ObjCBlock_ffiVoid_ffiVoid_NSCoder_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_NSCoder extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSCoder._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSCoder castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSCoder._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSCoder.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(
            objc
                .newPointerBlock(
                    _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                                ffi.Void Function(
                                    ffi.Pointer<objc.ObjCBlock>,
                                    ffi.Pointer<ffi.Void>,
                                    ffi.Pointer<objc.ObjCObject>)>(
                            _ObjCBlock_ffiVoid_ffiVoid_NSCoder_fnPtrTrampoline)
                        .cast(),
                    ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSCoder.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, objc.NSCoder) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0,
                objc.NSCoder.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSCoder.listener(
      void Function(ffi.Pointer<ffi.Void>, objc.NSCoder) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSCoder(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1) =>
                    fn(arg0, objc.NSCoder.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, objc.NSCoder arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0,
                  ffi.Pointer<objc.ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1.pointer);
}

late final _sel_initWithCoder_ = objc.registerName("initWithCoder:");
instancetype _ObjCBlock_instancetype_ffiVoid_NSCoder_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                instancetype Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            instancetype Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
instancetype _ObjCBlock_instancetype_ffiVoid_NSCoder_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as instancetype Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_instancetype_ffiVoid_NSCoder extends objc.ObjCBlockBase {
  ObjCBlock_instancetype_ffiVoid_NSCoder._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_instancetype_ffiVoid_NSCoder castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_instancetype_ffiVoid_NSCoder._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_instancetype_ffiVoid_NSCoder.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  instancetype Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            instancetype Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_instancetype_ffiVoid_NSCoder_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_instancetype_ffiVoid_NSCoder.fromFunction(
      Dartinstancetype? Function(ffi.Pointer<ffi.Void>, objc.NSCoder) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        instancetype Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_instancetype_ffiVoid_NSCoder_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                fn(arg0, objc.NSCoder.castFromPointer(arg1, retain: true, release: true))
                    ?.retainAndReturnPointer() ??
                ffi.nullptr));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  Dartinstancetype? call(ffi.Pointer<ffi.Void> arg0, objc.NSCoder arg1) => pointer
              .ref.invoke
              .cast<
                  ffi.NativeFunction<
                      instancetype Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<instancetype Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()
              (pointer, arg0, arg1.pointer)
              .address ==
          0
      ? null
      : objc.ObjCObjectBase(
          pointer.ref.invoke
              .cast<ffi.NativeFunction<instancetype Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<instancetype Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1.pointer),
          retain: false,
          release: true);
}

/// NSSecureCoding
abstract final class NSSecureCoding {
  /// Builds an object that implements the NSSecureCoding protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required bool Function() supportsSecureCoding,
      required void Function(objc.NSCoder) encodeWithCoder_,
      required Dartinstancetype? Function(objc.NSCoder) initWithCoder_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSSecureCoding.supportsSecureCoding, supportsSecureCoding);
    builder.implementMethod(NSSecureCoding.encodeWithCoder_, encodeWithCoder_);
    builder.implementMethod(NSSecureCoding.initWithCoder_, initWithCoder_);
    return builder.build();
  }

  /// Adds the implementation of the NSSecureCoding protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required bool Function() supportsSecureCoding,
      required void Function(objc.NSCoder) encodeWithCoder_,
      required Dartinstancetype? Function(objc.NSCoder) initWithCoder_}) {
    builder.implementMethod(
        NSSecureCoding.supportsSecureCoding, supportsSecureCoding);
    builder.implementMethod(NSSecureCoding.encodeWithCoder_, encodeWithCoder_);
    builder.implementMethod(NSSecureCoding.initWithCoder_, initWithCoder_);
  }

  /// supportsSecureCoding
  static final supportsSecureCoding = objc.ObjCProtocolMethod(
    _sel_supportsSecureCoding,
    objc.getProtocolMethodSignature(
      _protocol_NSSecureCoding,
      _sel_supportsSecureCoding,
      isRequired: true,
      isInstanceMethod: false,
    ),
    (Function func) => func is bool Function(),
    (Function func) => ObjCBlock_bool_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// encodeWithCoder:
  static final encodeWithCoder_ = objc.ObjCProtocolListenableMethod(
    _sel_encodeWithCoder_,
    objc.getProtocolMethodSignature(
      _protocol_NSSecureCoding,
      _sel_encodeWithCoder_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSCoder),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSCoder.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSCoder arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSCoder.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSCoder arg1) => func(arg1)),
  );

  /// initWithCoder:
  static final initWithCoder_ = objc.ObjCProtocolMethod(
    _sel_initWithCoder_,
    objc.getProtocolMethodSignature(
      _protocol_NSSecureCoding,
      _sel_initWithCoder_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is Dartinstancetype? Function(objc.NSCoder),
    (Function func) => ObjCBlock_instancetype_ffiVoid_NSCoder.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSCoder arg1) => func(arg1)),
  );
}

late final _protocol_NSSecureCoding = objc.getProtocol("NSSecureCoding");
late final _sel_supportsSecureCoding =
    objc.registerName("supportsSecureCoding");

/// NSDiscardableContent
abstract final class NSDiscardableContent {
  /// Builds an object that implements the NSDiscardableContent protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required bool Function() beginContentAccess,
      required void Function() endContentAccess,
      required void Function() discardContentIfPossible,
      required bool Function() isContentDiscarded}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSDiscardableContent.beginContentAccess, beginContentAccess);
    builder.implementMethod(
        NSDiscardableContent.endContentAccess, endContentAccess);
    builder.implementMethod(NSDiscardableContent.discardContentIfPossible,
        discardContentIfPossible);
    builder.implementMethod(
        NSDiscardableContent.isContentDiscarded, isContentDiscarded);
    return builder.build();
  }

  /// Adds the implementation of the NSDiscardableContent protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required bool Function() beginContentAccess,
      required void Function() endContentAccess,
      required void Function() discardContentIfPossible,
      required bool Function() isContentDiscarded}) {
    builder.implementMethod(
        NSDiscardableContent.beginContentAccess, beginContentAccess);
    builder.implementMethod(
        NSDiscardableContent.endContentAccess, endContentAccess);
    builder.implementMethod(NSDiscardableContent.discardContentIfPossible,
        discardContentIfPossible);
    builder.implementMethod(
        NSDiscardableContent.isContentDiscarded, isContentDiscarded);
  }

  /// beginContentAccess
  static final beginContentAccess = objc.ObjCProtocolMethod(
    _sel_beginContentAccess,
    objc.getProtocolMethodSignature(
      _protocol_NSDiscardableContent,
      _sel_beginContentAccess,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(),
    (Function func) => ObjCBlock_bool_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// endContentAccess
  static final endContentAccess = objc.ObjCProtocolListenableMethod(
    _sel_endContentAccess,
    objc.getProtocolMethodSignature(
      _protocol_NSDiscardableContent,
      _sel_endContentAccess,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid.listener((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// discardContentIfPossible
  static final discardContentIfPossible = objc.ObjCProtocolListenableMethod(
    _sel_discardContentIfPossible,
    objc.getProtocolMethodSignature(
      _protocol_NSDiscardableContent,
      _sel_discardContentIfPossible,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid.listener((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// isContentDiscarded
  static final isContentDiscarded = objc.ObjCProtocolMethod(
    _sel_isContentDiscarded,
    objc.getProtocolMethodSignature(
      _protocol_NSDiscardableContent,
      _sel_isContentDiscarded,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is bool Function(),
    (Function func) => ObjCBlock_bool_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );
}

late final _protocol_NSDiscardableContent =
    objc.getProtocol("NSDiscardableContent");
late final _sel_beginContentAccess = objc.registerName("beginContentAccess");
late final _sel_endContentAccess = objc.registerName("endContentAccess");
late final _sel_discardContentIfPossible =
    objc.registerName("discardContentIfPossible");
late final _sel_isContentDiscarded = objc.registerName("isContentDiscarded");

final class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<objc.ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

/// NSFastEnumeration
abstract final class NSFastEnumeration {
  /// Builds an object that implements the NSFastEnumeration protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required DartNSUInteger Function(ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>, DartNSUInteger)
          countByEnumeratingWithState_objects_count_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSFastEnumeration.countByEnumeratingWithState_objects_count_,
        countByEnumeratingWithState_objects_count_);
    return builder.build();
  }

  /// Adds the implementation of the NSFastEnumeration protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required DartNSUInteger Function(ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>, DartNSUInteger)
          countByEnumeratingWithState_objects_count_}) {
    builder.implementMethod(
        NSFastEnumeration.countByEnumeratingWithState_objects_count_,
        countByEnumeratingWithState_objects_count_);
  }

  /// countByEnumeratingWithState:objects:count:
  static final countByEnumeratingWithState_objects_count_ =
      objc.ObjCProtocolMethod(
    _sel_countByEnumeratingWithState_objects_count_,
    objc.getProtocolMethodSignature(
      _protocol_NSFastEnumeration,
      _sel_countByEnumeratingWithState_objects_count_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is DartNSUInteger Function(
        ffi.Pointer<NSFastEnumerationState>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        DartNSUInteger),
    (Function func) =>
        ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<NSFastEnumerationState> arg1,
                    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
                    DartNSUInteger arg3) =>
                func(arg1, arg2, arg3)),
  );
}

late final _protocol_NSFastEnumeration = objc.getProtocol("NSFastEnumeration");
late final _sel_countByEnumeratingWithState_objects_count_ =
    objc.registerName("countByEnumeratingWithState:objects:count:");
int _ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<NSFastEnumerationState> arg1,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
        int arg3) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                NSUInteger Function(
                    ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<NSFastEnumerationState> arg1,
                    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
                    NSUInteger arg3)>>()
        .asFunction<
            int Function(
                ffi.Pointer<ffi.Void>,
                ffi.Pointer<NSFastEnumerationState>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                int)>()(arg0, arg1, arg2, arg3);
int _ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<NSFastEnumerationState> arg1,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
        int arg3) =>
    (objc.getBlockClosure(block) as int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<NSFastEnumerationState>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        int))(arg0, arg1, arg2, arg3);

class ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger
    extends objc.ObjCBlockBase {
  ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSUInteger Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<NSFastEnumerationState> arg1,
                      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
                      NSUInteger arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSUInteger Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<NSFastEnumerationState>,
                            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                            NSUInteger)>(
                    _ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger_fnPtrTrampoline,
                    0)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger.fromFunction(
      DartNSUInteger Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              DartNSUInteger)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSUInteger Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<NSFastEnumerationState>,
                            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                            NSUInteger)>(
                    _ObjCBlock_NSUInteger_ffiVoid_NSFastEnumerationState_objcObjCObject_NSUInteger_closureTrampoline, 0)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<NSFastEnumerationState> arg1, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2, int arg3) =>
                fn(arg0, arg1, arg2, arg3)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  DartNSUInteger call(
          ffi.Pointer<ffi.Void> arg0,
          ffi.Pointer<NSFastEnumerationState> arg1,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
          DartNSUInteger arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  NSUInteger Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<NSFastEnumerationState> arg1,
                      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg2,
                      NSUInteger arg3)>>()
          .asFunction<
              int Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<NSFastEnumerationState>,
                  ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                  int)>()(pointer, arg0, arg1, arg2, arg3);
}

final class _NSRange extends ffi.Struct {
  @NSUInteger()
  external int location;

  @NSUInteger()
  external int length;
}

typedef NSRange = _NSRange;

enum NSCollectionChangeType {
  NSCollectionChangeInsert(0),
  NSCollectionChangeRemove(1);

  final int value;
  const NSCollectionChangeType(this.value);

  static NSCollectionChangeType fromValue(int value) => switch (value) {
        0 => NSCollectionChangeInsert,
        1 => NSCollectionChangeRemove,
        _ => throw ArgumentError(
            "Unknown value for NSCollectionChangeType: $value"),
      };
}

/// NSOrderedCollectionChange
class NSOrderedCollectionChange extends objc.NSObject {
  NSOrderedCollectionChange._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOrderedCollectionChange] that points to the same underlying object as [other].
  NSOrderedCollectionChange.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOrderedCollectionChange] that wraps the given raw object pointer.
  NSOrderedCollectionChange.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOrderedCollectionChange].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOrderedCollectionChange);
  }

  /// changeWithObject:type:index:
  static NSOrderedCollectionChange changeWithObject_type_index_(
      objc.ObjCObjectBase? anObject,
      NSCollectionChangeType type,
      DartNSUInteger index) {
    final _ret = _objc_msgSend_1(
        _class_NSOrderedCollectionChange,
        _sel_changeWithObject_type_index_,
        anObject?.pointer ?? ffi.nullptr,
        type.value,
        index);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// changeWithObject:type:index:associatedIndex:
  static NSOrderedCollectionChange changeWithObject_type_index_associatedIndex_(
      objc.ObjCObjectBase? anObject,
      NSCollectionChangeType type,
      DartNSUInteger index,
      DartNSUInteger associatedIndex) {
    final _ret = _objc_msgSend_2(
        _class_NSOrderedCollectionChange,
        _sel_changeWithObject_type_index_associatedIndex_,
        anObject?.pointer ?? ffi.nullptr,
        type.value,
        index,
        associatedIndex);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// object
  objc.ObjCObjectBase? get object {
    final _ret = _objc_msgSend_3(this.pointer, _sel_object);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// changeType
  NSCollectionChangeType get changeType {
    final _ret = _objc_msgSend_4(this.pointer, _sel_changeType);
    return NSCollectionChangeType.fromValue(_ret);
  }

  /// index
  DartNSUInteger get index {
    return _objc_msgSend_5(this.pointer, _sel_index);
  }

  /// associatedIndex
  DartNSUInteger get associatedIndex {
    return _objc_msgSend_5(this.pointer, _sel_associatedIndex);
  }

  /// init
  NSOrderedCollectionChange init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithObject:type:index:
  NSOrderedCollectionChange initWithObject_type_index_(
      objc.ObjCObjectBase? anObject,
      NSCollectionChangeType type,
      DartNSUInteger index) {
    final _ret = _objc_msgSend_7(this.pointer, _sel_initWithObject_type_index_,
        anObject?.pointer ?? ffi.nullptr, type.value, index);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithObject:type:index:associatedIndex:
  NSOrderedCollectionChange initWithObject_type_index_associatedIndex_(
      objc.ObjCObjectBase? anObject,
      NSCollectionChangeType type,
      DartNSUInteger index,
      DartNSUInteger associatedIndex) {
    final _ret = _objc_msgSend_8(
        this.pointer,
        _sel_initWithObject_type_index_associatedIndex_,
        anObject?.pointer ?? ffi.nullptr,
        type.value,
        index,
        associatedIndex);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSOrderedCollectionChange new1() {
    final _ret = _objc_msgSend_6(_class_NSOrderedCollectionChange, _sel_new);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSOrderedCollectionChange allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSOrderedCollectionChange, _sel_allocWithZone_, zone);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSOrderedCollectionChange alloc() {
    final _ret = _objc_msgSend_6(_class_NSOrderedCollectionChange, _sel_alloc);
    return NSOrderedCollectionChange.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSOrderedCollectionChange =
    objc.getClass("NSOrderedCollectionChange");
late final _sel_changeWithObject_type_index_ =
    objc.registerName("changeWithObject:type:index:");
final _objc_msgSend_1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                NSUInteger)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_changeWithObject_type_index_associatedIndex_ =
    objc.registerName("changeWithObject:type:index:associatedIndex:");
final _objc_msgSend_2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                NSUInteger,
                NSUInteger)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int)>();
late final _sel_object = objc.registerName("object");
final _objc_msgSend_3 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_changeType = objc.registerName("changeType");
final _objc_msgSend_4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_index = objc.registerName("index");
final _objc_msgSend_5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_associatedIndex = objc.registerName("associatedIndex");
late final _sel_init = objc.registerName("init");
final _objc_msgSend_6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithObject_type_index_ =
    objc.registerName("initWithObject:type:index:");
final _objc_msgSend_7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                NSUInteger)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_initWithObject_type_index_associatedIndex_ =
    objc.registerName("initWithObject:type:index:associatedIndex:");
final _objc_msgSend_8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                NSUInteger,
                NSUInteger)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int)>();
late final _sel_new = objc.registerName("new");
late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
final _objc_msgSend_0 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSOrderedCollectionDifferenceCalculationOptions {
  NSOrderedCollectionDifferenceCalculationOmitInsertedObjects(1),
  NSOrderedCollectionDifferenceCalculationOmitRemovedObjects(2),
  NSOrderedCollectionDifferenceCalculationInferMoves(4);

  final int value;
  const NSOrderedCollectionDifferenceCalculationOptions(this.value);

  static NSOrderedCollectionDifferenceCalculationOptions fromValue(int value) =>
      switch (value) {
        1 => NSOrderedCollectionDifferenceCalculationOmitInsertedObjects,
        2 => NSOrderedCollectionDifferenceCalculationOmitRemovedObjects,
        4 => NSOrderedCollectionDifferenceCalculationInferMoves,
        _ => throw ArgumentError(
            "Unknown value for NSOrderedCollectionDifferenceCalculationOptions: $value"),
      };
}

/// NSOrderedCollectionDifference
class NSOrderedCollectionDifference extends objc.NSObject {
  NSOrderedCollectionDifference._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOrderedCollectionDifference] that points to the same underlying object as [other].
  NSOrderedCollectionDifference.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOrderedCollectionDifference] that wraps the given raw object pointer.
  NSOrderedCollectionDifference.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOrderedCollectionDifference].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOrderedCollectionDifference);
  }

  /// initWithChanges:
  NSOrderedCollectionDifference initWithChanges_(objc.ObjCObjectBase changes) {
    final _ret =
        _objc_msgSend_10(this.pointer, _sel_initWithChanges_, changes.pointer);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:
  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_(
          objc.NSIndexSet inserts,
          objc.ObjCObjectBase? insertedObjects,
          objc.NSIndexSet removes,
          objc.ObjCObjectBase? removedObjects,
          objc.ObjCObjectBase changes) {
    final _ret = _objc_msgSend_11(
        this.pointer,
        _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_,
        inserts.pointer,
        insertedObjects?.pointer ?? ffi.nullptr,
        removes.pointer,
        removedObjects?.pointer ?? ffi.nullptr,
        changes.pointer);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:
  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_(
          objc.NSIndexSet inserts,
          objc.ObjCObjectBase? insertedObjects,
          objc.NSIndexSet removes,
          objc.ObjCObjectBase? removedObjects) {
    final _ret = _objc_msgSend_12(
        this.pointer,
        _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_,
        inserts.pointer,
        insertedObjects?.pointer ?? ffi.nullptr,
        removes.pointer,
        removedObjects?.pointer ?? ffi.nullptr);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// insertions
  objc.ObjCObjectBase get insertions {
    final _ret = _objc_msgSend_6(this.pointer, _sel_insertions);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// removals
  objc.ObjCObjectBase get removals {
    final _ret = _objc_msgSend_6(this.pointer, _sel_removals);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// hasChanges
  bool get hasChanges {
    return _objc_msgSend_13(this.pointer, _sel_hasChanges);
  }

  /// differenceByTransformingChangesWithBlock:
  NSOrderedCollectionDifference differenceByTransformingChangesWithBlock_(
      ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange block) {
    final _ret = _objc_msgSend_14(this.pointer,
        _sel_differenceByTransformingChangesWithBlock_, block.pointer);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// inverseDifference
  NSOrderedCollectionDifference inverseDifference() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_inverseDifference);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSOrderedCollectionDifference init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSOrderedCollectionDifference new1() {
    final _ret =
        _objc_msgSend_6(_class_NSOrderedCollectionDifference, _sel_new);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSOrderedCollectionDifference allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSOrderedCollectionDifference, _sel_allocWithZone_, zone);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSOrderedCollectionDifference alloc() {
    final _ret =
        _objc_msgSend_6(_class_NSOrderedCollectionDifference, _sel_alloc);
    return NSOrderedCollectionDifference.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSOrderedCollectionDifference =
    objc.getClass("NSOrderedCollectionDifference");
late final _sel_initWithChanges_ = objc.registerName("initWithChanges:");
final _objc_msgSend_10 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_ =
    objc.registerName(
        "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:");
final _objc_msgSend_11 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_ =
    objc.registerName(
        "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:");
final _objc_msgSend_12 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertions = objc.registerName("insertions");
late final _sel_removals = objc.registerName("removals");
late final _sel_hasChanges = objc.registerName("hasChanges");
final _objc_msgSend_13 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCObject> arg0)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCObject>)>()(arg0);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange
    extends objc.ObjCBlockBase {
  ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange.fromFunction(
      NSOrderedCollectionChange Function(NSOrderedCollectionChange) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSOrderedCollectionChange.castFromPointer(arg0,
                        retain: true, release: true))
                .retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSOrderedCollectionChange call(NSOrderedCollectionChange arg0) =>
      NSOrderedCollectionChange.castFromPointer(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer),
          retain: false,
          release: true);
}

late final _sel_differenceByTransformingChangesWithBlock_ =
    objc.registerName("differenceByTransformingChangesWithBlock:");
final _objc_msgSend_14 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_inverseDifference = objc.registerName("inverseDifference");

enum NSBinarySearchingOptions {
  NSBinarySearchingFirstEqual(256),
  NSBinarySearchingLastEqual(512),
  NSBinarySearchingInsertionIndex(1024);

  final int value;
  const NSBinarySearchingOptions(this.value);

  static NSBinarySearchingOptions fromValue(int value) => switch (value) {
        256 => NSBinarySearchingFirstEqual,
        512 => NSBinarySearchingLastEqual,
        1024 => NSBinarySearchingInsertionIndex,
        _ => throw ArgumentError(
            "Unknown value for NSBinarySearchingOptions: $value"),
      };
}

/// Read/Write Options
enum NSDataReadingOptions {
  /// Hint to map the file in if possible and safe
  NSDataReadingMappedIfSafe(1),

  /// Hint to get the file not to be cached in the kernel
  NSDataReadingUncached(2),

  /// Hint to map the file in if possible. This takes precedence over NSDataReadingMappedIfSafe if both are given.
  NSDataReadingMappedAlways(8);

  /// Deprecated name for NSDataReadingMappedIfSafe
  static const NSDataReadingMapped = NSDataReadingMappedIfSafe;

  /// Deprecated name for NSDataReadingMapped
  static const NSMappedRead = NSDataReadingMappedIfSafe;

  /// Deprecated name for NSDataReadingUncached
  static const NSUncachedRead = NSDataReadingUncached;

  final int value;
  const NSDataReadingOptions(this.value);

  static NSDataReadingOptions fromValue(int value) => switch (value) {
        1 => NSDataReadingMappedIfSafe,
        2 => NSDataReadingUncached,
        8 => NSDataReadingMappedAlways,
        _ =>
          throw ArgumentError("Unknown value for NSDataReadingOptions: $value"),
      };

  @override
  String toString() {
    if (this == NSDataReadingMappedIfSafe)
      return "NSDataReadingOptions.NSDataReadingMappedIfSafe, NSDataReadingOptions.NSDataReadingMapped, NSDataReadingOptions.NSMappedRead";
    if (this == NSDataReadingUncached)
      return "NSDataReadingOptions.NSDataReadingUncached, NSDataReadingOptions.NSUncachedRead";
    return super.toString();
  }
}

enum NSDataWritingOptions {
  /// Hint to use auxiliary file when saving; equivalent to atomically:YES
  NSDataWritingAtomic(1),

  /// Hint to  prevent overwriting an existing file. Cannot be combined with NSDataWritingAtomic.
  NSDataWritingWithoutOverwriting(2),
  NSDataWritingFileProtectionNone(268435456),
  NSDataWritingFileProtectionComplete(536870912),
  NSDataWritingFileProtectionCompleteUnlessOpen(805306368),
  NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication(1073741824),
  NSDataWritingFileProtectionCompleteWhenUserInactive(1342177280),
  NSDataWritingFileProtectionMask(4026531840);

  /// Deprecated name for NSDataWritingAtomic
  static const NSAtomicWrite = NSDataWritingAtomic;

  final int value;
  const NSDataWritingOptions(this.value);

  static NSDataWritingOptions fromValue(int value) => switch (value) {
        1 => NSDataWritingAtomic,
        2 => NSDataWritingWithoutOverwriting,
        268435456 => NSDataWritingFileProtectionNone,
        536870912 => NSDataWritingFileProtectionComplete,
        805306368 => NSDataWritingFileProtectionCompleteUnlessOpen,
        1073741824 =>
          NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication,
        1342177280 => NSDataWritingFileProtectionCompleteWhenUserInactive,
        4026531840 => NSDataWritingFileProtectionMask,
        _ =>
          throw ArgumentError("Unknown value for NSDataWritingOptions: $value"),
      };

  @override
  String toString() {
    if (this == NSDataWritingAtomic)
      return "NSDataWritingOptions.NSDataWritingAtomic, NSDataWritingOptions.NSAtomicWrite";
    return super.toString();
  }
}

/// Data Search Options
enum NSDataSearchOptions {
  NSDataSearchBackwards(1),
  NSDataSearchAnchored(2);

  final int value;
  const NSDataSearchOptions(this.value);

  static NSDataSearchOptions fromValue(int value) => switch (value) {
        1 => NSDataSearchBackwards,
        2 => NSDataSearchAnchored,
        _ =>
          throw ArgumentError("Unknown value for NSDataSearchOptions: $value"),
      };
}

/// Base 64 Options
enum NSDataBase64EncodingOptions {
  /// Use zero or one of the following to control the maximum line length after which a line ending is inserted. No line endings are inserted by default.
  NSDataBase64Encoding64CharacterLineLength(1),
  NSDataBase64Encoding76CharacterLineLength(2),

  /// Use zero or more of the following to specify which kind of line ending is inserted. The default line ending is CR LF.
  NSDataBase64EncodingEndLineWithCarriageReturn(16),
  NSDataBase64EncodingEndLineWithLineFeed(32);

  final int value;
  const NSDataBase64EncodingOptions(this.value);

  static NSDataBase64EncodingOptions fromValue(int value) => switch (value) {
        1 => NSDataBase64Encoding64CharacterLineLength,
        2 => NSDataBase64Encoding76CharacterLineLength,
        16 => NSDataBase64EncodingEndLineWithCarriageReturn,
        32 => NSDataBase64EncodingEndLineWithLineFeed,
        _ => throw ArgumentError(
            "Unknown value for NSDataBase64EncodingOptions: $value"),
      };
}

enum NSDataBase64DecodingOptions {
  /// Use the following option to modify the decoding algorithm so that it ignores unknown non-Base64 bytes, including line ending characters.
  NSDataBase64DecodingIgnoreUnknownCharacters(1);

  final int value;
  const NSDataBase64DecodingOptions(this.value);

  static NSDataBase64DecodingOptions fromValue(int value) => switch (value) {
        1 => NSDataBase64DecodingIgnoreUnknownCharacters,
        _ => throw ArgumentError(
            "Unknown value for NSDataBase64DecodingOptions: $value"),
      };
}

/// Various algorithms provided for compression APIs. See NSData and NSMutableData.
enum NSDataCompressionAlgorithm {
  /// LZFSE is the recommended compression algorithm if you don't have a specific reason to use another algorithm. Note that LZFSE is intended for use with Apple devices only. This algorithm generally compresses better than Zlib, but not as well as LZMA. It is generally slower than LZ4.
  NSDataCompressionAlgorithmLZFSE(0),

  /// LZ4 is appropriate if compression speed is critical. LZ4 generally sacrifices compression ratio in order to achieve its greater speed.
  /// This implementation of LZ4 makes a small modification to the standard format, which is described in greater detail in <compression.h>.
  NSDataCompressionAlgorithmLZ4(1),

  /// LZMA is appropriate if compression ratio is critical and memory usage and compression speed are not a factor. LZMA is an order of magnitude slower for both compression and decompression than other algorithms. It can also use a very large amount of memory, so if you need to compress large amounts of data on embedded devices with limited memory you should probably avoid LZMA.
  /// Encoding uses LZMA level 6 only, but decompression works with any compression level.
  NSDataCompressionAlgorithmLZMA(2),

  /// Zlib is appropriate if you want a good balance between compression speed and compression ratio, but only if you need interoperability with non-Apple platforms. Otherwise, LZFSE is generally a better choice than Zlib.
  /// Encoding uses Zlib level 5 only, but decompression works with any compression level. It uses the raw DEFLATE format as described in IETF RFC 1951.
  NSDataCompressionAlgorithmZlib(3);

  final int value;
  const NSDataCompressionAlgorithm(this.value);

  static NSDataCompressionAlgorithm fromValue(int value) => switch (value) {
        0 => NSDataCompressionAlgorithmLZFSE,
        1 => NSDataCompressionAlgorithmLZ4,
        2 => NSDataCompressionAlgorithmLZMA,
        3 => NSDataCompressionAlgorithmZlib,
        _ => throw ArgumentError(
            "Unknown value for NSDataCompressionAlgorithm: $value"),
      };
}

/// Purgeable Data
class NSPurgeableData extends objc.NSMutableData {
  NSPurgeableData._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPurgeableData] that points to the same underlying object as [other].
  NSPurgeableData.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPurgeableData] that wraps the given raw object pointer.
  NSPurgeableData.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPurgeableData].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPurgeableData);
  }

  /// dataWithCapacity:
  static NSPurgeableData? dataWithCapacity_(DartNSUInteger aNumItems) {
    final _ret = _objc_msgSend_15(
        _class_NSPurgeableData, _sel_dataWithCapacity_, aNumItems);
    return _ret.address == 0
        ? null
        : NSPurgeableData.castFromPointer(_ret, retain: true, release: true);
  }

  /// dataWithLength:
  static NSPurgeableData? dataWithLength_(DartNSUInteger length) {
    final _ret =
        _objc_msgSend_15(_class_NSPurgeableData, _sel_dataWithLength_, length);
    return _ret.address == 0
        ? null
        : NSPurgeableData.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCapacity:
  NSPurgeableData? initWithCapacity_(DartNSUInteger capacity) {
    final _ret =
        _objc_msgSend_15(this.pointer, _sel_initWithCapacity_, capacity);
    return _ret.address == 0
        ? null
        : NSPurgeableData.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithLength:
  NSPurgeableData? initWithLength_(DartNSUInteger length) {
    final _ret = _objc_msgSend_15(this.pointer, _sel_initWithLength_, length);
    return _ret.address == 0
        ? null
        : NSPurgeableData.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSPurgeableData = objc.getClass("NSPurgeableData");
late final _sel_dataWithCapacity_ = objc.registerName("dataWithCapacity:");
final _objc_msgSend_15 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSUInteger)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_dataWithLength_ = objc.registerName("dataWithLength:");
late final _sel_initWithCapacity_ = objc.registerName("initWithCapacity:");
late final _sel_initWithLength_ = objc.registerName("initWithLength:");

/// !
/// @enum NSURLCacheStoragePolicy
///
/// @discussion The NSURLCacheStoragePolicy enum defines constants that
/// can be used to specify the type of storage that is allowable for an
/// NSCachedURLResponse object that is to be stored in an NSURLCache.
///
/// @constant NSURLCacheStorageAllowed Specifies that storage in an
/// NSURLCache is allowed without restriction.
///
/// @constant NSURLCacheStorageAllowedInMemoryOnly Specifies that
/// storage in an NSURLCache is allowed; however storage should be
/// done in memory only, no disk storage should be done.
///
/// @constant NSURLCacheStorageNotAllowed Specifies that storage in an
/// NSURLCache is not allowed in any fashion, either in memory or on
/// disk.
enum NSURLCacheStoragePolicy {
  NSURLCacheStorageAllowed(0),
  NSURLCacheStorageAllowedInMemoryOnly(1),
  NSURLCacheStorageNotAllowed(2);

  final int value;
  const NSURLCacheStoragePolicy(this.value);

  static NSURLCacheStoragePolicy fromValue(int value) => switch (value) {
        0 => NSURLCacheStorageAllowed,
        1 => NSURLCacheStorageAllowedInMemoryOnly,
        2 => NSURLCacheStorageNotAllowed,
        _ => throw ArgumentError(
            "Unknown value for NSURLCacheStoragePolicy: $value"),
      };
}

/// !
/// @class NSCachedURLResponse
/// NSCachedURLResponse is a class whose objects functions as a wrapper for
/// objects that are stored in the framework's caching system.
/// It is used to maintain characteristics and attributes of a cached
/// object.
class NSCachedURLResponse extends objc.NSObject {
  NSCachedURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCachedURLResponse] that points to the same underlying object as [other].
  NSCachedURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCachedURLResponse] that wraps the given raw object pointer.
  NSCachedURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCachedURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSCachedURLResponse);
  }

  /// !
  /// @method initWithResponse:data
  /// @abstract Initializes an NSCachedURLResponse with the given
  /// response and data.
  /// @discussion A default NSURLCacheStoragePolicy is used for
  /// NSCachedURLResponse objects initialized with this method:
  /// NSURLCacheStorageAllowed.
  /// @param response a NSURLResponse object.
  /// @param data an NSData object representing the URL content
  /// corresponding to the given response.
  /// @result an initialized NSCachedURLResponse.
  NSCachedURLResponse initWithResponse_data_(
      NSURLResponse response, objc.NSData data) {
    final _ret = _objc_msgSend_20(this.pointer, _sel_initWithResponse_data_,
        response.pointer, data.pointer);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// !
  /// @method initWithResponse:data:userInfo:storagePolicy:
  /// @abstract Initializes an NSCachedURLResponse with the given
  /// response, data, user-info dictionary, and storage policy.
  /// @param response a NSURLResponse object.
  /// @param data an NSData object representing the URL content
  /// corresponding to the given response.
  /// @param userInfo a dictionary user-specified information to be
  /// stored with the NSCachedURLResponse.
  /// @param storagePolicy an NSURLCacheStoragePolicy constant.
  /// @result an initialized NSCachedURLResponse.
  NSCachedURLResponse initWithResponse_data_userInfo_storagePolicy_(
      NSURLResponse response,
      objc.NSData data,
      objc.NSDictionary? userInfo,
      NSURLCacheStoragePolicy storagePolicy) {
    final _ret = _objc_msgSend_21(
        this.pointer,
        _sel_initWithResponse_data_userInfo_storagePolicy_,
        response.pointer,
        data.pointer,
        userInfo?.pointer ?? ffi.nullptr,
        storagePolicy.value);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// !
  /// @abstract Returns the response wrapped by this instance.
  /// @result The response wrapped by this instance.
  NSURLResponse get response {
    final _ret = _objc_msgSend_22(this.pointer, _sel_response);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the data of the receiver.
  /// @result The data of the receiver.
  objc.NSData get data {
    final _ret = _objc_msgSend_23(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the userInfo dictionary of the receiver.
  /// @result The userInfo dictionary of the receiver.
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_24(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the NSURLCacheStoragePolicy constant of the receiver.
  /// @result The NSURLCacheStoragePolicy constant of the receiver.
  NSURLCacheStoragePolicy get storagePolicy {
    final _ret = _objc_msgSend_25(this.pointer, _sel_storagePolicy);
    return NSURLCacheStoragePolicy.fromValue(_ret);
  }

  /// init
  NSCachedURLResponse init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSCachedURLResponse new1() {
    final _ret = _objc_msgSend_6(_class_NSCachedURLResponse, _sel_new);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSCachedURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSCachedURLResponse, _sel_allocWithZone_, zone);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSCachedURLResponse alloc() {
    final _ret = _objc_msgSend_6(_class_NSCachedURLResponse, _sel_alloc);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSCachedURLResponse = objc.getClass("NSCachedURLResponse");

/// NSURLResponse
class NSURLResponse extends objc.NSObject {
  NSURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLResponse] that points to the same underlying object as [other].
  NSURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLResponse] that wraps the given raw object pointer.
  NSURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLResponse);
  }

  /// !
  /// @method initWithURL:MIMEType:expectedContentLength:textEncodingName:
  /// @abstract Initialize an NSURLResponse with the provided values.
  /// @param URL the URL
  /// @param MIMEType the MIME content type of the response
  /// @param length the expected content length of the associated data
  /// @param name the name of the text encoding for the associated data, if applicable, else nil
  /// @result The initialized NSURLResponse.
  /// @discussion This is the designated initializer for NSURLResponse.
  NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName_(
      objc.NSURL URL,
      objc.NSString? MIMEType,
      DartNSInteger length,
      objc.NSString? name) {
    final _ret = _objc_msgSend_16(
        this.pointer,
        _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_,
        URL.pointer,
        MIMEType?.pointer ?? ffi.nullptr,
        length,
        name?.pointer ?? ffi.nullptr);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the URL of the receiver.
  /// @result The URL of the receiver.
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the MIME type of the receiver.
  /// @discussion The MIME type is based on the information provided
  /// from an origin source. However, that value may be changed or
  /// corrected by a protocol implementation if it can be determined
  /// that the origin server or source reported the information
  /// incorrectly or imprecisely. An attempt to guess the MIME type may
  /// be made if the origin source did not report any such information.
  /// @result The MIME type of the receiver.
  objc.NSString? get MIMEType {
    final _ret = _objc_msgSend_18(this.pointer, _sel_MIMEType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the expected content length of the receiver.
  /// @discussion Some protocol implementations report a content length
  /// as part of delivering load metadata, but not all protocols
  /// guarantee the amount of data that will be delivered in actuality.
  /// Hence, this method returns an expected amount. Clients should use
  /// this value as an advisory, and should be prepared to deal with
  /// either more or less data.
  /// @result The expected content length of the receiver, or -1 if
  /// there is no expectation that can be arrived at regarding expected
  /// content length.
  int get expectedContentLength {
    return _objc_msgSend_19(this.pointer, _sel_expectedContentLength);
  }

  /// !
  /// @abstract Returns the name of the text encoding of the receiver.
  /// @discussion This name will be the actual string reported by the
  /// origin source during the course of performing a protocol-specific
  /// URL load. Clients can inspect this string and convert it to an
  /// NSStringEncoding or CFStringEncoding using the methods and
  /// functions made available in the appropriate framework.
  /// @result The name of the text encoding of the receiver, or nil if no
  /// text encoding was specified.
  objc.NSString? get textEncodingName {
    final _ret = _objc_msgSend_18(this.pointer, _sel_textEncodingName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns a suggested filename if the resource were saved to disk.
  /// @discussion The method first checks if the server has specified a filename using the
  /// content disposition header. If no valid filename is specified using that mechanism,
  /// this method checks the last path component of the URL. If no valid filename can be
  /// obtained using the last path component, this method uses the URL's host as the filename.
  /// If the URL's host can't be converted to a valid filename, the filename "unknown" is used.
  /// In most cases, this method appends the proper file extension based on the MIME type.
  /// This method always returns a valid filename.
  /// @result A suggested filename to use if saving the resource to disk.
  objc.NSString? get suggestedFilename {
    final _ret = _objc_msgSend_18(this.pointer, _sel_suggestedFilename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLResponse init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLResponse new1() {
    final _ret = _objc_msgSend_6(_class_NSURLResponse, _sel_new);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLResponse, _sel_allocWithZone_, zone);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLResponse alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLResponse, _sel_alloc);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLResponse = objc.getClass("NSURLResponse");
late final _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_ =
    objc.registerName(
        "initWithURL:MIMEType:expectedContentLength:textEncodingName:");
final _objc_msgSend_16 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URL = objc.registerName("URL");
final _objc_msgSend_17 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_MIMEType = objc.registerName("MIMEType");
final _objc_msgSend_18 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_expectedContentLength =
    objc.registerName("expectedContentLength");
final _objc_msgSend_19 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.LongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_textEncodingName = objc.registerName("textEncodingName");
late final _sel_suggestedFilename = objc.registerName("suggestedFilename");
late final _sel_initWithResponse_data_ =
    objc.registerName("initWithResponse:data:");
final _objc_msgSend_20 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithResponse_data_userInfo_storagePolicy_ =
    objc.registerName("initWithResponse:data:userInfo:storagePolicy:");
final _objc_msgSend_21 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                NSUInteger)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_response = objc.registerName("response");
final _objc_msgSend_22 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_data = objc.registerName("data");
final _objc_msgSend_23 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_userInfo = objc.registerName("userInfo");
final _objc_msgSend_24 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_storagePolicy = objc.registerName("storagePolicy");
final _objc_msgSend_25 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSURLCache
class NSURLCache extends objc.NSObject {
  NSURLCache._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCache] that points to the same underlying object as [other].
  NSURLCache.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCache] that wraps the given raw object pointer.
  NSURLCache.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCache].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSURLCache);
  }

  /// !
  /// @property sharedURLCache
  /// @abstract Returns the shared NSURLCache instance or
  /// sets the NSURLCache instance shared by all clients of
  /// the current process. This will be the new object returned when
  /// calls to the <tt>sharedURLCache</tt> method are made.
  /// @discussion Unless set explicitly through a call to
  /// <tt>+setSharedURLCache:</tt>, this method returns an NSURLCache
  /// instance created with the following default values:
  /// <ul>
  /// <li>Memory capacity: 4 megabytes (4 * 1024 * 1024 bytes)
  /// <li>Disk capacity: 20 megabytes (20 * 1024 * 1024 bytes)
  /// <li>Disk path: <nobr>(user home directory)/Library/Caches/(application bundle id)</nobr>
  /// </ul>
  /// <p>Users who do not have special caching requirements or
  /// constraints should find the default shared cache instance
  /// acceptable. If this default shared cache instance is not
  /// acceptable, <tt>+setSharedURLCache:</tt> can be called to set a
  /// different NSURLCache instance to be returned from this method.
  /// Callers should take care to ensure that the setter is called
  /// at a time when no other caller has a reference to the previously-set
  /// shared URL cache. This is to prevent storing cache data from
  /// becoming unexpectedly unretrievable.
  /// @result the shared NSURLCache instance.
  static NSURLCache getSharedURLCache() {
    final _ret = _objc_msgSend_26(_class_NSURLCache, _sel_sharedURLCache);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @property sharedURLCache
  /// @abstract Returns the shared NSURLCache instance or
  /// sets the NSURLCache instance shared by all clients of
  /// the current process. This will be the new object returned when
  /// calls to the <tt>sharedURLCache</tt> method are made.
  /// @discussion Unless set explicitly through a call to
  /// <tt>+setSharedURLCache:</tt>, this method returns an NSURLCache
  /// instance created with the following default values:
  /// <ul>
  /// <li>Memory capacity: 4 megabytes (4 * 1024 * 1024 bytes)
  /// <li>Disk capacity: 20 megabytes (20 * 1024 * 1024 bytes)
  /// <li>Disk path: <nobr>(user home directory)/Library/Caches/(application bundle id)</nobr>
  /// </ul>
  /// <p>Users who do not have special caching requirements or
  /// constraints should find the default shared cache instance
  /// acceptable. If this default shared cache instance is not
  /// acceptable, <tt>+setSharedURLCache:</tt> can be called to set a
  /// different NSURLCache instance to be returned from this method.
  /// Callers should take care to ensure that the setter is called
  /// at a time when no other caller has a reference to the previously-set
  /// shared URL cache. This is to prevent storing cache data from
  /// becoming unexpectedly unretrievable.
  /// @result the shared NSURLCache instance.
  static void setSharedURLCache(NSURLCache value) {
    return _objc_msgSend_27(
        _class_NSURLCache, _sel_setSharedURLCache_, value.pointer);
  }

  /// !
  /// @method initWithMemoryCapacity:diskCapacity:diskPath:
  /// @abstract Initializes an NSURLCache with the given capacity and
  /// path.
  /// @discussion The returned NSURLCache is backed by disk, so
  /// developers can be more liberal with space when choosing the
  /// capacity for this kind of cache. A disk cache measured in the tens
  /// of megabytes should be acceptable in most cases.
  /// @param memoryCapacity the capacity, measured in bytes, for the cache in memory.
  /// @param diskCapacity the capacity, measured in bytes, for the cache on disk.
  /// @param path the path on disk where the cache data is stored.
  /// @result an initialized NSURLCache, with the given capacity, backed
  /// by disk.
  NSURLCache initWithMemoryCapacity_diskCapacity_diskPath_(
      DartNSUInteger memoryCapacity,
      DartNSUInteger diskCapacity,
      objc.NSString? path) {
    final _ret = _objc_msgSend_28(
        this.pointer,
        _sel_initWithMemoryCapacity_diskCapacity_diskPath_,
        memoryCapacity,
        diskCapacity,
        path?.pointer ?? ffi.nullptr);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method initWithMemoryCapacity:diskCapacity:directoryURL:
  /// @abstract Initializes an NSURLCache with the given capacity and directory.
  /// @param memoryCapacity the capacity, measured in bytes, for the cache in memory. Or 0 to disable memory cache.
  /// @param diskCapacity the capacity, measured in bytes, for the cache on disk. Or 0 to disable disk cache.
  /// @param directoryURL the path to a directory on disk where the cache data is stored. Or nil for default directory.
  /// @result an initialized NSURLCache, with the given capacity, optionally backed by disk.
  NSURLCache initWithMemoryCapacity_diskCapacity_directoryURL_(
      DartNSUInteger memoryCapacity,
      DartNSUInteger diskCapacity,
      objc.NSURL? directoryURL) {
    final _ret = _objc_msgSend_29(
        this.pointer,
        _sel_initWithMemoryCapacity_diskCapacity_directoryURL_,
        memoryCapacity,
        diskCapacity,
        directoryURL?.pointer ?? ffi.nullptr);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method cachedResponseForRequest:
  /// @abstract Returns the NSCachedURLResponse stored in the cache with
  /// the given request.
  /// @discussion The method returns nil if there is no
  /// NSCachedURLResponse stored using the given request.
  /// @param request the NSURLRequest to use as a key for the lookup.
  /// @result The NSCachedURLResponse stored in the cache with the given
  /// request, or nil if there is no NSCachedURLResponse stored with the
  /// given request.
  NSCachedURLResponse? cachedResponseForRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_58(
        this.pointer, _sel_cachedResponseForRequest_, request.pointer);
    return _ret.address == 0
        ? null
        : NSCachedURLResponse.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// !
  /// @method storeCachedResponse:forRequest:
  /// @abstract Stores the given NSCachedURLResponse in the cache using
  /// the given request.
  /// @param cachedResponse The cached response to store.
  /// @param request the NSURLRequest to use as a key for the storage.
  void storeCachedResponse_forRequest_(
      NSCachedURLResponse cachedResponse, NSURLRequest request) {
    _objc_msgSend_59(this.pointer, _sel_storeCachedResponse_forRequest_,
        cachedResponse.pointer, request.pointer);
  }

  /// !
  /// @method removeCachedResponseForRequest:
  /// @abstract Removes the NSCachedURLResponse from the cache that is
  /// stored using the given request.
  /// @discussion No action is taken if there is no NSCachedURLResponse
  /// stored with the given request.
  /// @param request the NSURLRequest to use as a key for the lookup.
  void removeCachedResponseForRequest_(NSURLRequest request) {
    _objc_msgSend_60(
        this.pointer, _sel_removeCachedResponseForRequest_, request.pointer);
  }

  /// !
  /// @method removeAllCachedResponses
  /// @abstract Clears the given cache, removing all NSCachedURLResponse
  /// objects that it stores.
  void removeAllCachedResponses() {
    _objc_msgSend_44(this.pointer, _sel_removeAllCachedResponses);
  }

  /// !
  /// @method removeCachedResponsesSince:
  /// @abstract Clears the given cache of any cached responses since the provided date.
  void removeCachedResponsesSinceDate_(objc.NSDate date) {
    _objc_msgSend_61(
        this.pointer, _sel_removeCachedResponsesSinceDate_, date.pointer);
  }

  /// !
  /// @abstract In-memory capacity of the receiver.
  /// @discussion At the time this call is made, the in-memory cache will truncate its contents to the size given, if necessary.
  /// @result The in-memory capacity, measured in bytes, for the receiver.
  DartNSUInteger get memoryCapacity {
    return _objc_msgSend_5(this.pointer, _sel_memoryCapacity);
  }

  /// !
  /// @abstract In-memory capacity of the receiver.
  /// @discussion At the time this call is made, the in-memory cache will truncate its contents to the size given, if necessary.
  /// @result The in-memory capacity, measured in bytes, for the receiver.
  set memoryCapacity(DartNSUInteger value) {
    return _objc_msgSend_62(this.pointer, _sel_setMemoryCapacity_, value);
  }

  /// !
  /// @abstract The on-disk capacity of the receiver.
  /// @discussion The on-disk capacity, measured in bytes, for the receiver. On mutation the on-disk cache will truncate its contents to the size given, if necessary.
  DartNSUInteger get diskCapacity {
    return _objc_msgSend_5(this.pointer, _sel_diskCapacity);
  }

  /// !
  /// @abstract The on-disk capacity of the receiver.
  /// @discussion The on-disk capacity, measured in bytes, for the receiver. On mutation the on-disk cache will truncate its contents to the size given, if necessary.
  set diskCapacity(DartNSUInteger value) {
    return _objc_msgSend_62(this.pointer, _sel_setDiskCapacity_, value);
  }

  /// !
  /// @abstract Returns the current amount of space consumed by the
  /// in-memory cache of the receiver.
  /// @discussion This size, measured in bytes, indicates the current
  /// usage of the in-memory cache.
  /// @result the current usage of the in-memory cache of the receiver.
  DartNSUInteger get currentMemoryUsage {
    return _objc_msgSend_5(this.pointer, _sel_currentMemoryUsage);
  }

  /// !
  /// @abstract Returns the current amount of space consumed by the
  /// on-disk cache of the receiver.
  /// @discussion This size, measured in bytes, indicates the current
  /// usage of the on-disk cache.
  /// @result the current usage of the on-disk cache of the receiver.
  DartNSUInteger get currentDiskUsage {
    return _objc_msgSend_5(this.pointer, _sel_currentDiskUsage);
  }

  /// storeCachedResponse:forDataTask:
  void storeCachedResponse_forDataTask_(
      NSCachedURLResponse cachedResponse, NSURLSessionDataTask dataTask) {
    _objc_msgSend_93(this.pointer, _sel_storeCachedResponse_forDataTask_,
        cachedResponse.pointer, dataTask.pointer);
  }

  /// getCachedResponseForDataTask:completionHandler:
  void getCachedResponseForDataTask_completionHandler_(
      NSURLSessionDataTask dataTask,
      ObjCBlock_ffiVoid_NSCachedURLResponse completionHandler) {
    _objc_msgSend_94(
        this.pointer,
        _sel_getCachedResponseForDataTask_completionHandler_,
        dataTask.pointer,
        completionHandler.pointer);
  }

  /// removeCachedResponseForDataTask:
  void removeCachedResponseForDataTask_(NSURLSessionDataTask dataTask) {
    _objc_msgSend_95(
        this.pointer, _sel_removeCachedResponseForDataTask_, dataTask.pointer);
  }

  /// init
  NSURLCache init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLCache new1() {
    final _ret = _objc_msgSend_6(_class_NSURLCache, _sel_new);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLCache allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSURLCache, _sel_allocWithZone_, zone);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLCache alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLCache, _sel_alloc);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLCache = objc.getClass("NSURLCache");
late final _sel_sharedURLCache = objc.registerName("sharedURLCache");
final _objc_msgSend_26 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSharedURLCache_ = objc.registerName("setSharedURLCache:");
final _objc_msgSend_27 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMemoryCapacity_diskCapacity_diskPath_ =
    objc.registerName("initWithMemoryCapacity:diskCapacity:diskPath:");
final _objc_msgSend_28 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSUInteger,
                NSUInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMemoryCapacity_diskCapacity_directoryURL_ =
    objc.registerName("initWithMemoryCapacity:diskCapacity:directoryURL:");
final _objc_msgSend_29 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSUInteger,
                NSUInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSURLRequest
class NSURLRequest extends objc.NSObject {
  NSURLRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLRequest] that points to the same underlying object as [other].
  NSURLRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLRequest] that wraps the given raw object pointer.
  NSURLRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLRequest);
  }

  /// !
  /// @method requestWithURL:
  /// @abstract Allocates and initializes an NSURLRequest with the given
  /// URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSURLRequest requestWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_30(
        _class_NSURLRequest, _sel_requestWithURL_, URL.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @property supportsSecureCoding
  /// @abstract Indicates that NSURLRequest implements the NSSecureCoding protocol.
  /// @result A BOOL value set to YES.
  static bool getSupportsSecureCoding() {
    return _objc_msgSend_13(_class_NSURLRequest, _sel_supportsSecureCoding);
  }

  /// !
  /// @method requestWithURL:cachePolicy:timeoutInterval:
  /// @abstract Allocates and initializes a NSURLRequest with the given
  /// URL and cache policy.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy,
      DartNSTimeInterval timeoutInterval) {
    final _ret = _objc_msgSend_31(
        _class_NSURLRequest,
        _sel_requestWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method initWithURL:
  /// @abstract Initializes an NSURLRequest with the given URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result An initialized NSURLRequest.
  NSURLRequest initWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_30(this.pointer, _sel_initWithURL_, URL.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method initWithURL:
  /// @abstract Initializes an NSURLRequest with the given URL and
  /// cache policy.
  /// @discussion This is the designated initializer for the
  /// NSURLRequest class.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result An initialized NSURLRequest.
  NSURLRequest initWithURL_cachePolicy_timeoutInterval_(objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy, DartNSTimeInterval timeoutInterval) {
    final _ret = _objc_msgSend_31(
        this.pointer,
        _sel_initWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the URL of the receiver.
  /// @result The URL of the receiver.
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the cache policy of the receiver.
  /// @result The cache policy of the receiver.
  NSURLRequestCachePolicy get cachePolicy {
    final _ret = _objc_msgSend_32(this.pointer, _sel_cachePolicy);
    return NSURLRequestCachePolicy.fromValue(_ret);
  }

  /// !
  /// @abstract Returns the timeout interval of the receiver.
  /// @discussion The timeout interval specifies the limit on the idle
  /// interval allotted to a request in the process of loading. The "idle
  /// interval" is defined as the period of time that has passed since the
  /// last instance of load activity occurred for a request that is in the
  /// process of loading. Hence, when an instance of load activity occurs
  /// (e.g. bytes are received from the network for a request), the idle
  /// interval for a request is reset to 0. If the idle interval ever
  /// becomes greater than or equal to the timeout interval, the request
  /// is considered to have timed out. This timeout interval is measured
  /// in seconds.
  /// @result The timeout interval of the receiver.
  DartNSTimeInterval get timeoutInterval {
    return _objc_msgSend_33(this.pointer, _sel_timeoutInterval);
  }

  /// !
  /// @abstract The main document URL associated with this load.
  /// @discussion This URL is used for the cookie "same domain as main
  /// document" policy, and attributing the request as a sub-resource
  /// of a user-specified URL. There may also be other future uses.
  /// See setMainDocumentURL:
  /// @result The main document URL.
  objc.NSURL? get mainDocumentURL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_mainDocumentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the NSURLRequestNetworkServiceType associated with this request.
  /// @discussion  This will return NSURLNetworkServiceTypeDefault for requests that have
  /// not explicitly set a networkServiceType (using the setNetworkServiceType method).
  /// @result The NSURLRequestNetworkServiceType associated with this request.
  NSURLRequestNetworkServiceType get networkServiceType {
    final _ret = _objc_msgSend_34(this.pointer, _sel_networkServiceType);
    return NSURLRequestNetworkServiceType.fromValue(_ret);
  }

  /// !
  /// @abstract returns whether a connection created with this request is allowed to use
  /// the built in cellular radios (if present).
  /// @result YES if the receiver is allowed to use the built in cellular radios to
  /// satisfy the request, NO otherwise.
  bool get allowsCellularAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsCellularAccess);
  }

  /// !
  /// @abstract returns whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as expensive.
  /// @result YES if the receiver is allowed to use an interface marked as expensive to
  /// satisfy the request, NO otherwise.
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  /// !
  /// @abstract returns whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as constrained.
  /// @result YES if the receiver is allowed to use an interface marked as constrained to
  /// satisfy the request, NO otherwise.
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  /// !
  /// @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
  /// racing without HTTP/3 service discovery.
  /// @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
  /// The default may be YES in a future OS update.
  bool get assumesHTTP3Capable {
    return _objc_msgSend_13(this.pointer, _sel_assumesHTTP3Capable);
  }

  /// !
  /// @abstract Returns the NSURLRequestAttribution associated with this request.
  /// @discussion This will return NSURLRequestAttributionDeveloper for requests that
  /// have not explicitly set an attribution.
  /// @result The NSURLRequestAttribution associated with this request.
  NSURLRequestAttribution get attribution {
    final _ret = _objc_msgSend_35(this.pointer, _sel_attribution);
    return NSURLRequestAttribution.fromValue(_ret);
  }

  /// !
  /// @abstract sets whether a request is required to do DNSSEC validation during DNS lookup.
  /// @discussion YES, if the DNS lookup for this request should require DNSSEC validation,
  /// No otherwise. Defaults to NO.
  bool get requiresDNSSECValidation {
    return _objc_msgSend_13(this.pointer, _sel_requiresDNSSECValidation);
  }

  /// HTTPMethod
  objc.NSString? get HTTPMethod {
    final _ret = _objc_msgSend_18(this.pointer, _sel_HTTPMethod);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// allHTTPHeaderFields
  objc.NSDictionary? get allHTTPHeaderFields {
    final _ret = _objc_msgSend_24(this.pointer, _sel_allHTTPHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// valueForHTTPHeaderField:
  objc.NSString? valueForHTTPHeaderField_(objc.NSString field) {
    final _ret = _objc_msgSend_36(
        this.pointer, _sel_valueForHTTPHeaderField_, field.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// HTTPBody
  objc.NSData? get HTTPBody {
    final _ret = _objc_msgSend_37(this.pointer, _sel_HTTPBody);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// HTTPBodyStream
  NSInputStream? get HTTPBodyStream {
    final _ret = _objc_msgSend_57(this.pointer, _sel_HTTPBodyStream);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// HTTPShouldHandleCookies
  bool get HTTPShouldHandleCookies {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldHandleCookies);
  }

  /// HTTPShouldUsePipelining
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  /// init
  NSURLRequest init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLRequest new1() {
    final _ret = _objc_msgSend_6(_class_NSURLRequest, _sel_new);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLRequest, _sel_allocWithZone_, zone);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLRequest alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLRequest, _sel_alloc);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLRequest = objc.getClass("NSURLRequest");
late final _sel_requestWithURL_ = objc.registerName("requestWithURL:");
final _objc_msgSend_30 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// !
/// @enum NSURLRequestCachePolicy
///
/// @discussion The NSURLRequestCachePolicy enum defines constants that
/// can be used to specify the type of interactions that take place with
/// the caching system when the URL loading system processes a request.
/// Specifically, these constants cover interactions that have to do
/// with whether already-existing cache data is returned to satisfy a
/// URL load request.
///
/// @constant NSURLRequestUseProtocolCachePolicy Specifies that the
/// caching logic defined in the protocol implementation, if any, is
/// used for a particular URL load request. This is the default policy
/// for URL load requests.
///
/// @constant NSURLRequestReloadIgnoringLocalCacheData Specifies that the
/// data for the URL load should be loaded from the origin source. No
/// existing local cache data, regardless of its freshness or validity,
/// should be used to satisfy a URL load request.
///
/// @constant NSURLRequestReloadIgnoringLocalAndRemoteCacheData Specifies that
/// not only should the local cache data be ignored, but that proxies and
/// other intermediates should be instructed to disregard their caches
/// so far as the protocol allows.
///
/// @constant NSURLRequestReloadIgnoringCacheData Older name for
/// NSURLRequestReloadIgnoringLocalCacheData.
///
/// @constant NSURLRequestReturnCacheDataElseLoad Specifies that the
/// existing cache data should be used to satisfy a URL load request,
/// regardless of its age or expiration date. However, if there is no
/// existing data in the cache corresponding to a URL load request,
/// the URL is loaded from the origin source.
///
/// @constant NSURLRequestReturnCacheDataDontLoad Specifies that the
/// existing cache data should be used to satisfy a URL load request,
/// regardless of its age or expiration date. However, if there is no
/// existing data in the cache corresponding to a URL load request, no
/// attempt is made to load the URL from the origin source, and the
/// load is considered to have failed. This constant specifies a
/// behavior that is similar to an "offline" mode.
///
/// @constant NSURLRequestReloadRevalidatingCacheData Specifies that
/// the existing cache data may be used provided the origin source
/// confirms its validity, otherwise the URL is loaded from the
/// origin source.
enum NSURLRequestCachePolicy {
  NSURLRequestUseProtocolCachePolicy(0),
  NSURLRequestReloadIgnoringLocalCacheData(1),
  NSURLRequestReloadIgnoringLocalAndRemoteCacheData(4),
  NSURLRequestReturnCacheDataElseLoad(2),
  NSURLRequestReturnCacheDataDontLoad(3),
  NSURLRequestReloadRevalidatingCacheData(5);

  static const NSURLRequestReloadIgnoringCacheData =
      NSURLRequestReloadIgnoringLocalCacheData;

  final int value;
  const NSURLRequestCachePolicy(this.value);

  static NSURLRequestCachePolicy fromValue(int value) => switch (value) {
        0 => NSURLRequestUseProtocolCachePolicy,
        1 => NSURLRequestReloadIgnoringLocalCacheData,
        4 => NSURLRequestReloadIgnoringLocalAndRemoteCacheData,
        2 => NSURLRequestReturnCacheDataElseLoad,
        3 => NSURLRequestReturnCacheDataDontLoad,
        5 => NSURLRequestReloadRevalidatingCacheData,
        _ => throw ArgumentError(
            "Unknown value for NSURLRequestCachePolicy: $value"),
      };

  @override
  String toString() {
    if (this == NSURLRequestReloadIgnoringLocalCacheData)
      return "NSURLRequestCachePolicy.NSURLRequestReloadIgnoringLocalCacheData, NSURLRequestCachePolicy.NSURLRequestReloadIgnoringCacheData";
    return super.toString();
  }
}

typedef NSTimeInterval = ffi.Double;
typedef DartNSTimeInterval = double;
late final _sel_requestWithURL_cachePolicy_timeoutInterval_ =
    objc.registerName("requestWithURL:cachePolicy:timeoutInterval:");
final _objc_msgSend_31 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSUInteger,
                NSTimeInterval)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double)>();
late final _sel_initWithURL_ = objc.registerName("initWithURL:");
late final _sel_initWithURL_cachePolicy_timeoutInterval_ =
    objc.registerName("initWithURL:cachePolicy:timeoutInterval:");
late final _sel_cachePolicy = objc.registerName("cachePolicy");
final _objc_msgSend_32 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_timeoutInterval = objc.registerName("timeoutInterval");
final _objc_msgSend_33 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSTimeInterval Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainDocumentURL = objc.registerName("mainDocumentURL");

/// !
/// @enum NSURLRequestNetworkServiceType
///
/// @discussion The NSURLRequestNetworkServiceType enum defines constants that
/// can be used to specify the service type to associate with this request.  The
/// service type is used to provide the networking layers a hint of the purpose
/// of the request.
///
/// @constant NSURLNetworkServiceTypeDefault Is the default value for an NSURLRequest
/// when created.  This value should be left unchanged for the vast majority of requests.
///
/// @constant NSURLNetworkServiceTypeVoIP Specifies that the request is for voice over IP
/// control traffic.
///
/// @constant NSURLNetworkServiceTypeVideo Specifies that the request is for video
/// traffic.
///
/// @constant NSURLNetworkServiceTypeBackground Specifies that the request is for background
/// traffic (such as a file download).
///
/// @constant NSURLNetworkServiceTypeVoice Specifies that the request is for voice data.
///
/// @constant NSURLNetworkServiceTypeResponsiveData Specifies that the request is for responsive (time sensitive) data.
///
/// @constant NSURLNetworkServiceTypeAVStreaming Specifies that the request is streaming audio/video data.
///
/// @constant NSURLNetworkServiceTypeResponsiveAV Specifies that the request is for responsive (time sensitive) audio/video data.
///
/// @constant NSURLNetworkServiceTypeCallSignaling Specifies that the request is for call signaling.
enum NSURLRequestNetworkServiceType {
  /// Standard internet traffic
  NSURLNetworkServiceTypeDefault(0),

  /// Voice over IP control traffic
  NSURLNetworkServiceTypeVoIP(1),

  /// Video traffic
  NSURLNetworkServiceTypeVideo(2),

  /// Background traffic
  NSURLNetworkServiceTypeBackground(3),

  /// Voice data
  NSURLNetworkServiceTypeVoice(4),

  /// Responsive data
  NSURLNetworkServiceTypeResponsiveData(6),

  /// Multimedia Audio/Video Streaming
  NSURLNetworkServiceTypeAVStreaming(8),

  /// Responsive Multimedia Audio/Video
  NSURLNetworkServiceTypeResponsiveAV(9),

  /// Call Signaling
  NSURLNetworkServiceTypeCallSignaling(11);

  final int value;
  const NSURLRequestNetworkServiceType(this.value);

  static NSURLRequestNetworkServiceType fromValue(int value) => switch (value) {
        0 => NSURLNetworkServiceTypeDefault,
        1 => NSURLNetworkServiceTypeVoIP,
        2 => NSURLNetworkServiceTypeVideo,
        3 => NSURLNetworkServiceTypeBackground,
        4 => NSURLNetworkServiceTypeVoice,
        6 => NSURLNetworkServiceTypeResponsiveData,
        8 => NSURLNetworkServiceTypeAVStreaming,
        9 => NSURLNetworkServiceTypeResponsiveAV,
        11 => NSURLNetworkServiceTypeCallSignaling,
        _ => throw ArgumentError(
            "Unknown value for NSURLRequestNetworkServiceType: $value"),
      };
}

late final _sel_networkServiceType = objc.registerName("networkServiceType");
final _objc_msgSend_34 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allowsCellularAccess =
    objc.registerName("allowsCellularAccess");
late final _sel_allowsExpensiveNetworkAccess =
    objc.registerName("allowsExpensiveNetworkAccess");
late final _sel_allowsConstrainedNetworkAccess =
    objc.registerName("allowsConstrainedNetworkAccess");
late final _sel_assumesHTTP3Capable = objc.registerName("assumesHTTP3Capable");

/// !
/// @enum NSURLRequestAttribution
///
/// @discussion The NSURLRequestAttribution enum is used to indicate whether the
/// user or developer specified the URL.
///
/// @constant NSURLRequestAttributionDeveloper Indicates that the URL was specified
/// by the developer. This is the default value for an NSURLRequest when created.
///
/// @constant NSURLRequestAttributionUser Indicates that the URL was specified by
/// the user.
enum NSURLRequestAttribution {
  NSURLRequestAttributionDeveloper(0),
  NSURLRequestAttributionUser(1);

  final int value;
  const NSURLRequestAttribution(this.value);

  static NSURLRequestAttribution fromValue(int value) => switch (value) {
        0 => NSURLRequestAttributionDeveloper,
        1 => NSURLRequestAttributionUser,
        _ => throw ArgumentError(
            "Unknown value for NSURLRequestAttribution: $value"),
      };
}

late final _sel_attribution = objc.registerName("attribution");
final _objc_msgSend_35 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_requiresDNSSECValidation =
    objc.registerName("requiresDNSSECValidation");
late final _sel_HTTPMethod = objc.registerName("HTTPMethod");
late final _sel_allHTTPHeaderFields = objc.registerName("allHTTPHeaderFields");
late final _sel_valueForHTTPHeaderField_ =
    objc.registerName("valueForHTTPHeaderField:");
final _objc_msgSend_36 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_HTTPBody = objc.registerName("HTTPBody");
final _objc_msgSend_37 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSInputStream
class NSInputStream extends NSStream {
  NSInputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInputStream] that points to the same underlying object as [other].
  NSInputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInputStream] that wraps the given raw object pointer.
  NSInputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInputStream);
  }

  /// read:maxLength:
  DartNSInteger read_maxLength_(
      ffi.Pointer<ffi.Uint8> buffer, DartNSUInteger len) {
    return _objc_msgSend_38(this.pointer, _sel_read_maxLength_, buffer, len);
  }

  /// getBuffer:length:
  bool getBuffer_length_(
      ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer, ffi.Pointer<NSUInteger> len) {
    return _objc_msgSend_39(this.pointer, _sel_getBuffer_length_, buffer, len);
  }

  /// hasBytesAvailable
  bool get hasBytesAvailable {
    return _objc_msgSend_13(this.pointer, _sel_hasBytesAvailable);
  }

  /// initWithData:
  NSInputStream initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_40(this.pointer, _sel_initWithData_, data.pointer);
    return NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  NSInputStream? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_41(this.pointer, _sel_initWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFileAtPath:
  NSInputStream? initWithFileAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputStreamWithData:
  static NSInputStream? inputStreamWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_43(
        _class_NSInputStream, _sel_inputStreamWithData_, data.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputStreamWithFileAtPath:
  static NSInputStream? inputStreamWithFileAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_42(
        _class_NSInputStream, _sel_inputStreamWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputStreamWithURL:
  static NSInputStream? inputStreamWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_41(
        _class_NSInputStream, _sel_inputStreamWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_54(
        _class_NSInputStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_55(
        _class_NSInputStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      DartNSUInteger bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_56(
        _class_NSInputStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  /// init
  NSInputStream init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSInputStream new1() {
    final _ret = _objc_msgSend_6(_class_NSInputStream, _sel_new);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSInputStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSInputStream, _sel_allocWithZone_, zone);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSInputStream alloc() {
    final _ret = _objc_msgSend_6(_class_NSInputStream, _sel_alloc);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSInputStream = objc.getClass("NSInputStream");
late final _sel_read_maxLength_ = objc.registerName("read:maxLength:");
final _objc_msgSend_38 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                NSUInteger)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_getBuffer_length_ = objc.registerName("getBuffer:length:");
final _objc_msgSend_39 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                ffi.Pointer<NSUInteger>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<NSUInteger>)>();
late final _sel_hasBytesAvailable = objc.registerName("hasBytesAvailable");
late final _sel_initWithData_ = objc.registerName("initWithData:");
final _objc_msgSend_40 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_41 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFileAtPath_ = objc.registerName("initWithFileAtPath:");
final _objc_msgSend_42 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_inputStreamWithData_ =
    objc.registerName("inputStreamWithData:");
final _objc_msgSend_43 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_inputStreamWithFileAtPath_ =
    objc.registerName("inputStreamWithFileAtPath:");
late final _sel_inputStreamWithURL_ = objc.registerName("inputStreamWithURL:");

/// NSStream
class NSStream extends objc.NSObject {
  NSStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSStream] that points to the same underlying object as [other].
  NSStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSStream] that wraps the given raw object pointer.
  NSStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSStream);
  }

  /// open
  void open() {
    _objc_msgSend_44(this.pointer, _sel_open);
  }

  /// close
  void close() {
    _objc_msgSend_44(this.pointer, _sel_close);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_3(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_45(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// propertyForKey:
  objc.ObjCObjectBase? propertyForKey_(DartNSStreamPropertyKey key) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_propertyForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setProperty:forKey:
  bool setProperty_forKey_(
      objc.ObjCObjectBase? property, DartNSStreamPropertyKey key) {
    return _objc_msgSend_46(this.pointer, _sel_setProperty_forKey_,
        property?.pointer ?? ffi.nullptr, key.pointer);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, DartNSRunLoopMode mode) {
    _objc_msgSend_47(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, DartNSRunLoopMode mode) {
    _objc_msgSend_47(this.pointer, _sel_removeFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// streamStatus
  NSStreamStatus get streamStatus {
    final _ret = _objc_msgSend_48(this.pointer, _sel_streamStatus);
    return NSStreamStatus.fromValue(_ret);
  }

  /// streamError
  objc.NSError? get streamError {
    final _ret = _objc_msgSend_49(this.pointer, _sel_streamError);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_54(
        _class_NSStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_55(
        _class_NSStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      DartNSUInteger bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_56(
        _class_NSStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  /// init
  NSStream init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSStream new1() {
    final _ret = _objc_msgSend_6(_class_NSStream, _sel_new);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSStream, _sel_allocWithZone_, zone);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSStream alloc() {
    final _ret = _objc_msgSend_6(_class_NSStream, _sel_alloc);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSStream = objc.getClass("NSStream");
late final _sel_open = objc.registerName("open");
final _objc_msgSend_44 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_close = objc.registerName("close");
late final _sel_delegate = objc.registerName("delegate");
late final _sel_setDelegate_ = objc.registerName("setDelegate:");
final _objc_msgSend_45 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
typedef NSStreamPropertyKey = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStreamPropertyKey = objc.NSString;
late final _sel_propertyForKey_ = objc.registerName("propertyForKey:");
late final _sel_setProperty_forKey_ = objc.registerName("setProperty:forKey:");
final _objc_msgSend_46 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSStreamPropertyKey)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            NSStreamPropertyKey)>();

/// NSRunLoop
class NSRunLoop extends objc.ObjCObjectBase {
  NSRunLoop._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSRunLoop] that points to the same underlying object as [other].
  NSRunLoop.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSRunLoop] that wraps the given raw object pointer.
  NSRunLoop.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSRunLoop].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSRunLoop);
  }
}

late final _class_NSRunLoop = objc.getClass("NSRunLoop");
typedef NSRunLoopMode = ffi.Pointer<objc.ObjCObject>;
typedef DartNSRunLoopMode = objc.NSString;
late final _sel_scheduleInRunLoop_forMode_ =
    objc.registerName("scheduleInRunLoop:forMode:");
final _objc_msgSend_47 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSRunLoopMode)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            NSRunLoopMode)>();
late final _sel_removeFromRunLoop_forMode_ =
    objc.registerName("removeFromRunLoop:forMode:");

enum NSStreamStatus {
  NSStreamStatusNotOpen(0),
  NSStreamStatusOpening(1),
  NSStreamStatusOpen(2),
  NSStreamStatusReading(3),
  NSStreamStatusWriting(4),
  NSStreamStatusAtEnd(5),
  NSStreamStatusClosed(6),
  NSStreamStatusError(7);

  final int value;
  const NSStreamStatus(this.value);

  static NSStreamStatus fromValue(int value) => switch (value) {
        0 => NSStreamStatusNotOpen,
        1 => NSStreamStatusOpening,
        2 => NSStreamStatusOpen,
        3 => NSStreamStatusReading,
        4 => NSStreamStatusWriting,
        5 => NSStreamStatusAtEnd,
        6 => NSStreamStatusClosed,
        7 => NSStreamStatusError,
        _ => throw ArgumentError("Unknown value for NSStreamStatus: $value"),
      };
}

late final _sel_streamStatus = objc.registerName("streamStatus");
final _objc_msgSend_48 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_streamError = objc.registerName("streamError");
final _objc_msgSend_49 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSOutputStream
class NSOutputStream extends NSStream {
  NSOutputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOutputStream] that points to the same underlying object as [other].
  NSOutputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOutputStream] that wraps the given raw object pointer.
  NSOutputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOutputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOutputStream);
  }

  /// write:maxLength:
  DartNSInteger write_maxLength_(
      ffi.Pointer<ffi.Uint8> buffer, DartNSUInteger len) {
    return _objc_msgSend_38(this.pointer, _sel_write_maxLength_, buffer, len);
  }

  /// hasSpaceAvailable
  bool get hasSpaceAvailable {
    return _objc_msgSend_13(this.pointer, _sel_hasSpaceAvailable);
  }

  /// initToMemory
  NSOutputStream initToMemory() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_initToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initToBuffer:capacity:
  NSOutputStream initToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, DartNSUInteger capacity) {
    final _ret = _objc_msgSend_50(
        this.pointer, _sel_initToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:append:
  NSOutputStream? initWithURL_append_(objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_51(
        this.pointer, _sel_initWithURL_append_, url.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initToFileAtPath:append:
  NSOutputStream? initToFileAtPath_append_(
      objc.NSString path, bool shouldAppend) {
    final _ret = _objc_msgSend_52(this.pointer, _sel_initToFileAtPath_append_,
        path.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamToMemory
  static NSOutputStream outputStreamToMemory() {
    final _ret =
        _objc_msgSend_6(_class_NSOutputStream, _sel_outputStreamToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamToBuffer:capacity:
  static NSOutputStream outputStreamToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, DartNSUInteger capacity) {
    final _ret = _objc_msgSend_50(_class_NSOutputStream,
        _sel_outputStreamToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamToFileAtPath:append:
  static NSOutputStream outputStreamToFileAtPath_append_(
      objc.NSString path, bool shouldAppend) {
    final _ret = _objc_msgSend_53(_class_NSOutputStream,
        _sel_outputStreamToFileAtPath_append_, path.pointer, shouldAppend);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamWithURL:append:
  static NSOutputStream? outputStreamWithURL_append_(
      objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_51(_class_NSOutputStream,
        _sel_outputStreamWithURL_append_, url.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_54(
        _class_NSOutputStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_55(
        _class_NSOutputStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      DartNSUInteger bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_56(
        _class_NSOutputStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }
}

late final _class_NSOutputStream = objc.getClass("NSOutputStream");
late final _sel_write_maxLength_ = objc.registerName("write:maxLength:");
late final _sel_hasSpaceAvailable = objc.registerName("hasSpaceAvailable");
late final _sel_initToMemory = objc.registerName("initToMemory");
late final _sel_initToBuffer_capacity_ =
    objc.registerName("initToBuffer:capacity:");
final _objc_msgSend_50 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                NSUInteger)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_initWithURL_append_ = objc.registerName("initWithURL:append:");
final _objc_msgSend_51 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initToFileAtPath_append_ =
    objc.registerName("initToFileAtPath:append:");
final _objc_msgSend_52 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_outputStreamToMemory =
    objc.registerName("outputStreamToMemory");
late final _sel_outputStreamToBuffer_capacity_ =
    objc.registerName("outputStreamToBuffer:capacity:");
late final _sel_outputStreamToFileAtPath_append_ =
    objc.registerName("outputStreamToFileAtPath:append:");
final _objc_msgSend_53 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_outputStreamWithURL_append_ =
    objc.registerName("outputStreamWithURL:append:");
late final _sel_getStreamsToHostWithName_port_inputStream_outputStream_ = objc
    .registerName("getStreamsToHostWithName:port:inputStream:outputStream:");
final _objc_msgSend_54 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

/// NSHost
class NSHost extends objc.ObjCObjectBase {
  NSHost._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSHost] that points to the same underlying object as [other].
  NSHost.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHost] that wraps the given raw object pointer.
  NSHost.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHost].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSHost);
  }
}

late final _class_NSHost = objc.getClass("NSHost");
late final _sel_getStreamsToHost_port_inputStream_outputStream_ =
    objc.registerName("getStreamsToHost:port:inputStream:outputStream:");
final _objc_msgSend_55 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_ = objc
    .registerName("getBoundStreamsWithBufferSize:inputStream:outputStream:");
final _objc_msgSend_56 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSUInteger,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_HTTPBodyStream = objc.registerName("HTTPBodyStream");
final _objc_msgSend_57 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_HTTPShouldHandleCookies =
    objc.registerName("HTTPShouldHandleCookies");
late final _sel_HTTPShouldUsePipelining =
    objc.registerName("HTTPShouldUsePipelining");
late final _sel_cachedResponseForRequest_ =
    objc.registerName("cachedResponseForRequest:");
final _objc_msgSend_58 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_storeCachedResponse_forRequest_ =
    objc.registerName("storeCachedResponse:forRequest:");
final _objc_msgSend_59 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCachedResponseForRequest_ =
    objc.registerName("removeCachedResponseForRequest:");
final _objc_msgSend_60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllCachedResponses =
    objc.registerName("removeAllCachedResponses");
late final _sel_removeCachedResponsesSinceDate_ =
    objc.registerName("removeCachedResponsesSinceDate:");
final _objc_msgSend_61 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_memoryCapacity = objc.registerName("memoryCapacity");
late final _sel_setMemoryCapacity_ = objc.registerName("setMemoryCapacity:");
final _objc_msgSend_62 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSUInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_diskCapacity = objc.registerName("diskCapacity");
late final _sel_setDiskCapacity_ = objc.registerName("setDiskCapacity:");
late final _sel_currentMemoryUsage = objc.registerName("currentMemoryUsage");
late final _sel_currentDiskUsage = objc.registerName("currentDiskUsage");

/// NSURLSessionDataTask
class NSURLSessionDataTask extends NSURLSessionTask {
  NSURLSessionDataTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionDataTask] that points to the same underlying object as [other].
  NSURLSessionDataTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionDataTask] that wraps the given raw object pointer.
  NSURLSessionDataTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionDataTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionDataTask);
  }

  /// init
  NSURLSessionDataTask init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionDataTask new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionDataTask, _sel_new);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionDataTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLSessionDataTask, _sel_allocWithZone_, zone);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionDataTask alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionDataTask, _sel_alloc);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionDataTask = objc.getClass("NSURLSessionDataTask");

/// NSURLSessionTask - a cancelable object that refers to the lifetime
/// of processing a given request.
class NSURLSessionTask extends objc.NSObject {
  NSURLSessionTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionTask] that points to the same underlying object as [other].
  NSURLSessionTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionTask] that wraps the given raw object pointer.
  NSURLSessionTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionTask);
  }

  /// an identifier for this task, assigned by and unique to the owning session
  DartNSUInteger get taskIdentifier {
    return _objc_msgSend_5(this.pointer, _sel_taskIdentifier);
  }

  /// may be nil if this is a stream task
  NSURLRequest? get originalRequest {
    final _ret = _objc_msgSend_63(this.pointer, _sel_originalRequest);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// may differ from originalRequest due to http server redirection
  NSURLRequest? get currentRequest {
    final _ret = _objc_msgSend_63(this.pointer, _sel_currentRequest);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// may be nil if no response has been received
  NSURLResponse? get response {
    final _ret = _objc_msgSend_64(this.pointer, _sel_response);
    return _ret.address == 0
        ? null
        : NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// Sets a task-specific delegate. Methods not implemented on this delegate will
  /// still be forwarded to the session delegate.
  ///
  /// Cannot be modified after task resumes. Not supported on background session.
  ///
  /// Delegate is strongly referenced until the task completes, after which it is
  /// reset to `nil`.
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_3(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// Sets a task-specific delegate. Methods not implemented on this delegate will
  /// still be forwarded to the session delegate.
  ///
  /// Cannot be modified after task resumes. Not supported on background session.
  ///
  /// Delegate is strongly referenced until the task completes, after which it is
  /// reset to `nil`.
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_45(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// NSProgress object which represents the task progress.
  /// It can be used for task progress tracking.
  NSProgress get progress {
    final _ret = _objc_msgSend_86(this.pointer, _sel_progress);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// Start the network load for this task no earlier than the specified date. If
  /// not specified, no start delay is used.
  ///
  /// Only applies to tasks created from background NSURLSession instances; has no
  /// effect for tasks created from other session types.
  objc.NSDate? get earliestBeginDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_earliestBeginDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// Start the network load for this task no earlier than the specified date. If
  /// not specified, no start delay is used.
  ///
  /// Only applies to tasks created from background NSURLSession instances; has no
  /// effect for tasks created from other session types.
  set earliestBeginDate(objc.NSDate? value) {
    return _objc_msgSend_88(this.pointer, _sel_setEarliestBeginDate_,
        value?.pointer ?? ffi.nullptr);
  }

  /// The number of bytes that the client expects (a best-guess upper-bound) will
  /// be sent and received by this task. These values are used by system scheduling
  /// policy. If unspecified, NSURLSessionTransferSizeUnknown is used.
  int get countOfBytesClientExpectsToSend {
    return _objc_msgSend_72(this.pointer, _sel_countOfBytesClientExpectsToSend);
  }

  /// The number of bytes that the client expects (a best-guess upper-bound) will
  /// be sent and received by this task. These values are used by system scheduling
  /// policy. If unspecified, NSURLSessionTransferSizeUnknown is used.
  set countOfBytesClientExpectsToSend(int value) {
    return _objc_msgSend_73(
        this.pointer, _sel_setCountOfBytesClientExpectsToSend_, value);
  }

  /// countOfBytesClientExpectsToReceive
  int get countOfBytesClientExpectsToReceive {
    return _objc_msgSend_72(
        this.pointer, _sel_countOfBytesClientExpectsToReceive);
  }

  /// setCountOfBytesClientExpectsToReceive:
  set countOfBytesClientExpectsToReceive(int value) {
    return _objc_msgSend_73(
        this.pointer, _sel_setCountOfBytesClientExpectsToReceive_, value);
  }

  /// number of body bytes already sent
  int get countOfBytesSent {
    return _objc_msgSend_72(this.pointer, _sel_countOfBytesSent);
  }

  /// number of body bytes already received
  int get countOfBytesReceived {
    return _objc_msgSend_72(this.pointer, _sel_countOfBytesReceived);
  }

  /// number of body bytes we expect to send, derived from the Content-Length of the HTTP request
  int get countOfBytesExpectedToSend {
    return _objc_msgSend_72(this.pointer, _sel_countOfBytesExpectedToSend);
  }

  /// number of byte bytes we expect to receive, usually derived from the Content-Length header of an HTTP response.
  int get countOfBytesExpectedToReceive {
    return _objc_msgSend_72(this.pointer, _sel_countOfBytesExpectedToReceive);
  }

  /// The taskDescription property is available for the developer to
  /// provide a descriptive label for the task.
  objc.NSString? get taskDescription {
    final _ret = _objc_msgSend_18(this.pointer, _sel_taskDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// The taskDescription property is available for the developer to
  /// provide a descriptive label for the task.
  set taskDescription(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setTaskDescription_, value?.pointer ?? ffi.nullptr);
  }

  /// -cancel returns immediately, but marks a task as being canceled.
  /// The task will signal -URLSession:task:didCompleteWithError: with an
  /// error value of { NSURLErrorDomain, NSURLErrorCancelled }.  In some
  /// cases, the task may signal other work before it acknowledges the
  /// cancelation.  -cancel may be sent to a task that has been suspended.
  void cancel() {
    _objc_msgSend_44(this.pointer, _sel_cancel);
  }

  /// The current state of the task within the session.
  NSURLSessionTaskState get state {
    final _ret = _objc_msgSend_90(this.pointer, _sel_state);
    return NSURLSessionTaskState.fromValue(_ret);
  }

  /// The error, if any, delivered via -URLSession:task:didCompleteWithError:
  /// This property will be nil in the event that no error occurred.
  objc.NSError? get error {
    final _ret = _objc_msgSend_49(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// Suspending a task will prevent the NSURLSession from continuing to
  /// load data.  There may still be delegate calls made on behalf of
  /// this task (for instance, to report data received while suspending)
  /// but no further transmissions will be made on behalf of the task
  /// until -resume is sent.  The timeout timer associated with the task
  /// will be disabled while a task is suspended. -suspend and -resume are
  /// nestable.
  void suspend() {
    _objc_msgSend_44(this.pointer, _sel_suspend);
  }

  /// resume
  void resume() {
    _objc_msgSend_44(this.pointer, _sel_resume);
  }

  /// Sets a scaling factor for the priority of the task. The scaling factor is a
  /// value between 0.0 and 1.0 (inclusive), where 0.0 is considered the lowest
  /// priority and 1.0 is considered the highest.
  ///
  /// The priority is a hint and not a hard requirement of task performance. The
  /// priority of a task may be changed using this API at any time, but not all
  /// protocols support this; in these cases, the last priority that took effect
  /// will be used.
  ///
  /// If no priority is specified, the task will operate with the default priority
  /// as defined by the constant NSURLSessionTaskPriorityDefault. Two additional
  /// priority levels are provided: NSURLSessionTaskPriorityLow and
  /// NSURLSessionTaskPriorityHigh, but use is not restricted to these.
  double get priority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_91Fpret(this.pointer, _sel_priority)
        : _objc_msgSend_91(this.pointer, _sel_priority);
  }

  /// Sets a scaling factor for the priority of the task. The scaling factor is a
  /// value between 0.0 and 1.0 (inclusive), where 0.0 is considered the lowest
  /// priority and 1.0 is considered the highest.
  ///
  /// The priority is a hint and not a hard requirement of task performance. The
  /// priority of a task may be changed using this API at any time, but not all
  /// protocols support this; in these cases, the last priority that took effect
  /// will be used.
  ///
  /// If no priority is specified, the task will operate with the default priority
  /// as defined by the constant NSURLSessionTaskPriorityDefault. Two additional
  /// priority levels are provided: NSURLSessionTaskPriorityLow and
  /// NSURLSessionTaskPriorityHigh, but use is not restricted to these.
  set priority(double value) {
    return _objc_msgSend_92(this.pointer, _sel_setPriority_, value);
  }

  /// Provides a hint indicating if incremental delivery of a partial response body
  /// would be useful for the application, or if it cannot process the response
  /// until it is complete. Indicating that incremental delivery is not desired may
  /// improve task performance. For example, if a response cannot be decoded until
  /// the entire content is received, set this property to false.
  ///
  /// Defaults to true unless this task is created with completion-handler based
  /// convenience methods, or if it is a download task.
  bool get prefersIncrementalDelivery {
    return _objc_msgSend_13(this.pointer, _sel_prefersIncrementalDelivery);
  }

  /// Provides a hint indicating if incremental delivery of a partial response body
  /// would be useful for the application, or if it cannot process the response
  /// until it is complete. Indicating that incremental delivery is not desired may
  /// improve task performance. For example, if a response cannot be decoded until
  /// the entire content is received, set this property to false.
  ///
  /// Defaults to true unless this task is created with completion-handler based
  /// convenience methods, or if it is a download task.
  set prefersIncrementalDelivery(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setPrefersIncrementalDelivery_, value);
  }

  /// init
  NSURLSessionTask init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLSessionTask new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionTask, _sel_new);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLSessionTask, _sel_allocWithZone_, zone);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLSessionTask alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionTask, _sel_alloc);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLSessionTask = objc.getClass("NSURLSessionTask");
late final _sel_taskIdentifier = objc.registerName("taskIdentifier");
late final _sel_originalRequest = objc.registerName("originalRequest");
final _objc_msgSend_63 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentRequest = objc.registerName("currentRequest");
final _objc_msgSend_64 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSProgress
class NSProgress extends objc.NSObject {
  NSProgress._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSProgress] that points to the same underlying object as [other].
  NSProgress.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProgress] that wraps the given raw object pointer.
  NSProgress.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProgress].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSProgress);
  }

  /// currentProgress
  static NSProgress? currentProgress() {
    final _ret = _objc_msgSend_65(_class_NSProgress, _sel_currentProgress);
    return _ret.address == 0
        ? null
        : NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// progressWithTotalUnitCount:
  static NSProgress progressWithTotalUnitCount_(int unitCount) {
    final _ret = _objc_msgSend_66(
        _class_NSProgress, _sel_progressWithTotalUnitCount_, unitCount);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// discreteProgressWithTotalUnitCount:
  static NSProgress discreteProgressWithTotalUnitCount_(int unitCount) {
    final _ret = _objc_msgSend_66(
        _class_NSProgress, _sel_discreteProgressWithTotalUnitCount_, unitCount);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// progressWithTotalUnitCount:parent:pendingUnitCount:
  static NSProgress progressWithTotalUnitCount_parent_pendingUnitCount_(
      int unitCount, NSProgress parent, int portionOfParentTotalUnitCount) {
    final _ret = _objc_msgSend_67(
        _class_NSProgress,
        _sel_progressWithTotalUnitCount_parent_pendingUnitCount_,
        unitCount,
        parent.pointer,
        portionOfParentTotalUnitCount);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithParent:userInfo:
  NSProgress initWithParent_userInfo_(
      NSProgress? parentProgressOrNil, objc.NSDictionary? userInfoOrNil) {
    final _ret = _objc_msgSend_68(
        this.pointer,
        _sel_initWithParent_userInfo_,
        parentProgressOrNil?.pointer ?? ffi.nullptr,
        userInfoOrNil?.pointer ?? ffi.nullptr);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// becomeCurrentWithPendingUnitCount:
  void becomeCurrentWithPendingUnitCount_(int unitCount) {
    _objc_msgSend_69(
        this.pointer, _sel_becomeCurrentWithPendingUnitCount_, unitCount);
  }

  /// performAsCurrentWithPendingUnitCount:usingBlock:
  void performAsCurrentWithPendingUnitCount_usingBlock_(
      int unitCount, ObjCBlock_ffiVoid work) {
    _objc_msgSend_70(
        this.pointer,
        _sel_performAsCurrentWithPendingUnitCount_usingBlock_,
        unitCount,
        work.pointer);
  }

  /// resignCurrent
  void resignCurrent() {
    _objc_msgSend_44(this.pointer, _sel_resignCurrent);
  }

  /// addChild:withPendingUnitCount:
  void addChild_withPendingUnitCount_(NSProgress child, int inUnitCount) {
    _objc_msgSend_71(this.pointer, _sel_addChild_withPendingUnitCount_,
        child.pointer, inUnitCount);
  }

  /// totalUnitCount
  int get totalUnitCount {
    return _objc_msgSend_72(this.pointer, _sel_totalUnitCount);
  }

  /// setTotalUnitCount:
  set totalUnitCount(int value) {
    return _objc_msgSend_73(this.pointer, _sel_setTotalUnitCount_, value);
  }

  /// completedUnitCount
  int get completedUnitCount {
    return _objc_msgSend_72(this.pointer, _sel_completedUnitCount);
  }

  /// setCompletedUnitCount:
  set completedUnitCount(int value) {
    return _objc_msgSend_73(this.pointer, _sel_setCompletedUnitCount_, value);
  }

  /// localizedDescription
  objc.NSString get localizedDescription {
    final _ret = _objc_msgSend_74(this.pointer, _sel_localizedDescription);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocalizedDescription:
  set localizedDescription(objc.NSString value) {
    return _objc_msgSend_75(
        this.pointer, _sel_setLocalizedDescription_, value.pointer);
  }

  /// localizedAdditionalDescription
  objc.NSString get localizedAdditionalDescription {
    final _ret =
        _objc_msgSend_74(this.pointer, _sel_localizedAdditionalDescription);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocalizedAdditionalDescription:
  set localizedAdditionalDescription(objc.NSString value) {
    return _objc_msgSend_75(
        this.pointer, _sel_setLocalizedAdditionalDescription_, value.pointer);
  }

  /// isCancellable
  bool get cancellable {
    return _objc_msgSend_13(this.pointer, _sel_isCancellable);
  }

  /// setCancellable:
  set cancellable(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setCancellable_, value);
  }

  /// isPausable
  bool get pausable {
    return _objc_msgSend_13(this.pointer, _sel_isPausable);
  }

  /// setPausable:
  set pausable(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setPausable_, value);
  }

  /// isCancelled
  bool get cancelled {
    return _objc_msgSend_13(this.pointer, _sel_isCancelled);
  }

  /// isPaused
  bool get paused {
    return _objc_msgSend_13(this.pointer, _sel_isPaused);
  }

  /// cancellationHandler
  ObjCBlock_ffiVoid? get cancellationHandler {
    final _ret = _objc_msgSend_77(this.pointer, _sel_cancellationHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCancellationHandler:
  set cancellationHandler(ObjCBlock_ffiVoid? value) {
    return _objc_msgSend_78(this.pointer, _sel_setCancellationHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  /// pausingHandler
  ObjCBlock_ffiVoid? get pausingHandler {
    final _ret = _objc_msgSend_77(this.pointer, _sel_pausingHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPausingHandler:
  set pausingHandler(ObjCBlock_ffiVoid? value) {
    return _objc_msgSend_78(
        this.pointer, _sel_setPausingHandler_, value?.pointer ?? ffi.nullptr);
  }

  /// resumingHandler
  ObjCBlock_ffiVoid? get resumingHandler {
    final _ret = _objc_msgSend_77(this.pointer, _sel_resumingHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setResumingHandler:
  set resumingHandler(ObjCBlock_ffiVoid? value) {
    return _objc_msgSend_78(
        this.pointer, _sel_setResumingHandler_, value?.pointer ?? ffi.nullptr);
  }

  /// setUserInfoObject:forKey:
  void setUserInfoObject_forKey_(
      objc.ObjCObjectBase? objectOrNil, DartNSProgressUserInfoKey key) {
    _objc_msgSend_79(this.pointer, _sel_setUserInfoObject_forKey_,
        objectOrNil?.pointer ?? ffi.nullptr, key.pointer);
  }

  /// isIndeterminate
  bool get indeterminate {
    return _objc_msgSend_13(this.pointer, _sel_isIndeterminate);
  }

  /// fractionCompleted
  double get fractionCompleted {
    return _objc_msgSend_33(this.pointer, _sel_fractionCompleted);
  }

  /// isFinished
  bool get finished {
    return _objc_msgSend_13(this.pointer, _sel_isFinished);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_44(this.pointer, _sel_cancel);
  }

  /// pause
  void pause() {
    _objc_msgSend_44(this.pointer, _sel_pause);
  }

  /// resume
  void resume() {
    _objc_msgSend_44(this.pointer, _sel_resume);
  }

  /// userInfo
  objc.NSDictionary get userInfo {
    final _ret = _objc_msgSend_80(this.pointer, _sel_userInfo);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// kind
  DartNSProgressKind get kind {
    final _ret = _objc_msgSend_74(this.pointer, _sel_kind);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setKind:
  set kind(DartNSProgressKind value) {
    return _objc_msgSend_75(this.pointer, _sel_setKind_, value.pointer);
  }

  /// estimatedTimeRemaining
  objc.NSNumber? get estimatedTimeRemaining {
    final _ret = _objc_msgSend_81(this.pointer, _sel_estimatedTimeRemaining);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEstimatedTimeRemaining:
  set estimatedTimeRemaining(objc.NSNumber? value) {
    return _objc_msgSend_82(this.pointer, _sel_setEstimatedTimeRemaining_,
        value?.pointer ?? ffi.nullptr);
  }

  /// throughput
  objc.NSNumber? get throughput {
    final _ret = _objc_msgSend_81(this.pointer, _sel_throughput);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setThroughput:
  set throughput(objc.NSNumber? value) {
    return _objc_msgSend_82(
        this.pointer, _sel_setThroughput_, value?.pointer ?? ffi.nullptr);
  }

  /// fileOperationKind
  DartNSProgressFileOperationKind get fileOperationKind {
    final _ret = _objc_msgSend_74(this.pointer, _sel_fileOperationKind);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileOperationKind:
  set fileOperationKind(DartNSProgressFileOperationKind value) {
    return _objc_msgSend_75(
        this.pointer, _sel_setFileOperationKind_, value.pointer);
  }

  /// fileURL
  objc.NSURL? get fileURL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_fileURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileURL:
  set fileURL(objc.NSURL? value) {
    return _objc_msgSend_83(
        this.pointer, _sel_setFileURL_, value?.pointer ?? ffi.nullptr);
  }

  /// fileTotalCount
  objc.NSNumber? get fileTotalCount {
    final _ret = _objc_msgSend_81(this.pointer, _sel_fileTotalCount);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileTotalCount:
  set fileTotalCount(objc.NSNumber? value) {
    return _objc_msgSend_82(
        this.pointer, _sel_setFileTotalCount_, value?.pointer ?? ffi.nullptr);
  }

  /// fileCompletedCount
  objc.NSNumber? get fileCompletedCount {
    final _ret = _objc_msgSend_81(this.pointer, _sel_fileCompletedCount);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileCompletedCount:
  set fileCompletedCount(objc.NSNumber? value) {
    return _objc_msgSend_82(this.pointer, _sel_setFileCompletedCount_,
        value?.pointer ?? ffi.nullptr);
  }

  /// publish
  void publish() {
    _objc_msgSend_44(this.pointer, _sel_publish);
  }

  /// unpublish
  void unpublish() {
    _objc_msgSend_44(this.pointer, _sel_unpublish);
  }

  /// addSubscriberForFileURL:withPublishingHandler:
  static objc.ObjCObjectBase addSubscriberForFileURL_withPublishingHandler_(
      objc.NSURL url, DartNSProgressPublishingHandler publishingHandler) {
    final _ret = _objc_msgSend_84(
        _class_NSProgress,
        _sel_addSubscriberForFileURL_withPublishingHandler_,
        url.pointer,
        publishingHandler.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// removeSubscriber:
  static void removeSubscriber_(objc.ObjCObjectBase subscriber) {
    _objc_msgSend_85(
        _class_NSProgress, _sel_removeSubscriber_, subscriber.pointer);
  }

  /// isOld
  bool get old {
    return _objc_msgSend_13(this.pointer, _sel_isOld);
  }

  /// init
  NSProgress init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSProgress new1() {
    final _ret = _objc_msgSend_6(_class_NSProgress, _sel_new);
    return NSProgress.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSProgress allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSProgress, _sel_allocWithZone_, zone);
    return NSProgress.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSProgress alloc() {
    final _ret = _objc_msgSend_6(_class_NSProgress, _sel_alloc);
    return NSProgress.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSProgress = objc.getClass("NSProgress");
late final _sel_currentProgress = objc.registerName("currentProgress");
final _objc_msgSend_65 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_progressWithTotalUnitCount_ =
    objc.registerName("progressWithTotalUnitCount:");
final _objc_msgSend_66 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_discreteProgressWithTotalUnitCount_ =
    objc.registerName("discreteProgressWithTotalUnitCount:");
late final _sel_progressWithTotalUnitCount_parent_pendingUnitCount_ =
    objc.registerName("progressWithTotalUnitCount:parent:pendingUnitCount:");
final _objc_msgSend_67 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int64,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithParent_userInfo_ =
    objc.registerName("initWithParent:userInfo:");
final _objc_msgSend_68 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_becomeCurrentWithPendingUnitCount_ =
    objc.registerName("becomeCurrentWithPendingUnitCount:");
final _objc_msgSend_69 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_performAsCurrentWithPendingUnitCount_usingBlock_ =
    objc.registerName("performAsCurrentWithPendingUnitCount:usingBlock:");
final _objc_msgSend_70 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int64,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_resignCurrent = objc.registerName("resignCurrent");
late final _sel_addChild_withPendingUnitCount_ =
    objc.registerName("addChild:withPendingUnitCount:");
final _objc_msgSend_71 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int64)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_totalUnitCount = objc.registerName("totalUnitCount");
final _objc_msgSend_72 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTotalUnitCount_ = objc.registerName("setTotalUnitCount:");
final _objc_msgSend_73 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_completedUnitCount = objc.registerName("completedUnitCount");
late final _sel_setCompletedUnitCount_ =
    objc.registerName("setCompletedUnitCount:");
late final _sel_localizedDescription =
    objc.registerName("localizedDescription");
final _objc_msgSend_74 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setLocalizedDescription_ =
    objc.registerName("setLocalizedDescription:");
final _objc_msgSend_75 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedAdditionalDescription =
    objc.registerName("localizedAdditionalDescription");
late final _sel_setLocalizedAdditionalDescription_ =
    objc.registerName("setLocalizedAdditionalDescription:");
late final _sel_isCancellable = objc.registerName("isCancellable");
late final _sel_setCancellable_ = objc.registerName("setCancellable:");
final _objc_msgSend_76 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_isPausable = objc.registerName("isPausable");
late final _sel_setPausable_ = objc.registerName("setPausable:");
late final _sel_isCancelled = objc.registerName("isCancelled");
late final _sel_isPaused = objc.registerName("isPaused");
late final _sel_cancellationHandler = objc.registerName("cancellationHandler");
final _objc_msgSend_77 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlock> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCancellationHandler_ =
    objc.registerName("setCancellationHandler:");
final _objc_msgSend_78 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_pausingHandler = objc.registerName("pausingHandler");
late final _sel_setPausingHandler_ = objc.registerName("setPausingHandler:");
late final _sel_resumingHandler = objc.registerName("resumingHandler");
late final _sel_setResumingHandler_ = objc.registerName("setResumingHandler:");
typedef NSProgressUserInfoKey = ffi.Pointer<objc.ObjCObject>;
typedef DartNSProgressUserInfoKey = objc.NSString;
late final _sel_setUserInfoObject_forKey_ =
    objc.registerName("setUserInfoObject:forKey:");
final _objc_msgSend_79 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSProgressUserInfoKey)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            NSProgressUserInfoKey)>();
late final _sel_isIndeterminate = objc.registerName("isIndeterminate");
late final _sel_fractionCompleted = objc.registerName("fractionCompleted");
late final _sel_isFinished = objc.registerName("isFinished");
late final _sel_cancel = objc.registerName("cancel");
late final _sel_pause = objc.registerName("pause");
late final _sel_resume = objc.registerName("resume");
final _objc_msgSend_80 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
typedef NSProgressKind = ffi.Pointer<objc.ObjCObject>;
typedef DartNSProgressKind = objc.NSString;
late final _sel_kind = objc.registerName("kind");
late final _sel_setKind_ = objc.registerName("setKind:");
late final _sel_estimatedTimeRemaining =
    objc.registerName("estimatedTimeRemaining");
final _objc_msgSend_81 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEstimatedTimeRemaining_ =
    objc.registerName("setEstimatedTimeRemaining:");
final _objc_msgSend_82 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_throughput = objc.registerName("throughput");
late final _sel_setThroughput_ = objc.registerName("setThroughput:");
typedef NSProgressFileOperationKind = ffi.Pointer<objc.ObjCObject>;
typedef DartNSProgressFileOperationKind = objc.NSString;
late final _sel_fileOperationKind = objc.registerName("fileOperationKind");
late final _sel_setFileOperationKind_ =
    objc.registerName("setFileOperationKind:");
late final _sel_fileURL = objc.registerName("fileURL");
late final _sel_setFileURL_ = objc.registerName("setFileURL:");
final _objc_msgSend_83 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileTotalCount = objc.registerName("fileTotalCount");
late final _sel_setFileTotalCount_ = objc.registerName("setFileTotalCount:");
late final _sel_fileCompletedCount = objc.registerName("fileCompletedCount");
late final _sel_setFileCompletedCount_ =
    objc.registerName("setFileCompletedCount:");
late final _sel_publish = objc.registerName("publish");
late final _sel_unpublish = objc.registerName("unpublish");
typedef NSProgressPublishingHandler = ffi.Pointer<objc.ObjCBlock>;
typedef DartNSProgressPublishingHandler
    = ObjCBlock_NSProgressUnpublishingHandler_NSProgress;
NSProgressUnpublishingHandler
    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    NSProgressUnpublishingHandler Function(
                        ffi.Pointer<objc.ObjCObject> arg0)>>()
            .asFunction<
                NSProgressUnpublishingHandler Function(
                    ffi.Pointer<objc.ObjCObject>)>()(arg0);
NSProgressUnpublishingHandler
    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        (objc.getBlockClosure(block) as NSProgressUnpublishingHandler Function(
            ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_NSProgressUnpublishingHandler_NSProgress
    extends objc.ObjCBlockBase {
  ObjCBlock_NSProgressUnpublishingHandler_NSProgress._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgressUnpublishingHandler_NSProgress castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSProgressUnpublishingHandler_NSProgress._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgressUnpublishingHandler_NSProgress.fromFunctionPointer(
      ffi.Pointer<
              ffi
              .NativeFunction<
                  NSProgressUnpublishingHandler Function(
                      ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSProgressUnpublishingHandler Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgressUnpublishingHandler_NSProgress.fromFunction(
      DartNSProgressUnpublishingHandler Function(NSProgress) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSProgressUnpublishingHandler Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSProgress.castFromPointer(arg0,
                        retain: true, release: true))
                .retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  DartNSProgressUnpublishingHandler call(NSProgress arg0) =>
      ObjCBlock_ffiVoid.castFromPointer(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      NSProgressUnpublishingHandler Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<
                  NSProgressUnpublishingHandler Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer),
          retain: false,
          release: true);
}

typedef NSProgressUnpublishingHandler = ffi.Pointer<objc.ObjCBlock>;
typedef DartNSProgressUnpublishingHandler = ObjCBlock_ffiVoid;
late final _sel_addSubscriberForFileURL_withPublishingHandler_ =
    objc.registerName("addSubscriberForFileURL:withPublishingHandler:");
final _objc_msgSend_84 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSProgressPublishingHandler)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            NSProgressPublishingHandler)>();
late final _sel_removeSubscriber_ = objc.registerName("removeSubscriber:");
final _objc_msgSend_85 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isOld = objc.registerName("isOld");
late final _sel_progress = objc.registerName("progress");
final _objc_msgSend_86 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_earliestBeginDate = objc.registerName("earliestBeginDate");
final _objc_msgSend_87 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEarliestBeginDate_ =
    objc.registerName("setEarliestBeginDate:");
final _objc_msgSend_88 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_countOfBytesClientExpectsToSend =
    objc.registerName("countOfBytesClientExpectsToSend");
late final _sel_setCountOfBytesClientExpectsToSend_ =
    objc.registerName("setCountOfBytesClientExpectsToSend:");
late final _sel_countOfBytesClientExpectsToReceive =
    objc.registerName("countOfBytesClientExpectsToReceive");
late final _sel_setCountOfBytesClientExpectsToReceive_ =
    objc.registerName("setCountOfBytesClientExpectsToReceive:");
late final _sel_countOfBytesSent = objc.registerName("countOfBytesSent");
late final _sel_countOfBytesReceived =
    objc.registerName("countOfBytesReceived");
late final _sel_countOfBytesExpectedToSend =
    objc.registerName("countOfBytesExpectedToSend");
late final _sel_countOfBytesExpectedToReceive =
    objc.registerName("countOfBytesExpectedToReceive");
late final _sel_taskDescription = objc.registerName("taskDescription");
late final _sel_setTaskDescription_ = objc.registerName("setTaskDescription:");
final _objc_msgSend_89 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSURLSessionTaskState {
  /// The task is currently being serviced by the session
  NSURLSessionTaskStateRunning(0),
  NSURLSessionTaskStateSuspended(1),

  /// The task has been told to cancel.  The session will receive a URLSession:task:didCompleteWithError: message.
  NSURLSessionTaskStateCanceling(2),

  /// The task has completed and the session will receive no more delegate notifications
  NSURLSessionTaskStateCompleted(3);

  final int value;
  const NSURLSessionTaskState(this.value);

  static NSURLSessionTaskState fromValue(int value) => switch (value) {
        0 => NSURLSessionTaskStateRunning,
        1 => NSURLSessionTaskStateSuspended,
        2 => NSURLSessionTaskStateCanceling,
        3 => NSURLSessionTaskStateCompleted,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionTaskState: $value"),
      };
}

late final _sel_state = objc.registerName("state");
final _objc_msgSend_90 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_error = objc.registerName("error");
late final _sel_suspend = objc.registerName("suspend");
late final _sel_priority = objc.registerName("priority");
final _objc_msgSend_91 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_91Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPriority_ = objc.registerName("setPriority:");
final _objc_msgSend_92 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_prefersIncrementalDelivery =
    objc.registerName("prefersIncrementalDelivery");
late final _sel_setPrefersIncrementalDelivery_ =
    objc.registerName("setPrefersIncrementalDelivery:");
late final _sel_storeCachedResponse_forDataTask_ =
    objc.registerName("storeCachedResponse:forDataTask:");
final _objc_msgSend_93 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSCachedURLResponse extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSCachedURLResponse._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSCachedURLResponse castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSCachedURLResponse._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSCachedURLResponse.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSCachedURLResponse.fromFunction(
      void Function(NSCachedURLResponse?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : NSCachedURLResponse.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSCachedURLResponse.listener(
      void Function(NSCachedURLResponse?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSCachedURLResponse(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSCachedURLResponse.castFromPointer(arg0, retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSCachedURLResponse? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCachedResponseForDataTask_completionHandler_ =
    objc.registerName("getCachedResponseForDataTask:completionHandler:");
final _objc_msgSend_94 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_removeCachedResponseForDataTask_ =
    objc.registerName("removeCachedResponseForDataTask:");
final _objc_msgSend_95 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSNotificationCenter
class NSNotificationCenter extends objc.NSObject {
  NSNotificationCenter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNotificationCenter] that points to the same underlying object as [other].
  NSNotificationCenter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNotificationCenter] that wraps the given raw object pointer.
  NSNotificationCenter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNotificationCenter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNotificationCenter);
  }

  /// defaultCenter
  static NSNotificationCenter getDefaultCenter() {
    final _ret =
        _objc_msgSend_96(_class_NSNotificationCenter, _sel_defaultCenter);
    return NSNotificationCenter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// addObserver:selector:name:object:
  void addObserver_selector_name_object_(
      objc.ObjCObjectBase observer,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      DartNSNotificationName aName,
      objc.ObjCObjectBase? anObject) {
    _objc_msgSend_97(
        this.pointer,
        _sel_addObserver_selector_name_object_,
        observer.pointer,
        aSelector,
        aName.pointer,
        anObject?.pointer ?? ffi.nullptr);
  }

  /// postNotification:
  void postNotification_(objc.NSNotification notification) {
    _objc_msgSend_98(
        this.pointer, _sel_postNotification_, notification.pointer);
  }

  /// postNotificationName:object:
  void postNotificationName_object_(
      DartNSNotificationName aName, objc.ObjCObjectBase? anObject) {
    _objc_msgSend_99(this.pointer, _sel_postNotificationName_object_,
        aName.pointer, anObject?.pointer ?? ffi.nullptr);
  }

  /// postNotificationName:object:userInfo:
  void postNotificationName_object_userInfo_(DartNSNotificationName aName,
      objc.ObjCObjectBase? anObject, objc.NSDictionary? aUserInfo) {
    _objc_msgSend_100(
        this.pointer,
        _sel_postNotificationName_object_userInfo_,
        aName.pointer,
        anObject?.pointer ?? ffi.nullptr,
        aUserInfo?.pointer ?? ffi.nullptr);
  }

  /// removeObserver:
  void removeObserver_(objc.ObjCObjectBase observer) {
    _objc_msgSend_85(this.pointer, _sel_removeObserver_, observer.pointer);
  }

  /// removeObserver:name:object:
  void removeObserver_name_object_(objc.ObjCObjectBase observer,
      DartNSNotificationName aName, objc.ObjCObjectBase? anObject) {
    _objc_msgSend_101(this.pointer, _sel_removeObserver_name_object_,
        observer.pointer, aName.pointer, anObject?.pointer ?? ffi.nullptr);
  }

  /// addObserverForName:object:queue:usingBlock:
  objc.ObjCObjectBase addObserverForName_object_queue_usingBlock_(
      DartNSNotificationName name,
      objc.ObjCObjectBase? obj,
      NSOperationQueue? queue,
      ObjCBlock_ffiVoid_NSNotification block) {
    final _ret = _objc_msgSend_117(
        this.pointer,
        _sel_addObserverForName_object_queue_usingBlock_,
        name.pointer,
        obj?.pointer ?? ffi.nullptr,
        queue?.pointer ?? ffi.nullptr,
        block.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// init
  NSNotificationCenter init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSNotificationCenter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSNotificationCenter new1() {
    final _ret = _objc_msgSend_6(_class_NSNotificationCenter, _sel_new);
    return NSNotificationCenter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSNotificationCenter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSNotificationCenter, _sel_allocWithZone_, zone);
    return NSNotificationCenter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSNotificationCenter alloc() {
    final _ret = _objc_msgSend_6(_class_NSNotificationCenter, _sel_alloc);
    return NSNotificationCenter.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSNotificationCenter = objc.getClass("NSNotificationCenter");
late final _sel_defaultCenter = objc.registerName("defaultCenter");
final _objc_msgSend_96 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
typedef NSNotificationName = ffi.Pointer<objc.ObjCObject>;
typedef DartNSNotificationName = objc.NSString;
late final _sel_addObserver_selector_name_object_ =
    objc.registerName("addObserver:selector:name:object:");
final _objc_msgSend_97 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSNotificationName,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSNotificationName,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_postNotification_ = objc.registerName("postNotification:");
final _objc_msgSend_98 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_postNotificationName_object_ =
    objc.registerName("postNotificationName:object:");
final _objc_msgSend_99 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSNotificationName,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSNotificationName,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_postNotificationName_object_userInfo_ =
    objc.registerName("postNotificationName:object:userInfo:");
final _objc_msgSend_100 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSNotificationName,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSNotificationName,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeObserver_ = objc.registerName("removeObserver:");
late final _sel_removeObserver_name_object_ =
    objc.registerName("removeObserver:name:object:");
final _objc_msgSend_101 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSNotificationName,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            NSNotificationName,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSOperationQueue
class NSOperationQueue extends objc.NSObject {
  NSOperationQueue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperationQueue] that points to the same underlying object as [other].
  NSOperationQueue.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOperationQueue] that wraps the given raw object pointer.
  NSOperationQueue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOperationQueue].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOperationQueue);
  }

  /// @property progress
  /// @discussion     The `progress` property represents a total progress of the operations executed in the queue. By default NSOperationQueue
  /// does not report progress until the `totalUnitCount` of the progress is set. When the `totalUnitCount` property of the progress is set the
  /// queue then opts into participating in progress reporting. When enabled, each operation will contribute 1 unit of completion to the
  /// overall progress of the queue for operations that are finished by the end of main (operations that override start and do not invoke super
  /// will not contribute to progress). Special attention to race conditions should be made when updating the `totalUnitCount` of the progress
  /// as well as care should be taken to avoid 'backwards progress'. For example; when a NSOperationQueue's progress is 5/10, representing 50%
  /// completed, and there are 90 more operations about to be added and the `totalUnitCount` that would then make the progress report as 5/100
  /// which represents 5%. In this example it would mean that any progress bar would jump from displaying 50% back to 5%, which might not be
  /// desirable. In the cases where the `totalUnitCount` needs to be adjusted it is suggested to do this for thread-safety in a barrier by
  /// using the `addBarrierBlock:` API. This ensures that no un-expected execution state occurs adjusting into a potentially backwards moving
  /// progress scenario.
  ///
  /// @example
  /// NSOperationQueue *queue = [[NSOperationQueue alloc] init];
  /// queue.progress.totalUnitCount = 10;
  NSProgress get progress {
    final _ret = _objc_msgSend_86(this.pointer, _sel_progress);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// addOperation:
  void addOperation_(NSOperation op) {
    _objc_msgSend_102(this.pointer, _sel_addOperation_, op.pointer);
  }

  /// addOperations:waitUntilFinished:
  void addOperations_waitUntilFinished_(objc.NSArray ops, bool wait) {
    _objc_msgSend_109(
        this.pointer, _sel_addOperations_waitUntilFinished_, ops.pointer, wait);
  }

  /// addOperationWithBlock:
  void addOperationWithBlock_(ObjCBlock_ffiVoid block) {
    _objc_msgSend_110(this.pointer, _sel_addOperationWithBlock_, block.pointer);
  }

  /// @method addBarrierBlock:
  /// @param barrier      A block to execute
  /// @discussion         The `addBarrierBlock:` method executes the block when the NSOperationQueue has finished all enqueued operations and
  /// prevents any subsequent operations to be executed until the barrier has been completed. This acts similarly to the
  /// `dispatch_barrier_async` function.
  void addBarrierBlock_(ObjCBlock_ffiVoid barrier) {
    _objc_msgSend_110(this.pointer, _sel_addBarrierBlock_, barrier.pointer);
  }

  /// maxConcurrentOperationCount
  DartNSInteger get maxConcurrentOperationCount {
    return _objc_msgSend_111(this.pointer, _sel_maxConcurrentOperationCount);
  }

  /// setMaxConcurrentOperationCount:
  set maxConcurrentOperationCount(DartNSInteger value) {
    return _objc_msgSend_112(
        this.pointer, _sel_setMaxConcurrentOperationCount_, value);
  }

  /// isSuspended
  bool get suspended {
    return _objc_msgSend_13(this.pointer, _sel_isSuspended);
  }

  /// setSuspended:
  set suspended(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setSuspended_, value);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_18(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// qualityOfService
  NSQualityOfService get qualityOfService {
    final _ret = _objc_msgSend_107(this.pointer, _sel_qualityOfService);
    return NSQualityOfService.fromValue(_ret);
  }

  /// setQualityOfService:
  set qualityOfService(NSQualityOfService value) {
    return _objc_msgSend_108(
        this.pointer, _sel_setQualityOfService_, value.value);
  }

  /// actually retain
  dispatch_queue_t get underlyingQueue {
    return _objc_msgSend_113(this.pointer, _sel_underlyingQueue);
  }

  /// actually retain
  set underlyingQueue(dispatch_queue_t value) {
    return _objc_msgSend_114(this.pointer, _sel_setUnderlyingQueue_, value);
  }

  /// cancelAllOperations
  void cancelAllOperations() {
    _objc_msgSend_44(this.pointer, _sel_cancelAllOperations);
  }

  /// waitUntilAllOperationsAreFinished
  void waitUntilAllOperationsAreFinished() {
    _objc_msgSend_44(this.pointer, _sel_waitUntilAllOperationsAreFinished);
  }

  /// currentQueue
  static NSOperationQueue? getCurrentQueue() {
    final _ret = _objc_msgSend_115(_class_NSOperationQueue, _sel_currentQueue);
    return _ret.address == 0
        ? null
        : NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// mainQueue
  static NSOperationQueue getMainQueue() {
    final _ret = _objc_msgSend_116(_class_NSOperationQueue, _sel_mainQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// These two functions are inherently a race condition and should be avoided if possible
  objc.NSArray get operations {
    final _ret = _objc_msgSend_103(this.pointer, _sel_operations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// operationCount
  DartNSUInteger get operationCount {
    return _objc_msgSend_5(this.pointer, _sel_operationCount);
  }

  /// init
  NSOperationQueue init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSOperationQueue new1() {
    final _ret = _objc_msgSend_6(_class_NSOperationQueue, _sel_new);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSOperationQueue allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSOperationQueue, _sel_allocWithZone_, zone);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSOperationQueue alloc() {
    final _ret = _objc_msgSend_6(_class_NSOperationQueue, _sel_alloc);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSOperationQueue = objc.getClass("NSOperationQueue");

/// NSOperation
class NSOperation extends objc.NSObject {
  NSOperation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperation] that points to the same underlying object as [other].
  NSOperation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOperation] that wraps the given raw object pointer.
  NSOperation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOperation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOperation);
  }

  /// start
  void start() {
    _objc_msgSend_44(this.pointer, _sel_start);
  }

  /// main
  void main() {
    _objc_msgSend_44(this.pointer, _sel_main);
  }

  /// isCancelled
  bool get cancelled {
    return _objc_msgSend_13(this.pointer, _sel_isCancelled);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_44(this.pointer, _sel_cancel);
  }

  /// isExecuting
  bool get executing {
    return _objc_msgSend_13(this.pointer, _sel_isExecuting);
  }

  /// isFinished
  bool get finished {
    return _objc_msgSend_13(this.pointer, _sel_isFinished);
  }

  /// To be deprecated; use and override 'asynchronous' below
  bool get concurrent {
    return _objc_msgSend_13(this.pointer, _sel_isConcurrent);
  }

  /// isAsynchronous
  bool get asynchronous {
    return _objc_msgSend_13(this.pointer, _sel_isAsynchronous);
  }

  /// isReady
  bool get ready {
    return _objc_msgSend_13(this.pointer, _sel_isReady);
  }

  /// addDependency:
  void addDependency_(NSOperation op) {
    _objc_msgSend_102(this.pointer, _sel_addDependency_, op.pointer);
  }

  /// removeDependency:
  void removeDependency_(NSOperation op) {
    _objc_msgSend_102(this.pointer, _sel_removeDependency_, op.pointer);
  }

  /// dependencies
  objc.NSArray get dependencies {
    final _ret = _objc_msgSend_103(this.pointer, _sel_dependencies);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// queuePriority
  NSOperationQueuePriority get queuePriority {
    final _ret = _objc_msgSend_104(this.pointer, _sel_queuePriority);
    return NSOperationQueuePriority.fromValue(_ret);
  }

  /// setQueuePriority:
  set queuePriority(NSOperationQueuePriority value) {
    return _objc_msgSend_105(this.pointer, _sel_setQueuePriority_, value.value);
  }

  /// completionBlock
  ObjCBlock_ffiVoid? get completionBlock {
    final _ret = _objc_msgSend_77(this.pointer, _sel_completionBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCompletionBlock:
  set completionBlock(ObjCBlock_ffiVoid? value) {
    return _objc_msgSend_78(
        this.pointer, _sel_setCompletionBlock_, value?.pointer ?? ffi.nullptr);
  }

  /// waitUntilFinished
  void waitUntilFinished() {
    _objc_msgSend_44(this.pointer, _sel_waitUntilFinished);
  }

  /// threadPriority
  double get threadPriority {
    return _objc_msgSend_33(this.pointer, _sel_threadPriority);
  }

  /// setThreadPriority:
  set threadPriority(double value) {
    return _objc_msgSend_106(this.pointer, _sel_setThreadPriority_, value);
  }

  /// qualityOfService
  NSQualityOfService get qualityOfService {
    final _ret = _objc_msgSend_107(this.pointer, _sel_qualityOfService);
    return NSQualityOfService.fromValue(_ret);
  }

  /// setQualityOfService:
  set qualityOfService(NSQualityOfService value) {
    return _objc_msgSend_108(
        this.pointer, _sel_setQualityOfService_, value.value);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_18(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// init
  NSOperation init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSOperation.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSOperation new1() {
    final _ret = _objc_msgSend_6(_class_NSOperation, _sel_new);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSOperation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSOperation, _sel_allocWithZone_, zone);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSOperation alloc() {
    final _ret = _objc_msgSend_6(_class_NSOperation, _sel_alloc);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSOperation = objc.getClass("NSOperation");
late final _sel_start = objc.registerName("start");
late final _sel_main = objc.registerName("main");
late final _sel_isExecuting = objc.registerName("isExecuting");
late final _sel_isConcurrent = objc.registerName("isConcurrent");
late final _sel_isAsynchronous = objc.registerName("isAsynchronous");
late final _sel_isReady = objc.registerName("isReady");
late final _sel_addDependency_ = objc.registerName("addDependency:");
final _objc_msgSend_102 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeDependency_ = objc.registerName("removeDependency:");
late final _sel_dependencies = objc.registerName("dependencies");
final _objc_msgSend_103 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum NSOperationQueuePriority {
  NSOperationQueuePriorityVeryLow(-8),
  NSOperationQueuePriorityLow(-4),
  NSOperationQueuePriorityNormal(0),
  NSOperationQueuePriorityHigh(4),
  NSOperationQueuePriorityVeryHigh(8);

  final int value;
  const NSOperationQueuePriority(this.value);

  static NSOperationQueuePriority fromValue(int value) => switch (value) {
        -8 => NSOperationQueuePriorityVeryLow,
        -4 => NSOperationQueuePriorityLow,
        0 => NSOperationQueuePriorityNormal,
        4 => NSOperationQueuePriorityHigh,
        8 => NSOperationQueuePriorityVeryHigh,
        _ => throw ArgumentError(
            "Unknown value for NSOperationQueuePriority: $value"),
      };
}

late final _sel_queuePriority = objc.registerName("queuePriority");
final _objc_msgSend_104 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setQueuePriority_ = objc.registerName("setQueuePriority:");
final _objc_msgSend_105 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_completionBlock = objc.registerName("completionBlock");
late final _sel_setCompletionBlock_ = objc.registerName("setCompletionBlock:");
late final _sel_waitUntilFinished = objc.registerName("waitUntilFinished");
late final _sel_threadPriority = objc.registerName("threadPriority");
late final _sel_setThreadPriority_ = objc.registerName("setThreadPriority:");
final _objc_msgSend_106 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_qualityOfService = objc.registerName("qualityOfService");
final _objc_msgSend_107 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setQualityOfService_ =
    objc.registerName("setQualityOfService:");
final _objc_msgSend_108 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_name = objc.registerName("name");
late final _sel_setName_ = objc.registerName("setName:");
late final _sel_addOperation_ = objc.registerName("addOperation:");
late final _sel_addOperations_waitUntilFinished_ =
    objc.registerName("addOperations:waitUntilFinished:");
final _objc_msgSend_109 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_addOperationWithBlock_ =
    objc.registerName("addOperationWithBlock:");
final _objc_msgSend_110 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_addBarrierBlock_ = objc.registerName("addBarrierBlock:");
late final _sel_maxConcurrentOperationCount =
    objc.registerName("maxConcurrentOperationCount");
final _objc_msgSend_111 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMaxConcurrentOperationCount_ =
    objc.registerName("setMaxConcurrentOperationCount:");
final _objc_msgSend_112 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isSuspended = objc.registerName("isSuspended");
late final _sel_setSuspended_ = objc.registerName("setSuspended:");
typedef dispatch_queue_t = ffi.Pointer<dispatch_queue_s>;

final class dispatch_queue_s extends ffi.Opaque {}

late final _sel_underlyingQueue = objc.registerName("underlyingQueue");
final _objc_msgSend_113 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            dispatch_queue_t Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        dispatch_queue_t Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setUnderlyingQueue_ = objc.registerName("setUnderlyingQueue:");
final _objc_msgSend_114 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, dispatch_queue_t)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, dispatch_queue_t)>();
late final _sel_cancelAllOperations = objc.registerName("cancelAllOperations");
late final _sel_waitUntilAllOperationsAreFinished =
    objc.registerName("waitUntilAllOperationsAreFinished");
late final _sel_currentQueue = objc.registerName("currentQueue");
final _objc_msgSend_115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainQueue = objc.registerName("mainQueue");
final _objc_msgSend_116 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_operations = objc.registerName("operations");
late final _sel_operationCount = objc.registerName("operationCount");
void _ObjCBlock_ffiVoid_NSNotification_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSNotification_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSNotification extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSNotification._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSNotification castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSNotification._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSNotification.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSNotification_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSNotification.fromFunction(
      void Function(objc.NSNotification) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSNotification_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                objc.NSNotification.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSNotification.listener(void Function(objc.NSNotification) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSNotification(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSNotification_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                objc.NSNotification.castFromPointer(arg0,
                    retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSNotification arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_addObserverForName_object_queue_usingBlock_ =
    objc.registerName("addObserverForName:object:queue:usingBlock:");
final _objc_msgSend_117 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSNotificationName,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSNotificationName,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

/// !
/// @class NSMutableURLRequest
///
/// @abstract An NSMutableURLRequest object represents a mutable URL load
/// request in a manner independent of protocol and URL scheme.
///
/// @discussion This specialization of NSURLRequest is provided to aid
/// developers who may find it more convenient to mutate a single request
/// object for a series of URL loads instead of creating an immutable
/// NSURLRequest for each load. This programming model is supported by
/// the following contract stipulation between NSMutableURLRequest and
/// NSURLConnection: NSURLConnection makes a deep copy of each
/// NSMutableURLRequest object passed to one of its initializers.
/// <p>NSMutableURLRequest is designed to be extended to support
/// protocol-specific data by adding categories to access a property
/// object provided in an interface targeted at protocol implementors.
/// <ul>
/// <li>Protocol implementors should direct their attention to the
/// NSMutableURLRequestExtensibility category on
/// NSMutableURLRequest for more information on how to provide
/// extensions on NSMutableURLRequest to support protocol-specific
/// request information.
/// <li>Clients of this API who wish to create NSMutableURLRequest
/// objects to load URL content should consult the protocol-specific
/// NSMutableURLRequest categories that are available. The
/// NSMutableHTTPURLRequest category on NSMutableURLRequest is an
/// example.
/// </ul>
class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableURLRequest] that points to the same underlying object as [other].
  NSMutableURLRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableURLRequest] that wraps the given raw object pointer.
  NSMutableURLRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableURLRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableURLRequest);
  }

  /// !
  /// @abstract The URL of the receiver.
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract The URL of the receiver.
  set URL(objc.NSURL? value) {
    return _objc_msgSend_83(
        this.pointer, _sel_setURL_, value?.pointer ?? ffi.nullptr);
  }

  /// !
  /// @abstract The cache policy of the receiver.
  NSURLRequestCachePolicy get cachePolicy {
    final _ret = _objc_msgSend_32(this.pointer, _sel_cachePolicy);
    return NSURLRequestCachePolicy.fromValue(_ret);
  }

  /// !
  /// @abstract The cache policy of the receiver.
  set cachePolicy(NSURLRequestCachePolicy value) {
    return _objc_msgSend_118(this.pointer, _sel_setCachePolicy_, value.value);
  }

  /// !
  /// @abstract Sets the timeout interval of the receiver.
  /// @discussion The timeout interval specifies the limit on the idle
  /// interval allotted to a request in the process of loading. The "idle
  /// interval" is defined as the period of time that has passed since the
  /// last instance of load activity occurred for a request that is in the
  /// process of loading. Hence, when an instance of load activity occurs
  /// (e.g. bytes are received from the network for a request), the idle
  /// interval for a request is reset to 0. If the idle interval ever
  /// becomes greater than or equal to the timeout interval, the request
  /// is considered to have timed out. This timeout interval is measured
  /// in seconds.
  DartNSTimeInterval get timeoutInterval {
    return _objc_msgSend_33(this.pointer, _sel_timeoutInterval);
  }

  /// !
  /// @abstract Sets the timeout interval of the receiver.
  /// @discussion The timeout interval specifies the limit on the idle
  /// interval allotted to a request in the process of loading. The "idle
  /// interval" is defined as the period of time that has passed since the
  /// last instance of load activity occurred for a request that is in the
  /// process of loading. Hence, when an instance of load activity occurs
  /// (e.g. bytes are received from the network for a request), the idle
  /// interval for a request is reset to 0. If the idle interval ever
  /// becomes greater than or equal to the timeout interval, the request
  /// is considered to have timed out. This timeout interval is measured
  /// in seconds.
  set timeoutInterval(DartNSTimeInterval value) {
    return _objc_msgSend_106(this.pointer, _sel_setTimeoutInterval_, value);
  }

  /// !
  /// @abstract Sets the main document URL
  /// @discussion The caller should pass the URL for an appropriate main
  /// document, if known. For example, when loading a web page, the URL
  /// of the main html document for the top-level frame should be
  /// passed.  This main document is used to implement the cookie "only
  /// from same domain as main document" policy, attributing this request
  /// as a sub-resource of a user-specified URL, and possibly other things
  /// in the future.
  objc.NSURL? get mainDocumentURL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_mainDocumentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Sets the main document URL
  /// @discussion The caller should pass the URL for an appropriate main
  /// document, if known. For example, when loading a web page, the URL
  /// of the main html document for the top-level frame should be
  /// passed.  This main document is used to implement the cookie "only
  /// from same domain as main document" policy, attributing this request
  /// as a sub-resource of a user-specified URL, and possibly other things
  /// in the future.
  set mainDocumentURL(objc.NSURL? value) {
    return _objc_msgSend_83(
        this.pointer, _sel_setMainDocumentURL_, value?.pointer ?? ffi.nullptr);
  }

  /// !
  /// @abstract Sets the NSURLRequestNetworkServiceType to associate with this request
  /// @discussion This method is used to provide the network layers with a hint as to the purpose
  /// of the request.  Most clients should not need to use this method.
  NSURLRequestNetworkServiceType get networkServiceType {
    final _ret = _objc_msgSend_34(this.pointer, _sel_networkServiceType);
    return NSURLRequestNetworkServiceType.fromValue(_ret);
  }

  /// !
  /// @abstract Sets the NSURLRequestNetworkServiceType to associate with this request
  /// @discussion This method is used to provide the network layers with a hint as to the purpose
  /// of the request.  Most clients should not need to use this method.
  set networkServiceType(NSURLRequestNetworkServiceType value) {
    return _objc_msgSend_119(
        this.pointer, _sel_setNetworkServiceType_, value.value);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// the built in cellular radios (if present).
  /// @discussion NO if the receiver should not be allowed to use the built in
  /// cellular radios to satisfy the request, YES otherwise.  The default is YES.
  bool get allowsCellularAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsCellularAccess);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// the built in cellular radios (if present).
  /// @discussion NO if the receiver should not be allowed to use the built in
  /// cellular radios to satisfy the request, YES otherwise.  The default is YES.
  set allowsCellularAccess(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setAllowsCellularAccess_, value);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as expensive.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as expensive to
  /// satisfy the request, YES otherwise.
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as expensive.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as expensive to
  /// satisfy the request, YES otherwise.
  set allowsExpensiveNetworkAccess(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setAllowsExpensiveNetworkAccess_, value);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as constrained.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as constrained to
  /// satisfy the request, YES otherwise.
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as constrained.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as constrained to
  /// satisfy the request, YES otherwise.
  set allowsConstrainedNetworkAccess(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setAllowsConstrainedNetworkAccess_, value);
  }

  /// !
  /// @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
  /// racing without HTTP/3 service discovery.
  /// @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
  /// The default may be YES in a future OS update.
  bool get assumesHTTP3Capable {
    return _objc_msgSend_13(this.pointer, _sel_assumesHTTP3Capable);
  }

  /// !
  /// @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
  /// racing without HTTP/3 service discovery.
  /// @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
  /// The default may be YES in a future OS update.
  set assumesHTTP3Capable(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setAssumesHTTP3Capable_, value);
  }

  /// !
  /// @abstract Sets the NSURLRequestAttribution to associate with this request.
  /// @discussion Set to NSURLRequestAttributionUser if the URL was specified by the
  /// user. Defaults to NSURLRequestAttributionDeveloper.
  NSURLRequestAttribution get attribution {
    final _ret = _objc_msgSend_35(this.pointer, _sel_attribution);
    return NSURLRequestAttribution.fromValue(_ret);
  }

  /// !
  /// @abstract Sets the NSURLRequestAttribution to associate with this request.
  /// @discussion Set to NSURLRequestAttributionUser if the URL was specified by the
  /// user. Defaults to NSURLRequestAttributionDeveloper.
  set attribution(NSURLRequestAttribution value) {
    return _objc_msgSend_120(this.pointer, _sel_setAttribution_, value.value);
  }

  /// !
  /// @abstract sets whether a request is required to do DNSSEC validation during DNS lookup.
  /// @discussion YES, if the DNS lookup for this request should require DNSSEC validation,
  /// No otherwise. Defaults to NO.
  bool get requiresDNSSECValidation {
    return _objc_msgSend_13(this.pointer, _sel_requiresDNSSECValidation);
  }

  /// !
  /// @abstract sets whether a request is required to do DNSSEC validation during DNS lookup.
  /// @discussion YES, if the DNS lookup for this request should require DNSSEC validation,
  /// No otherwise. Defaults to NO.
  set requiresDNSSECValidation(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setRequiresDNSSECValidation_, value);
  }

  /// HTTPMethod
  objc.NSString get HTTPMethod {
    final _ret = _objc_msgSend_74(this.pointer, _sel_HTTPMethod);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPMethod:
  set HTTPMethod(objc.NSString value) {
    return _objc_msgSend_75(this.pointer, _sel_setHTTPMethod_, value.pointer);
  }

  /// allHTTPHeaderFields
  objc.NSDictionary? get allHTTPHeaderFields {
    final _ret = _objc_msgSend_24(this.pointer, _sel_allHTTPHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAllHTTPHeaderFields:
  set allHTTPHeaderFields(objc.NSDictionary? value) {
    return _objc_msgSend_121(this.pointer, _sel_setAllHTTPHeaderFields_,
        value?.pointer ?? ffi.nullptr);
  }

  /// setValue:forHTTPHeaderField:
  void setValue_forHTTPHeaderField_(objc.NSString? value, objc.NSString field) {
    _objc_msgSend_122(this.pointer, _sel_setValue_forHTTPHeaderField_,
        value?.pointer ?? ffi.nullptr, field.pointer);
  }

  /// addValue:forHTTPHeaderField:
  void addValue_forHTTPHeaderField_(objc.NSString value, objc.NSString field) {
    _objc_msgSend_123(this.pointer, _sel_addValue_forHTTPHeaderField_,
        value.pointer, field.pointer);
  }

  /// HTTPBody
  objc.NSData? get HTTPBody {
    final _ret = _objc_msgSend_37(this.pointer, _sel_HTTPBody);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPBody:
  set HTTPBody(objc.NSData? value) {
    return _objc_msgSend_124(
        this.pointer, _sel_setHTTPBody_, value?.pointer ?? ffi.nullptr);
  }

  /// HTTPBodyStream
  NSInputStream? get HTTPBodyStream {
    final _ret = _objc_msgSend_57(this.pointer, _sel_HTTPBodyStream);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPBodyStream:
  set HTTPBodyStream(NSInputStream? value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setHTTPBodyStream_, value?.pointer ?? ffi.nullptr);
  }

  /// HTTPShouldHandleCookies
  bool get HTTPShouldHandleCookies {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldHandleCookies);
  }

  /// setHTTPShouldHandleCookies:
  set HTTPShouldHandleCookies(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setHTTPShouldHandleCookies_, value);
  }

  /// HTTPShouldUsePipelining
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  /// setHTTPShouldUsePipelining:
  set HTTPShouldUsePipelining(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setHTTPShouldUsePipelining_, value);
  }

  /// !
  /// @method requestWithURL:
  /// @abstract Allocates and initializes an NSURLRequest with the given
  /// URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSMutableURLRequest requestWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_30(
        _class_NSMutableURLRequest, _sel_requestWithURL_, URL.pointer);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// !
  /// @property supportsSecureCoding
  /// @abstract Indicates that NSURLRequest implements the NSSecureCoding protocol.
  /// @result A BOOL value set to YES.
  static bool getSupportsSecureCoding() {
    return _objc_msgSend_13(
        _class_NSMutableURLRequest, _sel_supportsSecureCoding);
  }

  /// !
  /// @method requestWithURL:cachePolicy:timeoutInterval:
  /// @abstract Allocates and initializes a NSURLRequest with the given
  /// URL and cache policy.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy,
      DartNSTimeInterval timeoutInterval) {
    final _ret = _objc_msgSend_31(
        _class_NSMutableURLRequest,
        _sel_requestWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// !
  /// @method initWithURL:
  /// @abstract Initializes an NSURLRequest with the given URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result An initialized NSURLRequest.
  NSMutableURLRequest initWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_30(this.pointer, _sel_initWithURL_, URL.pointer);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// !
  /// @method initWithURL:
  /// @abstract Initializes an NSURLRequest with the given URL and
  /// cache policy.
  /// @discussion This is the designated initializer for the
  /// NSURLRequest class.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result An initialized NSURLRequest.
  NSMutableURLRequest initWithURL_cachePolicy_timeoutInterval_(objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy, DartNSTimeInterval timeoutInterval) {
    final _ret = _objc_msgSend_31(
        this.pointer,
        _sel_initWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSMutableURLRequest init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSMutableURLRequest new1() {
    final _ret = _objc_msgSend_6(_class_NSMutableURLRequest, _sel_new);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSMutableURLRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSMutableURLRequest, _sel_allocWithZone_, zone);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSMutableURLRequest alloc() {
    final _ret = _objc_msgSend_6(_class_NSMutableURLRequest, _sel_alloc);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSMutableURLRequest = objc.getClass("NSMutableURLRequest");
late final _sel_setURL_ = objc.registerName("setURL:");
late final _sel_setCachePolicy_ = objc.registerName("setCachePolicy:");
final _objc_msgSend_118 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSUInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setTimeoutInterval_ = objc.registerName("setTimeoutInterval:");
late final _sel_setMainDocumentURL_ = objc.registerName("setMainDocumentURL:");
late final _sel_setNetworkServiceType_ =
    objc.registerName("setNetworkServiceType:");
final _objc_msgSend_119 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSUInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setAllowsCellularAccess_ =
    objc.registerName("setAllowsCellularAccess:");
late final _sel_setAllowsExpensiveNetworkAccess_ =
    objc.registerName("setAllowsExpensiveNetworkAccess:");
late final _sel_setAllowsConstrainedNetworkAccess_ =
    objc.registerName("setAllowsConstrainedNetworkAccess:");
late final _sel_setAssumesHTTP3Capable_ =
    objc.registerName("setAssumesHTTP3Capable:");
late final _sel_setAttribution_ = objc.registerName("setAttribution:");
final _objc_msgSend_120 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSUInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setRequiresDNSSECValidation_ =
    objc.registerName("setRequiresDNSSECValidation:");
late final _sel_setHTTPMethod_ = objc.registerName("setHTTPMethod:");
late final _sel_setAllHTTPHeaderFields_ =
    objc.registerName("setAllHTTPHeaderFields:");
final _objc_msgSend_121 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setValue_forHTTPHeaderField_ =
    objc.registerName("setValue:forHTTPHeaderField:");
final _objc_msgSend_122 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addValue_forHTTPHeaderField_ =
    objc.registerName("addValue:forHTTPHeaderField:");
final _objc_msgSend_123 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPBody_ = objc.registerName("setHTTPBody:");
final _objc_msgSend_124 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPBodyStream_ = objc.registerName("setHTTPBodyStream:");
final _objc_msgSend_125 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPShouldHandleCookies_ =
    objc.registerName("setHTTPShouldHandleCookies:");
late final _sel_setHTTPShouldUsePipelining_ =
    objc.registerName("setHTTPShouldUsePipelining:");

enum NSHTTPCookieAcceptPolicy {
  NSHTTPCookieAcceptPolicyAlways(0),
  NSHTTPCookieAcceptPolicyNever(1),
  NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain(2);

  final int value;
  const NSHTTPCookieAcceptPolicy(this.value);

  static NSHTTPCookieAcceptPolicy fromValue(int value) => switch (value) {
        0 => NSHTTPCookieAcceptPolicyAlways,
        1 => NSHTTPCookieAcceptPolicyNever,
        2 => NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain,
        _ => throw ArgumentError(
            "Unknown value for NSHTTPCookieAcceptPolicy: $value"),
      };
}

/// NSHTTPCookieStorage
class NSHTTPCookieStorage extends objc.NSObject {
  NSHTTPCookieStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPCookieStorage] that points to the same underlying object as [other].
  NSHTTPCookieStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPCookieStorage] that wraps the given raw object pointer.
  NSHTTPCookieStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPCookieStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPCookieStorage);
  }

  /// sharedHTTPCookieStorage
  static NSHTTPCookieStorage getSharedHTTPCookieStorage() {
    final _ret = _objc_msgSend_126(
        _class_NSHTTPCookieStorage, _sel_sharedHTTPCookieStorage);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// sharedCookieStorageForGroupContainerIdentifier:
  static NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_127(
        _class_NSHTTPCookieStorage,
        _sel_sharedCookieStorageForGroupContainerIdentifier_,
        identifier.pointer);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// cookies
  objc.NSArray? get cookies {
    final _ret = _objc_msgSend_128(this.pointer, _sel_cookies);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCookie:
  void setCookie_(NSHTTPCookie cookie) {
    _objc_msgSend_129(this.pointer, _sel_setCookie_, cookie.pointer);
  }

  /// deleteCookie:
  void deleteCookie_(NSHTTPCookie cookie) {
    _objc_msgSend_129(this.pointer, _sel_deleteCookie_, cookie.pointer);
  }

  /// removeCookiesSinceDate:
  void removeCookiesSinceDate_(objc.NSDate date) {
    _objc_msgSend_61(this.pointer, _sel_removeCookiesSinceDate_, date.pointer);
  }

  /// cookiesForURL:
  objc.NSArray? cookiesForURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_130(this.pointer, _sel_cookiesForURL_, URL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCookies:forURL:mainDocumentURL:
  void setCookies_forURL_mainDocumentURL_(
      objc.NSArray cookies, objc.NSURL? URL, objc.NSURL? mainDocumentURL) {
    _objc_msgSend_131(
        this.pointer,
        _sel_setCookies_forURL_mainDocumentURL_,
        cookies.pointer,
        URL?.pointer ?? ffi.nullptr,
        mainDocumentURL?.pointer ?? ffi.nullptr);
  }

  /// cookieAcceptPolicy
  NSHTTPCookieAcceptPolicy get cookieAcceptPolicy {
    final _ret = _objc_msgSend_132(this.pointer, _sel_cookieAcceptPolicy);
    return NSHTTPCookieAcceptPolicy.fromValue(_ret);
  }

  /// setCookieAcceptPolicy:
  set cookieAcceptPolicy(NSHTTPCookieAcceptPolicy value) {
    return _objc_msgSend_133(
        this.pointer, _sel_setCookieAcceptPolicy_, value.value);
  }

  /// sortedCookiesUsingDescriptors:
  objc.NSArray sortedCookiesUsingDescriptors_(objc.NSArray sortOrder) {
    final _ret = _objc_msgSend_134(
        this.pointer, _sel_sortedCookiesUsingDescriptors_, sortOrder.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// storeCookies:forTask:
  void storeCookies_forTask_(objc.NSArray cookies, NSURLSessionTask task) {
    _objc_msgSend_135(this.pointer, _sel_storeCookies_forTask_, cookies.pointer,
        task.pointer);
  }

  /// getCookiesForTask:completionHandler:
  void getCookiesForTask_completionHandler_(
      NSURLSessionTask task, ObjCBlock_ffiVoid_NSArray completionHandler) {
    _objc_msgSend_136(this.pointer, _sel_getCookiesForTask_completionHandler_,
        task.pointer, completionHandler.pointer);
  }

  /// init
  NSHTTPCookieStorage init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSHTTPCookieStorage new1() {
    final _ret = _objc_msgSend_6(_class_NSHTTPCookieStorage, _sel_new);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSHTTPCookieStorage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSHTTPCookieStorage, _sel_allocWithZone_, zone);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSHTTPCookieStorage alloc() {
    final _ret = _objc_msgSend_6(_class_NSHTTPCookieStorage, _sel_alloc);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSHTTPCookieStorage = objc.getClass("NSHTTPCookieStorage");
late final _sel_sharedHTTPCookieStorage =
    objc.registerName("sharedHTTPCookieStorage");
final _objc_msgSend_126 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sharedCookieStorageForGroupContainerIdentifier_ =
    objc.registerName("sharedCookieStorageForGroupContainerIdentifier:");
final _objc_msgSend_127 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookies = objc.registerName("cookies");
final _objc_msgSend_128 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSHTTPCookie
class NSHTTPCookie extends objc.ObjCObjectBase {
  NSHTTPCookie._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPCookie] that points to the same underlying object as [other].
  NSHTTPCookie.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPCookie] that wraps the given raw object pointer.
  NSHTTPCookie.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPCookie].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPCookie);
  }
}

late final _class_NSHTTPCookie = objc.getClass("NSHTTPCookie");
late final _sel_setCookie_ = objc.registerName("setCookie:");
final _objc_msgSend_129 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deleteCookie_ = objc.registerName("deleteCookie:");
late final _sel_removeCookiesSinceDate_ =
    objc.registerName("removeCookiesSinceDate:");
late final _sel_cookiesForURL_ = objc.registerName("cookiesForURL:");
final _objc_msgSend_130 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCookies_forURL_mainDocumentURL_ =
    objc.registerName("setCookies:forURL:mainDocumentURL:");
final _objc_msgSend_131 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookieAcceptPolicy = objc.registerName("cookieAcceptPolicy");
final _objc_msgSend_132 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCookieAcceptPolicy_ =
    objc.registerName("setCookieAcceptPolicy:");
final _objc_msgSend_133 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSUInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_sortedCookiesUsingDescriptors_ =
    objc.registerName("sortedCookiesUsingDescriptors:");
final _objc_msgSend_134 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_storeCookies_forTask_ =
    objc.registerName("storeCookies:forTask:");
final _objc_msgSend_135 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSArray extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSArray._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray.fromFunction(void Function(objc.NSArray?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : objc.NSArray.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray.listener(void Function(objc.NSArray?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSArray(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSArray_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : objc.NSArray.castFromPointer(arg0,
                    retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSArray? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCookiesForTask_completionHandler_ =
    objc.registerName("getCookiesForTask:completionHandler:");
final _objc_msgSend_136 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

/// NSProgressReporting
abstract final class NSProgressReporting {
  /// Builds an object that implements the NSProgressReporting protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required NSProgress Function() progress}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(NSProgressReporting.progress, progress);
    return builder.build();
  }

  /// Adds the implementation of the NSProgressReporting protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required NSProgress Function() progress}) {
    builder.implementMethod(NSProgressReporting.progress, progress);
  }

  /// progress
  static final progress = objc.ObjCProtocolMethod(
    _sel_progress,
    objc.getProtocolMethodSignature(
      _protocol_NSProgressReporting,
      _sel_progress,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is NSProgress Function(),
    (Function func) => ObjCBlock_NSProgress_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );
}

late final _protocol_NSProgressReporting =
    objc.getProtocol("NSProgressReporting");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSProgress_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSProgress_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_NSProgress_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSProgress_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSProgress_ffiVoid_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoid.fromFunction(
      NSProgress Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSProgress_ffiVoid_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress call(ffi.Pointer<ffi.Void> arg0) => NSProgress.castFromPointer(
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<ffi.Void>)>()(pointer, arg0),
      retain: false,
      release: true);
}

final class CFArrayCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFArrayRetainCallBack retain;

  external CFArrayReleaseCallBack release;

  external CFArrayCopyDescriptionCallBack copyDescription;

  external CFArrayEqualCallBack equal;
}

typedef CFArrayRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayRetainCallBackFunction>>;
typedef CFArrayRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFArrayReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayReleaseCallBackFunction>>;
typedef CFArrayReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFArrayReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFArrayCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayCopyDescriptionCallBackFunction>>;
typedef CFArrayCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFArrayEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayEqualCallBackFunction>>;
typedef CFArrayEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFArrayEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);

final class __CFArray extends ffi.Opaque {}

typedef CFArrayRef = ffi.Pointer<__CFArray>;
typedef CFMutableArrayRef = ffi.Pointer<__CFArray>;
typedef CFArrayApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFArrayApplierFunctionFunction>>;
typedef CFArrayApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFArrayApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef CFComparatorFunction
    = ffi.Pointer<ffi.NativeFunction<CFComparatorFunctionFunction>>;
typedef CFComparatorFunctionFunction = CFIndex Function(
    ffi.Pointer<ffi.Void> val1,
    ffi.Pointer<ffi.Void> val2,
    ffi.Pointer<ffi.Void> context);
typedef DartCFComparatorFunctionFunction = CFComparisonResult Function(
    ffi.Pointer<ffi.Void> val1,
    ffi.Pointer<ffi.Void> val2,
    ffi.Pointer<ffi.Void> context);

final class sec_object extends ffi.Opaque {}

final class __SecCertificate extends ffi.Opaque {}

final class __SecIdentity extends ffi.Opaque {}

final class __SecKey extends ffi.Opaque {}

final class __SecPolicy extends ffi.Opaque {}

final class __SecAccessControl extends ffi.Opaque {}

final class __SecKeychain extends ffi.Opaque {}

final class __SecKeychainItem extends ffi.Opaque {}

final class __SecKeychainSearch extends ffi.Opaque {}

final class SecKeychainAttribute extends ffi.Struct {
  @SecKeychainAttrType()
  external int tag;

  @UInt32()
  external int length;

  external ffi.Pointer<ffi.Void> data;
}

typedef SecKeychainAttrType = OSType;
typedef OSType = FourCharCode;
typedef FourCharCode = UInt32;

final class SecKeychainAttributeList extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<SecKeychainAttribute> attr;
}

final class __SecTrustedApplication extends ffi.Opaque {}

final class __SecAccess extends ffi.Opaque {}

final class __SecACL extends ffi.Opaque {}

final class __SecPassword extends ffi.Opaque {}

final class SecKeychainAttributeInfo extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<UInt32> tag;

  external ffi.Pointer<UInt32> format;
}

typedef OSStatus = SInt32;

final class _RuneEntry extends ffi.Struct {
  @__darwin_rune_t()
  external int __min;

  @__darwin_rune_t()
  external int __max;

  @__darwin_rune_t()
  external int __map;

  external ffi.Pointer<__uint32_t> __types;
}

typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;

final class _RuneRange extends ffi.Struct {
  @ffi.Int()
  external int __nranges;

  external ffi.Pointer<_RuneEntry> __ranges;
}

final class _RuneCharClass extends ffi.Struct {
  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> __name;

  @__uint32_t()
  external int __mask;
}

final class _RuneLocale extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __magic;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __encoding;

  external ffi.Pointer<
      ffi.NativeFunction<
          __darwin_rune_t Function(ffi.Pointer<ffi.Char>, __darwin_size_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sgetrune;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(__darwin_rune_t, ffi.Pointer<ffi.Char>,
              __darwin_size_t, ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sputrune;

  @__darwin_rune_t()
  external int __invalid_rune;

  @ffi.Array.multi([256])
  external ffi.Array<__uint32_t> __runetype;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __maplower;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __mapupper;

  external _RuneRange __runetype_ext;

  external _RuneRange __maplower_ext;

  external _RuneRange __mapupper_ext;

  external ffi.Pointer<ffi.Void> __variable;

  @ffi.Int()
  external int __variable_len;

  @ffi.Int()
  external int __ncharclasses;

  external ffi.Pointer<_RuneCharClass> __charclasses;
}

typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class lconv extends ffi.Struct {
  external ffi.Pointer<ffi.Char> decimal_point;

  external ffi.Pointer<ffi.Char> thousands_sep;

  external ffi.Pointer<ffi.Char> grouping;

  external ffi.Pointer<ffi.Char> int_curr_symbol;

  external ffi.Pointer<ffi.Char> currency_symbol;

  external ffi.Pointer<ffi.Char> mon_decimal_point;

  external ffi.Pointer<ffi.Char> mon_thousands_sep;

  external ffi.Pointer<ffi.Char> mon_grouping;

  external ffi.Pointer<ffi.Char> positive_sign;

  external ffi.Pointer<ffi.Char> negative_sign;

  @ffi.Char()
  external int int_frac_digits;

  @ffi.Char()
  external int frac_digits;

  @ffi.Char()
  external int p_cs_precedes;

  @ffi.Char()
  external int p_sep_by_space;

  @ffi.Char()
  external int n_cs_precedes;

  @ffi.Char()
  external int n_sep_by_space;

  @ffi.Char()
  external int p_sign_posn;

  @ffi.Char()
  external int n_sign_posn;

  @ffi.Char()
  external int int_p_cs_precedes;

  @ffi.Char()
  external int int_n_cs_precedes;

  @ffi.Char()
  external int int_p_sep_by_space;

  @ffi.Char()
  external int int_n_sep_by_space;

  @ffi.Char()
  external int int_p_sign_posn;

  @ffi.Char()
  external int int_n_sign_posn;
}

final class exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

typedef pthread_t = __darwin_pthread_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef stack_t = __darwin_sigaltstack;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef FILE = __sFILE;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef rsize_t = ffi.UnsignedLong;
typedef Dartrsize_t = int;

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef time_t = __darwin_time_t;

enum clockid_t {
  _CLOCK_REALTIME(0),
  _CLOCK_MONOTONIC(6),
  _CLOCK_MONOTONIC_RAW(4),
  _CLOCK_MONOTONIC_RAW_APPROX(5),
  _CLOCK_UPTIME_RAW(8),
  _CLOCK_UPTIME_RAW_APPROX(9),
  _CLOCK_PROCESS_CPUTIME_ID(12),
  _CLOCK_THREAD_CPUTIME_ID(16);

  final int value;
  const clockid_t(this.value);

  static clockid_t fromValue(int value) => switch (value) {
        0 => _CLOCK_REALTIME,
        6 => _CLOCK_MONOTONIC,
        4 => _CLOCK_MONOTONIC_RAW,
        5 => _CLOCK_MONOTONIC_RAW_APPROX,
        8 => _CLOCK_UPTIME_RAW,
        9 => _CLOCK_UPTIME_RAW_APPROX,
        12 => _CLOCK_PROCESS_CPUTIME_ID,
        16 => _CLOCK_THREAD_CPUTIME_ID,
        _ => throw ArgumentError("Unknown value for clockid_t: $value"),
      };
}

typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;

final class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

final class CFBagCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFBagRetainCallBack retain;

  external CFBagReleaseCallBack release;

  external CFBagCopyDescriptionCallBack copyDescription;

  external CFBagEqualCallBack equal;

  external CFBagHashCallBack hash;
}

typedef CFBagRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagRetainCallBackFunction>>;
typedef CFBagRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFBagReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagReleaseCallBackFunction>>;
typedef CFBagReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFBagReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFBagCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagCopyDescriptionCallBackFunction>>;
typedef CFBagCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFBagEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagEqualCallBackFunction>>;
typedef CFBagEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFBagEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFBagHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagHashCallBackFunction>>;
typedef CFBagHashCallBackFunction = CFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFBagHashCallBackFunction = DartCFHashCode Function(
    ffi.Pointer<ffi.Void> value);

final class __CFBag extends ffi.Opaque {}

typedef CFBagRef = ffi.Pointer<__CFBag>;
typedef CFMutableBagRef = ffi.Pointer<__CFBag>;
typedef CFBagApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFBagApplierFunctionFunction>>;
typedef CFBagApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFBagApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);

final class CFBinaryHeapCompareContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

final class CFBinaryHeapCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef allocator, ffi.Pointer<ffi.Void> ptr)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef allocator, ffi.Pointer<ffi.Void> ptr)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> ptr)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          CFIndex Function(
              ffi.Pointer<ffi.Void> ptr1,
              ffi.Pointer<ffi.Void> ptr2,
              ffi.Pointer<ffi.Void> context)>> compare;
}

final class __CFBinaryHeap extends ffi.Opaque {}

typedef CFBinaryHeapRef = ffi.Pointer<__CFBinaryHeap>;
typedef CFBinaryHeapApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFBinaryHeapApplierFunctionFunction>>;
typedef CFBinaryHeapApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> val, ffi.Pointer<ffi.Void> context);
typedef DartCFBinaryHeapApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> val, ffi.Pointer<ffi.Void> context);

final class __CFBitVector extends ffi.Opaque {}

typedef CFBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFMutableBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFBit = UInt32;

enum __CFByteOrder {
  CFByteOrderUnknown(0),
  CFByteOrderLittleEndian(1),
  CFByteOrderBigEndian(2);

  final int value;
  const __CFByteOrder(this.value);

  static __CFByteOrder fromValue(int value) => switch (value) {
        0 => CFByteOrderUnknown,
        1 => CFByteOrderLittleEndian,
        2 => CFByteOrderBigEndian,
        _ => throw ArgumentError("Unknown value for __CFByteOrder: $value"),
      };
}

final class CFSwappedFloat32 extends ffi.Struct {
  @ffi.Uint32()
  external int v;
}

final class CFSwappedFloat64 extends ffi.Struct {
  @ffi.Uint64()
  external int v;
}

final class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryRetainCallBackFunction>>;
typedef CFDictionaryRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFDictionaryReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryReleaseCallBackFunction>>;
typedef CFDictionaryReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFDictionaryReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFDictionaryCopyDescriptionCallBackFunction>>;
typedef CFDictionaryCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFDictionaryEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryEqualCallBackFunction>>;
typedef CFDictionaryEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFDictionaryEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFDictionaryHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryHashCallBackFunction>>;
typedef CFDictionaryHashCallBackFunction = CFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFDictionaryHashCallBackFunction = DartCFHashCode Function(
    ffi.Pointer<ffi.Void> value);

final class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

final class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFMutableDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFDictionaryApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryApplierFunctionFunction>>;
typedef CFDictionaryApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> context);
typedef DartCFDictionaryApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> context);

final class __CFNotificationCenter extends ffi.Opaque {}

enum CFNotificationSuspensionBehavior {
  CFNotificationSuspensionBehaviorDrop(1),
  CFNotificationSuspensionBehaviorCoalesce(2),
  CFNotificationSuspensionBehaviorHold(3),
  CFNotificationSuspensionBehaviorDeliverImmediately(4);

  final int value;
  const CFNotificationSuspensionBehavior(this.value);

  static CFNotificationSuspensionBehavior fromValue(int value) =>
      switch (value) {
        1 => CFNotificationSuspensionBehaviorDrop,
        2 => CFNotificationSuspensionBehaviorCoalesce,
        3 => CFNotificationSuspensionBehaviorHold,
        4 => CFNotificationSuspensionBehaviorDeliverImmediately,
        _ => throw ArgumentError(
            "Unknown value for CFNotificationSuspensionBehavior: $value"),
      };
}

typedef CFNotificationCenterRef = ffi.Pointer<__CFNotificationCenter>;
typedef CFNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<CFNotificationCallbackFunction>>;
typedef CFNotificationCallbackFunction = ffi.Void Function(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo);
typedef DartCFNotificationCallbackFunction = void Function(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo);
typedef CFNotificationName = CFStringRef;

final class __CFLocale extends ffi.Opaque {}

typedef CFLocaleRef = ffi.Pointer<__CFLocale>;
typedef CFLocaleIdentifier = CFStringRef;
typedef LangCode = SInt16;
typedef RegionCode = SInt16;

enum CFLocaleLanguageDirection {
  kCFLocaleLanguageDirectionUnknown(0),
  kCFLocaleLanguageDirectionLeftToRight(1),
  kCFLocaleLanguageDirectionRightToLeft(2),
  kCFLocaleLanguageDirectionTopToBottom(3),
  kCFLocaleLanguageDirectionBottomToTop(4);

  final int value;
  const CFLocaleLanguageDirection(this.value);

  static CFLocaleLanguageDirection fromValue(int value) => switch (value) {
        0 => kCFLocaleLanguageDirectionUnknown,
        1 => kCFLocaleLanguageDirectionLeftToRight,
        2 => kCFLocaleLanguageDirectionRightToLeft,
        3 => kCFLocaleLanguageDirectionTopToBottom,
        4 => kCFLocaleLanguageDirectionBottomToTop,
        _ => throw ArgumentError(
            "Unknown value for CFLocaleLanguageDirection: $value"),
      };
}

typedef CFLocaleKey = CFStringRef;
typedef CFCalendarIdentifier = CFStringRef;
typedef CFAbsoluteTime = CFTimeInterval;
typedef CFTimeInterval = ffi.Double;
typedef DartCFTimeInterval = double;

final class __CFDate extends ffi.Opaque {}

typedef CFDateRef = ffi.Pointer<__CFDate>;

final class __CFTimeZone extends ffi.Opaque {}

final class CFGregorianDate extends ffi.Struct {
  @SInt32()
  external int year;

  @SInt8()
  external int month;

  @SInt8()
  external int day;

  @SInt8()
  external int hour;

  @SInt8()
  external int minute;

  @ffi.Double()
  external double second;
}

typedef SInt8 = ffi.SignedChar;
typedef DartSInt8 = int;

final class CFGregorianUnits extends ffi.Struct {
  @SInt32()
  external int years;

  @SInt32()
  external int months;

  @SInt32()
  external int days;

  @SInt32()
  external int hours;

  @SInt32()
  external int minutes;

  @ffi.Double()
  external double seconds;
}

enum CFGregorianUnitFlags {
  kCFGregorianUnitsYears(1),
  kCFGregorianUnitsMonths(2),
  kCFGregorianUnitsDays(4),
  kCFGregorianUnitsHours(8),
  kCFGregorianUnitsMinutes(16),
  kCFGregorianUnitsSeconds(32),
  kCFGregorianAllUnits(16777215);

  final int value;
  const CFGregorianUnitFlags(this.value);

  static CFGregorianUnitFlags fromValue(int value) => switch (value) {
        1 => kCFGregorianUnitsYears,
        2 => kCFGregorianUnitsMonths,
        4 => kCFGregorianUnitsDays,
        8 => kCFGregorianUnitsHours,
        16 => kCFGregorianUnitsMinutes,
        32 => kCFGregorianUnitsSeconds,
        16777215 => kCFGregorianAllUnits,
        _ =>
          throw ArgumentError("Unknown value for CFGregorianUnitFlags: $value"),
      };
}

typedef CFTimeZoneRef = ffi.Pointer<__CFTimeZone>;

final class __CFData extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;
typedef CFMutableDataRef = ffi.Pointer<__CFData>;

enum CFDataSearchFlags {
  kCFDataSearchBackwards(1),
  kCFDataSearchAnchored(2);

  final int value;
  const CFDataSearchFlags(this.value);

  static CFDataSearchFlags fromValue(int value) => switch (value) {
        1 => kCFDataSearchBackwards,
        2 => kCFDataSearchAnchored,
        _ => throw ArgumentError("Unknown value for CFDataSearchFlags: $value"),
      };
}

final class __CFCharacterSet extends ffi.Opaque {}

enum CFCharacterSetPredefinedSet {
  kCFCharacterSetControl(1),
  kCFCharacterSetWhitespace(2),
  kCFCharacterSetWhitespaceAndNewline(3),
  kCFCharacterSetDecimalDigit(4),
  kCFCharacterSetLetter(5),
  kCFCharacterSetLowercaseLetter(6),
  kCFCharacterSetUppercaseLetter(7),
  kCFCharacterSetNonBase(8),
  kCFCharacterSetDecomposable(9),
  kCFCharacterSetAlphaNumeric(10),
  kCFCharacterSetPunctuation(11),
  kCFCharacterSetCapitalizedLetter(13),
  kCFCharacterSetSymbol(14),
  kCFCharacterSetNewline(15),
  kCFCharacterSetIllegal(12);

  final int value;
  const CFCharacterSetPredefinedSet(this.value);

  static CFCharacterSetPredefinedSet fromValue(int value) => switch (value) {
        1 => kCFCharacterSetControl,
        2 => kCFCharacterSetWhitespace,
        3 => kCFCharacterSetWhitespaceAndNewline,
        4 => kCFCharacterSetDecimalDigit,
        5 => kCFCharacterSetLetter,
        6 => kCFCharacterSetLowercaseLetter,
        7 => kCFCharacterSetUppercaseLetter,
        8 => kCFCharacterSetNonBase,
        9 => kCFCharacterSetDecomposable,
        10 => kCFCharacterSetAlphaNumeric,
        11 => kCFCharacterSetPunctuation,
        13 => kCFCharacterSetCapitalizedLetter,
        14 => kCFCharacterSetSymbol,
        15 => kCFCharacterSetNewline,
        12 => kCFCharacterSetIllegal,
        _ => throw ArgumentError(
            "Unknown value for CFCharacterSetPredefinedSet: $value"),
      };
}

typedef CFCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef CFMutableCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef UniChar = UInt16;
typedef UTF32Char = UInt32;

final class __CFError extends ffi.Opaque {}

typedef CFErrorDomain = CFStringRef;
typedef CFErrorRef = ffi.Pointer<__CFError>;

enum CFStringBuiltInEncodings {
  kCFStringEncodingMacRoman(0),
  kCFStringEncodingWindowsLatin1(1280),
  kCFStringEncodingISOLatin1(513),
  kCFStringEncodingNextStepLatin(2817),
  kCFStringEncodingASCII(1536),
  kCFStringEncodingUnicode(256),
  kCFStringEncodingUTF8(134217984),
  kCFStringEncodingNonLossyASCII(3071),
  kCFStringEncodingUTF16BE(268435712),
  kCFStringEncodingUTF16LE(335544576),
  kCFStringEncodingUTF32(201326848),
  kCFStringEncodingUTF32BE(402653440),
  kCFStringEncodingUTF32LE(469762304);

  static const kCFStringEncodingUTF16 = kCFStringEncodingUnicode;

  final int value;
  const CFStringBuiltInEncodings(this.value);

  static CFStringBuiltInEncodings fromValue(int value) => switch (value) {
        0 => kCFStringEncodingMacRoman,
        1280 => kCFStringEncodingWindowsLatin1,
        513 => kCFStringEncodingISOLatin1,
        2817 => kCFStringEncodingNextStepLatin,
        1536 => kCFStringEncodingASCII,
        256 => kCFStringEncodingUnicode,
        134217984 => kCFStringEncodingUTF8,
        3071 => kCFStringEncodingNonLossyASCII,
        268435712 => kCFStringEncodingUTF16BE,
        335544576 => kCFStringEncodingUTF16LE,
        201326848 => kCFStringEncodingUTF32,
        402653440 => kCFStringEncodingUTF32BE,
        469762304 => kCFStringEncodingUTF32LE,
        _ => throw ArgumentError(
            "Unknown value for CFStringBuiltInEncodings: $value"),
      };

  @override
  String toString() {
    if (this == kCFStringEncodingUnicode)
      return "CFStringBuiltInEncodings.kCFStringEncodingUnicode, CFStringBuiltInEncodings.kCFStringEncodingUTF16";
    return super.toString();
  }
}

typedef CFStringEncoding = UInt32;
typedef CFMutableStringRef = ffi.Pointer<__CFString>;
typedef StringPtr = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStringPtr = ffi.Pointer<ffi.UnsignedChar>;

enum CFStringCompareFlags {
  kCFCompareCaseInsensitive(1),
  kCFCompareBackwards(4),
  kCFCompareAnchored(8),
  kCFCompareNonliteral(16),
  kCFCompareLocalized(32),
  kCFCompareNumerically(64),
  kCFCompareDiacriticInsensitive(128),
  kCFCompareWidthInsensitive(256),
  kCFCompareForcedOrdering(512);

  final int value;
  const CFStringCompareFlags(this.value);

  static CFStringCompareFlags fromValue(int value) => switch (value) {
        1 => kCFCompareCaseInsensitive,
        4 => kCFCompareBackwards,
        8 => kCFCompareAnchored,
        16 => kCFCompareNonliteral,
        32 => kCFCompareLocalized,
        64 => kCFCompareNumerically,
        128 => kCFCompareDiacriticInsensitive,
        256 => kCFCompareWidthInsensitive,
        512 => kCFCompareForcedOrdering,
        _ =>
          throw ArgumentError("Unknown value for CFStringCompareFlags: $value"),
      };
}

enum CFStringNormalizationForm {
  kCFStringNormalizationFormD(0),
  kCFStringNormalizationFormKD(1),
  kCFStringNormalizationFormC(2),
  kCFStringNormalizationFormKC(3);

  final int value;
  const CFStringNormalizationForm(this.value);

  static CFStringNormalizationForm fromValue(int value) => switch (value) {
        0 => kCFStringNormalizationFormD,
        1 => kCFStringNormalizationFormKD,
        2 => kCFStringNormalizationFormC,
        3 => kCFStringNormalizationFormKC,
        _ => throw ArgumentError(
            "Unknown value for CFStringNormalizationForm: $value"),
      };
}

final class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UniChar> buffer;

  external CFStringRef theString;

  external ffi.Pointer<UniChar> directUniCharBuffer;

  external ffi.Pointer<ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @CFIndex()
  external int bufferedRangeStart;

  @CFIndex()
  external int bufferedRangeEnd;
}

enum CFTimeZoneNameStyle {
  kCFTimeZoneNameStyleStandard(0),
  kCFTimeZoneNameStyleShortStandard(1),
  kCFTimeZoneNameStyleDaylightSaving(2),
  kCFTimeZoneNameStyleShortDaylightSaving(3),
  kCFTimeZoneNameStyleGeneric(4),
  kCFTimeZoneNameStyleShortGeneric(5);

  final int value;
  const CFTimeZoneNameStyle(this.value);

  static CFTimeZoneNameStyle fromValue(int value) => switch (value) {
        0 => kCFTimeZoneNameStyleStandard,
        1 => kCFTimeZoneNameStyleShortStandard,
        2 => kCFTimeZoneNameStyleDaylightSaving,
        3 => kCFTimeZoneNameStyleShortDaylightSaving,
        4 => kCFTimeZoneNameStyleGeneric,
        5 => kCFTimeZoneNameStyleShortGeneric,
        _ =>
          throw ArgumentError("Unknown value for CFTimeZoneNameStyle: $value"),
      };
}

final class __CFCalendar extends ffi.Opaque {}

typedef CFCalendarRef = ffi.Pointer<__CFCalendar>;

enum CFCalendarUnit {
  kCFCalendarUnitEra(2),
  kCFCalendarUnitYear(4),
  kCFCalendarUnitMonth(8),
  kCFCalendarUnitDay(16),
  kCFCalendarUnitHour(32),
  kCFCalendarUnitMinute(64),
  kCFCalendarUnitSecond(128),
  kCFCalendarUnitWeek(256),
  kCFCalendarUnitWeekday(512),
  kCFCalendarUnitWeekdayOrdinal(1024),
  kCFCalendarUnitQuarter(2048),
  kCFCalendarUnitWeekOfMonth(4096),
  kCFCalendarUnitWeekOfYear(8192),
  kCFCalendarUnitYearForWeekOfYear(16384);

  final int value;
  const CFCalendarUnit(this.value);

  static CFCalendarUnit fromValue(int value) => switch (value) {
        2 => kCFCalendarUnitEra,
        4 => kCFCalendarUnitYear,
        8 => kCFCalendarUnitMonth,
        16 => kCFCalendarUnitDay,
        32 => kCFCalendarUnitHour,
        64 => kCFCalendarUnitMinute,
        128 => kCFCalendarUnitSecond,
        256 => kCFCalendarUnitWeek,
        512 => kCFCalendarUnitWeekday,
        1024 => kCFCalendarUnitWeekdayOrdinal,
        2048 => kCFCalendarUnitQuarter,
        4096 => kCFCalendarUnitWeekOfMonth,
        8192 => kCFCalendarUnitWeekOfYear,
        16384 => kCFCalendarUnitYearForWeekOfYear,
        _ => throw ArgumentError("Unknown value for CFCalendarUnit: $value"),
      };
}

final class CGPoint extends ffi.Struct {
  @CGFloat()
  external double x;

  @CGFloat()
  external double y;
}

typedef CGFloat = ffi.Double;
typedef DartCGFloat = double;

final class CGSize extends ffi.Struct {
  @CGFloat()
  external double width;

  @CGFloat()
  external double height;
}

final class CGVector extends ffi.Struct {
  @CGFloat()
  external double dx;

  @CGFloat()
  external double dy;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

enum CGRectEdge {
  CGRectMinXEdge(0),
  CGRectMinYEdge(1),
  CGRectMaxXEdge(2),
  CGRectMaxYEdge(3);

  final int value;
  const CGRectEdge(this.value);

  static CGRectEdge fromValue(int value) => switch (value) {
        0 => CGRectMinXEdge,
        1 => CGRectMinYEdge,
        2 => CGRectMaxXEdge,
        3 => CGRectMaxYEdge,
        _ => throw ArgumentError("Unknown value for CGRectEdge: $value"),
      };
}

final class CGAffineTransform extends ffi.Struct {
  @CGFloat()
  external double a;

  @CGFloat()
  external double b;

  @CGFloat()
  external double c;

  @CGFloat()
  external double d;

  @CGFloat()
  external double tx;

  @CGFloat()
  external double ty;
}

final class CGAffineTransformComponents extends ffi.Struct {
  external CGSize scale;

  @CGFloat()
  external double horizontalShear;

  @CGFloat()
  external double rotation;

  external CGVector translation;
}

final class __CFDateFormatter extends ffi.Opaque {}

enum CFDateFormatterStyle {
  kCFDateFormatterNoStyle(0),
  kCFDateFormatterShortStyle(1),
  kCFDateFormatterMediumStyle(2),
  kCFDateFormatterLongStyle(3),
  kCFDateFormatterFullStyle(4);

  final int value;
  const CFDateFormatterStyle(this.value);

  static CFDateFormatterStyle fromValue(int value) => switch (value) {
        0 => kCFDateFormatterNoStyle,
        1 => kCFDateFormatterShortStyle,
        2 => kCFDateFormatterMediumStyle,
        3 => kCFDateFormatterLongStyle,
        4 => kCFDateFormatterFullStyle,
        _ =>
          throw ArgumentError("Unknown value for CFDateFormatterStyle: $value"),
      };
}

enum CFISO8601DateFormatOptions {
  kCFISO8601DateFormatWithYear(1),
  kCFISO8601DateFormatWithMonth(2),
  kCFISO8601DateFormatWithWeekOfYear(4),
  kCFISO8601DateFormatWithDay(16),
  kCFISO8601DateFormatWithTime(32),
  kCFISO8601DateFormatWithTimeZone(64),
  kCFISO8601DateFormatWithSpaceBetweenDateAndTime(128),
  kCFISO8601DateFormatWithDashSeparatorInDate(256),
  kCFISO8601DateFormatWithColonSeparatorInTime(512),
  kCFISO8601DateFormatWithColonSeparatorInTimeZone(1024),
  kCFISO8601DateFormatWithFractionalSeconds(2048),
  kCFISO8601DateFormatWithFullDate(275),
  kCFISO8601DateFormatWithFullTime(1632),
  kCFISO8601DateFormatWithInternetDateTime(1907);

  final int value;
  const CFISO8601DateFormatOptions(this.value);

  static CFISO8601DateFormatOptions fromValue(int value) => switch (value) {
        1 => kCFISO8601DateFormatWithYear,
        2 => kCFISO8601DateFormatWithMonth,
        4 => kCFISO8601DateFormatWithWeekOfYear,
        16 => kCFISO8601DateFormatWithDay,
        32 => kCFISO8601DateFormatWithTime,
        64 => kCFISO8601DateFormatWithTimeZone,
        128 => kCFISO8601DateFormatWithSpaceBetweenDateAndTime,
        256 => kCFISO8601DateFormatWithDashSeparatorInDate,
        512 => kCFISO8601DateFormatWithColonSeparatorInTime,
        1024 => kCFISO8601DateFormatWithColonSeparatorInTimeZone,
        2048 => kCFISO8601DateFormatWithFractionalSeconds,
        275 => kCFISO8601DateFormatWithFullDate,
        1632 => kCFISO8601DateFormatWithFullTime,
        1907 => kCFISO8601DateFormatWithInternetDateTime,
        _ => throw ArgumentError(
            "Unknown value for CFISO8601DateFormatOptions: $value"),
      };
}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;
typedef CFDateFormatterKey = CFStringRef;

final class __CFBoolean extends ffi.Opaque {}

typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

enum CFNumberType {
  kCFNumberSInt8Type(1),
  kCFNumberSInt16Type(2),
  kCFNumberSInt32Type(3),
  kCFNumberSInt64Type(4),
  kCFNumberFloat32Type(5),
  kCFNumberFloat64Type(6),
  kCFNumberCharType(7),
  kCFNumberShortType(8),
  kCFNumberIntType(9),
  kCFNumberLongType(10),
  kCFNumberLongLongType(11),
  kCFNumberFloatType(12),
  kCFNumberDoubleType(13),
  kCFNumberCFIndexType(14),
  kCFNumberNSIntegerType(15),
  kCFNumberCGFloatType(16);

  static const kCFNumberMaxType = kCFNumberCGFloatType;

  final int value;
  const CFNumberType(this.value);

  static CFNumberType fromValue(int value) => switch (value) {
        1 => kCFNumberSInt8Type,
        2 => kCFNumberSInt16Type,
        3 => kCFNumberSInt32Type,
        4 => kCFNumberSInt64Type,
        5 => kCFNumberFloat32Type,
        6 => kCFNumberFloat64Type,
        7 => kCFNumberCharType,
        8 => kCFNumberShortType,
        9 => kCFNumberIntType,
        10 => kCFNumberLongType,
        11 => kCFNumberLongLongType,
        12 => kCFNumberFloatType,
        13 => kCFNumberDoubleType,
        14 => kCFNumberCFIndexType,
        15 => kCFNumberNSIntegerType,
        16 => kCFNumberCGFloatType,
        _ => throw ArgumentError("Unknown value for CFNumberType: $value"),
      };

  @override
  String toString() {
    if (this == kCFNumberCGFloatType)
      return "CFNumberType.kCFNumberCGFloatType, CFNumberType.kCFNumberMaxType";
    return super.toString();
  }
}

final class __CFNumber extends ffi.Opaque {}

typedef CFNumberRef = ffi.Pointer<__CFNumber>;

final class __CFNumberFormatter extends ffi.Opaque {}

enum CFNumberFormatterStyle {
  kCFNumberFormatterNoStyle(0),
  kCFNumberFormatterDecimalStyle(1),
  kCFNumberFormatterCurrencyStyle(2),
  kCFNumberFormatterPercentStyle(3),
  kCFNumberFormatterScientificStyle(4),
  kCFNumberFormatterSpellOutStyle(5),
  kCFNumberFormatterOrdinalStyle(6),
  kCFNumberFormatterCurrencyISOCodeStyle(8),
  kCFNumberFormatterCurrencyPluralStyle(9),
  kCFNumberFormatterCurrencyAccountingStyle(10);

  final int value;
  const CFNumberFormatterStyle(this.value);

  static CFNumberFormatterStyle fromValue(int value) => switch (value) {
        0 => kCFNumberFormatterNoStyle,
        1 => kCFNumberFormatterDecimalStyle,
        2 => kCFNumberFormatterCurrencyStyle,
        3 => kCFNumberFormatterPercentStyle,
        4 => kCFNumberFormatterScientificStyle,
        5 => kCFNumberFormatterSpellOutStyle,
        6 => kCFNumberFormatterOrdinalStyle,
        8 => kCFNumberFormatterCurrencyISOCodeStyle,
        9 => kCFNumberFormatterCurrencyPluralStyle,
        10 => kCFNumberFormatterCurrencyAccountingStyle,
        _ => throw ArgumentError(
            "Unknown value for CFNumberFormatterStyle: $value"),
      };
}

typedef CFNumberFormatterRef = ffi.Pointer<__CFNumberFormatter>;

enum CFNumberFormatterOptionFlags {
  kCFNumberFormatterParseIntegersOnly(1);

  final int value;
  const CFNumberFormatterOptionFlags(this.value);

  static CFNumberFormatterOptionFlags fromValue(int value) => switch (value) {
        1 => kCFNumberFormatterParseIntegersOnly,
        _ => throw ArgumentError(
            "Unknown value for CFNumberFormatterOptionFlags: $value"),
      };
}

typedef CFNumberFormatterKey = CFStringRef;

enum CFNumberFormatterRoundingMode {
  kCFNumberFormatterRoundCeiling(0),
  kCFNumberFormatterRoundFloor(1),
  kCFNumberFormatterRoundDown(2),
  kCFNumberFormatterRoundUp(3),
  kCFNumberFormatterRoundHalfEven(4),
  kCFNumberFormatterRoundHalfDown(5),
  kCFNumberFormatterRoundHalfUp(6);

  final int value;
  const CFNumberFormatterRoundingMode(this.value);

  static CFNumberFormatterRoundingMode fromValue(int value) => switch (value) {
        0 => kCFNumberFormatterRoundCeiling,
        1 => kCFNumberFormatterRoundFloor,
        2 => kCFNumberFormatterRoundDown,
        3 => kCFNumberFormatterRoundUp,
        4 => kCFNumberFormatterRoundHalfEven,
        5 => kCFNumberFormatterRoundHalfDown,
        6 => kCFNumberFormatterRoundHalfUp,
        _ => throw ArgumentError(
            "Unknown value for CFNumberFormatterRoundingMode: $value"),
      };
}

enum CFNumberFormatterPadPosition {
  kCFNumberFormatterPadBeforePrefix(0),
  kCFNumberFormatterPadAfterPrefix(1),
  kCFNumberFormatterPadBeforeSuffix(2),
  kCFNumberFormatterPadAfterSuffix(3);

  final int value;
  const CFNumberFormatterPadPosition(this.value);

  static CFNumberFormatterPadPosition fromValue(int value) => switch (value) {
        0 => kCFNumberFormatterPadBeforePrefix,
        1 => kCFNumberFormatterPadAfterPrefix,
        2 => kCFNumberFormatterPadBeforeSuffix,
        3 => kCFNumberFormatterPadAfterSuffix,
        _ => throw ArgumentError(
            "Unknown value for CFNumberFormatterPadPosition: $value"),
      };
}

typedef CFPropertyListRef = CFTypeRef;

enum CFURLPathStyle {
  kCFURLPOSIXPathStyle(0),
  kCFURLHFSPathStyle(1),
  kCFURLWindowsPathStyle(2);

  final int value;
  const CFURLPathStyle(this.value);

  static CFURLPathStyle fromValue(int value) => switch (value) {
        0 => kCFURLPOSIXPathStyle,
        1 => kCFURLHFSPathStyle,
        2 => kCFURLWindowsPathStyle,
        _ => throw ArgumentError("Unknown value for CFURLPathStyle: $value"),
      };
}

final class __CFURL extends ffi.Opaque {}

typedef CFURLRef = ffi.Pointer<__CFURL>;

enum CFURLComponentType {
  kCFURLComponentScheme(1),
  kCFURLComponentNetLocation(2),
  kCFURLComponentPath(3),
  kCFURLComponentResourceSpecifier(4),
  kCFURLComponentUser(5),
  kCFURLComponentPassword(6),
  kCFURLComponentUserInfo(7),
  kCFURLComponentHost(8),
  kCFURLComponentPort(9),
  kCFURLComponentParameterString(10),
  kCFURLComponentQuery(11),
  kCFURLComponentFragment(12);

  final int value;
  const CFURLComponentType(this.value);

  static CFURLComponentType fromValue(int value) => switch (value) {
        1 => kCFURLComponentScheme,
        2 => kCFURLComponentNetLocation,
        3 => kCFURLComponentPath,
        4 => kCFURLComponentResourceSpecifier,
        5 => kCFURLComponentUser,
        6 => kCFURLComponentPassword,
        7 => kCFURLComponentUserInfo,
        8 => kCFURLComponentHost,
        9 => kCFURLComponentPort,
        10 => kCFURLComponentParameterString,
        11 => kCFURLComponentQuery,
        12 => kCFURLComponentFragment,
        _ =>
          throw ArgumentError("Unknown value for CFURLComponentType: $value"),
      };
}

final class FSRef extends ffi.Opaque {}

enum CFURLBookmarkCreationOptions {
  kCFURLBookmarkCreationMinimalBookmarkMask(512),
  kCFURLBookmarkCreationSuitableForBookmarkFile(1024),
  kCFURLBookmarkCreationWithSecurityScope(2048),
  kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess(4096),
  kCFURLBookmarkCreationWithoutImplicitSecurityScope(536870912),
  kCFURLBookmarkCreationPreferFileIDResolutionMask(256);

  final int value;
  const CFURLBookmarkCreationOptions(this.value);

  static CFURLBookmarkCreationOptions fromValue(int value) => switch (value) {
        512 => kCFURLBookmarkCreationMinimalBookmarkMask,
        1024 => kCFURLBookmarkCreationSuitableForBookmarkFile,
        2048 => kCFURLBookmarkCreationWithSecurityScope,
        4096 => kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess,
        536870912 => kCFURLBookmarkCreationWithoutImplicitSecurityScope,
        256 => kCFURLBookmarkCreationPreferFileIDResolutionMask,
        _ => throw ArgumentError(
            "Unknown value for CFURLBookmarkCreationOptions: $value"),
      };
}

enum CFURLBookmarkResolutionOptions {
  kCFURLBookmarkResolutionWithoutUIMask(256),
  kCFURLBookmarkResolutionWithoutMountingMask(512),
  kCFURLBookmarkResolutionWithSecurityScope(1024),
  kCFURLBookmarkResolutionWithoutImplicitStartAccessing(32768);

  static const kCFBookmarkResolutionWithoutUIMask =
      kCFURLBookmarkResolutionWithoutUIMask;
  static const kCFBookmarkResolutionWithoutMountingMask =
      kCFURLBookmarkResolutionWithoutMountingMask;

  final int value;
  const CFURLBookmarkResolutionOptions(this.value);

  static CFURLBookmarkResolutionOptions fromValue(int value) => switch (value) {
        256 => kCFURLBookmarkResolutionWithoutUIMask,
        512 => kCFURLBookmarkResolutionWithoutMountingMask,
        1024 => kCFURLBookmarkResolutionWithSecurityScope,
        32768 => kCFURLBookmarkResolutionWithoutImplicitStartAccessing,
        _ => throw ArgumentError(
            "Unknown value for CFURLBookmarkResolutionOptions: $value"),
      };

  @override
  String toString() {
    if (this == kCFURLBookmarkResolutionWithoutUIMask)
      return "CFURLBookmarkResolutionOptions.kCFURLBookmarkResolutionWithoutUIMask, CFURLBookmarkResolutionOptions.kCFBookmarkResolutionWithoutUIMask";
    if (this == kCFURLBookmarkResolutionWithoutMountingMask)
      return "CFURLBookmarkResolutionOptions.kCFURLBookmarkResolutionWithoutMountingMask, CFURLBookmarkResolutionOptions.kCFBookmarkResolutionWithoutMountingMask";
    return super.toString();
  }
}

typedef CFURLBookmarkFileCreationOptions = CFOptionFlags;

final class mach_port_status extends ffi.Struct {
  @mach_port_rights_t()
  external int mps_pset;

  @mach_port_seqno_t()
  external int mps_seqno;

  @mach_port_mscount_t()
  external int mps_mscount;

  @mach_port_msgcount_t()
  external int mps_qlimit;

  @mach_port_msgcount_t()
  external int mps_msgcount;

  @mach_port_rights_t()
  external int mps_sorights;

  @boolean_t()
  external int mps_srights;

  @boolean_t()
  external int mps_pdrequest;

  @boolean_t()
  external int mps_nsrequest;

  @natural_t()
  external int mps_flags;
}

typedef mach_port_rights_t = natural_t;
typedef natural_t = __darwin_natural_t;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef mach_port_seqno_t = natural_t;
typedef mach_port_mscount_t = natural_t;
typedef mach_port_msgcount_t = natural_t;
typedef boolean_t = ffi.Int;
typedef Dartboolean_t = int;

final class mach_port_limits extends ffi.Struct {
  @mach_port_msgcount_t()
  external int mpl_qlimit;
}

final class mach_port_info_ext extends ffi.Struct {
  external mach_port_status_t mpie_status;

  @mach_port_msgcount_t()
  external int mpie_boost_cnt;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint32> reserved;
}

typedef mach_port_status_t = mach_port_status;

final class mach_port_guard_info extends ffi.Struct {
  @ffi.Uint64()
  external int mpgi_guard;
}

final class mach_port_qos extends ffi.Opaque {}

final class mach_service_port_info extends ffi.Struct {
  @ffi.Array.multi([255])
  external ffi.Array<ffi.Char> mspi_string_name;

  @ffi.Uint8()
  external int mspi_domain_type;
}

final class mach_port_options extends ffi.Struct {
  @ffi.Uint32()
  external int flags;

  external mach_port_limits_t mpl;

  external UnnamedUnion1 unnamed;
}

typedef mach_port_limits_t = mach_port_limits;

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> reserved;

  @mach_port_name_t()
  external int work_interval_port;

  external mach_service_port_info_t service_port_info;

  @mach_port_name_t()
  external int service_port_name;
}

typedef mach_port_name_t = natural_t;
typedef mach_service_port_info_t = ffi.Pointer<mach_service_port_info>;

enum mach_port_guard_exception_codes {
  kGUARD_EXC_DESTROY(1),
  kGUARD_EXC_MOD_REFS(2),
  kGUARD_EXC_INVALID_OPTIONS(3),
  kGUARD_EXC_SET_CONTEXT(4),
  kGUARD_EXC_THREAD_SET_STATE(5),
  kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE(6),
  kGUARD_EXC_UNGUARDED(8),
  kGUARD_EXC_INCORRECT_GUARD(16),
  kGUARD_EXC_IMMOVABLE(32),
  kGUARD_EXC_STRICT_REPLY(64),
  kGUARD_EXC_MSG_FILTERED(128),
  kGUARD_EXC_INVALID_RIGHT(256),
  kGUARD_EXC_INVALID_NAME(512),
  kGUARD_EXC_INVALID_VALUE(1024),
  kGUARD_EXC_INVALID_ARGUMENT(2048),
  kGUARD_EXC_RIGHT_EXISTS(4096),
  kGUARD_EXC_KERN_NO_SPACE(8192),
  kGUARD_EXC_KERN_FAILURE(16384),
  kGUARD_EXC_KERN_RESOURCE(32768),
  kGUARD_EXC_SEND_INVALID_REPLY(65536),
  kGUARD_EXC_SEND_INVALID_VOUCHER(131072),
  kGUARD_EXC_SEND_INVALID_RIGHT(262144),
  kGUARD_EXC_RCV_INVALID_NAME(524288),
  kGUARD_EXC_RCV_GUARDED_DESC(1048576),
  kGUARD_EXC_MOD_REFS_NON_FATAL(2097152),
  kGUARD_EXC_IMMOVABLE_NON_FATAL(4194304),
  kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS(8388608);

  final int value;
  const mach_port_guard_exception_codes(this.value);

  static mach_port_guard_exception_codes fromValue(int value) =>
      switch (value) {
        1 => kGUARD_EXC_DESTROY,
        2 => kGUARD_EXC_MOD_REFS,
        3 => kGUARD_EXC_INVALID_OPTIONS,
        4 => kGUARD_EXC_SET_CONTEXT,
        5 => kGUARD_EXC_THREAD_SET_STATE,
        6 => kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE,
        8 => kGUARD_EXC_UNGUARDED,
        16 => kGUARD_EXC_INCORRECT_GUARD,
        32 => kGUARD_EXC_IMMOVABLE,
        64 => kGUARD_EXC_STRICT_REPLY,
        128 => kGUARD_EXC_MSG_FILTERED,
        256 => kGUARD_EXC_INVALID_RIGHT,
        512 => kGUARD_EXC_INVALID_NAME,
        1024 => kGUARD_EXC_INVALID_VALUE,
        2048 => kGUARD_EXC_INVALID_ARGUMENT,
        4096 => kGUARD_EXC_RIGHT_EXISTS,
        8192 => kGUARD_EXC_KERN_NO_SPACE,
        16384 => kGUARD_EXC_KERN_FAILURE,
        32768 => kGUARD_EXC_KERN_RESOURCE,
        65536 => kGUARD_EXC_SEND_INVALID_REPLY,
        131072 => kGUARD_EXC_SEND_INVALID_VOUCHER,
        262144 => kGUARD_EXC_SEND_INVALID_RIGHT,
        524288 => kGUARD_EXC_RCV_INVALID_NAME,
        1048576 => kGUARD_EXC_RCV_GUARDED_DESC,
        2097152 => kGUARD_EXC_MOD_REFS_NON_FATAL,
        4194304 => kGUARD_EXC_IMMOVABLE_NON_FATAL,
        8388608 => kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS,
        _ => throw ArgumentError(
            "Unknown value for mach_port_guard_exception_codes: $value"),
      };
}

final class __CFRunLoop extends ffi.Opaque {}

final class __CFRunLoopSource extends ffi.Opaque {}

final class __CFRunLoopObserver extends ffi.Opaque {}

final class __CFRunLoopTimer extends ffi.Opaque {}

enum CFRunLoopRunResult {
  kCFRunLoopRunFinished(1),
  kCFRunLoopRunStopped(2),
  kCFRunLoopRunTimedOut(3),
  kCFRunLoopRunHandledSource(4);

  final int value;
  const CFRunLoopRunResult(this.value);

  static CFRunLoopRunResult fromValue(int value) => switch (value) {
        1 => kCFRunLoopRunFinished,
        2 => kCFRunLoopRunStopped,
        3 => kCFRunLoopRunTimedOut,
        4 => kCFRunLoopRunHandledSource,
        _ =>
          throw ArgumentError("Unknown value for CFRunLoopRunResult: $value"),
      };
}

enum CFRunLoopActivity {
  kCFRunLoopEntry(1),
  kCFRunLoopBeforeTimers(2),
  kCFRunLoopBeforeSources(4),
  kCFRunLoopBeforeWaiting(32),
  kCFRunLoopAfterWaiting(64),
  kCFRunLoopExit(128),
  kCFRunLoopAllActivities(268435455);

  final int value;
  const CFRunLoopActivity(this.value);

  static CFRunLoopActivity fromValue(int value) => switch (value) {
        1 => kCFRunLoopEntry,
        2 => kCFRunLoopBeforeTimers,
        4 => kCFRunLoopBeforeSources,
        32 => kCFRunLoopBeforeWaiting,
        64 => kCFRunLoopAfterWaiting,
        128 => kCFRunLoopExit,
        268435455 => kCFRunLoopAllActivities,
        _ => throw ArgumentError("Unknown value for CFRunLoopActivity: $value"),
      };
}

typedef CFRunLoopMode = CFStringRef;
typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;
typedef CFRunLoopObserverRef = ffi.Pointer<__CFRunLoopObserver>;
typedef CFRunLoopTimerRef = ffi.Pointer<__CFRunLoopTimer>;

final class CFRunLoopSourceContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          Boolean Function(
              ffi.Pointer<ffi.Void> info1, ffi.Pointer<ffi.Void> info2)>> equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void> info)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> info, CFRunLoopRef rl,
              CFRunLoopMode mode)>> schedule;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> info, CFRunLoopRef rl,
              CFRunLoopMode mode)>> cancel;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      perform;
}

final class CFRunLoopSourceContext1 extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          Boolean Function(
              ffi.Pointer<ffi.Void> info1, ffi.Pointer<ffi.Void> info2)>> equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void> info)>> hash;

  external ffi.Pointer<
          ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void> info)>>
      getPort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void> msg,
              CFIndex size,
              CFAllocatorRef allocator,
              ffi.Pointer<ffi.Void> info)>> perform;
}

typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;

final class CFRunLoopObserverContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFRunLoopObserverCallBack
    = ffi.Pointer<ffi.NativeFunction<CFRunLoopObserverCallBackFunction>>;
typedef CFRunLoopObserverCallBackFunction = ffi.Void Function(
    CFRunLoopObserverRef observer,
    CFOptionFlags activity,
    ffi.Pointer<ffi.Void> info);
typedef DartCFRunLoopObserverCallBackFunction = void Function(
    CFRunLoopObserverRef observer,
    CFRunLoopActivity activity,
    ffi.Pointer<ffi.Void> info);
void _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        CFRunLoopObserverRef arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    CFRunLoopObserverRef arg0, CFOptionFlags arg1)>>()
        .asFunction<void Function(CFRunLoopObserverRef, int)>()(arg0, arg1);
void
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            CFRunLoopObserverRef arg0,
            int arg1) =>
        (objc.getBlockClosure(block) as void Function(
            CFRunLoopObserverRef, int))(arg0, arg1);

class ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CFRunLoopObserverRef arg0, CFOptionFlags arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            CFRunLoopObserverRef, CFOptionFlags)>(
                    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity.fromFunction(
      void Function(CFRunLoopObserverRef, CFRunLoopActivity) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            CFRunLoopObserverRef, CFOptionFlags)>(
                    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureTrampoline)
                .cast(),
            (CFRunLoopObserverRef arg0, int arg1) =>
                fn(arg0, CFRunLoopActivity.fromValue(arg1))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity.listener(
      void Function(CFRunLoopObserverRef, CFRunLoopActivity) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            CFRunLoopObserverRef, CFOptionFlags)>.listener(
                    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (CFRunLoopObserverRef arg0, int arg1) =>
                fn(arg0, CFRunLoopActivity.fromValue(arg1)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, CFRunLoopObserverRef,
          CFOptionFlags)>? _dartFuncListenerTrampoline;

  void call(CFRunLoopObserverRef arg0, CFRunLoopActivity arg1) => pointer
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  CFRunLoopObserverRef arg0, CFOptionFlags arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, CFRunLoopObserverRef,
              int)>()(pointer, arg0, arg1.value);
}

final class CFRunLoopTimerContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFRunLoopTimerCallBack
    = ffi.Pointer<ffi.NativeFunction<CFRunLoopTimerCallBackFunction>>;
typedef CFRunLoopTimerCallBackFunction = ffi.Void Function(
    CFRunLoopTimerRef timer, ffi.Pointer<ffi.Void> info);
typedef DartCFRunLoopTimerCallBackFunction = void Function(
    CFRunLoopTimerRef timer, ffi.Pointer<ffi.Void> info);
void _ObjCBlock_ffiVoid_CFRunLoopTimerRef_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, CFRunLoopTimerRef arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef arg0)>>()
        .asFunction<void Function(CFRunLoopTimerRef)>()(arg0);
void _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, CFRunLoopTimerRef arg0) =>
    (objc.getBlockClosure(block) as void Function(CFRunLoopTimerRef))(arg0);

class ObjCBlock_ffiVoid_CFRunLoopTimerRef extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_CFRunLoopTimerRef._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_CFRunLoopTimerRef castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_CFRunLoopTimerRef._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_CFRunLoopTimerRef.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, CFRunLoopTimerRef)>(
                    _ObjCBlock_ffiVoid_CFRunLoopTimerRef_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_CFRunLoopTimerRef.fromFunction(
      void Function(CFRunLoopTimerRef) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, CFRunLoopTimerRef)>(
                    _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureTrampoline)
                .cast(),
            (CFRunLoopTimerRef arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_CFRunLoopTimerRef.listener(
      void Function(CFRunLoopTimerRef) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            CFRunLoopTimerRef)>.listener(
                    _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (CFRunLoopTimerRef arg0) => fn(arg0))));
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, CFRunLoopTimerRef)>?
      _dartFuncListenerTrampoline;

  void call(CFRunLoopTimerRef arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block, CFRunLoopTimerRef arg0)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlock>, CFRunLoopTimerRef)>()(pointer, arg0);
}

final class __CFSocket extends ffi.Opaque {}

enum CFSocketError {
  kCFSocketSuccess(0),
  kCFSocketError(-1),
  kCFSocketTimeout(-2);

  final int value;
  const CFSocketError(this.value);

  static CFSocketError fromValue(int value) => switch (value) {
        0 => kCFSocketSuccess,
        -1 => kCFSocketError,
        -2 => kCFSocketTimeout,
        _ => throw ArgumentError("Unknown value for CFSocketError: $value"),
      };
}

final class CFSocketSignature extends ffi.Struct {
  @SInt32()
  external int protocolFamily;

  @SInt32()
  external int socketType;

  @SInt32()
  external int protocol;

  external CFDataRef address;
}

enum CFSocketCallBackType {
  kCFSocketNoCallBack(0),
  kCFSocketReadCallBack(1),
  kCFSocketAcceptCallBack(2),
  kCFSocketDataCallBack(3),
  kCFSocketConnectCallBack(4),
  kCFSocketWriteCallBack(8);

  final int value;
  const CFSocketCallBackType(this.value);

  static CFSocketCallBackType fromValue(int value) => switch (value) {
        0 => kCFSocketNoCallBack,
        1 => kCFSocketReadCallBack,
        2 => kCFSocketAcceptCallBack,
        3 => kCFSocketDataCallBack,
        4 => kCFSocketConnectCallBack,
        8 => kCFSocketWriteCallBack,
        _ =>
          throw ArgumentError("Unknown value for CFSocketCallBackType: $value"),
      };
}

final class CFSocketContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFSocketRef = ffi.Pointer<__CFSocket>;
typedef CFSocketCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSocketCallBackFunction>>;
typedef CFSocketCallBackFunction = ffi.Void Function(
    CFSocketRef s,
    CFOptionFlags type,
    CFDataRef address,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> info);
typedef DartCFSocketCallBackFunction = void Function(
    CFSocketRef s,
    CFSocketCallBackType type,
    CFDataRef address,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> info);
typedef CFSocketNativeHandle = ffi.Int;
typedef DartCFSocketNativeHandle = int;

final class accessx_descriptor extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ad_name_offset;

  @ffi.Int()
  external int ad_flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> ad_pad;
}

typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef useconds_t = __darwin_useconds_t;
typedef __darwin_useconds_t = __uint32_t;

final class fssearchblock extends ffi.Opaque {}

final class searchstate extends ffi.Opaque {}

final class flock extends ffi.Struct {
  @off_t()
  external int l_start;

  @off_t()
  external int l_len;

  @pid_t()
  external int l_pid;

  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;
}

final class flocktimeout extends ffi.Struct {
  external flock fl;

  external timespec timeout;
}

final class radvisory extends ffi.Struct {
  @off_t()
  external int ra_offset;

  @ffi.Int()
  external int ra_count;
}

final class fsignatures extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  external ffi.Pointer<ffi.Void> fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Size()
  external int fs_fsignatures_size;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> fs_cdhash;

  @ffi.Int()
  external int fs_hash_type;
}

final class fsupplement extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  @off_t()
  external int fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Int()
  external int fs_orig_fd;
}

final class fchecklv extends ffi.Struct {
  @off_t()
  external int lv_file_start;

  @ffi.Size()
  external int lv_error_message_size;

  external ffi.Pointer<ffi.Void> lv_error_message;
}

final class fgetsigsinfo extends ffi.Struct {
  @off_t()
  external int fg_file_start;

  @ffi.Int()
  external int fg_info_request;

  @ffi.Int()
  external int fg_sig_is_platform;
}

final class fstore extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fst_flags;

  @ffi.Int()
  external int fst_posmode;

  @off_t()
  external int fst_offset;

  @off_t()
  external int fst_length;

  @off_t()
  external int fst_bytesalloc;
}

final class fpunchhole extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fp_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fp_offset;

  @off_t()
  external int fp_length;
}

final class ftrimactivefile extends ffi.Struct {
  @off_t()
  external int fta_offset;

  @off_t()
  external int fta_length;
}

final class fspecread extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fsr_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fsr_offset;

  @off_t()
  external int fsr_length;
}

final class fattributiontag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ft_flags;

  @ffi.UnsignedLongLong()
  external int ft_hash;

  @ffi.Array.multi([255])
  external ffi.Array<ffi.Char> ft_attribution_name;
}

@ffi.Packed(4)
final class log2phys extends ffi.Struct {
  @ffi.UnsignedInt()
  external int l2p_flags;

  @off_t()
  external int l2p_contigbytes;

  @off_t()
  external int l2p_devoffset;
}

final class _filesec extends ffi.Opaque {}

enum filesec_property_t {
  FILESEC_OWNER(1),
  FILESEC_GROUP(2),
  FILESEC_UUID(3),
  FILESEC_MODE(4),
  FILESEC_ACL(5),
  FILESEC_GRPUUID(6),
  FILESEC_ACL_RAW(100),
  FILESEC_ACL_ALLOCSIZE(101);

  final int value;
  const filesec_property_t(this.value);

  static filesec_property_t fromValue(int value) => switch (value) {
        1 => FILESEC_OWNER,
        2 => FILESEC_GROUP,
        3 => FILESEC_UUID,
        4 => FILESEC_MODE,
        5 => FILESEC_ACL,
        6 => FILESEC_GRPUUID,
        100 => FILESEC_ACL_RAW,
        101 => FILESEC_ACL_ALLOCSIZE,
        _ =>
          throw ArgumentError("Unknown value for filesec_property_t: $value"),
      };
}

typedef filesec_t = ffi.Pointer<_filesec>;

enum os_clockid_t {
  OS_CLOCK_MACH_ABSOLUTE_TIME(32);

  final int value;
  const os_clockid_t(this.value);

  static os_clockid_t fromValue(int value) => switch (value) {
        32 => OS_CLOCK_MACH_ABSOLUTE_TIME,
        _ => throw ArgumentError("Unknown value for os_clockid_t: $value"),
      };
}

final class os_workgroup_attr_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Char> opaque;
}

final class os_workgroup_interval_data_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> opaque;
}

final class os_workgroup_join_token_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([36])
  external ffi.Array<ffi.Char> opaque;
}

final class os_workgroup_s extends ffi.Opaque {}

typedef os_workgroup_t = ffi.Pointer<os_workgroup_s>;
typedef os_workgroup_join_token_t
    = ffi.Pointer<os_workgroup_join_token_opaque_s>;
typedef os_workgroup_working_arena_destructor_t = ffi.Pointer<
    ffi.NativeFunction<os_workgroup_working_arena_destructor_tFunction>>;
typedef os_workgroup_working_arena_destructor_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void>);
typedef Dartos_workgroup_working_arena_destructor_tFunction = void Function(
    ffi.Pointer<ffi.Void>);
typedef os_workgroup_index = ffi.Uint32;
typedef Dartos_workgroup_index = int;

final class os_workgroup_max_parallel_threads_attr_s extends ffi.Opaque {}

typedef os_workgroup_mpt_attr_t
    = ffi.Pointer<os_workgroup_max_parallel_threads_attr_s>;
typedef os_workgroup_interval_t = os_workgroup_t;
typedef os_workgroup_interval_data_t
    = ffi.Pointer<os_workgroup_interval_data_opaque_s>;
typedef os_workgroup_parallel_t = os_workgroup_t;
typedef os_workgroup_attr_t = ffi.Pointer<os_workgroup_attr_opaque_s>;

final class time_value extends ffi.Struct {
  @integer_t()
  external int seconds;

  @integer_t()
  external int microseconds;
}

typedef integer_t = ffi.Int;
typedef Dartinteger_t = int;

final class mach_timespec extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tv_sec;

  @clock_res_t()
  external int tv_nsec;
}

typedef clock_res_t = ffi.Int;
typedef Dartclock_res_t = int;
typedef dispatch_time_t = ffi.Uint64;
typedef Dartdispatch_time_t = int;

enum qos_class_t {
  QOS_CLASS_USER_INTERACTIVE(33),
  QOS_CLASS_USER_INITIATED(25),
  QOS_CLASS_DEFAULT(21),
  QOS_CLASS_UTILITY(17),
  QOS_CLASS_BACKGROUND(9),
  QOS_CLASS_UNSPECIFIED(0);

  final int value;
  const qos_class_t(this.value);

  static qos_class_t fromValue(int value) => switch (value) {
        33 => QOS_CLASS_USER_INTERACTIVE,
        25 => QOS_CLASS_USER_INITIATED,
        21 => QOS_CLASS_DEFAULT,
        17 => QOS_CLASS_UTILITY,
        9 => QOS_CLASS_BACKGROUND,
        0 => QOS_CLASS_UNSPECIFIED,
        _ => throw ArgumentError("Unknown value for qos_class_t: $value"),
      };
}

final class dispatch_object_t extends ffi.Union {
  external ffi.Pointer<_os_object_s> _os_obj;

  external ffi.Pointer<dispatch_object_s> _do;

  external ffi.Pointer<dispatch_queue_s> _dq;

  external ffi.Pointer<dispatch_queue_attr_s> _dqa;

  external ffi.Pointer<dispatch_group_s> _dg;

  external ffi.Pointer<dispatch_source_s> _ds;

  external ffi.Pointer<dispatch_channel_s> _dch;

  external ffi.Pointer<dispatch_mach_s> _dm;

  external ffi.Pointer<dispatch_mach_msg_s> _dmsg;

  external ffi.Pointer<dispatch_semaphore_s> _dsema;

  external ffi.Pointer<dispatch_data_s> _ddata;

  external ffi.Pointer<dispatch_io_s> _dchannel;
}

final class _os_object_s extends ffi.Opaque {}

final class dispatch_object_s extends ffi.Opaque {}

final class dispatch_queue_attr_s extends ffi.Opaque {}

final class dispatch_group_s extends ffi.Opaque {}

final class dispatch_source_s extends ffi.Opaque {}

final class dispatch_channel_s extends ffi.Opaque {}

final class dispatch_mach_s extends ffi.Opaque {}

final class dispatch_mach_msg_s extends ffi.Opaque {}

final class dispatch_semaphore_s extends ffi.Opaque {}

final class dispatch_data_s extends ffi.Opaque {}

final class dispatch_io_s extends ffi.Opaque {}

typedef dispatch_function_t
    = ffi.Pointer<ffi.NativeFunction<dispatch_function_tFunction>>;
typedef dispatch_function_tFunction = ffi.Void Function(ffi.Pointer<ffi.Void>);
typedef Dartdispatch_function_tFunction = void Function(ffi.Pointer<ffi.Void>);
typedef dispatch_block_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartdispatch_block_t = ObjCBlock_ffiVoid;
void _ObjCBlock_ffiVoid_ffiSize_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Size arg0)>>()
        .asFunction<void Function(int)>()(arg0);
void _ObjCBlock_ffiVoid_ffiSize_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    (objc.getBlockClosure(block) as void Function(int))(arg0);

class ObjCBlock_ffiVoid_ffiSize extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiSize._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiSize castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiSize._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiSize.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Size arg0)>> ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Size)>(_ObjCBlock_ffiVoid_ffiSize_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiSize.fromFunction(void Function(int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Size)>(_ObjCBlock_ffiVoid_ffiSize_closureTrampoline)
                .cast(),
            (int arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiSize.listener(void Function(int) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Size)>.listener(
                    _ObjCBlock_ffiVoid_ffiSize_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (int arg0) => fn(arg0))));
  static ffi
      .NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Size)>?
      _dartFuncListenerTrampoline;

  void call(int arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block, ffi.Size arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, int)>()(
      pointer, arg0);
}

typedef dispatch_queue_global_t = dispatch_queue_t;
typedef dispatch_queue_attr_t = ffi.Pointer<dispatch_queue_attr_s>;

enum dispatch_autorelease_frequency_t {
  DISPATCH_AUTORELEASE_FREQUENCY_INHERIT(0),
  DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM(1),
  DISPATCH_AUTORELEASE_FREQUENCY_NEVER(2);

  final int value;
  const dispatch_autorelease_frequency_t(this.value);

  static dispatch_autorelease_frequency_t fromValue(int value) =>
      switch (value) {
        0 => DISPATCH_AUTORELEASE_FREQUENCY_INHERIT,
        1 => DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM,
        2 => DISPATCH_AUTORELEASE_FREQUENCY_NEVER,
        _ => throw ArgumentError(
            "Unknown value for dispatch_autorelease_frequency_t: $value"),
      };
}

enum dispatch_block_flags_t {
  DISPATCH_BLOCK_BARRIER(1),
  DISPATCH_BLOCK_DETACHED(2),
  DISPATCH_BLOCK_ASSIGN_CURRENT(4),
  DISPATCH_BLOCK_NO_QOS_CLASS(8),
  DISPATCH_BLOCK_INHERIT_QOS_CLASS(16),
  DISPATCH_BLOCK_ENFORCE_QOS_CLASS(32);

  final int value;
  const dispatch_block_flags_t(this.value);

  static dispatch_block_flags_t fromValue(int value) => switch (value) {
        1 => DISPATCH_BLOCK_BARRIER,
        2 => DISPATCH_BLOCK_DETACHED,
        4 => DISPATCH_BLOCK_ASSIGN_CURRENT,
        8 => DISPATCH_BLOCK_NO_QOS_CLASS,
        16 => DISPATCH_BLOCK_INHERIT_QOS_CLASS,
        32 => DISPATCH_BLOCK_ENFORCE_QOS_CLASS,
        _ => throw ArgumentError(
            "Unknown value for dispatch_block_flags_t: $value"),
      };
}

final class mach_msg_type_descriptor_t extends ffi.Opaque {}

final class mach_msg_port_descriptor_t extends ffi.Opaque {}

final class mach_msg_ool_descriptor32_t extends ffi.Opaque {}

final class mach_msg_ool_descriptor64_t extends ffi.Opaque {}

final class mach_msg_ool_descriptor_t extends ffi.Opaque {}

final class mach_msg_ool_ports_descriptor32_t extends ffi.Opaque {}

final class mach_msg_ool_ports_descriptor64_t extends ffi.Opaque {}

final class mach_msg_ool_ports_descriptor_t extends ffi.Opaque {}

final class mach_msg_guarded_port_descriptor32_t extends ffi.Opaque {}

final class mach_msg_guarded_port_descriptor64_t extends ffi.Opaque {}

final class mach_msg_guarded_port_descriptor_t extends ffi.Opaque {}

final class mach_msg_descriptor_t extends ffi.Opaque {}

final class mach_msg_body_t extends ffi.Struct {
  @mach_msg_size_t()
  external int msgh_descriptor_count;
}

typedef mach_msg_size_t = natural_t;

final class mach_msg_header_t extends ffi.Struct {
  @mach_msg_bits_t()
  external int msgh_bits;

  @mach_msg_size_t()
  external int msgh_size;

  @mach_port_t()
  external int msgh_remote_port;

  @mach_port_t()
  external int msgh_local_port;

  @mach_port_name_t()
  external int msgh_voucher_port;

  @mach_msg_id_t()
  external int msgh_id;
}

typedef mach_msg_bits_t = ffi.UnsignedInt;
typedef Dartmach_msg_bits_t = int;
typedef mach_msg_id_t = integer_t;

final class mach_msg_base_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_body_t body;
}

final class mach_msg_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;
}

typedef mach_msg_trailer_type_t = ffi.UnsignedInt;
typedef Dartmach_msg_trailer_type_t = int;
typedef mach_msg_trailer_size_t = ffi.UnsignedInt;
typedef Dartmach_msg_trailer_size_t = int;

final class mach_msg_seqno_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;
}

final class security_token_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> val;
}

final class mach_msg_security_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;
}

final class audit_token_t extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> val;
}

final class mach_msg_audit_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;
}

@ffi.Packed(4)
final class mach_msg_context_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;
}

typedef mach_port_context_t = vm_offset_t;
typedef vm_offset_t = ffi.UintPtr;
typedef Dartvm_offset_t = int;

final class msg_labels_t extends ffi.Struct {
  @mach_port_name_t()
  external int sender;
}

@ffi.Packed(4)
final class mach_msg_mac_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;

  @mach_msg_filter_id()
  external int msgh_ad;

  external msg_labels_t msgh_labels;
}

typedef mach_msg_filter_id = ffi.Int;
typedef Dartmach_msg_filter_id = int;

final class mach_msg_empty_send_t extends ffi.Struct {
  external mach_msg_header_t header;
}

final class mach_msg_empty_rcv_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_trailer_t trailer;
}

final class mach_msg_empty_t extends ffi.Union {
  external mach_msg_empty_send_t send;

  external mach_msg_empty_rcv_t rcv;
}

typedef mach_msg_return_t = kern_return_t;
typedef kern_return_t = ffi.Int;
typedef Dartkern_return_t = int;
typedef mach_msg_option_t = integer_t;
typedef mach_msg_timeout_t = natural_t;

final class dispatch_source_type_s extends ffi.Opaque {}

typedef dispatch_source_t = ffi.Pointer<dispatch_source_s>;
typedef dispatch_source_type_t = ffi.Pointer<dispatch_source_type_s>;
typedef dispatch_group_t = ffi.Pointer<dispatch_group_s>;
typedef dispatch_semaphore_t = ffi.Pointer<dispatch_semaphore_s>;
typedef dispatch_once_t = ffi.IntPtr;
typedef Dartdispatch_once_t = int;
typedef dispatch_data_t = ffi.Pointer<dispatch_data_s>;
typedef dispatch_data_applier_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartdispatch_data_applier_t
    = ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize;
bool _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        dispatch_data_t arg0,
        int arg1,
        ffi.Pointer<ffi.Void> arg2,
        int arg3) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(dispatch_data_t arg0, ffi.Size arg1,
                    ffi.Pointer<ffi.Void> arg2, ffi.Size arg3)>>()
        .asFunction<
            bool Function(dispatch_data_t, int, ffi.Pointer<ffi.Void>,
                int)>()(arg0, arg1, arg2, arg3);
bool _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        dispatch_data_t arg0,
        int arg1,
        ffi.Pointer<ffi.Void> arg2,
        int arg3) =>
    (objc.getBlockClosure(block) as bool Function(dispatch_data_t, int,
        ffi.Pointer<ffi.Void>, int))(arg0, arg1, arg2, arg3);

class ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize
    extends objc.ObjCBlockBase {
  ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(dispatch_data_t arg0, ffi.Size arg1,
                      ffi.Pointer<ffi.Void> arg2, ffi.Size arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t,
                            ffi.Size,
                            ffi.Pointer<ffi.Void>,
                            ffi.Size)>(
                    _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize.fromFunction(
      bool Function(dispatch_data_t, int, ffi.Pointer<ffi.Void>, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t,
                            ffi.Size,
                            ffi.Pointer<ffi.Void>,
                            ffi.Size)>(
                    _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_closureTrampoline,
                    false)
                .cast(),
            (dispatch_data_t arg0, int arg1, ffi.Pointer<ffi.Void> arg2,
                    int arg3) =>
                fn(arg0, arg1, arg2, arg3)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(dispatch_data_t arg0, int arg1, ffi.Pointer<ffi.Void> arg2,
          int arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      dispatch_data_t arg0,
                      ffi.Size arg1,
                      ffi.Pointer<ffi.Void> arg2,
                      ffi.Size arg3)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  dispatch_data_t,
                  int,
                  ffi.Pointer<ffi.Void>,
                  int)>()(pointer, arg0, arg1, arg2, arg3);
}

typedef dispatch_fd_t = ffi.Int;
typedef Dartdispatch_fd_t = int;
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, dispatch_data_t arg0, int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(dispatch_data_t arg0, ffi.Int arg1)>>()
        .asFunction<void Function(dispatch_data_t, int)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, dispatch_data_t arg0, int arg1) =>
    (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
        arg0, arg1);

class ObjCBlock_ffiVoid_dispatchdatat_ffiInt extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_dispatchdatat_ffiInt._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_dispatchdatat_ffiInt castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_dispatchdatat_ffiInt._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_dispatchdatat_ffiInt.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(dispatch_data_t arg0, ffi.Int arg1)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                dispatch_data_t, ffi.Int)>(
                        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_dispatchdatat_ffiInt.fromFunction(
      void Function(dispatch_data_t, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t, ffi.Int)>(
                    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureTrampoline)
                .cast(),
            (dispatch_data_t arg0, int arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_dispatchdatat_ffiInt.listener(
      void Function(dispatch_data_t, int) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t, ffi.Int)>.listener(
                    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (dispatch_data_t arg0, int arg1) => fn(arg0, arg1))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, dispatch_data_t, ffi.Int)>?
      _dartFuncListenerTrampoline;

  void call(dispatch_data_t arg0, int arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  dispatch_data_t arg0, ffi.Int arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, dispatch_data_t,
              int)>()(pointer, arg0, arg1);
}

typedef dispatch_io_t = ffi.Pointer<dispatch_io_s>;
typedef dispatch_io_type_t = ffi.UnsignedLong;
typedef Dartdispatch_io_type_t = int;
void _ObjCBlock_ffiVoid_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Int arg0)>>()
        .asFunction<void Function(int)>()(arg0);
void _ObjCBlock_ffiVoid_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    (objc.getBlockClosure(block) as void Function(int))(arg0);

class ObjCBlock_ffiVoid_ffiInt extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiInt._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiInt castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiInt._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiInt.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int arg0)>> ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Int)>(_ObjCBlock_ffiVoid_ffiInt_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiInt.fromFunction(void Function(int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Int)>(_ObjCBlock_ffiVoid_ffiInt_closureTrampoline)
                .cast(),
            (int arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiInt.listener(void Function(int) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Int)>.listener(
                    _ObjCBlock_ffiVoid_ffiInt_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (int arg0) => fn(arg0))));
  static ffi
      .NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Int)>?
      _dartFuncListenerTrampoline;

  void call(int arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block, ffi.Int arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, int)>()(
      pointer, arg0);
}

typedef dispatch_io_handler_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartdispatch_io_handler_t = ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt;
void _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        bool arg0,
        dispatch_data_t arg1,
        int arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Bool arg0, dispatch_data_t arg1, ffi.Int arg2)>>()
            .asFunction<void Function(bool, dispatch_data_t, int)>()(
        arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        bool arg0,
        dispatch_data_t arg1,
        int arg2) =>
    (objc.getBlockClosure(block) as void Function(bool, dispatch_data_t, int))(
        arg0, arg1, arg2);

class ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Bool arg0, dispatch_data_t arg1,
                      ffi.Int arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
                            dispatch_data_t, ffi.Int)>(
                    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt.fromFunction(
      void Function(bool, dispatch_data_t, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
                            dispatch_data_t, ffi.Int)>(
                    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureTrampoline)
                .cast(),
            (bool arg0, dispatch_data_t arg1, int arg2) =>
                fn(arg0, arg1, arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt.listener(
      void Function(bool, dispatch_data_t, int) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
                            dispatch_data_t, ffi.Int)>.listener(
                    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (bool arg0, dispatch_data_t arg1, int arg2) =>
                fn(arg0, arg1, arg2))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Bool, dispatch_data_t, ffi.Int)>?
      _dartFuncListenerTrampoline;

  void call(bool arg0, dispatch_data_t arg1, int arg2) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Bool arg0, dispatch_data_t arg1, ffi.Int arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, bool, dispatch_data_t,
              int)>()(pointer, arg0, arg1, arg2);
}

typedef dispatch_io_close_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_io_close_flags_t = int;
typedef dispatch_io_interval_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_io_interval_flags_t = int;
typedef dispatch_workloop_t = dispatch_queue_t;

final class CFStreamError extends ffi.Struct {
  @CFIndex()
  external int domain;

  @SInt32()
  external int error;
}

enum CFStreamStatus {
  kCFStreamStatusNotOpen(0),
  kCFStreamStatusOpening(1),
  kCFStreamStatusOpen(2),
  kCFStreamStatusReading(3),
  kCFStreamStatusWriting(4),
  kCFStreamStatusAtEnd(5),
  kCFStreamStatusClosed(6),
  kCFStreamStatusError(7);

  final int value;
  const CFStreamStatus(this.value);

  static CFStreamStatus fromValue(int value) => switch (value) {
        0 => kCFStreamStatusNotOpen,
        1 => kCFStreamStatusOpening,
        2 => kCFStreamStatusOpen,
        3 => kCFStreamStatusReading,
        4 => kCFStreamStatusWriting,
        5 => kCFStreamStatusAtEnd,
        6 => kCFStreamStatusClosed,
        7 => kCFStreamStatusError,
        _ => throw ArgumentError("Unknown value for CFStreamStatus: $value"),
      };
}

enum CFStreamEventType {
  kCFStreamEventNone(0),
  kCFStreamEventOpenCompleted(1),
  kCFStreamEventHasBytesAvailable(2),
  kCFStreamEventCanAcceptBytes(4),
  kCFStreamEventErrorOccurred(8),
  kCFStreamEventEndEncountered(16);

  final int value;
  const CFStreamEventType(this.value);

  static CFStreamEventType fromValue(int value) => switch (value) {
        0 => kCFStreamEventNone,
        1 => kCFStreamEventOpenCompleted,
        2 => kCFStreamEventHasBytesAvailable,
        4 => kCFStreamEventCanAcceptBytes,
        8 => kCFStreamEventErrorOccurred,
        16 => kCFStreamEventEndEncountered,
        _ => throw ArgumentError("Unknown value for CFStreamEventType: $value"),
      };
}

final class CFStreamClientContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

final class __CFReadStream extends ffi.Opaque {}

final class __CFWriteStream extends ffi.Opaque {}

typedef CFStreamPropertyKey = CFStringRef;
typedef CFReadStreamRef = ffi.Pointer<__CFReadStream>;
typedef CFWriteStreamRef = ffi.Pointer<__CFWriteStream>;
typedef CFReadStreamClientCallBack
    = ffi.Pointer<ffi.NativeFunction<CFReadStreamClientCallBackFunction>>;
typedef CFReadStreamClientCallBackFunction = ffi.Void Function(
    CFReadStreamRef stream,
    CFOptionFlags type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef DartCFReadStreamClientCallBackFunction = void Function(
    CFReadStreamRef stream,
    CFStreamEventType type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef CFWriteStreamClientCallBack
    = ffi.Pointer<ffi.NativeFunction<CFWriteStreamClientCallBackFunction>>;
typedef CFWriteStreamClientCallBackFunction = ffi.Void Function(
    CFWriteStreamRef stream,
    CFOptionFlags type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef DartCFWriteStreamClientCallBackFunction = void Function(
    CFWriteStreamRef stream,
    CFStreamEventType type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);

enum CFStreamErrorDomain {
  kCFStreamErrorDomainCustom(-1),
  kCFStreamErrorDomainPOSIX(1),
  kCFStreamErrorDomainMacOSStatus(2);

  final int value;
  const CFStreamErrorDomain(this.value);

  static CFStreamErrorDomain fromValue(int value) => switch (value) {
        -1 => kCFStreamErrorDomainCustom,
        1 => kCFStreamErrorDomainPOSIX,
        2 => kCFStreamErrorDomainMacOSStatus,
        _ =>
          throw ArgumentError("Unknown value for CFStreamErrorDomain: $value"),
      };
}

enum CFPropertyListMutabilityOptions {
  kCFPropertyListImmutable(0),
  kCFPropertyListMutableContainers(1),
  kCFPropertyListMutableContainersAndLeaves(2);

  final int value;
  const CFPropertyListMutabilityOptions(this.value);

  static CFPropertyListMutabilityOptions fromValue(int value) =>
      switch (value) {
        0 => kCFPropertyListImmutable,
        1 => kCFPropertyListMutableContainers,
        2 => kCFPropertyListMutableContainersAndLeaves,
        _ => throw ArgumentError(
            "Unknown value for CFPropertyListMutabilityOptions: $value"),
      };
}

enum CFPropertyListFormat {
  kCFPropertyListOpenStepFormat(1),
  kCFPropertyListXMLFormat_v1_0(100),
  kCFPropertyListBinaryFormat_v1_0(200);

  final int value;
  const CFPropertyListFormat(this.value);

  static CFPropertyListFormat fromValue(int value) => switch (value) {
        1 => kCFPropertyListOpenStepFormat,
        100 => kCFPropertyListXMLFormat_v1_0,
        200 => kCFPropertyListBinaryFormat_v1_0,
        _ =>
          throw ArgumentError("Unknown value for CFPropertyListFormat: $value"),
      };
}

final class CFSetCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFSetRetainCallBack retain;

  external CFSetReleaseCallBack release;

  external CFSetCopyDescriptionCallBack copyDescription;

  external CFSetEqualCallBack equal;

  external CFSetHashCallBack hash;
}

typedef CFSetRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetRetainCallBackFunction>>;
typedef CFSetRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFSetReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetReleaseCallBackFunction>>;
typedef CFSetReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFSetReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFSetCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetCopyDescriptionCallBackFunction>>;
typedef CFSetCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFSetEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetEqualCallBackFunction>>;
typedef CFSetEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFSetEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFSetHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetHashCallBackFunction>>;
typedef CFSetHashCallBackFunction = CFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFSetHashCallBackFunction = DartCFHashCode Function(
    ffi.Pointer<ffi.Void> value);

final class __CFSet extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;
typedef CFMutableSetRef = ffi.Pointer<__CFSet>;
typedef CFSetApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFSetApplierFunctionFunction>>;
typedef CFSetApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFSetApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);

enum CFStringEncodings {
  kCFStringEncodingMacJapanese(1),
  kCFStringEncodingMacChineseTrad(2),
  kCFStringEncodingMacKorean(3),
  kCFStringEncodingMacArabic(4),
  kCFStringEncodingMacHebrew(5),
  kCFStringEncodingMacGreek(6),
  kCFStringEncodingMacCyrillic(7),
  kCFStringEncodingMacDevanagari(9),
  kCFStringEncodingMacGurmukhi(10),
  kCFStringEncodingMacGujarati(11),
  kCFStringEncodingMacOriya(12),
  kCFStringEncodingMacBengali(13),
  kCFStringEncodingMacTamil(14),
  kCFStringEncodingMacTelugu(15),
  kCFStringEncodingMacKannada(16),
  kCFStringEncodingMacMalayalam(17),
  kCFStringEncodingMacSinhalese(18),
  kCFStringEncodingMacBurmese(19),
  kCFStringEncodingMacKhmer(20),
  kCFStringEncodingMacThai(21),
  kCFStringEncodingMacLaotian(22),
  kCFStringEncodingMacGeorgian(23),
  kCFStringEncodingMacArmenian(24),
  kCFStringEncodingMacChineseSimp(25),
  kCFStringEncodingMacTibetan(26),
  kCFStringEncodingMacMongolian(27),
  kCFStringEncodingMacEthiopic(28),
  kCFStringEncodingMacCentralEurRoman(29),
  kCFStringEncodingMacVietnamese(30),
  kCFStringEncodingMacExtArabic(31),
  kCFStringEncodingMacSymbol(33),
  kCFStringEncodingMacDingbats(34),
  kCFStringEncodingMacTurkish(35),
  kCFStringEncodingMacCroatian(36),
  kCFStringEncodingMacIcelandic(37),
  kCFStringEncodingMacRomanian(38),
  kCFStringEncodingMacCeltic(39),
  kCFStringEncodingMacGaelic(40),
  kCFStringEncodingMacFarsi(140),
  kCFStringEncodingMacUkrainian(152),
  kCFStringEncodingMacInuit(236),
  kCFStringEncodingMacVT100(252),
  kCFStringEncodingMacHFS(255),
  kCFStringEncodingISOLatin2(514),
  kCFStringEncodingISOLatin3(515),
  kCFStringEncodingISOLatin4(516),
  kCFStringEncodingISOLatinCyrillic(517),
  kCFStringEncodingISOLatinArabic(518),
  kCFStringEncodingISOLatinGreek(519),
  kCFStringEncodingISOLatinHebrew(520),
  kCFStringEncodingISOLatin5(521),
  kCFStringEncodingISOLatin6(522),
  kCFStringEncodingISOLatinThai(523),
  kCFStringEncodingISOLatin7(525),
  kCFStringEncodingISOLatin8(526),
  kCFStringEncodingISOLatin9(527),
  kCFStringEncodingISOLatin10(528),
  kCFStringEncodingDOSLatinUS(1024),
  kCFStringEncodingDOSGreek(1029),
  kCFStringEncodingDOSBalticRim(1030),
  kCFStringEncodingDOSLatin1(1040),
  kCFStringEncodingDOSGreek1(1041),
  kCFStringEncodingDOSLatin2(1042),
  kCFStringEncodingDOSCyrillic(1043),
  kCFStringEncodingDOSTurkish(1044),
  kCFStringEncodingDOSPortuguese(1045),
  kCFStringEncodingDOSIcelandic(1046),
  kCFStringEncodingDOSHebrew(1047),
  kCFStringEncodingDOSCanadianFrench(1048),
  kCFStringEncodingDOSArabic(1049),
  kCFStringEncodingDOSNordic(1050),
  kCFStringEncodingDOSRussian(1051),
  kCFStringEncodingDOSGreek2(1052),
  kCFStringEncodingDOSThai(1053),
  kCFStringEncodingDOSJapanese(1056),
  kCFStringEncodingDOSChineseSimplif(1057),
  kCFStringEncodingDOSKorean(1058),
  kCFStringEncodingDOSChineseTrad(1059),
  kCFStringEncodingWindowsLatin2(1281),
  kCFStringEncodingWindowsCyrillic(1282),
  kCFStringEncodingWindowsGreek(1283),
  kCFStringEncodingWindowsLatin5(1284),
  kCFStringEncodingWindowsHebrew(1285),
  kCFStringEncodingWindowsArabic(1286),
  kCFStringEncodingWindowsBalticRim(1287),
  kCFStringEncodingWindowsVietnamese(1288),
  kCFStringEncodingWindowsKoreanJohab(1296),
  kCFStringEncodingANSEL(1537),
  kCFStringEncodingJIS_X0201_76(1568),
  kCFStringEncodingJIS_X0208_83(1569),
  kCFStringEncodingJIS_X0208_90(1570),
  kCFStringEncodingJIS_X0212_90(1571),
  kCFStringEncodingJIS_C6226_78(1572),
  kCFStringEncodingShiftJIS_X0213(1576),
  kCFStringEncodingShiftJIS_X0213_MenKuTen(1577),
  kCFStringEncodingGB_2312_80(1584),
  kCFStringEncodingGBK_95(1585),
  kCFStringEncodingGB_18030_2000(1586),
  kCFStringEncodingKSC_5601_87(1600),
  kCFStringEncodingKSC_5601_92_Johab(1601),
  kCFStringEncodingCNS_11643_92_P1(1617),
  kCFStringEncodingCNS_11643_92_P2(1618),
  kCFStringEncodingCNS_11643_92_P3(1619),
  kCFStringEncodingISO_2022_JP(2080),
  kCFStringEncodingISO_2022_JP_2(2081),
  kCFStringEncodingISO_2022_JP_1(2082),
  kCFStringEncodingISO_2022_JP_3(2083),
  kCFStringEncodingISO_2022_CN(2096),
  kCFStringEncodingISO_2022_CN_EXT(2097),
  kCFStringEncodingISO_2022_KR(2112),
  kCFStringEncodingEUC_JP(2336),
  kCFStringEncodingEUC_CN(2352),
  kCFStringEncodingEUC_TW(2353),
  kCFStringEncodingEUC_KR(2368),
  kCFStringEncodingShiftJIS(2561),
  kCFStringEncodingKOI8_R(2562),
  kCFStringEncodingBig5(2563),
  kCFStringEncodingMacRomanLatin1(2564),
  kCFStringEncodingHZ_GB_2312(2565),
  kCFStringEncodingBig5_HKSCS_1999(2566),
  kCFStringEncodingVISCII(2567),
  kCFStringEncodingKOI8_U(2568),
  kCFStringEncodingBig5_E(2569),
  kCFStringEncodingNextStepJapanese(2818),
  kCFStringEncodingEBCDIC_US(3073),
  kCFStringEncodingEBCDIC_CP037(3074),
  kCFStringEncodingUTF7(67109120),
  kCFStringEncodingUTF7_IMAP(2576);

  static const kCFStringEncodingShiftJIS_X0213_00 =
      kCFStringEncodingShiftJIS_X0213;

  final int value;
  const CFStringEncodings(this.value);

  static CFStringEncodings fromValue(int value) => switch (value) {
        1 => kCFStringEncodingMacJapanese,
        2 => kCFStringEncodingMacChineseTrad,
        3 => kCFStringEncodingMacKorean,
        4 => kCFStringEncodingMacArabic,
        5 => kCFStringEncodingMacHebrew,
        6 => kCFStringEncodingMacGreek,
        7 => kCFStringEncodingMacCyrillic,
        9 => kCFStringEncodingMacDevanagari,
        10 => kCFStringEncodingMacGurmukhi,
        11 => kCFStringEncodingMacGujarati,
        12 => kCFStringEncodingMacOriya,
        13 => kCFStringEncodingMacBengali,
        14 => kCFStringEncodingMacTamil,
        15 => kCFStringEncodingMacTelugu,
        16 => kCFStringEncodingMacKannada,
        17 => kCFStringEncodingMacMalayalam,
        18 => kCFStringEncodingMacSinhalese,
        19 => kCFStringEncodingMacBurmese,
        20 => kCFStringEncodingMacKhmer,
        21 => kCFStringEncodingMacThai,
        22 => kCFStringEncodingMacLaotian,
        23 => kCFStringEncodingMacGeorgian,
        24 => kCFStringEncodingMacArmenian,
        25 => kCFStringEncodingMacChineseSimp,
        26 => kCFStringEncodingMacTibetan,
        27 => kCFStringEncodingMacMongolian,
        28 => kCFStringEncodingMacEthiopic,
        29 => kCFStringEncodingMacCentralEurRoman,
        30 => kCFStringEncodingMacVietnamese,
        31 => kCFStringEncodingMacExtArabic,
        33 => kCFStringEncodingMacSymbol,
        34 => kCFStringEncodingMacDingbats,
        35 => kCFStringEncodingMacTurkish,
        36 => kCFStringEncodingMacCroatian,
        37 => kCFStringEncodingMacIcelandic,
        38 => kCFStringEncodingMacRomanian,
        39 => kCFStringEncodingMacCeltic,
        40 => kCFStringEncodingMacGaelic,
        140 => kCFStringEncodingMacFarsi,
        152 => kCFStringEncodingMacUkrainian,
        236 => kCFStringEncodingMacInuit,
        252 => kCFStringEncodingMacVT100,
        255 => kCFStringEncodingMacHFS,
        514 => kCFStringEncodingISOLatin2,
        515 => kCFStringEncodingISOLatin3,
        516 => kCFStringEncodingISOLatin4,
        517 => kCFStringEncodingISOLatinCyrillic,
        518 => kCFStringEncodingISOLatinArabic,
        519 => kCFStringEncodingISOLatinGreek,
        520 => kCFStringEncodingISOLatinHebrew,
        521 => kCFStringEncodingISOLatin5,
        522 => kCFStringEncodingISOLatin6,
        523 => kCFStringEncodingISOLatinThai,
        525 => kCFStringEncodingISOLatin7,
        526 => kCFStringEncodingISOLatin8,
        527 => kCFStringEncodingISOLatin9,
        528 => kCFStringEncodingISOLatin10,
        1024 => kCFStringEncodingDOSLatinUS,
        1029 => kCFStringEncodingDOSGreek,
        1030 => kCFStringEncodingDOSBalticRim,
        1040 => kCFStringEncodingDOSLatin1,
        1041 => kCFStringEncodingDOSGreek1,
        1042 => kCFStringEncodingDOSLatin2,
        1043 => kCFStringEncodingDOSCyrillic,
        1044 => kCFStringEncodingDOSTurkish,
        1045 => kCFStringEncodingDOSPortuguese,
        1046 => kCFStringEncodingDOSIcelandic,
        1047 => kCFStringEncodingDOSHebrew,
        1048 => kCFStringEncodingDOSCanadianFrench,
        1049 => kCFStringEncodingDOSArabic,
        1050 => kCFStringEncodingDOSNordic,
        1051 => kCFStringEncodingDOSRussian,
        1052 => kCFStringEncodingDOSGreek2,
        1053 => kCFStringEncodingDOSThai,
        1056 => kCFStringEncodingDOSJapanese,
        1057 => kCFStringEncodingDOSChineseSimplif,
        1058 => kCFStringEncodingDOSKorean,
        1059 => kCFStringEncodingDOSChineseTrad,
        1281 => kCFStringEncodingWindowsLatin2,
        1282 => kCFStringEncodingWindowsCyrillic,
        1283 => kCFStringEncodingWindowsGreek,
        1284 => kCFStringEncodingWindowsLatin5,
        1285 => kCFStringEncodingWindowsHebrew,
        1286 => kCFStringEncodingWindowsArabic,
        1287 => kCFStringEncodingWindowsBalticRim,
        1288 => kCFStringEncodingWindowsVietnamese,
        1296 => kCFStringEncodingWindowsKoreanJohab,
        1537 => kCFStringEncodingANSEL,
        1568 => kCFStringEncodingJIS_X0201_76,
        1569 => kCFStringEncodingJIS_X0208_83,
        1570 => kCFStringEncodingJIS_X0208_90,
        1571 => kCFStringEncodingJIS_X0212_90,
        1572 => kCFStringEncodingJIS_C6226_78,
        1576 => kCFStringEncodingShiftJIS_X0213,
        1577 => kCFStringEncodingShiftJIS_X0213_MenKuTen,
        1584 => kCFStringEncodingGB_2312_80,
        1585 => kCFStringEncodingGBK_95,
        1586 => kCFStringEncodingGB_18030_2000,
        1600 => kCFStringEncodingKSC_5601_87,
        1601 => kCFStringEncodingKSC_5601_92_Johab,
        1617 => kCFStringEncodingCNS_11643_92_P1,
        1618 => kCFStringEncodingCNS_11643_92_P2,
        1619 => kCFStringEncodingCNS_11643_92_P3,
        2080 => kCFStringEncodingISO_2022_JP,
        2081 => kCFStringEncodingISO_2022_JP_2,
        2082 => kCFStringEncodingISO_2022_JP_1,
        2083 => kCFStringEncodingISO_2022_JP_3,
        2096 => kCFStringEncodingISO_2022_CN,
        2097 => kCFStringEncodingISO_2022_CN_EXT,
        2112 => kCFStringEncodingISO_2022_KR,
        2336 => kCFStringEncodingEUC_JP,
        2352 => kCFStringEncodingEUC_CN,
        2353 => kCFStringEncodingEUC_TW,
        2368 => kCFStringEncodingEUC_KR,
        2561 => kCFStringEncodingShiftJIS,
        2562 => kCFStringEncodingKOI8_R,
        2563 => kCFStringEncodingBig5,
        2564 => kCFStringEncodingMacRomanLatin1,
        2565 => kCFStringEncodingHZ_GB_2312,
        2566 => kCFStringEncodingBig5_HKSCS_1999,
        2567 => kCFStringEncodingVISCII,
        2568 => kCFStringEncodingKOI8_U,
        2569 => kCFStringEncodingBig5_E,
        2818 => kCFStringEncodingNextStepJapanese,
        3073 => kCFStringEncodingEBCDIC_US,
        3074 => kCFStringEncodingEBCDIC_CP037,
        67109120 => kCFStringEncodingUTF7,
        2576 => kCFStringEncodingUTF7_IMAP,
        _ => throw ArgumentError("Unknown value for CFStringEncodings: $value"),
      };

  @override
  String toString() {
    if (this == kCFStringEncodingShiftJIS_X0213)
      return "CFStringEncodings.kCFStringEncodingShiftJIS_X0213, CFStringEncodings.kCFStringEncodingShiftJIS_X0213_00";
    return super.toString();
  }
}

final class CFTreeContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFTreeRetainCallBack retain;

  external CFTreeReleaseCallBack release;

  external CFTreeCopyDescriptionCallBack copyDescription;
}

typedef CFTreeRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFTreeRetainCallBackFunction>>;
typedef CFTreeRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFTreeReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFTreeReleaseCallBackFunction>>;
typedef CFTreeReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFTreeReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFTreeCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFTreeCopyDescriptionCallBackFunction>>;
typedef CFTreeCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);

final class __CFTree extends ffi.Opaque {}

typedef CFTreeRef = ffi.Pointer<__CFTree>;
typedef CFTreeApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFTreeApplierFunctionFunction>>;
typedef CFTreeApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFTreeApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);

enum CFURLError {
  kCFURLUnknownError(-10),
  kCFURLUnknownSchemeError(-11),
  kCFURLResourceNotFoundError(-12),
  kCFURLResourceAccessViolationError(-13),
  kCFURLRemoteHostUnavailableError(-14),
  kCFURLImproperArgumentsError(-15),
  kCFURLUnknownPropertyKeyError(-16),
  kCFURLPropertyKeyUnavailableError(-17),
  kCFURLTimeoutError(-18);

  final int value;
  const CFURLError(this.value);

  static CFURLError fromValue(int value) => switch (value) {
        -10 => kCFURLUnknownError,
        -11 => kCFURLUnknownSchemeError,
        -12 => kCFURLResourceNotFoundError,
        -13 => kCFURLResourceAccessViolationError,
        -14 => kCFURLRemoteHostUnavailableError,
        -15 => kCFURLImproperArgumentsError,
        -16 => kCFURLUnknownPropertyKeyError,
        -17 => kCFURLPropertyKeyUnavailableError,
        -18 => kCFURLTimeoutError,
        _ => throw ArgumentError("Unknown value for CFURLError: $value"),
      };
}

final class __CFUUID extends ffi.Opaque {}

final class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef CFUUIDRef = ffi.Pointer<__CFUUID>;

final class __CFBundle extends ffi.Opaque {}

typedef CFBundleRef = ffi.Pointer<__CFBundle>;
typedef cpu_type_t = integer_t;
typedef CFPlugInRef = ffi.Pointer<__CFBundle>;
typedef CFBundleRefNum = ffi.Int;
typedef DartCFBundleRefNum = int;

final class __CFMessagePort extends ffi.Opaque {}

final class CFMessagePortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFMessagePortRef = ffi.Pointer<__CFMessagePort>;
typedef CFMessagePortCallBack
    = ffi.Pointer<ffi.NativeFunction<CFMessagePortCallBackFunction>>;
typedef CFMessagePortCallBackFunction = CFDataRef Function(
    CFMessagePortRef local,
    SInt32 msgid,
    CFDataRef data,
    ffi.Pointer<ffi.Void> info);
typedef DartCFMessagePortCallBackFunction = CFDataRef Function(
    CFMessagePortRef local,
    DartSInt32 msgid,
    CFDataRef data,
    ffi.Pointer<ffi.Void> info);
typedef CFMessagePortInvalidationCallBack = ffi
    .Pointer<ffi.NativeFunction<CFMessagePortInvalidationCallBackFunction>>;
typedef CFMessagePortInvalidationCallBackFunction = ffi.Void Function(
    CFMessagePortRef ms, ffi.Pointer<ffi.Void> info);
typedef DartCFMessagePortInvalidationCallBackFunction = void Function(
    CFMessagePortRef ms, ffi.Pointer<ffi.Void> info);
typedef CFPlugInFactoryFunction
    = ffi.Pointer<ffi.NativeFunction<CFPlugInFactoryFunctionFunction>>;
typedef CFPlugInFactoryFunctionFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, CFUUIDRef typeUUID);

final class __CFPlugInInstance extends ffi.Opaque {}

typedef CFPlugInInstanceRef = ffi.Pointer<__CFPlugInInstance>;
typedef CFPlugInInstanceDeallocateInstanceDataFunction = ffi.Pointer<
    ffi.NativeFunction<CFPlugInInstanceDeallocateInstanceDataFunctionFunction>>;
typedef CFPlugInInstanceDeallocateInstanceDataFunctionFunction = ffi.Void
    Function(ffi.Pointer<ffi.Void> instanceData);
typedef DartCFPlugInInstanceDeallocateInstanceDataFunctionFunction = void
    Function(ffi.Pointer<ffi.Void> instanceData);
typedef CFPlugInInstanceGetInterfaceFunction = ffi
    .Pointer<ffi.NativeFunction<CFPlugInInstanceGetInterfaceFunctionFunction>>;
typedef CFPlugInInstanceGetInterfaceFunctionFunction = Boolean Function(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl);
typedef DartCFPlugInInstanceGetInterfaceFunctionFunction = DartBoolean Function(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl);

final class __CFMachPort extends ffi.Opaque {}

final class CFMachPortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFMachPortRef = ffi.Pointer<__CFMachPort>;
typedef CFMachPortCallBack
    = ffi.Pointer<ffi.NativeFunction<CFMachPortCallBackFunction>>;
typedef CFMachPortCallBackFunction = ffi.Void Function(CFMachPortRef port,
    ffi.Pointer<ffi.Void> msg, CFIndex size, ffi.Pointer<ffi.Void> info);
typedef DartCFMachPortCallBackFunction = void Function(CFMachPortRef port,
    ffi.Pointer<ffi.Void> msg, DartCFIndex size, ffi.Pointer<ffi.Void> info);
typedef CFMachPortInvalidationCallBack
    = ffi.Pointer<ffi.NativeFunction<CFMachPortInvalidationCallBackFunction>>;
typedef CFMachPortInvalidationCallBackFunction = ffi.Void Function(
    CFMachPortRef port, ffi.Pointer<ffi.Void> info);
typedef DartCFMachPortInvalidationCallBackFunction = void Function(
    CFMachPortRef port, ffi.Pointer<ffi.Void> info);

final class __CFAttributedString extends ffi.Opaque {}

typedef CFAttributedStringRef = ffi.Pointer<__CFAttributedString>;
typedef CFMutableAttributedStringRef = ffi.Pointer<__CFAttributedString>;

final class __CFURLEnumerator extends ffi.Opaque {}

enum CFURLEnumeratorOptions {
  kCFURLEnumeratorDefaultBehavior(0),
  kCFURLEnumeratorDescendRecursively(1),
  kCFURLEnumeratorSkipInvisibles(2),
  kCFURLEnumeratorGenerateFileReferenceURLs(4),
  kCFURLEnumeratorSkipPackageContents(8),
  kCFURLEnumeratorIncludeDirectoriesPreOrder(16),
  kCFURLEnumeratorIncludeDirectoriesPostOrder(32),
  kCFURLEnumeratorGenerateRelativePathURLs(64);

  final int value;
  const CFURLEnumeratorOptions(this.value);

  static CFURLEnumeratorOptions fromValue(int value) => switch (value) {
        0 => kCFURLEnumeratorDefaultBehavior,
        1 => kCFURLEnumeratorDescendRecursively,
        2 => kCFURLEnumeratorSkipInvisibles,
        4 => kCFURLEnumeratorGenerateFileReferenceURLs,
        8 => kCFURLEnumeratorSkipPackageContents,
        16 => kCFURLEnumeratorIncludeDirectoriesPreOrder,
        32 => kCFURLEnumeratorIncludeDirectoriesPostOrder,
        64 => kCFURLEnumeratorGenerateRelativePathURLs,
        _ => throw ArgumentError(
            "Unknown value for CFURLEnumeratorOptions: $value"),
      };
}

typedef CFURLEnumeratorRef = ffi.Pointer<__CFURLEnumerator>;

enum CFURLEnumeratorResult {
  kCFURLEnumeratorSuccess(1),
  kCFURLEnumeratorEnd(2),
  kCFURLEnumeratorError(3),
  kCFURLEnumeratorDirectoryPostOrderSuccess(4);

  final int value;
  const CFURLEnumeratorResult(this.value);

  static CFURLEnumeratorResult fromValue(int value) => switch (value) {
        1 => kCFURLEnumeratorSuccess,
        2 => kCFURLEnumeratorEnd,
        3 => kCFURLEnumeratorError,
        4 => kCFURLEnumeratorDirectoryPostOrderSuccess,
        _ => throw ArgumentError(
            "Unknown value for CFURLEnumeratorResult: $value"),
      };
}

final class guid_t extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> g_guid;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> g_guid_asint;
}

@ffi.Packed(1)
final class ntsid_t extends ffi.Struct {
  @u_int8_t()
  external int sid_kind;

  @u_int8_t()
  external int sid_authcount;

  @ffi.Array.multi([6])
  external ffi.Array<u_int8_t> sid_authority;

  @ffi.Array.multi([16])
  external ffi.Array<u_int32_t> sid_authorities;
}

typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;

final class kauth_identity_extlookup extends ffi.Struct {
  @u_int32_t()
  external int el_seqno;

  @u_int32_t()
  external int el_result;

  @u_int32_t()
  external int el_flags;

  @__darwin_pid_t()
  external int el_info_pid;

  @u_int64_t()
  external int el_extend;

  @u_int32_t()
  external int el_info_reserved_1;

  @uid_t()
  external int el_uid;

  external guid_t el_uguid;

  @u_int32_t()
  external int el_uguid_valid;

  external ntsid_t el_usid;

  @u_int32_t()
  external int el_usid_valid;

  @gid_t()
  external int el_gid;

  external guid_t el_gguid;

  @u_int32_t()
  external int el_gguid_valid;

  external ntsid_t el_gsid;

  @u_int32_t()
  external int el_gsid_valid;

  @u_int32_t()
  external int el_member_valid;

  @u_int32_t()
  external int el_sup_grp_cnt;

  @ffi.Array.multi([16])
  external ffi.Array<gid_t> el_sup_groups;
}

typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;

final class kauth_cache_sizes extends ffi.Struct {
  @u_int32_t()
  external int kcs_group_size;

  @u_int32_t()
  external int kcs_id_size;
}

final class kauth_ace extends ffi.Struct {
  external guid_t ace_applicable;

  @u_int32_t()
  external int ace_flags;

  @kauth_ace_rights_t()
  external int ace_rights;
}

typedef kauth_ace_rights_t = u_int32_t;

final class kauth_acl extends ffi.Struct {
  @u_int32_t()
  external int acl_entrycount;

  @u_int32_t()
  external int acl_flags;

  @ffi.Array.multi([1])
  external ffi.Array<kauth_ace> acl_ace;
}

final class kauth_filesec extends ffi.Struct {
  @u_int32_t()
  external int fsec_magic;

  external guid_t fsec_owner;

  external guid_t fsec_group;

  external kauth_acl fsec_acl;
}

enum acl_perm_t {
  ACL_READ_DATA(2),
  ACL_WRITE_DATA(4),
  ACL_EXECUTE(8),
  ACL_DELETE(16),
  ACL_APPEND_DATA(32),
  ACL_DELETE_CHILD(64),
  ACL_READ_ATTRIBUTES(128),
  ACL_WRITE_ATTRIBUTES(256),
  ACL_READ_EXTATTRIBUTES(512),
  ACL_WRITE_EXTATTRIBUTES(1024),
  ACL_READ_SECURITY(2048),
  ACL_WRITE_SECURITY(4096),
  ACL_CHANGE_OWNER(8192),
  ACL_SYNCHRONIZE(1048576);

  static const ACL_LIST_DIRECTORY = ACL_READ_DATA;
  static const ACL_ADD_FILE = ACL_WRITE_DATA;
  static const ACL_SEARCH = ACL_EXECUTE;
  static const ACL_ADD_SUBDIRECTORY = ACL_APPEND_DATA;

  final int value;
  const acl_perm_t(this.value);

  static acl_perm_t fromValue(int value) => switch (value) {
        2 => ACL_READ_DATA,
        4 => ACL_WRITE_DATA,
        8 => ACL_EXECUTE,
        16 => ACL_DELETE,
        32 => ACL_APPEND_DATA,
        64 => ACL_DELETE_CHILD,
        128 => ACL_READ_ATTRIBUTES,
        256 => ACL_WRITE_ATTRIBUTES,
        512 => ACL_READ_EXTATTRIBUTES,
        1024 => ACL_WRITE_EXTATTRIBUTES,
        2048 => ACL_READ_SECURITY,
        4096 => ACL_WRITE_SECURITY,
        8192 => ACL_CHANGE_OWNER,
        1048576 => ACL_SYNCHRONIZE,
        _ => throw ArgumentError("Unknown value for acl_perm_t: $value"),
      };

  @override
  String toString() {
    if (this == ACL_READ_DATA)
      return "acl_perm_t.ACL_READ_DATA, acl_perm_t.ACL_LIST_DIRECTORY";
    if (this == ACL_WRITE_DATA)
      return "acl_perm_t.ACL_WRITE_DATA, acl_perm_t.ACL_ADD_FILE";
    if (this == ACL_EXECUTE)
      return "acl_perm_t.ACL_EXECUTE, acl_perm_t.ACL_SEARCH";
    if (this == ACL_APPEND_DATA)
      return "acl_perm_t.ACL_APPEND_DATA, acl_perm_t.ACL_ADD_SUBDIRECTORY";
    return super.toString();
  }
}

enum acl_tag_t {
  ACL_UNDEFINED_TAG(0),
  ACL_EXTENDED_ALLOW(1),
  ACL_EXTENDED_DENY(2);

  final int value;
  const acl_tag_t(this.value);

  static acl_tag_t fromValue(int value) => switch (value) {
        0 => ACL_UNDEFINED_TAG,
        1 => ACL_EXTENDED_ALLOW,
        2 => ACL_EXTENDED_DENY,
        _ => throw ArgumentError("Unknown value for acl_tag_t: $value"),
      };
}

enum acl_type_t {
  ACL_TYPE_EXTENDED(256),
  ACL_TYPE_ACCESS(0),
  ACL_TYPE_DEFAULT(1),
  ACL_TYPE_AFS(2),
  ACL_TYPE_CODA(3),
  ACL_TYPE_NTFS(4),
  ACL_TYPE_NWFS(5);

  final int value;
  const acl_type_t(this.value);

  static acl_type_t fromValue(int value) => switch (value) {
        256 => ACL_TYPE_EXTENDED,
        0 => ACL_TYPE_ACCESS,
        1 => ACL_TYPE_DEFAULT,
        2 => ACL_TYPE_AFS,
        3 => ACL_TYPE_CODA,
        4 => ACL_TYPE_NTFS,
        5 => ACL_TYPE_NWFS,
        _ => throw ArgumentError("Unknown value for acl_type_t: $value"),
      };
}

enum acl_entry_id_t {
  ACL_FIRST_ENTRY(0),
  ACL_NEXT_ENTRY(-1),
  ACL_LAST_ENTRY(-2);

  final int value;
  const acl_entry_id_t(this.value);

  static acl_entry_id_t fromValue(int value) => switch (value) {
        0 => ACL_FIRST_ENTRY,
        -1 => ACL_NEXT_ENTRY,
        -2 => ACL_LAST_ENTRY,
        _ => throw ArgumentError("Unknown value for acl_entry_id_t: $value"),
      };
}

enum acl_flag_t {
  ACL_FLAG_DEFER_INHERIT(1),
  ACL_FLAG_NO_INHERIT(131072),
  ACL_ENTRY_INHERITED(16),
  ACL_ENTRY_FILE_INHERIT(32),
  ACL_ENTRY_DIRECTORY_INHERIT(64),
  ACL_ENTRY_LIMIT_INHERIT(128),
  ACL_ENTRY_ONLY_INHERIT(256);

  final int value;
  const acl_flag_t(this.value);

  static acl_flag_t fromValue(int value) => switch (value) {
        1 => ACL_FLAG_DEFER_INHERIT,
        131072 => ACL_FLAG_NO_INHERIT,
        16 => ACL_ENTRY_INHERITED,
        32 => ACL_ENTRY_FILE_INHERIT,
        64 => ACL_ENTRY_DIRECTORY_INHERIT,
        128 => ACL_ENTRY_LIMIT_INHERIT,
        256 => ACL_ENTRY_ONLY_INHERIT,
        _ => throw ArgumentError("Unknown value for acl_flag_t: $value"),
      };
}

final class _acl extends ffi.Opaque {}

final class _acl_entry extends ffi.Opaque {}

final class _acl_permset extends ffi.Opaque {}

final class _acl_flagset extends ffi.Opaque {}

typedef acl_t = ffi.Pointer<_acl>;
typedef acl_entry_t = ffi.Pointer<_acl_entry>;
typedef acl_permset_t = ffi.Pointer<_acl_permset>;
typedef acl_permset_mask_t = u_int64_t;
typedef acl_flagset_t = ffi.Pointer<_acl_flagset>;

final class __CFFileSecurity extends ffi.Opaque {}

typedef CFFileSecurityRef = ffi.Pointer<__CFFileSecurity>;

enum CFFileSecurityClearOptions {
  kCFFileSecurityClearOwner(1),
  kCFFileSecurityClearGroup(2),
  kCFFileSecurityClearMode(4),
  kCFFileSecurityClearOwnerUUID(8),
  kCFFileSecurityClearGroupUUID(16),
  kCFFileSecurityClearAccessControlList(32);

  final int value;
  const CFFileSecurityClearOptions(this.value);

  static CFFileSecurityClearOptions fromValue(int value) => switch (value) {
        1 => kCFFileSecurityClearOwner,
        2 => kCFFileSecurityClearGroup,
        4 => kCFFileSecurityClearMode,
        8 => kCFFileSecurityClearOwnerUUID,
        16 => kCFFileSecurityClearGroupUUID,
        32 => kCFFileSecurityClearAccessControlList,
        _ => throw ArgumentError(
            "Unknown value for CFFileSecurityClearOptions: $value"),
      };
}

final class __CFStringTokenizer extends ffi.Opaque {}

enum CFStringTokenizerTokenType {
  kCFStringTokenizerTokenNone(0),
  kCFStringTokenizerTokenNormal(1),
  kCFStringTokenizerTokenHasSubTokensMask(2),
  kCFStringTokenizerTokenHasDerivedSubTokensMask(4),
  kCFStringTokenizerTokenHasHasNumbersMask(8),
  kCFStringTokenizerTokenHasNonLettersMask(16),
  kCFStringTokenizerTokenIsCJWordMask(32);

  final int value;
  const CFStringTokenizerTokenType(this.value);

  static CFStringTokenizerTokenType fromValue(int value) => switch (value) {
        0 => kCFStringTokenizerTokenNone,
        1 => kCFStringTokenizerTokenNormal,
        2 => kCFStringTokenizerTokenHasSubTokensMask,
        4 => kCFStringTokenizerTokenHasDerivedSubTokensMask,
        8 => kCFStringTokenizerTokenHasHasNumbersMask,
        16 => kCFStringTokenizerTokenHasNonLettersMask,
        32 => kCFStringTokenizerTokenIsCJWordMask,
        _ => throw ArgumentError(
            "Unknown value for CFStringTokenizerTokenType: $value"),
      };
}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;

final class __CFFileDescriptor extends ffi.Opaque {}

final class CFFileDescriptorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFFileDescriptorRef = ffi.Pointer<__CFFileDescriptor>;
typedef CFFileDescriptorNativeDescriptor = ffi.Int;
typedef DartCFFileDescriptorNativeDescriptor = int;
typedef CFFileDescriptorCallBack
    = ffi.Pointer<ffi.NativeFunction<CFFileDescriptorCallBackFunction>>;
typedef CFFileDescriptorCallBackFunction = ffi.Void Function(
    CFFileDescriptorRef f,
    CFOptionFlags callBackTypes,
    ffi.Pointer<ffi.Void> info);
typedef DartCFFileDescriptorCallBackFunction = void Function(
    CFFileDescriptorRef f,
    DartCFOptionFlags callBackTypes,
    ffi.Pointer<ffi.Void> info);

final class __CFUserNotification extends ffi.Opaque {}

typedef CFUserNotificationRef = ffi.Pointer<__CFUserNotification>;
typedef CFUserNotificationCallBack
    = ffi.Pointer<ffi.NativeFunction<CFUserNotificationCallBackFunction>>;
typedef CFUserNotificationCallBackFunction = ffi.Void Function(
    CFUserNotificationRef userNotification, CFOptionFlags responseFlags);
typedef DartCFUserNotificationCallBackFunction = void Function(
    CFUserNotificationRef userNotification, DartCFOptionFlags responseFlags);

final class __CFXMLNode extends ffi.Opaque {}

enum CFXMLNodeTypeCode {
  kCFXMLNodeTypeDocument(1),
  kCFXMLNodeTypeElement(2),
  kCFXMLNodeTypeAttribute(3),
  kCFXMLNodeTypeProcessingInstruction(4),
  kCFXMLNodeTypeComment(5),
  kCFXMLNodeTypeText(6),
  kCFXMLNodeTypeCDATASection(7),
  kCFXMLNodeTypeDocumentFragment(8),
  kCFXMLNodeTypeEntity(9),
  kCFXMLNodeTypeEntityReference(10),
  kCFXMLNodeTypeDocumentType(11),
  kCFXMLNodeTypeWhitespace(12),
  kCFXMLNodeTypeNotation(13),
  kCFXMLNodeTypeElementTypeDeclaration(14),
  kCFXMLNodeTypeAttributeListDeclaration(15);

  final int value;
  const CFXMLNodeTypeCode(this.value);

  static CFXMLNodeTypeCode fromValue(int value) => switch (value) {
        1 => kCFXMLNodeTypeDocument,
        2 => kCFXMLNodeTypeElement,
        3 => kCFXMLNodeTypeAttribute,
        4 => kCFXMLNodeTypeProcessingInstruction,
        5 => kCFXMLNodeTypeComment,
        6 => kCFXMLNodeTypeText,
        7 => kCFXMLNodeTypeCDATASection,
        8 => kCFXMLNodeTypeDocumentFragment,
        9 => kCFXMLNodeTypeEntity,
        10 => kCFXMLNodeTypeEntityReference,
        11 => kCFXMLNodeTypeDocumentType,
        12 => kCFXMLNodeTypeWhitespace,
        13 => kCFXMLNodeTypeNotation,
        14 => kCFXMLNodeTypeElementTypeDeclaration,
        15 => kCFXMLNodeTypeAttributeListDeclaration,
        _ => throw ArgumentError("Unknown value for CFXMLNodeTypeCode: $value"),
      };
}

final class CFXMLElementInfo extends ffi.Struct {
  external CFDictionaryRef attributes;

  external CFArrayRef attributeOrder;

  @Boolean()
  external int isEmpty;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Char> _reserved;
}

final class CFXMLProcessingInstructionInfo extends ffi.Struct {
  external CFStringRef dataString;
}

final class CFXMLDocumentInfo extends ffi.Struct {
  external CFURLRef sourceURL;

  @CFStringEncoding()
  external int encoding;
}

final class CFXMLExternalID extends ffi.Struct {
  external CFURLRef systemID;

  external CFStringRef publicID;
}

final class CFXMLDocumentTypeInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

final class CFXMLNotationInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

final class CFXMLElementTypeDeclarationInfo extends ffi.Struct {
  external CFStringRef contentDescription;
}

final class CFXMLAttributeDeclarationInfo extends ffi.Struct {
  external CFStringRef attributeName;

  external CFStringRef typeString;

  external CFStringRef defaultString;
}

final class CFXMLAttributeListDeclarationInfo extends ffi.Struct {
  @CFIndex()
  external int numberOfAttributes;

  external ffi.Pointer<CFXMLAttributeDeclarationInfo> attributes;
}

enum CFXMLEntityTypeCode {
  kCFXMLEntityTypeParameter(0),
  kCFXMLEntityTypeParsedInternal(1),
  kCFXMLEntityTypeParsedExternal(2),
  kCFXMLEntityTypeUnparsed(3),
  kCFXMLEntityTypeCharacter(4);

  final int value;
  const CFXMLEntityTypeCode(this.value);

  static CFXMLEntityTypeCode fromValue(int value) => switch (value) {
        0 => kCFXMLEntityTypeParameter,
        1 => kCFXMLEntityTypeParsedInternal,
        2 => kCFXMLEntityTypeParsedExternal,
        3 => kCFXMLEntityTypeUnparsed,
        4 => kCFXMLEntityTypeCharacter,
        _ =>
          throw ArgumentError("Unknown value for CFXMLEntityTypeCode: $value"),
      };
}

final class CFXMLEntityInfo extends ffi.Struct {
  @CFIndex()
  external int entityType;

  external CFStringRef replacementText;

  external CFXMLExternalID entityID;

  external CFStringRef notationName;
}

final class CFXMLEntityReferenceInfo extends ffi.Struct {
  @CFIndex()
  external int entityType;
}

typedef CFXMLNodeRef = ffi.Pointer<__CFXMLNode>;
typedef CFXMLTreeRef = CFTreeRef;

final class __CFXMLParser extends ffi.Opaque {}

enum CFXMLParserOptions {
  kCFXMLParserValidateDocument(1),
  kCFXMLParserSkipMetaData(2),
  kCFXMLParserReplacePhysicalEntities(4),
  kCFXMLParserSkipWhitespace(8),
  kCFXMLParserResolveExternalEntities(16),
  kCFXMLParserAddImpliedAttributes(32),
  kCFXMLParserAllOptions(16777215),
  kCFXMLParserNoOptions(0);

  final int value;
  const CFXMLParserOptions(this.value);

  static CFXMLParserOptions fromValue(int value) => switch (value) {
        1 => kCFXMLParserValidateDocument,
        2 => kCFXMLParserSkipMetaData,
        4 => kCFXMLParserReplacePhysicalEntities,
        8 => kCFXMLParserSkipWhitespace,
        16 => kCFXMLParserResolveExternalEntities,
        32 => kCFXMLParserAddImpliedAttributes,
        16777215 => kCFXMLParserAllOptions,
        0 => kCFXMLParserNoOptions,
        _ =>
          throw ArgumentError("Unknown value for CFXMLParserOptions: $value"),
      };
}

enum CFXMLParserStatusCode {
  kCFXMLStatusParseNotBegun(-2),
  kCFXMLStatusParseInProgress(-1),
  kCFXMLStatusParseSuccessful(0),
  kCFXMLErrorUnexpectedEOF(1),
  kCFXMLErrorUnknownEncoding(2),
  kCFXMLErrorEncodingConversionFailure(3),
  kCFXMLErrorMalformedProcessingInstruction(4),
  kCFXMLErrorMalformedDTD(5),
  kCFXMLErrorMalformedName(6),
  kCFXMLErrorMalformedCDSect(7),
  kCFXMLErrorMalformedCloseTag(8),
  kCFXMLErrorMalformedStartTag(9),
  kCFXMLErrorMalformedDocument(10),
  kCFXMLErrorElementlessDocument(11),
  kCFXMLErrorMalformedComment(12),
  kCFXMLErrorMalformedCharacterReference(13),
  kCFXMLErrorMalformedParsedCharacterData(14),
  kCFXMLErrorNoData(15);

  final int value;
  const CFXMLParserStatusCode(this.value);

  static CFXMLParserStatusCode fromValue(int value) => switch (value) {
        -2 => kCFXMLStatusParseNotBegun,
        -1 => kCFXMLStatusParseInProgress,
        0 => kCFXMLStatusParseSuccessful,
        1 => kCFXMLErrorUnexpectedEOF,
        2 => kCFXMLErrorUnknownEncoding,
        3 => kCFXMLErrorEncodingConversionFailure,
        4 => kCFXMLErrorMalformedProcessingInstruction,
        5 => kCFXMLErrorMalformedDTD,
        6 => kCFXMLErrorMalformedName,
        7 => kCFXMLErrorMalformedCDSect,
        8 => kCFXMLErrorMalformedCloseTag,
        9 => kCFXMLErrorMalformedStartTag,
        10 => kCFXMLErrorMalformedDocument,
        11 => kCFXMLErrorElementlessDocument,
        12 => kCFXMLErrorMalformedComment,
        13 => kCFXMLErrorMalformedCharacterReference,
        14 => kCFXMLErrorMalformedParsedCharacterData,
        15 => kCFXMLErrorNoData,
        _ => throw ArgumentError(
            "Unknown value for CFXMLParserStatusCode: $value"),
      };
}

final class CFXMLParserCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFXMLParserCreateXMLStructureCallBack createXMLStructure;

  external CFXMLParserAddChildCallBack addChild;

  external CFXMLParserEndXMLStructureCallBack endXMLStructure;

  external CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;

  external CFXMLParserHandleErrorCallBack handleError;
}

typedef CFXMLParserCreateXMLStructureCallBack = ffi
    .Pointer<ffi.NativeFunction<CFXMLParserCreateXMLStructureCallBackFunction>>;
typedef CFXMLParserCreateXMLStructureCallBackFunction
    = ffi.Pointer<ffi.Void> Function(CFXMLParserRef parser,
        CFXMLNodeRef nodeDesc, ffi.Pointer<ffi.Void> info);
typedef CFXMLParserRef = ffi.Pointer<__CFXMLParser>;
typedef CFXMLParserAddChildCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserAddChildCallBackFunction>>;
typedef CFXMLParserAddChildCallBackFunction = ffi.Void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> parent,
    ffi.Pointer<ffi.Void> child,
    ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserAddChildCallBackFunction = void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> parent,
    ffi.Pointer<ffi.Void> child,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserEndXMLStructureCallBack = ffi
    .Pointer<ffi.NativeFunction<CFXMLParserEndXMLStructureCallBackFunction>>;
typedef CFXMLParserEndXMLStructureCallBackFunction = ffi.Void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> xmlType,
    ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserEndXMLStructureCallBackFunction = void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> xmlType,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserResolveExternalEntityCallBack = ffi.Pointer<
    ffi.NativeFunction<CFXMLParserResolveExternalEntityCallBackFunction>>;
typedef CFXMLParserResolveExternalEntityCallBackFunction = CFDataRef Function(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLExternalID> extID,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserHandleErrorCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserHandleErrorCallBackFunction>>;
typedef CFXMLParserHandleErrorCallBackFunction = Boolean Function(
    CFXMLParserRef parser, CFIndex error, ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserHandleErrorCallBackFunction = DartBoolean Function(
    CFXMLParserRef parser,
    CFXMLParserStatusCode error,
    ffi.Pointer<ffi.Void> info);

final class CFXMLParserContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFXMLParserRetainCallBack retain;

  external CFXMLParserReleaseCallBack release;

  external CFXMLParserCopyDescriptionCallBack copyDescription;
}

typedef CFXMLParserRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserRetainCallBackFunction>>;
typedef CFXMLParserRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserReleaseCallBackFunction>>;
typedef CFXMLParserReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFXMLParserCopyDescriptionCallBackFunction>>;
typedef CFXMLParserCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);

final class cssm_data extends ffi.Struct {
  @ffi.Size()
  external int Length;

  external ffi.Pointer<ffi.Uint8> Data;
}

final class SecAsn1AlgId extends ffi.Struct {
  external SecAsn1Oid algorithm;

  external SecAsn1Item parameters;
}

typedef SecAsn1Oid = cssm_data;
typedef SecAsn1Item = cssm_data;

final class SecAsn1PubKeyInfo extends ffi.Struct {
  external SecAsn1AlgId algorithm;

  external SecAsn1Item subjectPublicKey;
}

final class SecAsn1Template_struct extends ffi.Struct {
  @ffi.Uint32()
  external int kind;

  @ffi.Uint32()
  external int offset;

  external ffi.Pointer<ffi.Void> sub;

  @ffi.Uint32()
  external int size;
}

final class cssm_guid extends ffi.Struct {
  @uint32()
  external int Data1;

  @uint16()
  external int Data2;

  @uint16()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<uint8> Data4;
}

typedef uint32 = ffi.Uint32;
typedef Dartuint32 = int;
typedef uint16 = ffi.Uint16;
typedef Dartuint16 = int;
typedef uint8 = ffi.Uint8;
typedef Dartuint8 = int;

final class cssm_version extends ffi.Struct {
  @uint32()
  external int Major;

  @uint32()
  external int Minor;
}

final class cssm_subservice_uid extends ffi.Struct {
  external CSSM_GUID Guid;

  external CSSM_VERSION Version;

  @uint32()
  external int SubserviceId;

  @CSSM_SERVICE_TYPE()
  external int SubserviceType;
}

typedef CSSM_GUID = cssm_guid;
typedef CSSM_VERSION = cssm_version;
typedef CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
typedef CSSM_SERVICE_MASK = uint32;

final class cssm_net_address extends ffi.Struct {
  @CSSM_NET_ADDRESS_TYPE()
  external int AddressType;

  external SecAsn1Item Address;
}

typedef CSSM_NET_ADDRESS_TYPE = uint32;

final class cssm_crypto_data extends ffi.Struct {
  external SecAsn1Item Param;

  external CSSM_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_CALLBACK = ffi.Pointer<ffi.NativeFunction<CSSM_CALLBACKFunction>>;
typedef CSSM_CALLBACKFunction = CSSM_RETURN Function(
    CSSM_DATA_PTR OutData, ffi.Pointer<ffi.Void> CallerCtx);
typedef DartCSSM_CALLBACKFunction = Dartsint32 Function(
    CSSM_DATA_PTR OutData, ffi.Pointer<ffi.Void> CallerCtx);
typedef CSSM_RETURN = sint32;
typedef sint32 = ffi.Int32;
typedef Dartsint32 = int;
typedef CSSM_DATA_PTR = ffi.Pointer<SecAsn1Item>;

final class cssm_list_element extends ffi.Struct {
  external ffi.Pointer<cssm_list_element> NextElement;

  @CSSM_WORDID_TYPE()
  external int WordID;

  @CSSM_LIST_ELEMENT_TYPE()
  external int ElementType;

  external UnnamedUnion2 Element;
}

typedef CSSM_WORDID_TYPE = sint32;
typedef CSSM_LIST_ELEMENT_TYPE = uint32;

final class UnnamedUnion2 extends ffi.Union {
  external CSSM_LIST Sublist;

  external SecAsn1Item Word;
}

typedef CSSM_LIST = cssm_list;

final class cssm_list extends ffi.Struct {
  @CSSM_LIST_TYPE()
  external int ListType;

  external CSSM_LIST_ELEMENT_PTR Head;

  external CSSM_LIST_ELEMENT_PTR Tail;
}

typedef CSSM_LIST_TYPE = uint32;
typedef CSSM_LIST_ELEMENT_PTR = ffi.Pointer<cssm_list_element>;

final class CSSM_TUPLE extends ffi.Struct {
  external CSSM_LIST Issuer;

  external CSSM_LIST Subject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_LIST AuthorizationTag;

  external CSSM_LIST ValidityPeriod;
}

typedef CSSM_BOOL = sint32;

final class cssm_tuplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfTuples;

  external CSSM_TUPLE_PTR Tuples;
}

typedef CSSM_TUPLE_PTR = ffi.Pointer<CSSM_TUPLE>;

final class cssm_sample extends ffi.Struct {
  external CSSM_LIST TypedSample;

  external ffi.Pointer<CSSM_SUBSERVICE_UID> Verifier;
}

typedef CSSM_SUBSERVICE_UID = cssm_subservice_uid;

final class cssm_samplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfSamples;

  external ffi.Pointer<CSSM_SAMPLE> Samples;
}

typedef CSSM_SAMPLE = cssm_sample;

final class cssm_memory_funcs extends ffi.Struct {
  external CSSM_MALLOC malloc_func;

  external CSSM_FREE free_func;

  external CSSM_REALLOC realloc_func;

  external CSSM_CALLOC calloc_func;

  external ffi.Pointer<ffi.Void> AllocRef;
}

typedef CSSM_MALLOC = ffi.Pointer<ffi.NativeFunction<CSSM_MALLOCFunction>>;
typedef CSSM_MALLOCFunction = ffi.Pointer<ffi.Void> Function(
    CSSM_SIZE size, ffi.Pointer<ffi.Void> allocref);
typedef DartCSSM_MALLOCFunction = ffi.Pointer<ffi.Void> Function(
    DartCSSM_SIZE size, ffi.Pointer<ffi.Void> allocref);
typedef CSSM_SIZE = ffi.Size;
typedef DartCSSM_SIZE = int;
typedef CSSM_FREE = ffi.Pointer<ffi.NativeFunction<CSSM_FREEFunction>>;
typedef CSSM_FREEFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> memblock, ffi.Pointer<ffi.Void> allocref);
typedef DartCSSM_FREEFunction = void Function(
    ffi.Pointer<ffi.Void> memblock, ffi.Pointer<ffi.Void> allocref);
typedef CSSM_REALLOC = ffi.Pointer<ffi.NativeFunction<CSSM_REALLOCFunction>>;
typedef CSSM_REALLOCFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> memblock,
    CSSM_SIZE size,
    ffi.Pointer<ffi.Void> allocref);
typedef DartCSSM_REALLOCFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> memblock,
    DartCSSM_SIZE size,
    ffi.Pointer<ffi.Void> allocref);
typedef CSSM_CALLOC = ffi.Pointer<ffi.NativeFunction<CSSM_CALLOCFunction>>;
typedef CSSM_CALLOCFunction = ffi.Pointer<ffi.Void> Function(
    uint32 num, CSSM_SIZE size, ffi.Pointer<ffi.Void> allocref);
typedef DartCSSM_CALLOCFunction = ffi.Pointer<ffi.Void> Function(
    Dartuint32 num, DartCSSM_SIZE size, ffi.Pointer<ffi.Void> allocref);

final class cssm_encoded_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  external SecAsn1Item CertBlob;
}

typedef CSSM_CERT_TYPE = uint32;
typedef CSSM_CERT_ENCODING = uint32;

final class cssm_parsed_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_PARSE_FORMAT()
  external int ParsedCertFormat;

  external ffi.Pointer<ffi.Void> ParsedCert;
}

typedef CSSM_CERT_PARSE_FORMAT = uint32;

final class cssm_cert_pair extends ffi.Struct {
  external CSSM_ENCODED_CERT EncodedCert;

  external CSSM_PARSED_CERT ParsedCert;
}

typedef CSSM_ENCODED_CERT = cssm_encoded_cert;
typedef CSSM_PARSED_CERT = cssm_parsed_cert;

final class cssm_certgroup extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  @uint32()
  external int NumCerts;

  external UnnamedUnion3 GroupList;

  @CSSM_CERTGROUP_TYPE()
  external int CertGroupType;

  external ffi.Pointer<ffi.Void> Reserved;
}

final class UnnamedUnion3 extends ffi.Union {
  external CSSM_DATA_PTR CertList;

  external CSSM_ENCODED_CERT_PTR EncodedCertList;

  external CSSM_PARSED_CERT_PTR ParsedCertList;

  external CSSM_CERT_PAIR_PTR PairCertList;
}

typedef CSSM_ENCODED_CERT_PTR = ffi.Pointer<cssm_encoded_cert>;
typedef CSSM_PARSED_CERT_PTR = ffi.Pointer<cssm_parsed_cert>;
typedef CSSM_CERT_PAIR_PTR = ffi.Pointer<cssm_cert_pair>;
typedef CSSM_CERTGROUP_TYPE = uint32;

final class cssm_base_certs extends ffi.Struct {
  @CSSM_TP_HANDLE()
  external int TPHandle;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_CERTGROUP Certs;
}

typedef CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_MODULE_HANDLE = CSSM_HANDLE;
typedef CSSM_HANDLE = CSSM_INTPTR;
typedef CSSM_INTPTR = ffi.IntPtr;
typedef DartCSSM_INTPTR = int;
typedef CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_CERTGROUP = cssm_certgroup;

final class cssm_access_credentials extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<ffi.Char> EntryTag;

  external CSSM_BASE_CERTS BaseCerts;

  external CSSM_SAMPLEGROUP Samples;

  external CSSM_CHALLENGE_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_BASE_CERTS = cssm_base_certs;
typedef CSSM_SAMPLEGROUP = cssm_samplegroup;
typedef CSSM_CHALLENGE_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<CSSM_CHALLENGE_CALLBACKFunction>>;
typedef CSSM_CHALLENGE_CALLBACKFunction = CSSM_RETURN Function(
    ffi.Pointer<CSSM_LIST> Challenge,
    CSSM_SAMPLEGROUP_PTR Response,
    ffi.Pointer<ffi.Void> CallerCtx,
    ffi.Pointer<CSSM_MEMORY_FUNCS> MemFuncs);
typedef DartCSSM_CHALLENGE_CALLBACKFunction = Dartsint32 Function(
    ffi.Pointer<CSSM_LIST> Challenge,
    CSSM_SAMPLEGROUP_PTR Response,
    ffi.Pointer<ffi.Void> CallerCtx,
    ffi.Pointer<CSSM_MEMORY_FUNCS> MemFuncs);
typedef CSSM_SAMPLEGROUP_PTR = ffi.Pointer<cssm_samplegroup>;
typedef CSSM_MEMORY_FUNCS = cssm_memory_funcs;

final class cssm_authorizationgroup extends ffi.Struct {
  @uint32()
  external int NumberOfAuthTags;

  external ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> AuthTags;
}

typedef CSSM_ACL_AUTHORIZATION_TAG = sint32;

final class cssm_acl_validity_period extends ffi.Struct {
  external SecAsn1Item StartDate;

  external SecAsn1Item EndDate;
}

final class cssm_acl_entry_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_AUTHORIZATIONGROUP Authorization;

  external CSSM_ACL_VALIDITY_PERIOD TimeRange;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Char> EntryTag;
}

typedef CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;
typedef CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;

final class cssm_acl_owner_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;
}

final class cssm_acl_entry_input extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE Prototype;

  external CSSM_ACL_SUBJECT_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerContext;
}

typedef CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;
typedef CSSM_ACL_SUBJECT_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<CSSM_ACL_SUBJECT_CALLBACKFunction>>;
typedef CSSM_ACL_SUBJECT_CALLBACKFunction = CSSM_RETURN Function(
    ffi.Pointer<CSSM_LIST> SubjectRequest,
    CSSM_LIST_PTR SubjectResponse,
    ffi.Pointer<ffi.Void> CallerContext,
    ffi.Pointer<CSSM_MEMORY_FUNCS> MemFuncs);
typedef DartCSSM_ACL_SUBJECT_CALLBACKFunction = Dartsint32 Function(
    ffi.Pointer<CSSM_LIST> SubjectRequest,
    CSSM_LIST_PTR SubjectResponse,
    ffi.Pointer<ffi.Void> CallerContext,
    ffi.Pointer<CSSM_MEMORY_FUNCS> MemFuncs);
typedef CSSM_LIST_PTR = ffi.Pointer<cssm_list>;

final class cssm_resource_control_context extends ffi.Struct {
  external CSSM_ACCESS_CREDENTIALS_PTR AccessCred;

  external CSSM_ACL_ENTRY_INPUT InitialAclEntry;
}

typedef CSSM_ACCESS_CREDENTIALS_PTR = ffi.Pointer<cssm_access_credentials>;
typedef CSSM_ACL_ENTRY_INPUT = cssm_acl_entry_input;

final class cssm_acl_entry_info extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE EntryPublicInfo;

  @CSSM_ACL_HANDLE()
  external int EntryHandle;
}

typedef CSSM_ACL_HANDLE = CSSM_HANDLE;

final class cssm_acl_edit extends ffi.Struct {
  @CSSM_ACL_EDIT_MODE()
  external int EditMode;

  @CSSM_ACL_HANDLE()
  external int OldEntryHandle;

  external ffi.Pointer<CSSM_ACL_ENTRY_INPUT> NewEntry;
}

typedef CSSM_ACL_EDIT_MODE = uint32;

final class cssm_func_name_addr extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<ffi.Char> Name;

  external CSSM_PROC_ADDR Address;
}

typedef CSSM_PROC_ADDR
    = ffi.Pointer<ffi.NativeFunction<CSSM_PROC_ADDRFunction>>;
typedef CSSM_PROC_ADDRFunction = ffi.Void Function();
typedef DartCSSM_PROC_ADDRFunction = void Function();

final class cssm_date extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<uint8> Year;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Month;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Day;
}

final class cssm_range extends ffi.Struct {
  @uint32()
  external int Min;

  @uint32()
  external int Max;
}

final class cssm_query_size_data extends ffi.Struct {
  @uint32()
  external int SizeInputBlock;

  @uint32()
  external int SizeOutputBlock;
}

final class cssm_key_size extends ffi.Struct {
  @uint32()
  external int LogicalKeySizeInBits;

  @uint32()
  external int EffectiveKeySizeInBits;
}

final class cssm_keyheader extends ffi.Struct {
  @CSSM_HEADERVERSION()
  external int HeaderVersion;

  external CSSM_GUID CspId;

  @CSSM_KEYBLOB_TYPE()
  external int BlobType;

  @CSSM_KEYBLOB_FORMAT()
  external int Format;

  @CSSM_ALGORITHMS()
  external int AlgorithmId;

  @CSSM_KEYCLASS()
  external int KeyClass;

  @uint32()
  external int LogicalKeySizeInBits;

  @CSSM_KEYATTR_FLAGS()
  external int KeyAttr;

  @CSSM_KEYUSE()
  external int KeyUsage;

  external CSSM_DATE StartDate;

  external CSSM_DATE EndDate;

  @CSSM_ALGORITHMS()
  external int WrapAlgorithmId;

  @CSSM_ENCRYPT_MODE()
  external int WrapMode;

  @uint32()
  external int Reserved;
}

typedef CSSM_HEADERVERSION = uint32;
typedef CSSM_KEYBLOB_TYPE = uint32;
typedef CSSM_KEYBLOB_FORMAT = uint32;
typedef CSSM_ALGORITHMS = uint32;
typedef CSSM_KEYCLASS = uint32;
typedef CSSM_KEYATTR_FLAGS = uint32;
typedef CSSM_KEYUSE = uint32;
typedef CSSM_DATE = cssm_date;
typedef CSSM_ENCRYPT_MODE = uint32;

final class cssm_key extends ffi.Struct {
  external CSSM_KEYHEADER KeyHeader;

  external SecAsn1Item KeyData;
}

typedef CSSM_KEYHEADER = cssm_keyheader;

final class cssm_dl_db_handle extends ffi.Struct {
  @CSSM_DL_HANDLE()
  external int DLHandle;

  @CSSM_DB_HANDLE()
  external int DBHandle;
}

typedef CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;

final class cssm_context_attribute extends ffi.Struct {
  @CSSM_ATTRIBUTE_TYPE()
  external int AttributeType;

  @uint32()
  external int AttributeLength;

  external cssm_context_attribute_value Attribute;
}

typedef CSSM_ATTRIBUTE_TYPE = uint32;

final class cssm_context_attribute_value extends ffi.Union {
  external ffi.Pointer<ffi.Char> String;

  @uint32()
  external int Uint32;

  external CSSM_ACCESS_CREDENTIALS_PTR AccessCredentials;

  external CSSM_KEY_PTR Key;

  external CSSM_DATA_PTR Data;

  @CSSM_PADDING()
  external int Padding;

  external CSSM_DATE_PTR Date;

  external CSSM_RANGE_PTR Range;

  external CSSM_CRYPTO_DATA_PTR CryptoData;

  external CSSM_VERSION_PTR Version;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;

  external ffi.Pointer<cssm_kr_profile> KRProfile;
}

typedef CSSM_KEY_PTR = ffi.Pointer<cssm_key>;
typedef CSSM_PADDING = uint32;
typedef CSSM_DATE_PTR = ffi.Pointer<cssm_date>;
typedef CSSM_RANGE_PTR = ffi.Pointer<cssm_range>;
typedef CSSM_CRYPTO_DATA_PTR = ffi.Pointer<cssm_crypto_data>;
typedef CSSM_VERSION_PTR = ffi.Pointer<cssm_version>;
typedef CSSM_DL_DB_HANDLE_PTR = ffi.Pointer<cssm_dl_db_handle>;

final class cssm_kr_profile extends ffi.Opaque {}

final class cssm_context extends ffi.Struct {
  @CSSM_CONTEXT_TYPE()
  external int ContextType;

  @CSSM_ALGORITHMS()
  external int AlgorithmType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_CONTEXT_ATTRIBUTE_PTR ContextAttributes;

  @CSSM_CSP_HANDLE()
  external int CSPHandle;

  @CSSM_BOOL()
  external int Privileged;

  @uint32()
  external int EncryptionProhibited;

  @uint32()
  external int WorkFactor;

  @uint32()
  external int Reserved;
}

typedef CSSM_CONTEXT_TYPE = uint32;
typedef CSSM_CONTEXT_ATTRIBUTE_PTR = ffi.Pointer<cssm_context_attribute>;
typedef CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

final class cssm_pkcs1_oaep_params extends ffi.Struct {
  @uint32()
  external int HashAlgorithm;

  external SecAsn1Item HashParams;

  @CSSM_PKCS_OAEP_MGF()
  external int MGF;

  external SecAsn1Item MGFParams;

  @CSSM_PKCS_OAEP_PSOURCE()
  external int PSource;

  external SecAsn1Item PSourceParams;
}

typedef CSSM_PKCS_OAEP_MGF = uint32;
typedef CSSM_PKCS_OAEP_PSOURCE = uint32;

final class cssm_csp_operational_statistics extends ffi.Struct {
  @CSSM_BOOL()
  external int UserAuthenticated;

  @CSSM_CSP_FLAGS()
  external int DeviceFlags;

  @uint32()
  external int TokenMaxSessionCount;

  @uint32()
  external int TokenOpenedSessionCount;

  @uint32()
  external int TokenMaxRWSessionCount;

  @uint32()
  external int TokenOpenedRWSessionCount;

  @uint32()
  external int TokenTotalPublicMem;

  @uint32()
  external int TokenFreePublicMem;

  @uint32()
  external int TokenTotalPrivateMem;

  @uint32()
  external int TokenFreePrivateMem;
}

typedef CSSM_CSP_FLAGS = uint32;

final class cssm_pkcs5_pbkdf1_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  external SecAsn1Item InitVector;
}

final class cssm_pkcs5_pbkdf2_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  @CSSM_PKCS5_PBKDF2_PRF()
  external int PseudoRandomFunction;
}

typedef CSSM_PKCS5_PBKDF2_PRF = uint32;

final class cssm_kea_derive_params extends ffi.Struct {
  external SecAsn1Item Rb;

  external SecAsn1Item Yb;
}

final class cssm_tp_authority_id extends ffi.Struct {
  external ffi.Pointer<SecAsn1Item> AuthorityCert;

  external CSSM_NET_ADDRESS_PTR AuthorityLocation;
}

typedef CSSM_NET_ADDRESS_PTR = ffi.Pointer<cssm_net_address>;

final class cssm_field extends ffi.Struct {
  external SecAsn1Oid FieldOid;

  external SecAsn1Item FieldValue;
}

final class cssm_tp_policyinfo extends ffi.Struct {
  @uint32()
  external int NumberOfPolicyIds;

  external CSSM_FIELD_PTR PolicyIds;

  external ffi.Pointer<ffi.Void> PolicyControl;
}

typedef CSSM_FIELD_PTR = ffi.Pointer<cssm_field>;

final class cssm_dl_db_list extends ffi.Struct {
  @uint32()
  external int NumHandles;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;
}

final class cssm_tp_callerauth_context extends ffi.Struct {
  external CSSM_TP_POLICYINFO Policy;

  external CSSM_TIMESTRING VerifyTime;

  @CSSM_TP_STOP_ON()
  external int VerificationAbortOn;

  external CSSM_TP_VERIFICATION_RESULTS_CALLBACK CallbackWithVerifiedCert;

  @uint32()
  external int NumberOfAnchorCerts;

  external CSSM_DATA_PTR AnchorCerts;

  external CSSM_DL_DB_LIST_PTR DBList;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_POLICYINFO = cssm_tp_policyinfo;
typedef CSSM_TIMESTRING = ffi.Pointer<ffi.Char>;
typedef CSSM_TP_STOP_ON = uint32;
typedef CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ffi
    .Pointer<ffi.NativeFunction<CSSM_TP_VERIFICATION_RESULTS_CALLBACKFunction>>;
typedef CSSM_TP_VERIFICATION_RESULTS_CALLBACKFunction = CSSM_RETURN Function(
    CSSM_MODULE_HANDLE ModuleHandle,
    ffi.Pointer<ffi.Void> CallerCtx,
    CSSM_DATA_PTR VerifiedCert);
typedef DartCSSM_TP_VERIFICATION_RESULTS_CALLBACKFunction = Dartsint32 Function(
    DartCSSM_INTPTR ModuleHandle,
    ffi.Pointer<ffi.Void> CallerCtx,
    CSSM_DATA_PTR VerifiedCert);
typedef CSSM_DL_DB_LIST_PTR = ffi.Pointer<cssm_dl_db_list>;

final class cssm_encoded_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  external SecAsn1Item CrlBlob;
}

typedef CSSM_CRL_TYPE = uint32;
typedef CSSM_CRL_ENCODING = uint32;

final class cssm_parsed_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_PARSE_FORMAT()
  external int ParsedCrlFormat;

  external ffi.Pointer<ffi.Void> ParsedCrl;
}

typedef CSSM_CRL_PARSE_FORMAT = uint32;

final class cssm_crl_pair extends ffi.Struct {
  external CSSM_ENCODED_CRL EncodedCrl;

  external CSSM_PARSED_CRL ParsedCrl;
}

typedef CSSM_ENCODED_CRL = cssm_encoded_crl;
typedef CSSM_PARSED_CRL = cssm_parsed_crl;

final class cssm_crlgroup extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  @uint32()
  external int NumberOfCrls;

  external UnnamedUnion4 GroupCrlList;

  @CSSM_CRLGROUP_TYPE()
  external int CrlGroupType;
}

final class UnnamedUnion4 extends ffi.Union {
  external CSSM_DATA_PTR CrlList;

  external CSSM_ENCODED_CRL_PTR EncodedCrlList;

  external CSSM_PARSED_CRL_PTR ParsedCrlList;

  external CSSM_CRL_PAIR_PTR PairCrlList;
}

typedef CSSM_ENCODED_CRL_PTR = ffi.Pointer<cssm_encoded_crl>;
typedef CSSM_PARSED_CRL_PTR = ffi.Pointer<cssm_parsed_crl>;
typedef CSSM_CRL_PAIR_PTR = ffi.Pointer<cssm_crl_pair>;
typedef CSSM_CRLGROUP_TYPE = uint32;

final class cssm_fieldgroup extends ffi.Struct {
  @ffi.Int()
  external int NumberOfFields;

  external CSSM_FIELD_PTR Fields;
}

final class cssm_evidence extends ffi.Struct {
  @CSSM_EVIDENCE_FORM()
  external int EvidenceForm;

  external ffi.Pointer<ffi.Void> Evidence;
}

typedef CSSM_EVIDENCE_FORM = uint32;

final class cssm_tp_verify_context extends ffi.Struct {
  @CSSM_TP_ACTION()
  external int Action;

  external SecAsn1Item ActionData;

  external CSSM_CRLGROUP Crls;

  external CSSM_TP_CALLERAUTH_CONTEXT_PTR Cred;
}

typedef CSSM_TP_ACTION = uint32;
typedef CSSM_CRLGROUP = cssm_crlgroup;
typedef CSSM_TP_CALLERAUTH_CONTEXT_PTR
    = ffi.Pointer<cssm_tp_callerauth_context>;

final class cssm_tp_verify_context_result extends ffi.Struct {
  @uint32()
  external int NumberOfEvidences;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_EVIDENCE_PTR = ffi.Pointer<cssm_evidence>;

final class cssm_tp_request_set extends ffi.Struct {
  @uint32()
  external int NumberOfRequests;

  external ffi.Pointer<ffi.Void> Requests;
}

final class cssm_tp_result_set extends ffi.Struct {
  @uint32()
  external int NumberOfResults;

  external ffi.Pointer<ffi.Void> Results;
}

final class cssm_tp_confirm_response extends ffi.Struct {
  @uint32()
  external int NumberOfResponses;

  external CSSM_TP_CONFIRM_STATUS_PTR Responses;
}

typedef CSSM_TP_CONFIRM_STATUS_PTR = ffi.Pointer<uint32>;

final class cssm_tp_certissue_input extends ffi.Struct {
  external CSSM_SUBSERVICE_UID CSPSubserviceUid;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfTemplateFields;

  external CSSM_FIELD_PTR SubjectCertFields;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

typedef CSSM_TP_SERVICES = uint32;

final class cssm_tp_certissue_output extends ffi.Struct {
  @CSSM_TP_CERTISSUE_STATUS()
  external int IssueStatus;

  external CSSM_CERTGROUP_PTR CertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTISSUE_STATUS = uint32;
typedef CSSM_CERTGROUP_PTR = ffi.Pointer<cssm_certgroup>;

final class cssm_tp_certchange_input extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_ACTION()
  external int Action;

  @CSSM_TP_CERTCHANGE_REASON()
  external int Reason;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_FIELD_PTR ChangeInfo;

  external CSSM_TIMESTRING StartTime;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_CERTCHANGE_ACTION = uint32;
typedef CSSM_TP_CERTCHANGE_REASON = uint32;

final class cssm_tp_certchange_output extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_STATUS()
  external int ActionStatus;

  external CSSM_FIELD RevokeInfo;
}

typedef CSSM_TP_CERTCHANGE_STATUS = uint32;
typedef CSSM_FIELD = cssm_field;

final class cssm_tp_certverify_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_TP_VERIFY_CONTEXT_PTR VerifyContext;
}

typedef CSSM_TP_VERIFY_CONTEXT_PTR = ffi.Pointer<cssm_tp_verify_context>;

final class cssm_tp_certverify_output extends ffi.Struct {
  @CSSM_TP_CERTVERIFY_STATUS()
  external int VerifyStatus;

  @uint32()
  external int NumberOfEvidence;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_TP_CERTVERIFY_STATUS = uint32;

final class cssm_tp_certnotarize_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfFields;

  external CSSM_FIELD_PTR MoreFields;

  external CSSM_FIELD_PTR SignScope;

  @uint32()
  external int ScopeSize;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

final class cssm_tp_certnotarize_output extends ffi.Struct {
  @CSSM_TP_CERTNOTARIZE_STATUS()
  external int NotarizeStatus;

  external CSSM_CERTGROUP_PTR NotarizedCertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTNOTARIZE_STATUS = uint32;

final class cssm_tp_certreclaim_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfSelectionFields;

  external CSSM_FIELD_PTR SelectionFields;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

final class cssm_tp_certreclaim_output extends ffi.Struct {
  @CSSM_TP_CERTRECLAIM_STATUS()
  external int ReclaimStatus;

  external CSSM_CERTGROUP_PTR ReclaimedCertGroup;

  @CSSM_LONG_HANDLE()
  external int KeyCacheHandle;
}

typedef CSSM_TP_CERTRECLAIM_STATUS = uint32;
typedef CSSM_LONG_HANDLE = uint64;
typedef uint64 = ffi.Uint64;
typedef Dartuint64 = int;

final class cssm_tp_crlissue_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int CrlIdentifier;

  external CSSM_TIMESTRING CrlThisTime;

  external CSSM_FIELD_PTR PolicyIdentifier;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

final class cssm_tp_crlissue_output extends ffi.Struct {
  @CSSM_TP_CRLISSUE_STATUS()
  external int IssueStatus;

  external CSSM_ENCODED_CRL_PTR Crl;

  external CSSM_TIMESTRING CrlNextTime;
}

typedef CSSM_TP_CRLISSUE_STATUS = uint32;

final class cssm_cert_bundle_header extends ffi.Struct {
  @CSSM_CERT_BUNDLE_TYPE()
  external int BundleType;

  @CSSM_CERT_BUNDLE_ENCODING()
  external int BundleEncoding;
}

typedef CSSM_CERT_BUNDLE_TYPE = uint32;
typedef CSSM_CERT_BUNDLE_ENCODING = uint32;

final class cssm_cert_bundle extends ffi.Struct {
  external CSSM_CERT_BUNDLE_HEADER BundleHeader;

  external SecAsn1Item Bundle;
}

typedef CSSM_CERT_BUNDLE_HEADER = cssm_cert_bundle_header;

final class cssm_db_attribute_info extends ffi.Struct {
  @CSSM_DB_ATTRIBUTE_NAME_FORMAT()
  external int AttributeNameFormat;

  external cssm_db_attribute_label Label;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int AttributeFormat;
}

typedef CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

final class cssm_db_attribute_label extends ffi.Union {
  external ffi.Pointer<ffi.Char> AttributeName;

  external SecAsn1Oid AttributeOID;

  @uint32()
  external int AttributeID;
}

typedef CSSM_DB_ATTRIBUTE_FORMAT = uint32;

final class cssm_db_attribute_data extends ffi.Struct {
  external CSSM_DB_ATTRIBUTE_INFO Info;

  @uint32()
  external int NumberOfValues;

  external CSSM_DATA_PTR Value;
}

typedef CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;

final class cssm_db_record_attribute_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_INFO_PTR AttributeInfo;
}

typedef CSSM_DB_RECORDTYPE = uint32;
typedef CSSM_DB_ATTRIBUTE_INFO_PTR = ffi.Pointer<cssm_db_attribute_info>;

final class cssm_db_record_attribute_data extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int SemanticInformation;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_DATA_PTR AttributeData;
}

typedef CSSM_DB_ATTRIBUTE_DATA_PTR = ffi.Pointer<cssm_db_attribute_data>;

final class cssm_db_parsing_module_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  external CSSM_SUBSERVICE_UID ModuleSubserviceUid;
}

final class cssm_db_index_info extends ffi.Struct {
  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;

  external CSSM_DB_ATTRIBUTE_INFO Info;
}

typedef CSSM_DB_INDEX_TYPE = uint32;
typedef CSSM_DB_INDEXED_DATA_LOCATION = uint32;

final class cssm_db_unique_record extends ffi.Struct {
  external CSSM_DB_INDEX_INFO RecordLocator;

  external SecAsn1Item RecordIdentifier;
}

typedef CSSM_DB_INDEX_INFO = cssm_db_index_info;

final class cssm_db_record_index_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfIndexes;

  external CSSM_DB_INDEX_INFO_PTR IndexInfo;
}

typedef CSSM_DB_INDEX_INFO_PTR = ffi.Pointer<cssm_db_index_info>;

final class cssm_dbinfo extends ffi.Struct {
  @uint32()
  external int NumberOfRecordTypes;

  external CSSM_DB_PARSING_MODULE_INFO_PTR DefaultParsingModules;

  external CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR RecordAttributeNames;

  external CSSM_DB_RECORD_INDEX_INFO_PTR RecordIndexes;

  @CSSM_BOOL()
  external int IsLocal;

  external ffi.Pointer<ffi.Char> AccessPath;

  external ffi.Pointer<ffi.Void> Reserved;
}

typedef CSSM_DB_PARSING_MODULE_INFO_PTR
    = ffi.Pointer<cssm_db_parsing_module_info>;
typedef CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR
    = ffi.Pointer<cssm_db_record_attribute_info>;
typedef CSSM_DB_RECORD_INDEX_INFO_PTR = ffi.Pointer<cssm_db_record_index_info>;

final class cssm_selection_predicate extends ffi.Struct {
  @CSSM_DB_OPERATOR()
  external int DbOperator;

  external CSSM_DB_ATTRIBUTE_DATA Attribute;
}

typedef CSSM_DB_OPERATOR = uint32;
typedef CSSM_DB_ATTRIBUTE_DATA = cssm_db_attribute_data;

final class cssm_query_limits extends ffi.Struct {
  @uint32()
  external int TimeLimit;

  @uint32()
  external int SizeLimit;
}

final class cssm_query extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  @CSSM_DB_CONJUNCTIVE()
  external int Conjunctive;

  @uint32()
  external int NumSelectionPredicates;

  external CSSM_SELECTION_PREDICATE_PTR SelectionPredicate;

  external CSSM_QUERY_LIMITS QueryLimits;

  @CSSM_QUERY_FLAGS()
  external int QueryFlags;
}

typedef CSSM_DB_CONJUNCTIVE = uint32;
typedef CSSM_SELECTION_PREDICATE_PTR = ffi.Pointer<cssm_selection_predicate>;
typedef CSSM_QUERY_LIMITS = cssm_query_limits;
typedef CSSM_QUERY_FLAGS = uint32;

final class cssm_dl_pkcs11_attributes extends ffi.Struct {
  @uint32()
  external int DeviceAccessFlags;
}

final class cssm_name_list extends ffi.Struct {
  @uint32()
  external int NumStrings;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> String;
}

final class cssm_db_schema_attribute_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  external ffi.Pointer<ffi.Char> AttributeName;

  external SecAsn1Oid AttributeNameID;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int DataType;
}

final class cssm_db_schema_index_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  @uint32()
  external int IndexId;

  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;
}

final class cssm_x509_type_value_pair extends ffi.Struct {
  external SecAsn1Oid type;

  @CSSM_BER_TAG()
  external int valueType;

  external SecAsn1Item value;
}

typedef CSSM_BER_TAG = uint8;

final class cssm_x509_rdn extends ffi.Struct {
  @uint32()
  external int numberOfPairs;

  external CSSM_X509_TYPE_VALUE_PAIR_PTR AttributeTypeAndValue;
}

typedef CSSM_X509_TYPE_VALUE_PAIR_PTR = ffi.Pointer<cssm_x509_type_value_pair>;

final class cssm_x509_name extends ffi.Struct {
  @uint32()
  external int numberOfRDNs;

  external CSSM_X509_RDN_PTR RelativeDistinguishedName;
}

typedef CSSM_X509_RDN_PTR = ffi.Pointer<cssm_x509_rdn>;

final class cssm_x509_time extends ffi.Struct {
  @CSSM_BER_TAG()
  external int timeType;

  external SecAsn1Item time;
}

final class x509_validity extends ffi.Struct {
  external CSSM_X509_TIME notBefore;

  external CSSM_X509_TIME notAfter;
}

typedef CSSM_X509_TIME = cssm_x509_time;

final class cssm_x509ext_basicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_X509_OPTION()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

typedef CSSM_X509_OPTION = CSSM_BOOL;

enum extension_data_format {
  CSSM_X509_DATAFORMAT_ENCODED(0),
  CSSM_X509_DATAFORMAT_PARSED(1),
  CSSM_X509_DATAFORMAT_PAIR(2);

  final int value;
  const extension_data_format(this.value);

  static extension_data_format fromValue(int value) => switch (value) {
        0 => CSSM_X509_DATAFORMAT_ENCODED,
        1 => CSSM_X509_DATAFORMAT_PARSED,
        2 => CSSM_X509_DATAFORMAT_PAIR,
        _ => throw ArgumentError(
            "Unknown value for extension_data_format: $value"),
      };
}

final class cssm_x509_extensionTagAndValue extends ffi.Struct {
  @CSSM_BER_TAG()
  external int type;

  external SecAsn1Item value;
}

final class cssm_x509ext_pair extends ffi.Struct {
  external CSSM_X509EXT_TAGandVALUE tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;
}

typedef CSSM_X509EXT_TAGandVALUE = cssm_x509_extensionTagAndValue;

final class cssm_x509_extension extends ffi.Struct {
  external SecAsn1Oid extnId;

  @CSSM_BOOL()
  external int critical;

  @ffi.UnsignedInt()
  external int format;

  external cssm_x509ext_value value;

  external SecAsn1Item BERvalue;
}

final class cssm_x509ext_value extends ffi.Union {
  external ffi.Pointer<CSSM_X509EXT_TAGandVALUE> tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;

  external ffi.Pointer<CSSM_X509EXT_PAIR> valuePair;
}

typedef CSSM_X509EXT_PAIR = cssm_x509ext_pair;

final class cssm_x509_extensions extends ffi.Struct {
  @uint32()
  external int numberOfExtensions;

  external CSSM_X509_EXTENSION_PTR extensions;
}

typedef CSSM_X509_EXTENSION_PTR = ffi.Pointer<cssm_x509_extension>;

final class cssm_x509_tbs_certificate extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1Item serialNumber;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_VALIDITY validity;

  external CSSM_X509_NAME subject;

  external SecAsn1PubKeyInfo subjectPublicKeyInfo;

  external SecAsn1Item issuerUniqueIdentifier;

  external SecAsn1Item subjectUniqueIdentifier;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_NAME = cssm_x509_name;
typedef CSSM_X509_VALIDITY = x509_validity;
typedef CSSM_X509_EXTENSIONS = cssm_x509_extensions;

final class cssm_x509_signature extends ffi.Struct {
  external SecAsn1AlgId algorithmIdentifier;

  external SecAsn1Item encrypted;
}

final class cssm_x509_signed_certificate extends ffi.Struct {
  external CSSM_X509_TBS_CERTIFICATE certificate;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTIFICATE = cssm_x509_tbs_certificate;
typedef CSSM_X509_SIGNATURE = cssm_x509_signature;

final class cssm_x509ext_policyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item value;
}

final class cssm_x509ext_policyQualifiers extends ffi.Struct {
  @uint32()
  external int numberOfPolicyQualifiers;

  external ffi.Pointer<CSSM_X509EXT_POLICYQUALIFIERINFO> policyQualifier;
}

typedef CSSM_X509EXT_POLICYQUALIFIERINFO = cssm_x509ext_policyQualifierInfo;

final class cssm_x509ext_policyInfo extends ffi.Struct {
  external SecAsn1Oid policyIdentifier;

  external CSSM_X509EXT_POLICYQUALIFIERS policyQualifiers;
}

typedef CSSM_X509EXT_POLICYQUALIFIERS = cssm_x509ext_policyQualifiers;

final class cssm_x509_revoked_cert_entry extends ffi.Struct {
  external SecAsn1Item certificateSerialNumber;

  external CSSM_X509_TIME revocationDate;

  external CSSM_X509_EXTENSIONS extensions;
}

final class cssm_x509_revoked_cert_list extends ffi.Struct {
  @uint32()
  external int numberOfRevokedCertEntries;

  external CSSM_X509_REVOKED_CERT_ENTRY_PTR revokedCertEntry;
}

typedef CSSM_X509_REVOKED_CERT_ENTRY_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_entry>;

final class cssm_x509_tbs_certlist extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_TIME thisUpdate;

  external CSSM_X509_TIME nextUpdate;

  external CSSM_X509_REVOKED_CERT_LIST_PTR revokedCertificates;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_REVOKED_CERT_LIST_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_list>;

final class cssm_x509_signed_crl extends ffi.Struct {
  external CSSM_X509_TBS_CERTLIST tbsCertList;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTLIST = cssm_x509_tbs_certlist;

enum __CE_GeneralNameType {
  GNT_OtherName(0),
  GNT_RFC822Name(1),
  GNT_DNSName(2),
  GNT_X400Address(3),
  GNT_DirectoryName(4),
  GNT_EdiPartyName(5),
  GNT_URI(6),
  GNT_IPAddress(7),
  GNT_RegisteredID(8);

  final int value;
  const __CE_GeneralNameType(this.value);

  static __CE_GeneralNameType fromValue(int value) => switch (value) {
        0 => GNT_OtherName,
        1 => GNT_RFC822Name,
        2 => GNT_DNSName,
        3 => GNT_X400Address,
        4 => GNT_DirectoryName,
        5 => GNT_EdiPartyName,
        6 => GNT_URI,
        7 => GNT_IPAddress,
        8 => GNT_RegisteredID,
        _ =>
          throw ArgumentError("Unknown value for __CE_GeneralNameType: $value"),
      };
}

final class __CE_OtherName extends ffi.Struct {
  external SecAsn1Oid typeId;

  external SecAsn1Item value;
}

final class __CE_GeneralName extends ffi.Struct {
  @ffi.UnsignedInt()
  external int nameType;

  @CSSM_BOOL()
  external int berEncoded;

  external SecAsn1Item name;
}

final class __CE_GeneralNames extends ffi.Struct {
  @uint32()
  external int numNames;

  external ffi.Pointer<CE_GeneralName> generalName;
}

typedef CE_GeneralName = __CE_GeneralName;

final class __CE_AuthorityKeyID extends ffi.Struct {
  @CSSM_BOOL()
  external int keyIdentifierPresent;

  external SecAsn1Item keyIdentifier;

  @CSSM_BOOL()
  external int generalNamesPresent;

  external ffi.Pointer<CE_GeneralNames> generalNames;

  @CSSM_BOOL()
  external int serialNumberPresent;

  external SecAsn1Item serialNumber;
}

typedef CE_GeneralNames = __CE_GeneralNames;

final class __CE_ExtendedKeyUsage extends ffi.Struct {
  @uint32()
  external int numPurposes;

  external CSSM_OID_PTR purposes;
}

typedef CSSM_OID_PTR = ffi.Pointer<SecAsn1Oid>;

final class __CE_BasicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_BOOL()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

final class __CE_PolicyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item qualifier;
}

final class __CE_PolicyInformation extends ffi.Struct {
  external SecAsn1Oid certPolicyId;

  @uint32()
  external int numPolicyQualifiers;

  external ffi.Pointer<CE_PolicyQualifierInfo> policyQualifiers;
}

typedef CE_PolicyQualifierInfo = __CE_PolicyQualifierInfo;

final class __CE_CertPolicies extends ffi.Struct {
  @uint32()
  external int numPolicies;

  external ffi.Pointer<CE_PolicyInformation> policies;
}

typedef CE_PolicyInformation = __CE_PolicyInformation;

enum __CE_CrlDistributionPointNameType {
  CE_CDNT_FullName(0),
  CE_CDNT_NameRelativeToCrlIssuer(1);

  final int value;
  const __CE_CrlDistributionPointNameType(this.value);

  static __CE_CrlDistributionPointNameType fromValue(int value) =>
      switch (value) {
        0 => CE_CDNT_FullName,
        1 => CE_CDNT_NameRelativeToCrlIssuer,
        _ => throw ArgumentError(
            "Unknown value for __CE_CrlDistributionPointNameType: $value"),
      };
}

final class __CE_DistributionPointName extends ffi.Struct {
  @ffi.UnsignedInt()
  external int nameType;

  external UnnamedUnion5 dpn;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<CE_GeneralNames> fullName;

  external CSSM_X509_RDN_PTR rdn;
}

final class __CE_CRLDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int reasonsPresent;

  @CE_CrlDistReasonFlags()
  external int reasons;

  external ffi.Pointer<CE_GeneralNames> crlIssuer;
}

typedef CE_DistributionPointName = __CE_DistributionPointName;
typedef CE_CrlDistReasonFlags = uint8;

final class __CE_CRLDistPointsSyntax extends ffi.Struct {
  @uint32()
  external int numDistPoints;

  external ffi.Pointer<CE_CRLDistributionPoint> distPoints;
}

typedef CE_CRLDistributionPoint = __CE_CRLDistributionPoint;

final class __CE_AccessDescription extends ffi.Struct {
  external SecAsn1Oid accessMethod;

  external CE_GeneralName accessLocation;
}

final class __CE_AuthorityInfoAccess extends ffi.Struct {
  @uint32()
  external int numAccessDescriptions;

  external ffi.Pointer<CE_AccessDescription> accessDescriptions;
}

typedef CE_AccessDescription = __CE_AccessDescription;

final class __CE_SemanticsInformation extends ffi.Struct {
  external ffi.Pointer<SecAsn1Oid> semanticsIdentifier;

  external ffi.Pointer<CE_NameRegistrationAuthorities>
      nameRegistrationAuthorities;
}

typedef CE_NameRegistrationAuthorities = CE_GeneralNames;

final class __CE_QC_Statement extends ffi.Struct {
  external SecAsn1Oid statementId;

  external ffi.Pointer<CE_SemanticsInformation> semanticsInfo;

  external ffi.Pointer<SecAsn1Item> otherInfo;
}

typedef CE_SemanticsInformation = __CE_SemanticsInformation;

final class __CE_QC_Statements extends ffi.Struct {
  @uint32()
  external int numQCStatements;

  external ffi.Pointer<CE_QC_Statement> qcStatements;
}

typedef CE_QC_Statement = __CE_QC_Statement;

final class __CE_IssuingDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int onlyUserCertsPresent;

  @CSSM_BOOL()
  external int onlyUserCerts;

  @CSSM_BOOL()
  external int onlyCACertsPresent;

  @CSSM_BOOL()
  external int onlyCACerts;

  @CSSM_BOOL()
  external int onlySomeReasonsPresent;

  @CE_CrlDistReasonFlags()
  external int onlySomeReasons;

  @CSSM_BOOL()
  external int indirectCrlPresent;

  @CSSM_BOOL()
  external int indirectCrl;
}

final class __CE_GeneralSubtree extends ffi.Struct {
  external ffi.Pointer<CE_GeneralNames> base;

  @uint32()
  external int minimum;

  @CSSM_BOOL()
  external int maximumPresent;

  @uint32()
  external int maximum;
}

final class __CE_GeneralSubtrees extends ffi.Struct {
  @uint32()
  external int numSubtrees;

  external ffi.Pointer<CE_GeneralSubtree> subtrees;
}

typedef CE_GeneralSubtree = __CE_GeneralSubtree;

final class __CE_NameConstraints extends ffi.Struct {
  external ffi.Pointer<CE_GeneralSubtrees> permitted;

  external ffi.Pointer<CE_GeneralSubtrees> excluded;
}

typedef CE_GeneralSubtrees = __CE_GeneralSubtrees;

final class __CE_PolicyMapping extends ffi.Struct {
  external SecAsn1Oid issuerDomainPolicy;

  external SecAsn1Oid subjectDomainPolicy;
}

final class __CE_PolicyMappings extends ffi.Struct {
  @uint32()
  external int numPolicyMappings;

  external ffi.Pointer<CE_PolicyMapping> policyMappings;
}

typedef CE_PolicyMapping = __CE_PolicyMapping;

final class __CE_PolicyConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int requireExplicitPolicyPresent;

  @uint32()
  external int requireExplicitPolicy;

  @CSSM_BOOL()
  external int inhibitPolicyMappingPresent;

  @uint32()
  external int inhibitPolicyMapping;
}

enum __CE_DataType {
  DT_AuthorityKeyID(0),
  DT_SubjectKeyID(1),
  DT_KeyUsage(2),
  DT_SubjectAltName(3),
  DT_IssuerAltName(4),
  DT_ExtendedKeyUsage(5),
  DT_BasicConstraints(6),
  DT_CertPolicies(7),
  DT_NetscapeCertType(8),
  DT_CrlNumber(9),
  DT_DeltaCrl(10),
  DT_CrlReason(11),
  DT_CrlDistributionPoints(12),
  DT_IssuingDistributionPoint(13),
  DT_AuthorityInfoAccess(14),
  DT_Other(15),
  DT_QC_Statements(16),
  DT_NameConstraints(17),
  DT_PolicyMappings(18),
  DT_PolicyConstraints(19),
  DT_InhibitAnyPolicy(20);

  final int value;
  const __CE_DataType(this.value);

  static __CE_DataType fromValue(int value) => switch (value) {
        0 => DT_AuthorityKeyID,
        1 => DT_SubjectKeyID,
        2 => DT_KeyUsage,
        3 => DT_SubjectAltName,
        4 => DT_IssuerAltName,
        5 => DT_ExtendedKeyUsage,
        6 => DT_BasicConstraints,
        7 => DT_CertPolicies,
        8 => DT_NetscapeCertType,
        9 => DT_CrlNumber,
        10 => DT_DeltaCrl,
        11 => DT_CrlReason,
        12 => DT_CrlDistributionPoints,
        13 => DT_IssuingDistributionPoint,
        14 => DT_AuthorityInfoAccess,
        15 => DT_Other,
        16 => DT_QC_Statements,
        17 => DT_NameConstraints,
        18 => DT_PolicyMappings,
        19 => DT_PolicyConstraints,
        20 => DT_InhibitAnyPolicy,
        _ => throw ArgumentError("Unknown value for __CE_DataType: $value"),
      };
}

final class CE_Data extends ffi.Union {
  external CE_AuthorityKeyID authorityKeyID;

  external CE_SubjectKeyID subjectKeyID;

  @CE_KeyUsage()
  external int keyUsage;

  external CE_GeneralNames subjectAltName;

  external CE_GeneralNames issuerAltName;

  external CE_ExtendedKeyUsage extendedKeyUsage;

  external CE_BasicConstraints basicConstraints;

  external CE_CertPolicies certPolicies;

  @CE_NetscapeCertType()
  external int netscapeCertType;

  @CE_CrlNumber()
  external int crlNumber;

  @CE_DeltaCrl()
  external int deltaCrl;

  @CE_CrlReason()
  external int crlReason;

  external CE_CRLDistPointsSyntax crlDistPoints;

  external CE_IssuingDistributionPoint issuingDistPoint;

  external CE_AuthorityInfoAccess authorityInfoAccess;

  external CE_QC_Statements qualifiedCertStatements;

  external CE_NameConstraints nameConstraints;

  external CE_PolicyMappings policyMappings;

  external CE_PolicyConstraints policyConstraints;

  @CE_InhibitAnyPolicy()
  external int inhibitAnyPolicy;

  external SecAsn1Item rawData;
}

typedef CE_AuthorityKeyID = __CE_AuthorityKeyID;
typedef CE_SubjectKeyID = SecAsn1Item;
typedef CE_KeyUsage = uint16;
typedef CE_ExtendedKeyUsage = __CE_ExtendedKeyUsage;
typedef CE_BasicConstraints = __CE_BasicConstraints;
typedef CE_CertPolicies = __CE_CertPolicies;
typedef CE_NetscapeCertType = uint16;
typedef CE_CrlNumber = uint32;
typedef CE_DeltaCrl = uint32;
typedef CE_CrlReason = uint32;
typedef CE_CRLDistPointsSyntax = __CE_CRLDistPointsSyntax;
typedef CE_IssuingDistributionPoint = __CE_IssuingDistributionPoint;
typedef CE_AuthorityInfoAccess = __CE_AuthorityInfoAccess;
typedef CE_QC_Statements = __CE_QC_Statements;
typedef CE_NameConstraints = __CE_NameConstraints;
typedef CE_PolicyMappings = __CE_PolicyMappings;
typedef CE_PolicyConstraints = __CE_PolicyConstraints;
typedef CE_InhibitAnyPolicy = uint32;

final class __CE_DataAndType extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  external CE_Data extension1;

  @CSSM_BOOL()
  external int critical;
}

final class cssm_acl_process_subject_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int mask;

  @uint32()
  external int uid;

  @uint32()
  external int gid;
}

final class cssm_acl_keychain_prompt_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int flags;
}

enum cssm_appledl_open_parameters_mask {
  kCSSM_APPLEDL_MASK_MODE(1);

  final int value;
  const cssm_appledl_open_parameters_mask(this.value);

  static cssm_appledl_open_parameters_mask fromValue(int value) =>
      switch (value) {
        1 => kCSSM_APPLEDL_MASK_MODE,
        _ => throw ArgumentError(
            "Unknown value for cssm_appledl_open_parameters_mask: $value"),
      };
}

final class cssm_appledl_open_parameters extends ffi.Struct {
  @uint32()
  external int length;

  @uint32()
  external int version;

  @CSSM_BOOL()
  external int autoCommit;

  @uint32()
  external int mask;

  @mode_t()
  external int mode;
}

final class cssm_applecspdl_db_settings_parameters extends ffi.Struct {
  @uint32()
  external int idleTimeout;

  @uint8()
  external int lockOnSleep;
}

final class cssm_applecspdl_db_is_locked_parameters extends ffi.Struct {
  @uint8()
  external int isLocked;
}

final class cssm_applecspdl_db_change_password_parameters extends ffi.Struct {
  external ffi.Pointer<CSSM_ACCESS_CREDENTIALS> accessCredentials;
}

typedef CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;

final class CSSM_APPLE_TP_NAME_OID extends ffi.Struct {
  external ffi.Pointer<ffi.Char> string;

  external ffi.Pointer<SecAsn1Oid> oid;
}

final class CSSM_APPLE_TP_CERT_REQUEST extends ffi.Struct {
  @CSSM_CSP_HANDLE()
  external int cspHand;

  @CSSM_CL_HANDLE()
  external int clHand;

  @uint32()
  external int serialNumber;

  @uint32()
  external int numSubjectNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> subjectNames;

  @uint32()
  external int numIssuerNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> issuerNames;

  external CSSM_X509_NAME_PTR issuerNameX509;

  external ffi.Pointer<CSSM_KEY> certPublicKey;

  external ffi.Pointer<CSSM_KEY> issuerPrivateKey;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @uint32()
  external int notBefore;

  @uint32()
  external int notAfter;

  @uint32()
  external int numExtensions;

  external ffi.Pointer<CE_DataAndType> extensions;

  external ffi.Pointer<ffi.Char> challengeString;
}

typedef CSSM_X509_NAME_PTR = ffi.Pointer<cssm_x509_name>;
typedef CSSM_KEY = cssm_key;
typedef CE_DataAndType = __CE_DataAndType;

final class CSSM_APPLE_TP_SSL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @uint32()
  external int ServerNameLen;

  external ffi.Pointer<ffi.Char> ServerName;

  @uint32()
  external int Flags;
}

final class CSSM_APPLE_TP_CRL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_CRL_OPT_FLAGS()
  external int CrlFlags;

  external CSSM_DL_DB_HANDLE_PTR crlStore;
}

typedef CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;

final class CSSM_APPLE_TP_SMIME_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CE_KeyUsage()
  external int IntendedUsage;

  @uint32()
  external int SenderEmailLen;

  external ffi.Pointer<ffi.Char> SenderEmail;
}

final class CSSM_APPLE_TP_ACTION_DATA extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_ACTION_FLAGS()
  external int ActionFlags;
}

typedef CSSM_APPLE_TP_ACTION_FLAGS = uint32;

final class CSSM_TP_APPLE_EVIDENCE_INFO extends ffi.Struct {
  @CSSM_TP_APPLE_CERT_STATUS()
  external int StatusBits;

  @uint32()
  external int NumStatusCodes;

  external ffi.Pointer<CSSM_RETURN> StatusCodes;

  @uint32()
  external int Index;

  external CSSM_DL_DB_HANDLE DlDbHandle;

  external CSSM_DB_UNIQUE_RECORD_PTR UniqueRecord;
}

typedef CSSM_TP_APPLE_CERT_STATUS = uint32;
typedef CSSM_DL_DB_HANDLE = cssm_dl_db_handle;
typedef CSSM_DB_UNIQUE_RECORD_PTR = ffi.Pointer<cssm_db_unique_record>;

final class CSSM_TP_APPLE_EVIDENCE_HEADER extends ffi.Struct {
  @uint32()
  external int Version;
}

final class CSSM_APPLE_CL_CSR_REQUEST extends ffi.Struct {
  external CSSM_X509_NAME_PTR subjectNameX509;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @CSSM_CSP_HANDLE()
  external int cspHand;

  external ffi.Pointer<CSSM_KEY> subjectPublicKey;

  external ffi.Pointer<CSSM_KEY> subjectPrivateKey;

  external ffi.Pointer<ffi.Char> challengeString;
}

enum SecTrustResultType {
  kSecTrustResultInvalid(0),
  kSecTrustResultProceed(1),
  kSecTrustResultConfirm(2),
  kSecTrustResultDeny(3),
  kSecTrustResultUnspecified(4),
  kSecTrustResultRecoverableTrustFailure(5),
  kSecTrustResultFatalTrustFailure(6),
  kSecTrustResultOtherError(7);

  final int value;
  const SecTrustResultType(this.value);

  static SecTrustResultType fromValue(int value) => switch (value) {
        0 => kSecTrustResultInvalid,
        1 => kSecTrustResultProceed,
        2 => kSecTrustResultConfirm,
        3 => kSecTrustResultDeny,
        4 => kSecTrustResultUnspecified,
        5 => kSecTrustResultRecoverableTrustFailure,
        6 => kSecTrustResultFatalTrustFailure,
        7 => kSecTrustResultOtherError,
        _ =>
          throw ArgumentError("Unknown value for SecTrustResultType: $value"),
      };
}

final class __SecTrust extends ffi.Opaque {}

typedef SecTrustRef = ffi.Pointer<__SecTrust>;
typedef SecTrustCallback = ffi.Pointer<objc.ObjCBlock>;
typedef DartSecTrustCallback = ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType;
void _ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, SecTrustRef arg0, int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(SecTrustRef arg0, ffi.Uint32 arg1)>>()
        .asFunction<void Function(SecTrustRef, int)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, SecTrustRef arg0, int arg1) =>
    (objc.getBlockClosure(block) as void Function(SecTrustRef, int))(
        arg0, arg1);

class ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(SecTrustRef arg0, ffi.Uint32 arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            SecTrustRef, ffi.Uint32)>(
                    _ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType.fromFunction(
      void Function(SecTrustRef, SecTrustResultType) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            SecTrustRef, ffi.Uint32)>(
                    _ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType_closureTrampoline)
                .cast(),
            (SecTrustRef arg0, int arg1) =>
                fn(arg0, SecTrustResultType.fromValue(arg1))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType.listener(
      void Function(SecTrustRef, SecTrustResultType) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            SecTrustRef, ffi.Uint32)>.listener(
                    _ObjCBlock_ffiVoid_SecTrustRef_SecTrustResultType_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (SecTrustRef arg0, int arg1) =>
                fn(arg0, SecTrustResultType.fromValue(arg1)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, SecTrustRef, ffi.Uint32)>?
      _dartFuncListenerTrampoline;

  void call(SecTrustRef arg0, SecTrustResultType arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      SecTrustRef arg0, ffi.Uint32 arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlock>, SecTrustRef, int)>()(
      pointer, arg0, arg1.value);
}

typedef SecTrustWithErrorCallback = ffi.Pointer<objc.ObjCBlock>;
typedef DartSecTrustWithErrorCallback
    = ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef;
void _ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        SecTrustRef arg0,
        bool arg1,
        CFErrorRef arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        SecTrustRef arg0, ffi.Bool arg1, CFErrorRef arg2)>>()
            .asFunction<void Function(SecTrustRef, bool, CFErrorRef)>()(
        arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        SecTrustRef arg0,
        bool arg1,
        CFErrorRef arg2) =>
    (objc.getBlockClosure(block) as void Function(
        SecTrustRef, bool, CFErrorRef))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      SecTrustRef arg0, ffi.Bool arg1, CFErrorRef arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            SecTrustRef, ffi.Bool, CFErrorRef)>(
                    _ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef.fromFunction(
      void Function(SecTrustRef, bool, CFErrorRef) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            SecTrustRef, ffi.Bool, CFErrorRef)>(
                    _ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef_closureTrampoline)
                .cast(),
            (SecTrustRef arg0, bool arg1, CFErrorRef arg2) =>
                fn(arg0, arg1, arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef.listener(
      void Function(SecTrustRef, bool, CFErrorRef) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            SecTrustRef, ffi.Bool, CFErrorRef)>.listener(
                    _ObjCBlock_ffiVoid_SecTrustRef_bool_CFErrorRef_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (SecTrustRef arg0, bool arg1, CFErrorRef arg2) =>
                fn(arg0, arg1, arg2))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, SecTrustRef, ffi.Bool, CFErrorRef)>?
      _dartFuncListenerTrampoline;

  void call(SecTrustRef arg0, bool arg1, CFErrorRef arg2) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  SecTrustRef arg0, ffi.Bool arg1, CFErrorRef arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, SecTrustRef, bool,
              CFErrorRef)>()(pointer, arg0, arg1, arg2);
}

typedef SecKeyRef = ffi.Pointer<__SecKey>;
typedef SecCertificateRef = ffi.Pointer<__SecCertificate>;

enum SecTrustOptionFlags {
  kSecTrustOptionAllowExpired(1),
  kSecTrustOptionLeafIsCA(2),
  kSecTrustOptionFetchIssuerFromNet(4),
  kSecTrustOptionAllowExpiredRoot(8),
  kSecTrustOptionRequireRevPerCert(16),
  kSecTrustOptionUseTrustSettings(32),
  kSecTrustOptionImplicitAnchors(64);

  final int value;
  const SecTrustOptionFlags(this.value);

  static SecTrustOptionFlags fromValue(int value) => switch (value) {
        1 => kSecTrustOptionAllowExpired,
        2 => kSecTrustOptionLeafIsCA,
        4 => kSecTrustOptionFetchIssuerFromNet,
        8 => kSecTrustOptionAllowExpiredRoot,
        16 => kSecTrustOptionRequireRevPerCert,
        32 => kSecTrustOptionUseTrustSettings,
        64 => kSecTrustOptionImplicitAnchors,
        _ =>
          throw ArgumentError("Unknown value for SecTrustOptionFlags: $value"),
      };
}

typedef CSSM_TP_VERIFY_CONTEXT_RESULT_PTR
    = ffi.Pointer<cssm_tp_verify_context_result>;
typedef SecKeychainRef = ffi.Pointer<__SecKeychain>;

enum SecKeyUsage {
  kSecKeyUsageUnspecified(0),
  kSecKeyUsageDigitalSignature(1),
  kSecKeyUsageNonRepudiation(2),
  kSecKeyUsageKeyEncipherment(4),
  kSecKeyUsageDataEncipherment(8),
  kSecKeyUsageKeyAgreement(16),
  kSecKeyUsageKeyCertSign(32),
  kSecKeyUsageCRLSign(64),
  kSecKeyUsageEncipherOnly(128),
  kSecKeyUsageDecipherOnly(256),
  kSecKeyUsageCritical(-2147483648),
  kSecKeyUsageAll(2147483647);

  static const kSecKeyUsageContentCommitment = kSecKeyUsageNonRepudiation;

  final int value;
  const SecKeyUsage(this.value);

  static SecKeyUsage fromValue(int value) => switch (value) {
        0 => kSecKeyUsageUnspecified,
        1 => kSecKeyUsageDigitalSignature,
        2 => kSecKeyUsageNonRepudiation,
        4 => kSecKeyUsageKeyEncipherment,
        8 => kSecKeyUsageDataEncipherment,
        16 => kSecKeyUsageKeyAgreement,
        32 => kSecKeyUsageKeyCertSign,
        64 => kSecKeyUsageCRLSign,
        128 => kSecKeyUsageEncipherOnly,
        256 => kSecKeyUsageDecipherOnly,
        -2147483648 => kSecKeyUsageCritical,
        2147483647 => kSecKeyUsageAll,
        _ => throw ArgumentError("Unknown value for SecKeyUsage: $value"),
      };

  @override
  String toString() {
    if (this == kSecKeyUsageNonRepudiation)
      return "SecKeyUsage.kSecKeyUsageNonRepudiation, SecKeyUsage.kSecKeyUsageContentCommitment";
    return super.toString();
  }
}

typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;
typedef SSLCipherSuite = ffi.Uint16;
typedef DartSSLCipherSuite = int;

enum SSLCiphersuiteGroup {
  kSSLCiphersuiteGroupDefault(0),
  kSSLCiphersuiteGroupCompatibility(1),
  kSSLCiphersuiteGroupLegacy(2),
  kSSLCiphersuiteGroupATS(3),
  kSSLCiphersuiteGroupATSCompatibility(4);

  final int value;
  const SSLCiphersuiteGroup(this.value);

  static SSLCiphersuiteGroup fromValue(int value) => switch (value) {
        0 => kSSLCiphersuiteGroupDefault,
        1 => kSSLCiphersuiteGroupCompatibility,
        2 => kSSLCiphersuiteGroupLegacy,
        3 => kSSLCiphersuiteGroupATS,
        4 => kSSLCiphersuiteGroupATSCompatibility,
        _ =>
          throw ArgumentError("Unknown value for SSLCiphersuiteGroup: $value"),
      };
}

final class sec_trust extends ffi.Opaque {}

final class sec_identity extends ffi.Opaque {}

final class sec_certificate extends ffi.Opaque {}

enum tls_protocol_version_t {
  tls_protocol_version_TLSv10(769),
  tls_protocol_version_TLSv11(770),
  tls_protocol_version_TLSv12(771),
  tls_protocol_version_TLSv13(772),
  tls_protocol_version_DTLSv10(-257),
  tls_protocol_version_DTLSv12(-259);

  final int value;
  const tls_protocol_version_t(this.value);

  static tls_protocol_version_t fromValue(int value) => switch (value) {
        769 => tls_protocol_version_TLSv10,
        770 => tls_protocol_version_TLSv11,
        771 => tls_protocol_version_TLSv12,
        772 => tls_protocol_version_TLSv13,
        -257 => tls_protocol_version_DTLSv10,
        -259 => tls_protocol_version_DTLSv12,
        _ => throw ArgumentError(
            "Unknown value for tls_protocol_version_t: $value"),
      };
}

enum tls_ciphersuite_t {
  tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA(10),
  tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA(47),
  tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA(53),
  tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256(156),
  tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384(157),
  tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256(60),
  tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256(61),
  tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA(-16376),
  tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA(-16375),
  tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA(-16374),
  tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA(-16366),
  tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA(-16365),
  tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA(-16364),
  tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256(-16349),
  tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384(-16348),
  tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256(-16345),
  tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384(-16344),
  tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256(-16341),
  tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384(-16340),
  tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256(-16337),
  tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384(-16336),
  tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256(-13144),
  tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256(-13143),
  tls_ciphersuite_AES_128_GCM_SHA256(4865),
  tls_ciphersuite_AES_256_GCM_SHA384(4866),
  tls_ciphersuite_CHACHA20_POLY1305_SHA256(4867);

  final int value;
  const tls_ciphersuite_t(this.value);

  static tls_ciphersuite_t fromValue(int value) => switch (value) {
        10 => tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA,
        47 => tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA,
        53 => tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA,
        156 => tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256,
        157 => tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384,
        60 => tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256,
        61 => tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256,
        -16376 => tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
        -16375 => tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
        -16374 => tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
        -16366 => tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
        -16365 => tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA,
        -16364 => tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA,
        -16349 => tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
        -16348 => tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
        -16345 => tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
        -16344 => tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
        -16341 => tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
        -16340 => tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
        -16337 => tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
        -16336 => tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
        -13144 => tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
        -13143 => tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
        4865 => tls_ciphersuite_AES_128_GCM_SHA256,
        4866 => tls_ciphersuite_AES_256_GCM_SHA384,
        4867 => tls_ciphersuite_CHACHA20_POLY1305_SHA256,
        _ => throw ArgumentError("Unknown value for tls_ciphersuite_t: $value"),
      };
}

enum tls_ciphersuite_group_t {
  tls_ciphersuite_group_default(0),
  tls_ciphersuite_group_compatibility(1),
  tls_ciphersuite_group_legacy(2),
  tls_ciphersuite_group_ats(3),
  tls_ciphersuite_group_ats_compatibility(4);

  final int value;
  const tls_ciphersuite_group_t(this.value);

  static tls_ciphersuite_group_t fromValue(int value) => switch (value) {
        0 => tls_ciphersuite_group_default,
        1 => tls_ciphersuite_group_compatibility,
        2 => tls_ciphersuite_group_legacy,
        3 => tls_ciphersuite_group_ats,
        4 => tls_ciphersuite_group_ats_compatibility,
        _ => throw ArgumentError(
            "Unknown value for tls_ciphersuite_group_t: $value"),
      };
}

enum SSLProtocol {
  kSSLProtocolUnknown(0),
  kTLSProtocol1(4),
  kTLSProtocol11(7),
  kTLSProtocol12(8),
  kDTLSProtocol1(9),
  kTLSProtocol13(10),
  kDTLSProtocol12(11),
  kTLSProtocolMaxSupported(999),
  kSSLProtocol2(1),
  kSSLProtocol3(2),
  kSSLProtocol3Only(3),
  kTLSProtocol1Only(5),
  kSSLProtocolAll(6);

  final int value;
  const SSLProtocol(this.value);

  static SSLProtocol fromValue(int value) => switch (value) {
        0 => kSSLProtocolUnknown,
        4 => kTLSProtocol1,
        7 => kTLSProtocol11,
        8 => kTLSProtocol12,
        9 => kDTLSProtocol1,
        10 => kTLSProtocol13,
        11 => kDTLSProtocol12,
        999 => kTLSProtocolMaxSupported,
        1 => kSSLProtocol2,
        2 => kSSLProtocol3,
        3 => kSSLProtocol3Only,
        5 => kTLSProtocol1Only,
        6 => kSSLProtocolAll,
        _ => throw ArgumentError("Unknown value for SSLProtocol: $value"),
      };
}

typedef sec_trust_t = ffi.Pointer<sec_trust>;
typedef sec_identity_t = ffi.Pointer<sec_identity>;
void _ObjCBlock_ffiVoid_seccertificatet_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, sec_certificate_t arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(sec_certificate_t arg0)>>()
        .asFunction<void Function(sec_certificate_t)>()(arg0);
void _ObjCBlock_ffiVoid_seccertificatet_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, sec_certificate_t arg0) =>
    (objc.getBlockClosure(block) as void Function(sec_certificate_t))(arg0);

class ObjCBlock_ffiVoid_seccertificatet extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_seccertificatet._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_seccertificatet castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_seccertificatet._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_seccertificatet.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sec_certificate_t arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, sec_certificate_t)>(
                    _ObjCBlock_ffiVoid_seccertificatet_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_seccertificatet.fromFunction(
      void Function(sec_certificate_t) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, sec_certificate_t)>(
                    _ObjCBlock_ffiVoid_seccertificatet_closureTrampoline)
                .cast(),
            (sec_certificate_t arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_seccertificatet.listener(
      void Function(sec_certificate_t) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            sec_certificate_t)>.listener(
                    _ObjCBlock_ffiVoid_seccertificatet_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (sec_certificate_t arg0) => fn(arg0))));
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, sec_certificate_t)>?
      _dartFuncListenerTrampoline;

  void call(sec_certificate_t arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block, sec_certificate_t arg0)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlock>, sec_certificate_t)>()(pointer, arg0);
}

typedef sec_certificate_t = ffi.Pointer<sec_certificate>;

final class sec_protocol_metadata extends ffi.Opaque {}

typedef sec_protocol_metadata_t = ffi.Pointer<sec_protocol_metadata>;
void _ObjCBlock_ffiVoid_dispatchdatat_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, dispatch_data_t arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(dispatch_data_t arg0)>>()
        .asFunction<void Function(dispatch_data_t)>()(arg0);
void _ObjCBlock_ffiVoid_dispatchdatat_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, dispatch_data_t arg0) =>
    (objc.getBlockClosure(block) as void Function(dispatch_data_t))(arg0);

class ObjCBlock_ffiVoid_dispatchdatat extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_dispatchdatat._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_dispatchdatat castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_dispatchdatat._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_dispatchdatat.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(dispatch_data_t arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, dispatch_data_t)>(
                    _ObjCBlock_ffiVoid_dispatchdatat_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_dispatchdatat.fromFunction(
      void Function(dispatch_data_t) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, dispatch_data_t)>(
                    _ObjCBlock_ffiVoid_dispatchdatat_closureTrampoline)
                .cast(),
            (dispatch_data_t arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_dispatchdatat.listener(void Function(dispatch_data_t) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t)>.listener(
                    _ObjCBlock_ffiVoid_dispatchdatat_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (dispatch_data_t arg0) => fn(arg0))));
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, dispatch_data_t)>?
      _dartFuncListenerTrampoline;

  void call(dispatch_data_t arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block, dispatch_data_t arg0)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlock>, dispatch_data_t)>()(pointer, arg0);
}

void _ObjCBlock_ffiVoid_Uint16_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Uint16 arg0)>>()
        .asFunction<void Function(int)>()(arg0);
void _ObjCBlock_ffiVoid_Uint16_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    (objc.getBlockClosure(block) as void Function(int))(arg0);

class ObjCBlock_ffiVoid_Uint16 extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_Uint16._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_Uint16 castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_Uint16._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_Uint16.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Uint16 arg0)>> ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Uint16)>(_ObjCBlock_ffiVoid_Uint16_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_Uint16.fromFunction(void Function(int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Uint16)>(
                    _ObjCBlock_ffiVoid_Uint16_closureTrampoline)
                .cast(),
            (int arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_Uint16.listener(void Function(int) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Uint16)>.listener(
                    _ObjCBlock_ffiVoid_Uint16_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (int arg0) => fn(arg0))));
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Uint16)>?
      _dartFuncListenerTrampoline;

  void call(int arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block, ffi.Uint16 arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, int)>()(
      pointer, arg0);
}

void _ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        dispatch_data_t arg0,
        dispatch_data_t arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        dispatch_data_t arg0, dispatch_data_t arg1)>>()
            .asFunction<void Function(dispatch_data_t, dispatch_data_t)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        dispatch_data_t arg0,
        dispatch_data_t arg1) =>
    (objc.getBlockClosure(block) as void Function(
        dispatch_data_t, dispatch_data_t))(arg0, arg1);

class ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      dispatch_data_t arg0, dispatch_data_t arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t, dispatch_data_t)>(
                    _ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat.fromFunction(
      void Function(dispatch_data_t, dispatch_data_t) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t, dispatch_data_t)>(
                    _ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat_closureTrampoline)
                .cast(),
            (dispatch_data_t arg0, dispatch_data_t arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat.listener(
      void Function(dispatch_data_t, dispatch_data_t) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            dispatch_data_t, dispatch_data_t)>.listener(
                    _ObjCBlock_ffiVoid_dispatchdatat_dispatchdatat_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (dispatch_data_t arg0, dispatch_data_t arg1) => fn(arg0, arg1))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, dispatch_data_t, dispatch_data_t)>?
      _dartFuncListenerTrampoline;

  void call(dispatch_data_t arg0, dispatch_data_t arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  dispatch_data_t arg0, dispatch_data_t arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, dispatch_data_t,
              dispatch_data_t)>()(pointer, arg0, arg1);
}

final class sec_protocol_options extends ffi.Opaque {}

typedef sec_protocol_options_t = ffi.Pointer<sec_protocol_options>;
typedef sec_protocol_pre_shared_key_selection_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_pre_shared_key_selection_t
    = ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet;
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            dispatch_data_t arg1,
            sec_protocol_pre_shared_key_selection_complete_t arg2) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            sec_protocol_metadata_t arg0,
                            dispatch_data_t arg1,
                            sec_protocol_pre_shared_key_selection_complete_t
                                arg2)>>()
                .asFunction<
                    void Function(sec_protocol_metadata_t, dispatch_data_t,
                        sec_protocol_pre_shared_key_selection_complete_t)>()(
            arg0, arg1, arg2);
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            dispatch_data_t arg1,
            sec_protocol_pre_shared_key_selection_complete_t arg2) =>
        (objc.getBlockClosure(block) as void Function(
                sec_protocol_metadata_t,
                dispatch_data_t,
                sec_protocol_pre_shared_key_selection_complete_t))(
            arg0, arg1, arg2);

class ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_metadata_t arg0,
                      dispatch_data_t arg1,
                      sec_protocol_pre_shared_key_selection_complete_t arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            dispatch_data_t,
                            sec_protocol_pre_shared_key_selection_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet.fromFunction(
      void Function(
              sec_protocol_metadata_t, dispatch_data_t, Dartsec_protocol_pre_shared_key_selection_complete_t)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            dispatch_data_t,
                            sec_protocol_pre_shared_key_selection_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet_closureTrampoline)
                .cast(),
            (sec_protocol_metadata_t arg0, dispatch_data_t arg1, sec_protocol_pre_shared_key_selection_complete_t arg2) =>
                fn(arg0, arg1, ObjCBlock_ffiVoid_dispatchdatat.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet.listener(
      void Function(sec_protocol_metadata_t, dispatch_data_t,
              Dartsec_protocol_pre_shared_key_selection_complete_t)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, sec_protocol_metadata_t, dispatch_data_t, sec_protocol_pre_shared_key_selection_complete_t)>.listener(
                            _ObjCBlock_ffiVoid_secprotocolmetadatat_dispatchdatat_secprotocolpresharedkeyselectioncompletet_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (sec_protocol_metadata_t arg0, dispatch_data_t arg1,
                        sec_protocol_pre_shared_key_selection_complete_t arg2) =>
                    fn(arg0, arg1, ObjCBlock_ffiVoid_dispatchdatat.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>,
              sec_protocol_metadata_t,
              dispatch_data_t,
              sec_protocol_pre_shared_key_selection_complete_t)>?
      _dartFuncListenerTrampoline;

  void
      call(sec_protocol_metadata_t arg0, dispatch_data_t arg1,
              Dartsec_protocol_pre_shared_key_selection_complete_t arg2) =>
          pointer.ref.invoke
                  .cast<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlock> block,
                              sec_protocol_metadata_t arg0,
                              dispatch_data_t arg1,
                              sec_protocol_pre_shared_key_selection_complete_t
                                  arg2)>>()
                  .asFunction<
                      void Function(
                          ffi.Pointer<objc.ObjCBlock>,
                          sec_protocol_metadata_t,
                          dispatch_data_t,
                          sec_protocol_pre_shared_key_selection_complete_t)>()(
              pointer, arg0, arg1, arg2.pointer);
}

typedef sec_protocol_pre_shared_key_selection_complete_t
    = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_pre_shared_key_selection_complete_t
    = ObjCBlock_ffiVoid_dispatchdatat;
typedef sec_protocol_key_update_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_key_update_t
    = ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet;
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            sec_protocol_key_update_complete_t arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(sec_protocol_metadata_t arg0,
                        sec_protocol_key_update_complete_t arg1)>>()
            .asFunction<
                void Function(sec_protocol_metadata_t,
                    sec_protocol_key_update_complete_t)>()(arg0, arg1);
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            sec_protocol_key_update_complete_t arg1) =>
        (objc.getBlockClosure(block) as void Function(sec_protocol_metadata_t,
            sec_protocol_key_update_complete_t))(arg0, arg1);

class ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_metadata_t arg0,
                      sec_protocol_key_update_complete_t arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            sec_protocol_key_update_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet.fromFunction(
      void Function(
              sec_protocol_metadata_t, Dartsec_protocol_key_update_complete_t)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            sec_protocol_key_update_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet_closureTrampoline)
                .cast(),
            (sec_protocol_metadata_t arg0,
                    sec_protocol_key_update_complete_t arg1) =>
                fn(arg0, ObjCBlock_ffiVoid.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet.listener(void Function(sec_protocol_metadata_t, Dartsec_protocol_key_update_complete_t) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                sec_protocol_metadata_t,
                                sec_protocol_key_update_complete_t)>.listener(
                        _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolkeyupdatecompletet_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (sec_protocol_metadata_t arg0,
                        sec_protocol_key_update_complete_t arg1) =>
                    fn(arg0, ObjCBlock_ffiVoid.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, sec_protocol_metadata_t,
          sec_protocol_key_update_complete_t)>? _dartFuncListenerTrampoline;

  void call(sec_protocol_metadata_t arg0,
          Dartsec_protocol_key_update_complete_t arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          sec_protocol_metadata_t arg0,
                          sec_protocol_key_update_complete_t arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      sec_protocol_metadata_t,
                      sec_protocol_key_update_complete_t)>()(
          pointer, arg0, arg1.pointer);
}

typedef sec_protocol_key_update_complete_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_key_update_complete_t = ObjCBlock_ffiVoid;
typedef sec_protocol_challenge_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_challenge_t
    = ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet;
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            sec_protocol_challenge_complete_t arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(sec_protocol_metadata_t arg0,
                        sec_protocol_challenge_complete_t arg1)>>()
            .asFunction<
                void Function(sec_protocol_metadata_t,
                    sec_protocol_challenge_complete_t)>()(arg0, arg1);
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            sec_protocol_challenge_complete_t arg1) =>
        (objc.getBlockClosure(block) as void Function(sec_protocol_metadata_t,
            sec_protocol_challenge_complete_t))(arg0, arg1);

class ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_metadata_t arg0,
                      sec_protocol_challenge_complete_t arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            sec_protocol_challenge_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet.fromFunction(
      void Function(
              sec_protocol_metadata_t, Dartsec_protocol_challenge_complete_t)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            sec_protocol_challenge_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet_closureTrampoline)
                .cast(),
            (sec_protocol_metadata_t arg0,
                    sec_protocol_challenge_complete_t arg1) =>
                fn(arg0, ObjCBlock_ffiVoid_secidentityt.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet.listener(
      void Function(sec_protocol_metadata_t, Dartsec_protocol_challenge_complete_t)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi
                        .NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, sec_protocol_metadata_t, sec_protocol_challenge_complete_t)>.listener(
                        _ObjCBlock_ffiVoid_secprotocolmetadatat_secprotocolchallengecompletet_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (sec_protocol_metadata_t arg0,
                        sec_protocol_challenge_complete_t arg1) =>
                    fn(arg0, ObjCBlock_ffiVoid_secidentityt.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, sec_protocol_metadata_t,
          sec_protocol_challenge_complete_t)>? _dartFuncListenerTrampoline;

  void call(sec_protocol_metadata_t arg0,
          Dartsec_protocol_challenge_complete_t arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          sec_protocol_metadata_t arg0,
                          sec_protocol_challenge_complete_t arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      sec_protocol_metadata_t,
                      sec_protocol_challenge_complete_t)>()(
          pointer, arg0, arg1.pointer);
}

typedef sec_protocol_challenge_complete_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_challenge_complete_t = ObjCBlock_ffiVoid_secidentityt;
void _ObjCBlock_ffiVoid_secidentityt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, sec_identity_t arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(sec_identity_t arg0)>>()
        .asFunction<void Function(sec_identity_t)>()(arg0);
void _ObjCBlock_ffiVoid_secidentityt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, sec_identity_t arg0) =>
    (objc.getBlockClosure(block) as void Function(sec_identity_t))(arg0);

class ObjCBlock_ffiVoid_secidentityt extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_secidentityt._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_secidentityt castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_secidentityt._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secidentityt.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sec_identity_t arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, sec_identity_t)>(
                    _ObjCBlock_ffiVoid_secidentityt_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secidentityt.fromFunction(void Function(sec_identity_t) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, sec_identity_t)>(
                    _ObjCBlock_ffiVoid_secidentityt_closureTrampoline)
                .cast(),
            (sec_identity_t arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_secidentityt.listener(void Function(sec_identity_t) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            sec_identity_t)>.listener(
                    _ObjCBlock_ffiVoid_secidentityt_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (sec_identity_t arg0) => fn(arg0))));
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, sec_identity_t)>?
      _dartFuncListenerTrampoline;

  void call(sec_identity_t arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block, sec_identity_t arg0)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlock>, sec_identity_t)>()(pointer, arg0);
}

typedef sec_protocol_verify_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_verify_t
    = ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet;
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            sec_trust_t arg1,
            sec_protocol_verify_complete_t arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        sec_protocol_metadata_t arg0,
                        sec_trust_t arg1,
                        sec_protocol_verify_complete_t arg2)>>()
            .asFunction<
                void Function(sec_protocol_metadata_t, sec_trust_t,
                    sec_protocol_verify_complete_t)>()(arg0, arg1, arg2);
void
    _ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            sec_protocol_metadata_t arg0,
            sec_trust_t arg1,
            sec_protocol_verify_complete_t arg2) =>
        (objc.getBlockClosure(block) as void Function(sec_protocol_metadata_t,
            sec_trust_t, sec_protocol_verify_complete_t))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_metadata_t arg0,
                      sec_trust_t arg1, sec_protocol_verify_complete_t arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            sec_trust_t,
                            sec_protocol_verify_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet.fromFunction(
      void Function(sec_protocol_metadata_t, sec_trust_t, Dartsec_protocol_verify_complete_t)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            sec_protocol_metadata_t,
                            sec_trust_t,
                            sec_protocol_verify_complete_t)>(
                    _ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet_closureTrampoline)
                .cast(),
            (sec_protocol_metadata_t arg0, sec_trust_t arg1,
                    sec_protocol_verify_complete_t arg2) =>
                fn(arg0, arg1, ObjCBlock_ffiVoid_bool.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet.listener(void Function(sec_protocol_metadata_t, sec_trust_t, Dartsec_protocol_verify_complete_t) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                sec_protocol_metadata_t,
                                sec_trust_t,
                                sec_protocol_verify_complete_t)>.listener(
                        _ObjCBlock_ffiVoid_secprotocolmetadatat_sectrustt_secprotocolverifycompletet_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (sec_protocol_metadata_t arg0, sec_trust_t arg1,
                        sec_protocol_verify_complete_t arg2) =>
                    fn(arg0, arg1, ObjCBlock_ffiVoid_bool.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          sec_protocol_metadata_t,
          sec_trust_t,
          sec_protocol_verify_complete_t)>? _dartFuncListenerTrampoline;

  void call(sec_protocol_metadata_t arg0, sec_trust_t arg1,
          Dartsec_protocol_verify_complete_t arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          sec_protocol_metadata_t arg0,
                          sec_trust_t arg1,
                          sec_protocol_verify_complete_t arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      sec_protocol_metadata_t,
                      sec_trust_t,
                      sec_protocol_verify_complete_t)>()(
          pointer, arg0, arg1, arg2.pointer);
}

typedef sec_protocol_verify_complete_t = ffi.Pointer<objc.ObjCBlock>;
typedef Dartsec_protocol_verify_complete_t = ObjCBlock_ffiVoid_bool;
void _ObjCBlock_ffiVoid_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, bool arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
        .asFunction<void Function(bool)>()(arg0);
void _ObjCBlock_ffiVoid_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, bool arg0) =>
    (objc.getBlockClosure(block) as void Function(bool))(arg0);

class ObjCBlock_ffiVoid_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_bool._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Bool)>(_ObjCBlock_ffiVoid_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool.fromFunction(void Function(bool) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Bool)>(_ObjCBlock_ffiVoid_bool_closureTrampoline)
                .cast(),
            (bool arg0) => fn(arg0)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_bool.listener(void Function(bool) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Bool)>.listener(
                    _ObjCBlock_ffiVoid_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (bool arg0) => fn(arg0))));
  static ffi
      .NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool)>?
      _dartFuncListenerTrampoline;

  void call(bool arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block, ffi.Bool arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, bool)>()(
      pointer, arg0);
}

final class SSLContext extends ffi.Opaque {}

enum SSLSessionOption {
  kSSLSessionOptionBreakOnServerAuth(0),
  kSSLSessionOptionBreakOnCertRequested(1),
  kSSLSessionOptionBreakOnClientAuth(2),
  kSSLSessionOptionFalseStart(3),
  kSSLSessionOptionSendOneByteRecord(4),
  kSSLSessionOptionAllowServerIdentityChange(5),
  kSSLSessionOptionFallback(6),
  kSSLSessionOptionBreakOnClientHello(7),
  kSSLSessionOptionAllowRenegotiation(8),
  kSSLSessionOptionEnableSessionTickets(9);

  final int value;
  const SSLSessionOption(this.value);

  static SSLSessionOption fromValue(int value) => switch (value) {
        0 => kSSLSessionOptionBreakOnServerAuth,
        1 => kSSLSessionOptionBreakOnCertRequested,
        2 => kSSLSessionOptionBreakOnClientAuth,
        3 => kSSLSessionOptionFalseStart,
        4 => kSSLSessionOptionSendOneByteRecord,
        5 => kSSLSessionOptionAllowServerIdentityChange,
        6 => kSSLSessionOptionFallback,
        7 => kSSLSessionOptionBreakOnClientHello,
        8 => kSSLSessionOptionAllowRenegotiation,
        9 => kSSLSessionOptionEnableSessionTickets,
        _ => throw ArgumentError("Unknown value for SSLSessionOption: $value"),
      };
}

enum SSLSessionState {
  kSSLIdle(0),
  kSSLHandshake(1),
  kSSLConnected(2),
  kSSLClosed(3),
  kSSLAborted(4);

  final int value;
  const SSLSessionState(this.value);

  static SSLSessionState fromValue(int value) => switch (value) {
        0 => kSSLIdle,
        1 => kSSLHandshake,
        2 => kSSLConnected,
        3 => kSSLClosed,
        4 => kSSLAborted,
        _ => throw ArgumentError("Unknown value for SSLSessionState: $value"),
      };
}

enum SSLClientCertificateState {
  kSSLClientCertNone(0),
  kSSLClientCertRequested(1),
  kSSLClientCertSent(2),
  kSSLClientCertRejected(3);

  final int value;
  const SSLClientCertificateState(this.value);

  static SSLClientCertificateState fromValue(int value) => switch (value) {
        0 => kSSLClientCertNone,
        1 => kSSLClientCertRequested,
        2 => kSSLClientCertSent,
        3 => kSSLClientCertRejected,
        _ => throw ArgumentError(
            "Unknown value for SSLClientCertificateState: $value"),
      };
}

enum SSLProtocolSide {
  kSSLServerSide(0),
  kSSLClientSide(1);

  final int value;
  const SSLProtocolSide(this.value);

  static SSLProtocolSide fromValue(int value) => switch (value) {
        0 => kSSLServerSide,
        1 => kSSLClientSide,
        _ => throw ArgumentError("Unknown value for SSLProtocolSide: $value"),
      };
}

enum SSLConnectionType {
  kSSLStreamType(0),
  kSSLDatagramType(1);

  final int value;
  const SSLConnectionType(this.value);

  static SSLConnectionType fromValue(int value) => switch (value) {
        0 => kSSLStreamType,
        1 => kSSLDatagramType,
        _ => throw ArgumentError("Unknown value for SSLConnectionType: $value"),
      };
}

typedef SSLContextRef = ffi.Pointer<SSLContext>;
typedef SSLReadFunc = ffi.Pointer<ffi.NativeFunction<SSLReadFuncFunction>>;
typedef SSLReadFuncFunction = OSStatus Function(SSLConnectionRef connection,
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Size> dataLength);
typedef DartSSLReadFuncFunction = DartSInt32 Function(
    SSLConnectionRef connection,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Size> dataLength);
typedef SSLConnectionRef = ffi.Pointer<ffi.Void>;
typedef SSLWriteFunc = ffi.Pointer<ffi.NativeFunction<SSLWriteFuncFunction>>;
typedef SSLWriteFuncFunction = OSStatus Function(SSLConnectionRef connection,
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Size> dataLength);
typedef DartSSLWriteFuncFunction = DartSInt32 Function(
    SSLConnectionRef connection,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Size> dataLength);

enum SSLAuthenticate {
  kNeverAuthenticate(0),
  kAlwaysAuthenticate(1),
  kTryAuthenticate(2);

  final int value;
  const SSLAuthenticate(this.value);

  static SSLAuthenticate fromValue(int value) => switch (value) {
        0 => kNeverAuthenticate,
        1 => kAlwaysAuthenticate,
        2 => kTryAuthenticate,
        _ => throw ArgumentError("Unknown value for SSLAuthenticate: $value"),
      };
}

/// NSURLSession is a replacement API for NSURLConnection.  It provides
/// options that affect the policy of, and various aspects of the
/// mechanism by which NSURLRequest objects are retrieved from the
/// network.
///
/// An NSURLSession may be bound to a delegate object.  The delegate is
/// invoked for certain events during the lifetime of a session, such as
/// server authentication or determining whether a resource to be loaded
/// should be converted into a download.
///
/// NSURLSession instances are thread-safe.
///
/// The default NSURLSession uses a system provided delegate and is
/// appropriate to use in place of existing code that uses
/// +[NSURLConnection sendAsynchronousRequest:queue:completionHandler:]
///
/// An NSURLSession creates NSURLSessionTask objects which represent the
/// action of a resource being loaded.  These are analogous to
/// NSURLConnection objects but provide for more control and a unified
/// delegate model.
///
/// NSURLSessionTask objects are always created in a suspended state and
/// must be sent the -resume message before they will execute.
///
/// Subclasses of NSURLSessionTask are used to syntactically
/// differentiate between data and file downloads.
///
/// An NSURLSessionDataTask receives the resource as a series of calls to
/// the URLSession:dataTask:didReceiveData: delegate method.  This is type of
/// task most commonly associated with retrieving objects for immediate parsing
/// by the consumer.
///
/// An NSURLSessionUploadTask differs from an NSURLSessionDataTask
/// in how its instance is constructed.  Upload tasks are explicitly created
/// by referencing a file or data object to upload, or by utilizing the
/// -URLSession:task:needNewBodyStream: delegate message to supply an upload
/// body.
///
/// An NSURLSessionDownloadTask will directly write the response data to
/// a temporary file.  When completed, the delegate is sent
/// URLSession:downloadTask:didFinishDownloadingToURL: and given an opportunity
/// to move this file to a permanent location in its sandboxed container, or to
/// otherwise read the file. If canceled, an NSURLSessionDownloadTask can
/// produce a data blob that can be used to resume a download at a later
/// time.
///
/// Beginning with iOS 9 and Mac OS X 10.11, NSURLSessionStream is
/// available as a task type.  This allows for direct TCP/IP connection
/// to a given host and port with optional secure handshaking and
/// navigation of proxies.  Data tasks may also be upgraded to a
/// NSURLSessionStream task via the HTTP Upgrade: header and appropriate
/// use of the pipelining option of NSURLSessionConfiguration.  See RFC
/// 2817 and RFC 6455 for information about the Upgrade: header, and
/// comments below on turning data tasks into stream tasks.
///
/// An NSURLSessionWebSocketTask is a task that allows clients to connect to servers supporting
/// WebSocket. The task will perform the HTTP handshake to upgrade the connection
/// and once the WebSocket handshake is successful, the client can read and write
/// messages that will be framed using the WebSocket protocol by the framework.
class NSURLSession extends objc.NSObject {
  NSURLSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSession] that points to the same underlying object as [other].
  NSURLSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSession] that wraps the given raw object pointer.
  NSURLSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSession);
  }

  /// The shared session uses the currently set global NSURLCache,
  /// NSHTTPCookieStorage and NSURLCredentialStorage objects.
  static NSURLSession getSharedSession() {
    final _ret = _objc_msgSend_137(_class_NSURLSession, _sel_sharedSession);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// Customization of NSURLSession occurs during creation of a new session.
  /// If you only need to use the convenience routines with custom
  /// configuration options it is not necessary to specify a delegate.
  /// If you do specify a delegate, the delegate will be retained until after
  /// the delegate has been sent the URLSession:didBecomeInvalidWithError: message.
  static NSURLSession sessionWithConfiguration_(
      NSURLSessionConfiguration configuration) {
    final _ret = _objc_msgSend_153(_class_NSURLSession,
        _sel_sessionWithConfiguration_, configuration.pointer);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// sessionWithConfiguration:delegate:delegateQueue:
  static NSURLSession sessionWithConfiguration_delegate_delegateQueue_(
      NSURLSessionConfiguration configuration,
      objc.ObjCObjectBase? delegate,
      NSOperationQueue? queue) {
    final _ret = _objc_msgSend_154(
        _class_NSURLSession,
        _sel_sessionWithConfiguration_delegate_delegateQueue_,
        configuration.pointer,
        delegate?.pointer ?? ffi.nullptr,
        queue?.pointer ?? ffi.nullptr);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegateQueue
  NSOperationQueue get delegateQueue {
    final _ret = _objc_msgSend_116(this.pointer, _sel_delegateQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_3(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// configuration
  NSURLSessionConfiguration get configuration {
    final _ret = _objc_msgSend_138(this.pointer, _sel_configuration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// The sessionDescription property is available for the developer to
  /// provide a descriptive label for the session.
  objc.NSString? get sessionDescription {
    final _ret = _objc_msgSend_18(this.pointer, _sel_sessionDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// The sessionDescription property is available for the developer to
  /// provide a descriptive label for the session.
  set sessionDescription(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setSessionDescription_,
        value?.pointer ?? ffi.nullptr);
  }

  /// -finishTasksAndInvalidate returns immediately and existing tasks will be allowed
  /// to run to completion.  New tasks may not be created.  The session
  /// will continue to make delegate callbacks until URLSession:didBecomeInvalidWithError:
  /// has been issued.
  ///
  /// -finishTasksAndInvalidate and -invalidateAndCancel do not
  /// have any effect on the shared session singleton.
  ///
  /// When invalidating a background session, it is not safe to create another background
  /// session with the same identifier until URLSession:didBecomeInvalidWithError: has
  /// been issued.
  void finishTasksAndInvalidate() {
    _objc_msgSend_44(this.pointer, _sel_finishTasksAndInvalidate);
  }

  /// -invalidateAndCancel acts as -finishTasksAndInvalidate, but issues
  /// -cancel to all outstanding tasks for this session.  Note task
  /// cancellation is subject to the state of the task, and some tasks may
  /// have already have completed at the time they are sent -cancel.
  void invalidateAndCancel() {
    _objc_msgSend_44(this.pointer, _sel_invalidateAndCancel);
  }

  /// empty all cookies, cache and credential stores, removes disk files, issues -flushWithCompletionHandler:. Invokes completionHandler() on the delegate queue.
  void resetWithCompletionHandler_(ObjCBlock_ffiVoid completionHandler) {
    _objc_msgSend_110(this.pointer, _sel_resetWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// flush storage to disk and clear transient network caches.  Invokes completionHandler() on the delegate queue.
  void flushWithCompletionHandler_(ObjCBlock_ffiVoid completionHandler) {
    _objc_msgSend_110(this.pointer, _sel_flushWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// invokes completionHandler with outstanding data, upload and download tasks.
  void getTasksWithCompletionHandler_(
      ObjCBlock_ffiVoid_NSArray_NSArray_NSArray completionHandler) {
    _objc_msgSend_155(this.pointer, _sel_getTasksWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// invokes completionHandler with all outstanding tasks.
  void getAllTasksWithCompletionHandler_(
      ObjCBlock_ffiVoid_NSArray1 completionHandler) {
    _objc_msgSend_156(this.pointer, _sel_getAllTasksWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// Creates a data task with the given request.  The request may have a body stream.
  NSURLSessionDataTask dataTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_157(
        this.pointer, _sel_dataTaskWithRequest_, request.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a data task to retrieve the contents of the given URL.
  NSURLSessionDataTask dataTaskWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_158(this.pointer, _sel_dataTaskWithURL_, url.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates an upload task with the given request.  The body of the request will be created from the file referenced by fileURL
  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_(
      NSURLRequest request, objc.NSURL fileURL) {
    final _ret = _objc_msgSend_160(this.pointer,
        _sel_uploadTaskWithRequest_fromFile_, request.pointer, fileURL.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates an upload task with the given request.  The body of the request is provided from the bodyData.
  NSURLSessionUploadTask uploadTaskWithRequest_fromData_(
      NSURLRequest request, objc.NSData bodyData) {
    final _ret = _objc_msgSend_161(
        this.pointer,
        _sel_uploadTaskWithRequest_fromData_,
        request.pointer,
        bodyData.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates an upload task from a resume data blob. Requires the server to support the latest resumable uploads
  /// Internet-Draft from the HTTP Working Group, found at
  /// https://datatracker.ietf.org/doc/draft-ietf-httpbis-resumable-upload/
  /// If resuming from an upload file, the file must still exist and be unmodified. If the upload cannot be successfully
  /// resumed, URLSession:task:didCompleteWithError: will be called.
  ///
  /// - Parameter resumeData: Resume data blob from an incomplete upload, such as data returned by the cancelByProducingResumeData: method.
  /// - Returns: A new session upload task, or nil if the resumeData is invalid.
  NSURLSessionUploadTask uploadTaskWithResumeData_(objc.NSData resumeData) {
    final _ret = _objc_msgSend_162(
        this.pointer, _sel_uploadTaskWithResumeData_, resumeData.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates an upload task with the given request.  The previously set body stream of the request (if any) is ignored and the URLSession:task:needNewBodyStream: delegate will be called when the body payload is required.
  NSURLSessionUploadTask uploadTaskWithStreamedRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_163(
        this.pointer, _sel_uploadTaskWithStreamedRequest_, request.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a download task with the given request.
  NSURLSessionDownloadTask downloadTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_164(
        this.pointer, _sel_downloadTaskWithRequest_, request.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a download task to download the contents of the given URL.
  NSURLSessionDownloadTask downloadTaskWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_165(this.pointer, _sel_downloadTaskWithURL_, url.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a download task with the resume data.  If the download cannot be successfully resumed, URLSession:task:didCompleteWithError: will be called.
  NSURLSessionDownloadTask downloadTaskWithResumeData_(objc.NSData resumeData) {
    final _ret = _objc_msgSend_166(
        this.pointer, _sel_downloadTaskWithResumeData_, resumeData.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a bidirectional stream task to a given host and port.
  NSURLSessionStreamTask streamTaskWithHostName_port_(
      objc.NSString hostname, DartNSInteger port) {
    final _ret = _objc_msgSend_169(this.pointer,
        _sel_streamTaskWithHostName_port_, hostname.pointer, port);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a bidirectional stream task with an NSNetService to identify the endpoint.
  /// The NSNetService will be resolved before any IO completes.
  NSURLSessionStreamTask streamTaskWithNetService_(NSNetService service) {
    final _ret = _objc_msgSend_170(
        this.pointer, _sel_streamTaskWithNetService_, service.pointer);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a WebSocket task given the url. The given url must have a ws or wss scheme.
  NSURLSessionWebSocketTask webSocketTaskWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_178(
        this.pointer, _sel_webSocketTaskWithURL_, url.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a WebSocket task given the url and an array of protocols. The protocols will be used in the WebSocket handshake to
  /// negotiate a preferred protocol with the server
  /// Note - The protocol will not affect the WebSocket framing. More details on the protocol can be found by reading the WebSocket RFC
  NSURLSessionWebSocketTask webSocketTaskWithURL_protocols_(
      objc.NSURL url, objc.NSArray protocols) {
    final _ret = _objc_msgSend_179(this.pointer,
        _sel_webSocketTaskWithURL_protocols_, url.pointer, protocols.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a WebSocket task given the request. The request properties can be modified and will be used by the task during the HTTP handshake phase.
  /// Clients who want to add custom protocols can do so by directly adding headers with the key Sec-WebSocket-Protocol
  /// and a comma separated list of protocols they wish to negotiate with the server. The custom HTTP headers provided by the client will remain unchanged for the handshake with the server.
  NSURLSessionWebSocketTask webSocketTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_180(
        this.pointer, _sel_webSocketTaskWithRequest_, request.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSURLSession init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLSession new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSession, _sel_new);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// dataTaskWithRequest:completionHandler:
  NSURLSessionDataTask dataTaskWithRequest_completionHandler_(
      NSURLRequest request,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_181(
        this.pointer,
        _sel_dataTaskWithRequest_completionHandler_,
        request.pointer,
        completionHandler.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// dataTaskWithURL:completionHandler:
  NSURLSessionDataTask dataTaskWithURL_completionHandler_(objc.NSURL url,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_182(
        this.pointer,
        _sel_dataTaskWithURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithRequest:fromFile:completionHandler:
  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_completionHandler_(
      NSURLRequest request,
      objc.NSURL fileURL,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_183(
        this.pointer,
        _sel_uploadTaskWithRequest_fromFile_completionHandler_,
        request.pointer,
        fileURL.pointer,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithRequest:fromData:completionHandler:
  NSURLSessionUploadTask uploadTaskWithRequest_fromData_completionHandler_(
      NSURLRequest request,
      objc.NSData? bodyData,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_184(
        this.pointer,
        _sel_uploadTaskWithRequest_fromData_completionHandler_,
        request.pointer,
        bodyData?.pointer ?? ffi.nullptr,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithResumeData:completionHandler:
  NSURLSessionUploadTask uploadTaskWithResumeData_completionHandler_(
      objc.NSData resumeData,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_185(
        this.pointer,
        _sel_uploadTaskWithResumeData_completionHandler_,
        resumeData.pointer,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithRequest:completionHandler:
  NSURLSessionDownloadTask downloadTaskWithRequest_completionHandler_(
      NSURLRequest request,
      ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_186(
        this.pointer,
        _sel_downloadTaskWithRequest_completionHandler_,
        request.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithURL:completionHandler:
  NSURLSessionDownloadTask downloadTaskWithURL_completionHandler_(
      objc.NSURL url,
      ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_187(
        this.pointer,
        _sel_downloadTaskWithURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithResumeData:completionHandler:
  NSURLSessionDownloadTask downloadTaskWithResumeData_completionHandler_(
      objc.NSData resumeData,
      ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_188(
        this.pointer,
        _sel_downloadTaskWithResumeData_completionHandler_,
        resumeData.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allocWithZone:
  static NSURLSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLSession, _sel_allocWithZone_, zone);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLSession alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSession, _sel_alloc);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLSession = objc.getClass("NSURLSession");
late final _sel_sharedSession = objc.registerName("sharedSession");
final _objc_msgSend_137 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// Configuration options for an NSURLSession.  When a session is
/// created, a copy of the configuration object is made - you cannot
/// modify the configuration of a session after it has been created.
///
/// The shared session uses the global singleton credential, cache
/// and cookie storage objects.
///
/// An ephemeral session has no persistent disk storage for cookies,
/// cache or credentials.
///
/// A background session can be used to perform networking operations
/// on behalf of a suspended application, within certain constraints.
class NSURLSessionConfiguration extends objc.NSObject {
  NSURLSessionConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionConfiguration] that points to the same underlying object as [other].
  NSURLSessionConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionConfiguration] that wraps the given raw object pointer.
  NSURLSessionConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionConfiguration);
  }

  /// defaultSessionConfiguration
  static NSURLSessionConfiguration getDefaultSessionConfiguration() {
    final _ret = _objc_msgSend_138(
        _class_NSURLSessionConfiguration, _sel_defaultSessionConfiguration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// ephemeralSessionConfiguration
  static NSURLSessionConfiguration getEphemeralSessionConfiguration() {
    final _ret = _objc_msgSend_138(
        _class_NSURLSessionConfiguration, _sel_ephemeralSessionConfiguration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// backgroundSessionConfigurationWithIdentifier:
  static NSURLSessionConfiguration
      backgroundSessionConfigurationWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_139(_class_NSURLSessionConfiguration,
        _sel_backgroundSessionConfigurationWithIdentifier_, identifier.pointer);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// identifier for the background session configuration
  objc.NSString? get identifier {
    final _ret = _objc_msgSend_18(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// default cache policy for requests
  NSURLRequestCachePolicy get requestCachePolicy {
    final _ret = _objc_msgSend_32(this.pointer, _sel_requestCachePolicy);
    return NSURLRequestCachePolicy.fromValue(_ret);
  }

  /// default cache policy for requests
  set requestCachePolicy(NSURLRequestCachePolicy value) {
    return _objc_msgSend_118(
        this.pointer, _sel_setRequestCachePolicy_, value.value);
  }

  /// default timeout for requests.  This will cause a timeout if no data is transmitted for the given timeout value, and is reset whenever data is transmitted.
  DartNSTimeInterval get timeoutIntervalForRequest {
    return _objc_msgSend_33(this.pointer, _sel_timeoutIntervalForRequest);
  }

  /// default timeout for requests.  This will cause a timeout if no data is transmitted for the given timeout value, and is reset whenever data is transmitted.
  set timeoutIntervalForRequest(DartNSTimeInterval value) {
    return _objc_msgSend_106(
        this.pointer, _sel_setTimeoutIntervalForRequest_, value);
  }

  /// default timeout for requests.  This will cause a timeout if a resource is not able to be retrieved within a given timeout.
  DartNSTimeInterval get timeoutIntervalForResource {
    return _objc_msgSend_33(this.pointer, _sel_timeoutIntervalForResource);
  }

  /// default timeout for requests.  This will cause a timeout if a resource is not able to be retrieved within a given timeout.
  set timeoutIntervalForResource(DartNSTimeInterval value) {
    return _objc_msgSend_106(
        this.pointer, _sel_setTimeoutIntervalForResource_, value);
  }

  /// type of service for requests.
  NSURLRequestNetworkServiceType get networkServiceType {
    final _ret = _objc_msgSend_34(this.pointer, _sel_networkServiceType);
    return NSURLRequestNetworkServiceType.fromValue(_ret);
  }

  /// type of service for requests.
  set networkServiceType(NSURLRequestNetworkServiceType value) {
    return _objc_msgSend_119(
        this.pointer, _sel_setNetworkServiceType_, value.value);
  }

  /// allow request to route over cellular.
  bool get allowsCellularAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsCellularAccess);
  }

  /// allow request to route over cellular.
  set allowsCellularAccess(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setAllowsCellularAccess_, value);
  }

  /// allow request to route over expensive networks.  Defaults to YES.
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  /// allow request to route over expensive networks.  Defaults to YES.
  set allowsExpensiveNetworkAccess(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setAllowsExpensiveNetworkAccess_, value);
  }

  /// allow request to route over networks in constrained mode. Defaults to YES.
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  /// allow request to route over networks in constrained mode. Defaults to YES.
  set allowsConstrainedNetworkAccess(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setAllowsConstrainedNetworkAccess_, value);
  }

  /// requires requests from the session to be made with DNSSEC validation enabled. Defaults to NO.
  bool get requiresDNSSECValidation {
    return _objc_msgSend_13(this.pointer, _sel_requiresDNSSECValidation);
  }

  /// requires requests from the session to be made with DNSSEC validation enabled. Defaults to NO.
  set requiresDNSSECValidation(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setRequiresDNSSECValidation_, value);
  }

  /// Causes tasks to wait for network connectivity to become available, rather
  /// than immediately failing with an error (such as NSURLErrorNotConnectedToInternet)
  /// when it is not. When waiting for connectivity, the timeoutIntervalForRequest
  /// property does not apply, but the timeoutIntervalForResource property does.
  ///
  /// Unsatisfactory connectivity (that requires waiting) includes cases where the
  /// device has limited or insufficient connectivity for a task (e.g., only has a
  /// cellular connection but the allowsCellularAccess property is NO, or requires
  /// a VPN connection in order to reach the desired host).
  ///
  /// Default value is NO. Ignored by background sessions, as background sessions
  /// always wait for connectivity.
  bool get waitsForConnectivity {
    return _objc_msgSend_13(this.pointer, _sel_waitsForConnectivity);
  }

  /// Causes tasks to wait for network connectivity to become available, rather
  /// than immediately failing with an error (such as NSURLErrorNotConnectedToInternet)
  /// when it is not. When waiting for connectivity, the timeoutIntervalForRequest
  /// property does not apply, but the timeoutIntervalForResource property does.
  ///
  /// Unsatisfactory connectivity (that requires waiting) includes cases where the
  /// device has limited or insufficient connectivity for a task (e.g., only has a
  /// cellular connection but the allowsCellularAccess property is NO, or requires
  /// a VPN connection in order to reach the desired host).
  ///
  /// Default value is NO. Ignored by background sessions, as background sessions
  /// always wait for connectivity.
  set waitsForConnectivity(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setWaitsForConnectivity_, value);
  }

  /// allows background tasks to be scheduled at the discretion of the system for optimal performance.
  bool get discretionary {
    return _objc_msgSend_13(this.pointer, _sel_isDiscretionary);
  }

  /// allows background tasks to be scheduled at the discretion of the system for optimal performance.
  set discretionary(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setDiscretionary_, value);
  }

  /// The identifier of the shared data container into which files in background sessions should be downloaded.
  /// App extensions wishing to use background sessions *must* set this property to a valid container identifier, or
  /// all transfers in that session will fail with NSURLErrorBackgroundSessionRequiresSharedContainer.
  objc.NSString? get sharedContainerIdentifier {
    final _ret = _objc_msgSend_18(this.pointer, _sel_sharedContainerIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// The identifier of the shared data container into which files in background sessions should be downloaded.
  /// App extensions wishing to use background sessions *must* set this property to a valid container identifier, or
  /// all transfers in that session will fail with NSURLErrorBackgroundSessionRequiresSharedContainer.
  set sharedContainerIdentifier(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setSharedContainerIdentifier_,
        value?.pointer ?? ffi.nullptr);
  }

  /// Allows the app to be resumed or launched in the background when tasks in background sessions complete
  /// or when auth is required. This only applies to configurations created with +backgroundSessionConfigurationWithIdentifier:
  /// and the default value is YES.
  ///
  /// NOTE: macOS apps based on AppKit do not support background launch.
  bool get sessionSendsLaunchEvents {
    return _objc_msgSend_13(this.pointer, _sel_sessionSendsLaunchEvents);
  }

  /// Allows the app to be resumed or launched in the background when tasks in background sessions complete
  /// or when auth is required. This only applies to configurations created with +backgroundSessionConfigurationWithIdentifier:
  /// and the default value is YES.
  ///
  /// NOTE: macOS apps based on AppKit do not support background launch.
  set sessionSendsLaunchEvents(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setSessionSendsLaunchEvents_, value);
  }

  /// The proxy dictionary, as described by <CFNetwork/CFHTTPStream.h>
  objc.NSDictionary? get connectionProxyDictionary {
    final _ret = _objc_msgSend_24(this.pointer, _sel_connectionProxyDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// The proxy dictionary, as described by <CFNetwork/CFHTTPStream.h>
  set connectionProxyDictionary(objc.NSDictionary? value) {
    return _objc_msgSend_121(this.pointer, _sel_setConnectionProxyDictionary_,
        value?.pointer ?? ffi.nullptr);
  }

  /// The minimum allowable versions of the TLS protocol, from <Security/SecureTransport.h>
  SSLProtocol get TLSMinimumSupportedProtocol {
    final _ret =
        _objc_msgSend_140(this.pointer, _sel_TLSMinimumSupportedProtocol);
    return SSLProtocol.fromValue(_ret);
  }

  /// The minimum allowable versions of the TLS protocol, from <Security/SecureTransport.h>
  set TLSMinimumSupportedProtocol(SSLProtocol value) {
    return _objc_msgSend_141(
        this.pointer, _sel_setTLSMinimumSupportedProtocol_, value.value);
  }

  /// The maximum allowable versions of the TLS protocol, from <Security/SecureTransport.h>
  SSLProtocol get TLSMaximumSupportedProtocol {
    final _ret =
        _objc_msgSend_140(this.pointer, _sel_TLSMaximumSupportedProtocol);
    return SSLProtocol.fromValue(_ret);
  }

  /// The maximum allowable versions of the TLS protocol, from <Security/SecureTransport.h>
  set TLSMaximumSupportedProtocol(SSLProtocol value) {
    return _objc_msgSend_141(
        this.pointer, _sel_setTLSMaximumSupportedProtocol_, value.value);
  }

  /// The minimum allowable versions of the TLS protocol, from <Security/SecProtocolTypes.h>
  tls_protocol_version_t get TLSMinimumSupportedProtocolVersion {
    final _ret = _objc_msgSend_142(
        this.pointer, _sel_TLSMinimumSupportedProtocolVersion);
    return tls_protocol_version_t.fromValue(_ret);
  }

  /// The minimum allowable versions of the TLS protocol, from <Security/SecProtocolTypes.h>
  set TLSMinimumSupportedProtocolVersion(tls_protocol_version_t value) {
    return _objc_msgSend_143(
        this.pointer, _sel_setTLSMinimumSupportedProtocolVersion_, value.value);
  }

  /// The maximum allowable versions of the TLS protocol, from <Security/SecProtocolTypes.h>
  tls_protocol_version_t get TLSMaximumSupportedProtocolVersion {
    final _ret = _objc_msgSend_142(
        this.pointer, _sel_TLSMaximumSupportedProtocolVersion);
    return tls_protocol_version_t.fromValue(_ret);
  }

  /// The maximum allowable versions of the TLS protocol, from <Security/SecProtocolTypes.h>
  set TLSMaximumSupportedProtocolVersion(tls_protocol_version_t value) {
    return _objc_msgSend_143(
        this.pointer, _sel_setTLSMaximumSupportedProtocolVersion_, value.value);
  }

  /// Allow the use of HTTP pipelining
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  /// Allow the use of HTTP pipelining
  set HTTPShouldUsePipelining(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setHTTPShouldUsePipelining_, value);
  }

  /// Allow the session to set cookies on requests
  bool get HTTPShouldSetCookies {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldSetCookies);
  }

  /// Allow the session to set cookies on requests
  set HTTPShouldSetCookies(bool value) {
    return _objc_msgSend_76(this.pointer, _sel_setHTTPShouldSetCookies_, value);
  }

  /// Policy for accepting cookies.  This overrides the policy otherwise specified by the cookie storage.
  NSHTTPCookieAcceptPolicy get HTTPCookieAcceptPolicy {
    final _ret = _objc_msgSend_132(this.pointer, _sel_HTTPCookieAcceptPolicy);
    return NSHTTPCookieAcceptPolicy.fromValue(_ret);
  }

  /// Policy for accepting cookies.  This overrides the policy otherwise specified by the cookie storage.
  set HTTPCookieAcceptPolicy(NSHTTPCookieAcceptPolicy value) {
    return _objc_msgSend_133(
        this.pointer, _sel_setHTTPCookieAcceptPolicy_, value.value);
  }

  /// Specifies additional headers which will be set on outgoing requests.
  /// Note that these headers are added to the request only if not already present.
  objc.NSDictionary? get HTTPAdditionalHeaders {
    final _ret = _objc_msgSend_24(this.pointer, _sel_HTTPAdditionalHeaders);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// Specifies additional headers which will be set on outgoing requests.
  /// Note that these headers are added to the request only if not already present.
  set HTTPAdditionalHeaders(objc.NSDictionary? value) {
    return _objc_msgSend_121(this.pointer, _sel_setHTTPAdditionalHeaders_,
        value?.pointer ?? ffi.nullptr);
  }

  /// The maximum number of simultaneous persistent connections per host
  DartNSInteger get HTTPMaximumConnectionsPerHost {
    return _objc_msgSend_111(this.pointer, _sel_HTTPMaximumConnectionsPerHost);
  }

  /// The maximum number of simultaneous persistent connections per host
  set HTTPMaximumConnectionsPerHost(DartNSInteger value) {
    return _objc_msgSend_112(
        this.pointer, _sel_setHTTPMaximumConnectionsPerHost_, value);
  }

  /// The cookie storage object to use, or nil to indicate that no cookies should be handled
  NSHTTPCookieStorage? get HTTPCookieStorage {
    final _ret = _objc_msgSend_144(this.pointer, _sel_HTTPCookieStorage);
    return _ret.address == 0
        ? null
        : NSHTTPCookieStorage.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// The cookie storage object to use, or nil to indicate that no cookies should be handled
  set HTTPCookieStorage(NSHTTPCookieStorage? value) {
    return _objc_msgSend_145(this.pointer, _sel_setHTTPCookieStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  /// The credential storage object, or nil to indicate that no credential storage is to be used
  NSURLCredentialStorage? get URLCredentialStorage {
    final _ret = _objc_msgSend_146(this.pointer, _sel_URLCredentialStorage);
    return _ret.address == 0
        ? null
        : NSURLCredentialStorage.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// The credential storage object, or nil to indicate that no credential storage is to be used
  set URLCredentialStorage(NSURLCredentialStorage? value) {
    return _objc_msgSend_147(this.pointer, _sel_setURLCredentialStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  /// The URL resource cache, or nil to indicate that no caching is to be performed
  NSURLCache? get URLCache {
    final _ret = _objc_msgSend_148(this.pointer, _sel_URLCache);
    return _ret.address == 0
        ? null
        : NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// The URL resource cache, or nil to indicate that no caching is to be performed
  set URLCache(NSURLCache? value) {
    return _objc_msgSend_149(
        this.pointer, _sel_setURLCache_, value?.pointer ?? ffi.nullptr);
  }

  /// Enable extended background idle mode for any tcp sockets created.    Enabling this mode asks the system to keep the socket open
  /// and delay reclaiming it when the process moves to the background (see https://developer.apple.com/library/ios/technotes/tn2277/_index.html)
  bool get shouldUseExtendedBackgroundIdleMode {
    return _objc_msgSend_13(
        this.pointer, _sel_shouldUseExtendedBackgroundIdleMode);
  }

  /// Enable extended background idle mode for any tcp sockets created.    Enabling this mode asks the system to keep the socket open
  /// and delay reclaiming it when the process moves to the background (see https://developer.apple.com/library/ios/technotes/tn2277/_index.html)
  set shouldUseExtendedBackgroundIdleMode(bool value) {
    return _objc_msgSend_76(
        this.pointer, _sel_setShouldUseExtendedBackgroundIdleMode_, value);
  }

  /// An optional array of Class objects which subclass NSURLProtocol.
  /// The Class will be sent +canInitWithRequest: when determining if
  /// an instance of the class can be used for a given URL scheme.
  /// You should not use +[NSURLProtocol registerClass:], as that
  /// method will register your class with the default session rather
  /// than with an instance of NSURLSession.
  /// Custom NSURLProtocol subclasses are not available to background
  /// sessions.
  objc.NSArray? get protocolClasses {
    final _ret = _objc_msgSend_128(this.pointer, _sel_protocolClasses);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// An optional array of Class objects which subclass NSURLProtocol.
  /// The Class will be sent +canInitWithRequest: when determining if
  /// an instance of the class can be used for a given URL scheme.
  /// You should not use +[NSURLProtocol registerClass:], as that
  /// method will register your class with the default session rather
  /// than with an instance of NSURLSession.
  /// Custom NSURLProtocol subclasses are not available to background
  /// sessions.
  set protocolClasses(objc.NSArray? value) {
    return _objc_msgSend_150(
        this.pointer, _sel_setProtocolClasses_, value?.pointer ?? ffi.nullptr);
  }

  /// multipath service type to use for connections.  The default is NSURLSessionMultipathServiceTypeNone
  NSURLSessionMultipathServiceType get multipathServiceType {
    final _ret = _objc_msgSend_151(this.pointer, _sel_multipathServiceType);
    return NSURLSessionMultipathServiceType.fromValue(_ret);
  }

  /// multipath service type to use for connections.  The default is NSURLSessionMultipathServiceTypeNone
  set multipathServiceType(NSURLSessionMultipathServiceType value) {
    return _objc_msgSend_152(
        this.pointer, _sel_setMultipathServiceType_, value.value);
  }

  /// init
  NSURLSessionConfiguration init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionConfiguration new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionConfiguration, _sel_new);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// backgroundSessionConfiguration:
  static NSURLSessionConfiguration backgroundSessionConfiguration_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_139(_class_NSURLSessionConfiguration,
        _sel_backgroundSessionConfiguration_, identifier.pointer);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allocWithZone:
  static NSURLSessionConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionConfiguration, _sel_allocWithZone_, zone);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionConfiguration alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionConfiguration, _sel_alloc);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionConfiguration =
    objc.getClass("NSURLSessionConfiguration");
late final _sel_defaultSessionConfiguration =
    objc.registerName("defaultSessionConfiguration");
final _objc_msgSend_138 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_ephemeralSessionConfiguration =
    objc.registerName("ephemeralSessionConfiguration");
late final _sel_backgroundSessionConfigurationWithIdentifier_ =
    objc.registerName("backgroundSessionConfigurationWithIdentifier:");
final _objc_msgSend_139 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_identifier = objc.registerName("identifier");
late final _sel_requestCachePolicy = objc.registerName("requestCachePolicy");
late final _sel_setRequestCachePolicy_ =
    objc.registerName("setRequestCachePolicy:");
late final _sel_timeoutIntervalForRequest =
    objc.registerName("timeoutIntervalForRequest");
late final _sel_setTimeoutIntervalForRequest_ =
    objc.registerName("setTimeoutIntervalForRequest:");
late final _sel_timeoutIntervalForResource =
    objc.registerName("timeoutIntervalForResource");
late final _sel_setTimeoutIntervalForResource_ =
    objc.registerName("setTimeoutIntervalForResource:");
late final _sel_waitsForConnectivity =
    objc.registerName("waitsForConnectivity");
late final _sel_setWaitsForConnectivity_ =
    objc.registerName("setWaitsForConnectivity:");
late final _sel_isDiscretionary = objc.registerName("isDiscretionary");
late final _sel_setDiscretionary_ = objc.registerName("setDiscretionary:");
late final _sel_sharedContainerIdentifier =
    objc.registerName("sharedContainerIdentifier");
late final _sel_setSharedContainerIdentifier_ =
    objc.registerName("setSharedContainerIdentifier:");
late final _sel_sessionSendsLaunchEvents =
    objc.registerName("sessionSendsLaunchEvents");
late final _sel_setSessionSendsLaunchEvents_ =
    objc.registerName("setSessionSendsLaunchEvents:");
late final _sel_connectionProxyDictionary =
    objc.registerName("connectionProxyDictionary");
late final _sel_setConnectionProxyDictionary_ =
    objc.registerName("setConnectionProxyDictionary:");
late final _sel_TLSMinimumSupportedProtocol =
    objc.registerName("TLSMinimumSupportedProtocol");
final _objc_msgSend_140 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTLSMinimumSupportedProtocol_ =
    objc.registerName("setTLSMinimumSupportedProtocol:");
final _objc_msgSend_141 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_TLSMaximumSupportedProtocol =
    objc.registerName("TLSMaximumSupportedProtocol");
late final _sel_setTLSMaximumSupportedProtocol_ =
    objc.registerName("setTLSMaximumSupportedProtocol:");
late final _sel_TLSMinimumSupportedProtocolVersion =
    objc.registerName("TLSMinimumSupportedProtocolVersion");
final _objc_msgSend_142 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint16 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTLSMinimumSupportedProtocolVersion_ =
    objc.registerName("setTLSMinimumSupportedProtocolVersion:");
final _objc_msgSend_143 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint16)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_TLSMaximumSupportedProtocolVersion =
    objc.registerName("TLSMaximumSupportedProtocolVersion");
late final _sel_setTLSMaximumSupportedProtocolVersion_ =
    objc.registerName("setTLSMaximumSupportedProtocolVersion:");
late final _sel_HTTPShouldSetCookies =
    objc.registerName("HTTPShouldSetCookies");
late final _sel_setHTTPShouldSetCookies_ =
    objc.registerName("setHTTPShouldSetCookies:");
late final _sel_HTTPCookieAcceptPolicy =
    objc.registerName("HTTPCookieAcceptPolicy");
late final _sel_setHTTPCookieAcceptPolicy_ =
    objc.registerName("setHTTPCookieAcceptPolicy:");
late final _sel_HTTPAdditionalHeaders =
    objc.registerName("HTTPAdditionalHeaders");
late final _sel_setHTTPAdditionalHeaders_ =
    objc.registerName("setHTTPAdditionalHeaders:");
late final _sel_HTTPMaximumConnectionsPerHost =
    objc.registerName("HTTPMaximumConnectionsPerHost");
late final _sel_setHTTPMaximumConnectionsPerHost_ =
    objc.registerName("setHTTPMaximumConnectionsPerHost:");
late final _sel_HTTPCookieStorage = objc.registerName("HTTPCookieStorage");
final _objc_msgSend_144 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setHTTPCookieStorage_ =
    objc.registerName("setHTTPCookieStorage:");
final _objc_msgSend_145 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLCredentialStorage
class NSURLCredentialStorage extends objc.ObjCObjectBase {
  NSURLCredentialStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCredentialStorage] that points to the same underlying object as [other].
  NSURLCredentialStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCredentialStorage] that wraps the given raw object pointer.
  NSURLCredentialStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCredentialStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLCredentialStorage);
  }
}

late final _class_NSURLCredentialStorage =
    objc.getClass("NSURLCredentialStorage");
late final _sel_URLCredentialStorage =
    objc.registerName("URLCredentialStorage");
final _objc_msgSend_146 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setURLCredentialStorage_ =
    objc.registerName("setURLCredentialStorage:");
final _objc_msgSend_147 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLCache = objc.registerName("URLCache");
final _objc_msgSend_148 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setURLCache_ = objc.registerName("setURLCache:");
final _objc_msgSend_149 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldUseExtendedBackgroundIdleMode =
    objc.registerName("shouldUseExtendedBackgroundIdleMode");
late final _sel_setShouldUseExtendedBackgroundIdleMode_ =
    objc.registerName("setShouldUseExtendedBackgroundIdleMode:");
late final _sel_protocolClasses = objc.registerName("protocolClasses");
late final _sel_setProtocolClasses_ = objc.registerName("setProtocolClasses:");
final _objc_msgSend_150 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// !
/// @enum NSURLSessionMultipathServiceType
///
/// @discussion The NSURLSessionMultipathServiceType enum defines constants that
/// can be used to specify the multipath service type to associate an NSURLSession.  The
/// multipath service type determines whether multipath TCP should be attempted and the conditions
/// for creating and switching between subflows.  Using these service types requires the appropriate entitlement.  Any connection attempt will fail if the process does not have the required entitlement.
/// A primary interface is a generally less expensive interface in terms of both cost and power (such as WiFi or ethernet).  A secondary interface is more expensive (such as 3G or LTE).
///
/// @constant NSURLSessionMultipathServiceTypeNone Specifies that multipath tcp should not be used.  Connections will use a single flow.
/// This is the default value.  No entitlement is required to set this value.
///
/// @constant NSURLSessionMultipathServiceTypeHandover Specifies that a secondary subflow should only be used
/// when the primary subflow is not performing adequately.   Requires the com.apple.developer.networking.multipath entitlement.
///
/// @constant NSURLSessionMultipathServiceTypeInteractive Specifies that a secondary subflow should be used if the
/// primary subflow is not performing adequately (packet loss, high round trip times, bandwidth issues).  The secondary
/// subflow will be created more aggressively than with NSURLSessionMultipathServiceTypeHandover.  Requires the com.apple.developer.networking.multipath entitlement.
///
/// @constant NSURLSessionMultipathServiceTypeAggregate Specifies that multiple subflows across multiple interfaces should be
/// used for better bandwidth.  This mode is only available for experimentation on devices configured for development use.
/// It can be enabled in the Developer section of the Settings app.
enum NSURLSessionMultipathServiceType {
  /// None - no multipath (default)
  NSURLSessionMultipathServiceTypeNone(0),

  /// Handover - secondary flows brought up when primary flow is not performing adequately.
  NSURLSessionMultipathServiceTypeHandover(1),

  /// Interactive - secondary flows created more aggressively.
  NSURLSessionMultipathServiceTypeInteractive(2),

  /// Aggregate - multiple subflows used for greater bandwidth.
  NSURLSessionMultipathServiceTypeAggregate(3);

  final int value;
  const NSURLSessionMultipathServiceType(this.value);

  static NSURLSessionMultipathServiceType fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionMultipathServiceTypeNone,
        1 => NSURLSessionMultipathServiceTypeHandover,
        2 => NSURLSessionMultipathServiceTypeInteractive,
        3 => NSURLSessionMultipathServiceTypeAggregate,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionMultipathServiceType: $value"),
      };
}

late final _sel_multipathServiceType =
    objc.registerName("multipathServiceType");
final _objc_msgSend_151 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMultipathServiceType_ =
    objc.registerName("setMultipathServiceType:");
final _objc_msgSend_152 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_backgroundSessionConfiguration_ =
    objc.registerName("backgroundSessionConfiguration:");
late final _sel_sessionWithConfiguration_ =
    objc.registerName("sessionWithConfiguration:");
final _objc_msgSend_153 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sessionWithConfiguration_delegate_delegateQueue_ =
    objc.registerName("sessionWithConfiguration:delegate:delegateQueue:");
final _objc_msgSend_154 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_delegateQueue = objc.registerName("delegateQueue");
late final _sel_configuration = objc.registerName("configuration");
late final _sel_sessionDescription = objc.registerName("sessionDescription");
late final _sel_setSessionDescription_ =
    objc.registerName("setSessionDescription:");
late final _sel_finishTasksAndInvalidate =
    objc.registerName("finishTasksAndInvalidate");
late final _sel_invalidateAndCancel = objc.registerName("invalidateAndCancel");
late final _sel_resetWithCompletionHandler_ =
    objc.registerName("resetWithCompletionHandler:");
late final _sel_flushWithCompletionHandler_ =
    objc.registerName("flushWithCompletionHandler:");
void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSArray_NSArray_NSArray extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray_NSArray_NSArray castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSArray_NSArray_NSArray._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.fromFunction(
      void Function(objc.NSArray, objc.NSArray, objc.NSArray) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                objc.NSArray.castFromPointer(arg0, retain: true, release: true),
                objc.NSArray.castFromPointer(arg1, retain: true, release: true),
                objc.NSArray.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.listener(
      void Function(objc.NSArray, objc.NSArray, objc.NSArray) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(
                    objc.NSArray.castFromPointer(arg0,
                        retain: false, release: true),
                    objc.NSArray.castFromPointer(arg1, retain: false, release: true),
                    objc.NSArray.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSArray arg0, objc.NSArray arg1, objc.NSArray arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1.pointer, arg2.pointer);
}

late final _sel_getTasksWithCompletionHandler_ =
    objc.registerName("getTasksWithCompletionHandler:");
final _objc_msgSend_155 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSArray1_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSArray1 extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray1._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray1 castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSArray1._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray1.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray1.fromFunction(void Function(objc.NSArray) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray1_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                objc.NSArray.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray1.listener(void Function(objc.NSArray) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSArray1(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSArray1_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    objc.NSArray.castFromPointer(arg0,
                        retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSArray arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_getAllTasksWithCompletionHandler_ =
    objc.registerName("getAllTasksWithCompletionHandler:");
final _objc_msgSend_156 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_dataTaskWithRequest_ =
    objc.registerName("dataTaskWithRequest:");
final _objc_msgSend_157 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dataTaskWithURL_ = objc.registerName("dataTaskWithURL:");
final _objc_msgSend_158 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// An NSURLSessionUploadTask does not currently provide any additional
/// functionality over an NSURLSessionDataTask.  All delegate messages
/// that may be sent referencing an NSURLSessionDataTask equally apply
/// to NSURLSessionUploadTasks.
class NSURLSessionUploadTask extends NSURLSessionDataTask {
  NSURLSessionUploadTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionUploadTask] that points to the same underlying object as [other].
  NSURLSessionUploadTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionUploadTask] that wraps the given raw object pointer.
  NSURLSessionUploadTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionUploadTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionUploadTask);
  }

  /// init
  NSURLSessionUploadTask init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionUploadTask new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionUploadTask, _sel_new);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Cancels an upload and calls the completion handler with resume data for later use.
  /// resumeData will be nil if the server does not support the latest resumable uploads
  /// Internet-Draft from the HTTP Working Group, found at
  /// https://datatracker.ietf.org/doc/draft-ietf-httpbis-resumable-upload/
  ///
  /// - Parameter completionHandler: The completion handler to call when the upload has been successfully canceled.
  void cancelByProducingResumeData_(
      ObjCBlock_ffiVoid_NSData completionHandler) {
    _objc_msgSend_159(this.pointer, _sel_cancelByProducingResumeData_,
        completionHandler.pointer);
  }

  /// allocWithZone:
  static NSURLSessionUploadTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionUploadTask, _sel_allocWithZone_, zone);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionUploadTask alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionUploadTask, _sel_alloc);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionUploadTask =
    objc.getClass("NSURLSessionUploadTask");
void _ObjCBlock_ffiVoid_NSData_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSData_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSData extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData.fromFunction(void Function(objc.NSData?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : objc.NSData.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData.listener(void Function(objc.NSData?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSData(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSData_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : objc.NSData.castFromPointer(arg0,
                    retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSData? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_cancelByProducingResumeData_ =
    objc.registerName("cancelByProducingResumeData:");
final _objc_msgSend_159 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithRequest_fromFile_ =
    objc.registerName("uploadTaskWithRequest:fromFile:");
final _objc_msgSend_160 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithRequest_fromData_ =
    objc.registerName("uploadTaskWithRequest:fromData:");
final _objc_msgSend_161 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithResumeData_ =
    objc.registerName("uploadTaskWithResumeData:");
final _objc_msgSend_162 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithStreamedRequest_ =
    objc.registerName("uploadTaskWithStreamedRequest:");
final _objc_msgSend_163 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLSessionDownloadTask is a task that represents a download to
/// local storage.
class NSURLSessionDownloadTask extends NSURLSessionTask {
  NSURLSessionDownloadTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionDownloadTask] that points to the same underlying object as [other].
  NSURLSessionDownloadTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionDownloadTask] that wraps the given raw object pointer.
  NSURLSessionDownloadTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionDownloadTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionDownloadTask);
  }

  /// Cancel the download (and calls the superclass -cancel).  If
  /// conditions will allow for resuming the download in the future, the
  /// callback will be called with an opaque data blob, which may be used
  /// with -downloadTaskWithResumeData: to attempt to resume the download.
  /// If resume data cannot be created, the completion handler will be
  /// called with nil resumeData.
  void cancelByProducingResumeData_(
      ObjCBlock_ffiVoid_NSData completionHandler) {
    _objc_msgSend_159(this.pointer, _sel_cancelByProducingResumeData_,
        completionHandler.pointer);
  }

  /// init
  NSURLSessionDownloadTask init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionDownloadTask new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionDownloadTask, _sel_new);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionDownloadTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionDownloadTask, _sel_allocWithZone_, zone);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionDownloadTask alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionDownloadTask, _sel_alloc);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionDownloadTask =
    objc.getClass("NSURLSessionDownloadTask");
late final _sel_downloadTaskWithRequest_ =
    objc.registerName("downloadTaskWithRequest:");
final _objc_msgSend_164 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_downloadTaskWithURL_ =
    objc.registerName("downloadTaskWithURL:");
final _objc_msgSend_165 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_downloadTaskWithResumeData_ =
    objc.registerName("downloadTaskWithResumeData:");
final _objc_msgSend_166 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// An NSURLSessionStreamTask provides an interface to perform reads
/// and writes to a TCP/IP stream created via NSURLSession.  This task
/// may be explicitly created from an NSURLSession, or created as a
/// result of the appropriate disposition response to a
/// -URLSession:dataTask:didReceiveResponse: delegate message.
///
/// NSURLSessionStreamTask can be used to perform asynchronous reads
/// and writes.  Reads and writes are enqueued and executed serially,
/// with the completion handler being invoked on the sessions delegate
/// queue.  If an error occurs, or the task is canceled, all
/// outstanding read and write calls will have their completion
/// handlers invoked with an appropriate error.
///
/// It is also possible to create NSInputStream and NSOutputStream
/// instances from an NSURLSessionTask by sending
/// -captureStreams to the task.  All outstanding reads and writes are
/// completed before the streams are created.  Once the streams are
/// delivered to the session delegate, the task is considered complete
/// and will receive no more messages.  These streams are
/// disassociated from the underlying session.
class NSURLSessionStreamTask extends NSURLSessionTask {
  NSURLSessionStreamTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionStreamTask] that points to the same underlying object as [other].
  NSURLSessionStreamTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionStreamTask] that wraps the given raw object pointer.
  NSURLSessionStreamTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionStreamTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionStreamTask);
  }

  /// Read minBytes, or at most maxBytes bytes and invoke the completion
  /// handler on the sessions delegate queue with the data or an error.
  /// If an error occurs, any outstanding reads will also fail, and new
  /// read requests will error out immediately.
  void readDataOfMinLength_maxLength_timeout_completionHandler_(
      DartNSUInteger minBytes,
      DartNSUInteger maxBytes,
      DartNSTimeInterval timeout,
      ObjCBlock_ffiVoid_NSData_bool_NSError completionHandler) {
    _objc_msgSend_167(
        this.pointer,
        _sel_readDataOfMinLength_maxLength_timeout_completionHandler_,
        minBytes,
        maxBytes,
        timeout,
        completionHandler.pointer);
  }

  /// Write the data completely to the underlying socket.  If all the
  /// bytes have not been written by the timeout, a timeout error will
  /// occur.  Note that invocation of the completion handler does not
  /// guarantee that the remote side has received all the bytes, only
  /// that they have been written to the kernel.
  void writeData_timeout_completionHandler_(objc.NSData data,
      DartNSTimeInterval timeout, ObjCBlock_ffiVoid_NSError completionHandler) {
    _objc_msgSend_168(this.pointer, _sel_writeData_timeout_completionHandler_,
        data.pointer, timeout, completionHandler.pointer);
  }

  /// -captureStreams completes any already enqueued reads
  /// and writes, and then invokes the
  /// URLSession:streamTask:didBecomeInputStream:outputStream: delegate
  /// message. When that message is received, the task object is
  /// considered completed and will not receive any more delegate
  /// messages.
  void captureStreams() {
    _objc_msgSend_44(this.pointer, _sel_captureStreams);
  }

  /// Enqueue a request to close the write end of the underlying socket.
  /// All outstanding IO will complete before the write side of the
  /// socket is closed.  The server, however, may continue to write bytes
  /// back to the client, so best practice is to continue reading from
  /// the server until you receive EOF.
  void closeWrite() {
    _objc_msgSend_44(this.pointer, _sel_closeWrite);
  }

  /// Enqueue a request to close the read side of the underlying socket.
  /// All outstanding IO will complete before the read side is closed.
  /// You may continue writing to the server.
  void closeRead() {
    _objc_msgSend_44(this.pointer, _sel_closeRead);
  }

  /// Begin encrypted handshake.  The handshake begins after all pending
  /// IO has completed.  TLS authentication callbacks are sent to the
  /// session's -URLSession:task:didReceiveChallenge:completionHandler:
  void startSecureConnection() {
    _objc_msgSend_44(this.pointer, _sel_startSecureConnection);
  }

  /// Cleanly close a secure connection after all pending secure IO has
  /// completed.
  ///
  /// @warning This API is non-functional.
  void stopSecureConnection() {
    _objc_msgSend_44(this.pointer, _sel_stopSecureConnection);
  }

  /// init
  NSURLSessionStreamTask init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionStreamTask new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionStreamTask, _sel_new);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionStreamTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionStreamTask, _sel_allocWithZone_, zone);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionStreamTask alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionStreamTask, _sel_alloc);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionStreamTask =
    objc.getClass("NSURLSessionStreamTask");
void _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        bool, ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSData_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_bool_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_bool_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData_bool_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_bool_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_bool_NSError.fromFunction(
      void Function(objc.NSData, bool, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                objc.NSData.castFromPointer(arg0, retain: true, release: true),
                arg1,
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_bool_NSError.listener(
      void Function(objc.NSData, bool, objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSData_bool_NSError(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>,
                                ffi.Bool,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<objc.ObjCObject> arg0, bool arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(objc.NSData.castFromPointer(arg0, retain: false, release: true), arg1, arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSData arg0, bool arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Bool arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      bool,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1, arg2?.pointer ?? ffi.nullptr);
}

late final _sel_readDataOfMinLength_maxLength_timeout_completionHandler_ = objc
    .registerName("readDataOfMinLength:maxLength:timeout:completionHandler:");
final _objc_msgSend_167 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSUInteger,
                NSUInteger,
                NSTimeInterval,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            double,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunction(void Function(objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : objc.NSError.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSError.listener(void Function(objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSError(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : objc.NSError.castFromPointer(arg0,
                    retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSError? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_writeData_timeout_completionHandler_ =
    objc.registerName("writeData:timeout:completionHandler:");
final _objc_msgSend_168 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSTimeInterval,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_captureStreams = objc.registerName("captureStreams");
late final _sel_closeWrite = objc.registerName("closeWrite");
late final _sel_closeRead = objc.registerName("closeRead");
late final _sel_startSecureConnection =
    objc.registerName("startSecureConnection");
late final _sel_stopSecureConnection =
    objc.registerName("stopSecureConnection");
late final _sel_streamTaskWithHostName_port_ =
    objc.registerName("streamTaskWithHostName:port:");
final _objc_msgSend_169 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

/// NSNetService
class NSNetService extends objc.ObjCObjectBase {
  NSNetService._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSNetService] that points to the same underlying object as [other].
  NSNetService.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNetService] that wraps the given raw object pointer.
  NSNetService.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNetService].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNetService);
  }
}

late final _class_NSNetService = objc.getClass("NSNetService");
late final _sel_streamTaskWithNetService_ =
    objc.registerName("streamTaskWithNetService:");
final _objc_msgSend_170 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// A WebSocket task can be created with a ws or wss url. A client can also provide
/// a list of protocols it wishes to advertise during the WebSocket handshake phase.
/// Once the handshake is successfully completed the client will be notified through an optional delegate.
/// All reads and writes enqueued before the completion of the handshake will be queued up and
/// executed once the handshake succeeds. Before the handshake completes, the client can be called to handle
/// redirection or authentication using the same delegates as NSURLSessionTask. WebSocket task will also provide
/// support for cookies and will store cookies to the cookie storage on the session and will attach cookies to
/// outgoing HTTP handshake requests.
class NSURLSessionWebSocketTask extends NSURLSessionTask {
  NSURLSessionWebSocketTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionWebSocketTask] that points to the same underlying object as [other].
  NSURLSessionWebSocketTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionWebSocketTask] that wraps the given raw object pointer.
  NSURLSessionWebSocketTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionWebSocketTask);
  }

  /// Sends a WebSocket message. If an error occurs, any outstanding work will also fail.
  /// Note that invocation of the completion handler does not
  /// guarantee that the remote side has received all the bytes, only
  /// that they have been written to the kernel.
  void sendMessage_completionHandler_(NSURLSessionWebSocketMessage message,
      ObjCBlock_ffiVoid_NSError completionHandler) {
    _objc_msgSend_173(this.pointer, _sel_sendMessage_completionHandler_,
        message.pointer, completionHandler.pointer);
  }

  /// Reads a WebSocket message once all the frames of the message are available.
  /// If the maximumMessage size is hit while buffering the frames, the receiveMessage call will error out
  /// and all outstanding work will also fail resulting in the end of the task.
  void receiveMessageWithCompletionHandler_(
      ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError
          completionHandler) {
    _objc_msgSend_174(this.pointer, _sel_receiveMessageWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// Sends a ping frame from the client side. The pongReceiveHandler is invoked when the client
  /// receives a pong from the server endpoint. If a connection is lost or an error occurs before receiving
  /// the pong from the endpoint, the pongReceiveHandler block will be invoked with an error.
  /// Note - the pongReceiveHandler will always be called in the order in which the pings were sent.
  void sendPingWithPongReceiveHandler_(
      ObjCBlock_ffiVoid_NSError pongReceiveHandler) {
    _objc_msgSend_175(this.pointer, _sel_sendPingWithPongReceiveHandler_,
        pongReceiveHandler.pointer);
  }

  /// Sends a close frame with the given closeCode. An optional reason can be provided while sending the close frame.
  /// Simply calling cancel on the task will result in a cancellation frame being sent without any reason.
  void cancelWithCloseCode_reason_(
      NSURLSessionWebSocketCloseCode closeCode, objc.NSData? reason) {
    _objc_msgSend_176(this.pointer, _sel_cancelWithCloseCode_reason_,
        closeCode.value, reason?.pointer ?? ffi.nullptr);
  }

  /// The maximum number of bytes to be buffered before erroring out. This includes the sum of all bytes from continuation frames. Receive calls will error out if this value is reached
  DartNSInteger get maximumMessageSize {
    return _objc_msgSend_111(this.pointer, _sel_maximumMessageSize);
  }

  /// The maximum number of bytes to be buffered before erroring out. This includes the sum of all bytes from continuation frames. Receive calls will error out if this value is reached
  set maximumMessageSize(DartNSInteger value) {
    return _objc_msgSend_112(this.pointer, _sel_setMaximumMessageSize_, value);
  }

  /// A task can be queried for it's close code at any point. When the task is not closed, it will be set to NSURLSessionWebSocketCloseCodeInvalid
  NSURLSessionWebSocketCloseCode get closeCode {
    final _ret = _objc_msgSend_177(this.pointer, _sel_closeCode);
    return NSURLSessionWebSocketCloseCode.fromValue(_ret);
  }

  /// A task can be queried for it's close reason at any point. A nil value indicates no closeReason or that the task is still running
  objc.NSData? get closeReason {
    final _ret = _objc_msgSend_37(this.pointer, _sel_closeReason);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLSessionWebSocketTask init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionWebSocketTask new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionWebSocketTask, _sel_new);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionWebSocketTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionWebSocketTask, _sel_allocWithZone_, zone);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionWebSocketTask alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionWebSocketTask, _sel_alloc);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionWebSocketTask =
    objc.getClass("NSURLSessionWebSocketTask");

/// The client can create a WebSocket message object that will be passed to the send calls
/// and will be delivered from the receive calls. The message can be initialized with data or string.
/// If initialized with data, the string property will be nil and vice versa.
class NSURLSessionWebSocketMessage extends objc.NSObject {
  NSURLSessionWebSocketMessage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionWebSocketMessage] that points to the same underlying object as [other].
  NSURLSessionWebSocketMessage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionWebSocketMessage] that wraps the given raw object pointer.
  NSURLSessionWebSocketMessage.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketMessage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionWebSocketMessage);
  }

  /// Create a message with data type
  NSURLSessionWebSocketMessage initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_40(this.pointer, _sel_initWithData_, data.pointer);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Create a message with string type
  NSURLSessionWebSocketMessage initWithString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_171(this.pointer, _sel_initWithString_, string.pointer);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// type
  NSURLSessionWebSocketMessageType get type {
    final _ret = _objc_msgSend_172(this.pointer, _sel_type);
    return NSURLSessionWebSocketMessageType.fromValue(_ret);
  }

  /// data
  objc.NSData? get data {
    final _ret = _objc_msgSend_37(this.pointer, _sel_data);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// string
  objc.NSString? get string {
    final _ret = _objc_msgSend_18(this.pointer, _sel_string);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLSessionWebSocketMessage init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionWebSocketMessage new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionWebSocketMessage, _sel_new);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionWebSocketMessage allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionWebSocketMessage, _sel_allocWithZone_, zone);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionWebSocketMessage alloc() {
    final _ret =
        _objc_msgSend_6(_class_NSURLSessionWebSocketMessage, _sel_alloc);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionWebSocketMessage =
    objc.getClass("NSURLSessionWebSocketMessage");
late final _sel_initWithString_ = objc.registerName("initWithString:");
final _objc_msgSend_171 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSURLSessionWebSocketMessageType {
  NSURLSessionWebSocketMessageTypeData(0),
  NSURLSessionWebSocketMessageTypeString(1);

  final int value;
  const NSURLSessionWebSocketMessageType(this.value);

  static NSURLSessionWebSocketMessageType fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionWebSocketMessageTypeData,
        1 => NSURLSessionWebSocketMessageTypeString,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionWebSocketMessageType: $value"),
      };
}

late final _sel_type = objc.registerName("type");
final _objc_msgSend_172 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_string = objc.registerName("string");
late final _sel_sendMessage_completionHandler_ =
    objc.registerName("sendMessage:completionHandler:");
final _objc_msgSend_173 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.fromFunction(
      void Function(NSURLSessionWebSocketMessage?, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : NSURLSessionWebSocketMessage.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.listener(
      void Function(NSURLSessionWebSocketMessage?, objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : NSURLSessionWebSocketMessage.castFromPointer(arg0,
                        retain: false, release: true),
                arg1.address == 0
                    ? null
                    : objc.NSError.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURLSessionWebSocketMessage? arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_receiveMessageWithCompletionHandler_ =
    objc.registerName("receiveMessageWithCompletionHandler:");
final _objc_msgSend_174 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_sendPingWithPongReceiveHandler_ =
    objc.registerName("sendPingWithPongReceiveHandler:");
final _objc_msgSend_175 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

/// The WebSocket close codes follow the close codes given in the RFC
enum NSURLSessionWebSocketCloseCode {
  NSURLSessionWebSocketCloseCodeInvalid(0),
  NSURLSessionWebSocketCloseCodeNormalClosure(1000),
  NSURLSessionWebSocketCloseCodeGoingAway(1001),
  NSURLSessionWebSocketCloseCodeProtocolError(1002),
  NSURLSessionWebSocketCloseCodeUnsupportedData(1003),
  NSURLSessionWebSocketCloseCodeNoStatusReceived(1005),
  NSURLSessionWebSocketCloseCodeAbnormalClosure(1006),
  NSURLSessionWebSocketCloseCodeInvalidFramePayloadData(1007),
  NSURLSessionWebSocketCloseCodePolicyViolation(1008),
  NSURLSessionWebSocketCloseCodeMessageTooBig(1009),
  NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing(1010),
  NSURLSessionWebSocketCloseCodeInternalServerError(1011),
  NSURLSessionWebSocketCloseCodeTLSHandshakeFailure(1015);

  final int value;
  const NSURLSessionWebSocketCloseCode(this.value);

  static NSURLSessionWebSocketCloseCode fromValue(int value) => switch (value) {
        0 => NSURLSessionWebSocketCloseCodeInvalid,
        1000 => NSURLSessionWebSocketCloseCodeNormalClosure,
        1001 => NSURLSessionWebSocketCloseCodeGoingAway,
        1002 => NSURLSessionWebSocketCloseCodeProtocolError,
        1003 => NSURLSessionWebSocketCloseCodeUnsupportedData,
        1005 => NSURLSessionWebSocketCloseCodeNoStatusReceived,
        1006 => NSURLSessionWebSocketCloseCodeAbnormalClosure,
        1007 => NSURLSessionWebSocketCloseCodeInvalidFramePayloadData,
        1008 => NSURLSessionWebSocketCloseCodePolicyViolation,
        1009 => NSURLSessionWebSocketCloseCodeMessageTooBig,
        1010 => NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing,
        1011 => NSURLSessionWebSocketCloseCodeInternalServerError,
        1015 => NSURLSessionWebSocketCloseCodeTLSHandshakeFailure,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionWebSocketCloseCode: $value"),
      };
}

late final _sel_cancelWithCloseCode_reason_ =
    objc.registerName("cancelWithCloseCode:reason:");
final _objc_msgSend_176 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_maximumMessageSize = objc.registerName("maximumMessageSize");
late final _sel_setMaximumMessageSize_ =
    objc.registerName("setMaximumMessageSize:");
late final _sel_closeCode = objc.registerName("closeCode");
final _objc_msgSend_177 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_closeReason = objc.registerName("closeReason");
late final _sel_webSocketTaskWithURL_ =
    objc.registerName("webSocketTaskWithURL:");
final _objc_msgSend_178 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_webSocketTaskWithURL_protocols_ =
    objc.registerName("webSocketTaskWithURL:protocols:");
final _objc_msgSend_179 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_webSocketTaskWithRequest_ =
    objc.registerName("webSocketTaskWithRequest:");
final _objc_msgSend_180 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.fromFunction(
      void Function(objc.NSData?, NSURLResponse?, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0.address == 0 ? null : objc.NSData.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.listener(
      void Function(objc.NSData?, NSURLResponse?, objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        arg0.address == 0
                            ? null
                            : objc.NSData.castFromPointer(arg0, retain: false, release: true),
                        arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: false, release: true),
                        arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSData? arg0, NSURLResponse? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_dataTaskWithRequest_completionHandler_ =
    objc.registerName("dataTaskWithRequest:completionHandler:");
final _objc_msgSend_181 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_dataTaskWithURL_completionHandler_ =
    objc.registerName("dataTaskWithURL:completionHandler:");
final _objc_msgSend_182 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithRequest_fromFile_completionHandler_ =
    objc.registerName("uploadTaskWithRequest:fromFile:completionHandler:");
final _objc_msgSend_183 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithRequest_fromData_completionHandler_ =
    objc.registerName("uploadTaskWithRequest:fromData:completionHandler:");
final _objc_msgSend_184 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithResumeData_completionHandler_ =
    objc.registerName("uploadTaskWithResumeData:completionHandler:");
final _objc_msgSend_185 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.fromFunction(
      void Function(objc.NSURL?, NSURLResponse?, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0.address == 0 ? null : objc.NSURL.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.listener(
      void Function(objc.NSURL?, NSURLResponse?, objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(
                    arg0.address == 0
                        ? null
                        : objc.NSURL.castFromPointer(arg0, retain: false, release: true),
                    arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: false, release: true),
                    arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSURL? arg0, NSURLResponse? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_downloadTaskWithRequest_completionHandler_ =
    objc.registerName("downloadTaskWithRequest:completionHandler:");
final _objc_msgSend_186 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_downloadTaskWithURL_completionHandler_ =
    objc.registerName("downloadTaskWithURL:completionHandler:");
final _objc_msgSend_187 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_downloadTaskWithResumeData_completionHandler_ =
    objc.registerName("downloadTaskWithResumeData:completionHandler:");
final _objc_msgSend_188 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

/// Disposition options for various delegate messages
enum NSURLSessionDelayedRequestDisposition {
  /// Use the original request provided when the task was created; the request parameter is ignored.
  NSURLSessionDelayedRequestContinueLoading(0),

  /// Use the specified request, which may not be nil.
  NSURLSessionDelayedRequestUseNewRequest(1),

  /// Cancel the task; the request parameter is ignored.
  NSURLSessionDelayedRequestCancel(2);

  final int value;
  const NSURLSessionDelayedRequestDisposition(this.value);

  static NSURLSessionDelayedRequestDisposition fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionDelayedRequestContinueLoading,
        1 => NSURLSessionDelayedRequestUseNewRequest,
        2 => NSURLSessionDelayedRequestCancel,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionDelayedRequestDisposition: $value"),
      };
}

enum NSURLSessionAuthChallengeDisposition {
  /// Use the specified credential, which may be nil
  NSURLSessionAuthChallengeUseCredential(0),

  /// Default handling for the challenge - as if this delegate were not implemented; the credential parameter is ignored.
  NSURLSessionAuthChallengePerformDefaultHandling(1),

  /// The entire request will be canceled; the credential parameter is ignored.
  NSURLSessionAuthChallengeCancelAuthenticationChallenge(2),

  /// This challenge is rejected and the next authentication protection space should be tried; the credential parameter is ignored.
  NSURLSessionAuthChallengeRejectProtectionSpace(3);

  final int value;
  const NSURLSessionAuthChallengeDisposition(this.value);

  static NSURLSessionAuthChallengeDisposition fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionAuthChallengeUseCredential,
        1 => NSURLSessionAuthChallengePerformDefaultHandling,
        2 => NSURLSessionAuthChallengeCancelAuthenticationChallenge,
        3 => NSURLSessionAuthChallengeRejectProtectionSpace,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionAuthChallengeDisposition: $value"),
      };
}

enum NSURLSessionResponseDisposition {
  /// Cancel the load, this is the same as -[task cancel]
  NSURLSessionResponseCancel(0),

  /// Allow the load to continue
  NSURLSessionResponseAllow(1),

  /// Turn this request into a download
  NSURLSessionResponseBecomeDownload(2),

  /// Turn this task into a stream task
  NSURLSessionResponseBecomeStream(3);

  final int value;
  const NSURLSessionResponseDisposition(this.value);

  static NSURLSessionResponseDisposition fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionResponseCancel,
        1 => NSURLSessionResponseAllow,
        2 => NSURLSessionResponseBecomeDownload,
        3 => NSURLSessionResponseBecomeStream,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionResponseDisposition: $value"),
      };
}

/// Messages related to the URL session as a whole
abstract final class NSURLSessionDelegate {
  /// Builds an object that implements the NSURLSessionDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {void Function(NSURLSession, objc.NSError?)?
          URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)?
          URLSessionDidFinishEventsForBackgroundURLSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSURLSessionDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionDelegate.URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDelegate.URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLSessionDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {void Function(NSURLSession, objc.NSError?)?
          URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)?
          URLSessionDidFinishEventsForBackgroundURLSession_}) {
    builder.implementMethod(
        NSURLSessionDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionDelegate.URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDelegate.URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
  }

  /// The last message a session receives.  A session will only become
  /// invalid because of a systemic error or when it has been
  /// explicitly invalidated, in which case the error parameter will be nil.
  static final URLSession_didBecomeInvalidWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didBecomeInvalidWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDelegate,
      _sel_URLSession_didBecomeInvalidWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
            func(arg1, arg2)),
  );

  /// If implemented, when a connection level authentication challenge
  /// has occurred, this delegate will be given the opportunity to
  /// provide authentication credentials to the underlying
  /// connection. Some types of authentication will apply to more than
  /// one request on a given connection to a server (SSL Server Trust
  /// challenges).  If this delegate message is not implemented, the
  /// behavior will be to use the default handling, which may involve user
  /// interaction.
  static final URLSession_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDelegate,
      _sel_URLSession_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// If an application has received an
  /// -application:handleEventsForBackgroundURLSession:completionHandler:
  /// message, the session delegate will receive this message to indicate
  /// that all messages previously enqueued for this session have been
  /// delivered.  At this time it is safe to invoke the previously stored
  /// completion handler, or to begin any internal updates that will
  /// result in invoking the completion handler.
  static final URLSessionDidFinishEventsForBackgroundURLSession_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDelegate,
      _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
  );
}

late final _protocol_NSURLSessionDelegate =
    objc.getProtocol("NSURLSessionDelegate");
late final _sel_URLSession_didBecomeInvalidWithError_ =
    objc.registerName("URLSession:didBecomeInvalidWithError:");
void _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true), arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0, NSURLSession arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2?.pointer ?? ffi.nullptr);
}

/// NSURLAuthenticationChallenge
class NSURLAuthenticationChallenge extends objc.ObjCObjectBase {
  NSURLAuthenticationChallenge._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSURLAuthenticationChallenge] that points to the same underlying object as [other].
  NSURLAuthenticationChallenge.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLAuthenticationChallenge] that wraps the given raw object pointer.
  NSURLAuthenticationChallenge.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLAuthenticationChallenge].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLAuthenticationChallenge);
  }
}

late final _class_NSURLAuthenticationChallenge =
    objc.getClass("NSURLAuthenticationChallenge");
void
    _ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            int arg0,
            ffi.Pointer<objc.ObjCObject> arg1) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(NSInteger arg0,
                            ffi.Pointer<objc.ObjCObject> arg1)>>()
                .asFunction<void Function(int, ffi.Pointer<objc.ObjCObject>)>()(
            arg0, arg1);
void
    _ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            int arg0,
            ffi.Pointer<objc.ObjCObject> arg1) =>
        (objc.getBlockClosure(block) as void Function(
            int, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSInteger arg0, ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            NSInteger, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.fromFunction(
      void Function(NSURLSessionAuthChallengeDisposition, NSURLCredential?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            NSInteger, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential_closureTrampoline)
                .cast(),
            (int arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                NSURLSessionAuthChallengeDisposition.fromValue(arg0),
                arg1.address == 0
                    ? null
                    : NSURLCredential.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.listener(
      void Function(NSURLSessionAuthChallengeDisposition, NSURLCredential?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, NSInteger, ffi.Pointer<objc.ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (int arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    NSURLSessionAuthChallengeDisposition.fromValue(arg0),
                    arg1.address == 0
                        ? null
                        : NSURLCredential.castFromPointer(arg1,
                            retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, NSInteger,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURLSessionAuthChallengeDisposition arg0, NSURLCredential? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                          NSInteger arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(ffi.Pointer<objc.ObjCBlock>, int,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.value, arg1?.pointer ?? ffi.nullptr);
}

/// NSURLCredential
class NSURLCredential extends objc.ObjCObjectBase {
  NSURLCredential._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCredential] that points to the same underlying object as [other].
  NSURLCredential.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCredential] that wraps the given raw object pointer.
  NSURLCredential.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCredential].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLCredential);
  }
}

late final _class_NSURLCredential = objc.getClass("NSURLCredential");
late final _sel_URLSession_didReceiveChallenge_completionHandler_ =
    objc.registerName("URLSession:didReceiveChallenge:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCBlock> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCBlock> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCBlock>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCBlock> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCBlock> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential.fromFunction(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCBlock> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLAuthenticationChallenge.castFromPointer(arg2, retain: true, release: true),
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential.listener(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCBlock> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLAuthenticationChallenge.castFromPointer(arg2, retain: false, release: true),
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLAuthenticationChallenge arg2,
          ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
              arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCBlock> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSessionDidFinishEventsForBackgroundURLSession_ =
    objc.registerName("URLSessionDidFinishEventsForBackgroundURLSession:");
void _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1) =>
                    fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0,
                  ffi.Pointer<objc.ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1.pointer);
}

/// Messages related to the operation of a specific task.
abstract final class NSURLSessionTaskDelegate {
  /// Builds an object that implements the NSURLSessionTaskDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)?
          URLSession_task_needNewBodyStream_,
      void Function(
              NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)?
          URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(NSURLSessionTaskDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLSessionTaskDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)?
          URLSession_task_needNewBodyStream_,
      void Function(
              NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)?
          URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    builder.implementMethod(NSURLSessionTaskDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionTaskDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionTaskDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
  }

  /// Notification that a task has been created.  This method is the first message
  /// a task sends, providing a place to configure the task before it is resumed.
  ///
  /// This delegate callback is *NOT* dispatched to the delegate queue.  It is
  /// invoked synchronously before the task creation method returns.
  static final URLSession_didCreateTask_ = objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didCreateTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_didCreateTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// Sent when the system is ready to begin work for a task with a delayed start
  /// time set (using the earliestBeginDate property). The completionHandler must
  /// be invoked in order for loading to proceed. The disposition provided to the
  /// completion handler continues the load with the original request provided to
  /// the task, replaces the request with the specified task, or cancels the task.
  /// If this delegate is not implemented, loading will proceed with the original
  /// request.
  ///
  /// Recommendation: only implement this delegate if tasks that have the
  /// earliestBeginDate property set may become stale and require alteration prior
  /// to starting the network load.
  ///
  /// If a new request is specified, the allowsExpensiveNetworkAccess,
  /// allowsConstrainedNetworkAccess, and allowsCellularAccess properties
  /// from the new request will not be used; the properties from the
  /// original request will continue to be used.
  ///
  /// Canceling the task is equivalent to calling the task's cancel method; the
  /// URLSession:task:didCompleteWithError: task delegate will be called with error
  /// NSURLErrorCancelled.
  static final URLSession_task_willBeginDelayedRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLRequest,
        ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent when a task cannot start the network loading process because the current
  /// network connectivity is not available or sufficient for the task's request.
  ///
  /// This delegate will be called at most one time per task, and is only called if
  /// the waitsForConnectivity property in the NSURLSessionConfiguration has been
  /// set to YES.
  ///
  /// This delegate callback will never be called for background sessions, because
  /// the waitForConnectivity property is ignored by those sessions.
  static final URLSession_taskIsWaitingForConnectivity_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_taskIsWaitingForConnectivity_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_taskIsWaitingForConnectivity_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// An HTTP request is attempting to perform a redirection to a different
  /// URL. You must invoke the completion routine to allow the
  /// redirection, allow the redirection with a modified request, or
  /// pass nil to the completionHandler to cause the body of the redirection
  /// response to be delivered as the payload of this request. The default
  /// is to follow redirections.
  ///
  /// For tasks in background sessions, redirections will always be followed and this method will not be called.
  static final URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask,
        NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// The task has received a request specific authentication challenge.
  /// If this delegate is not implemented, the session specific authentication challenge
  /// will *NOT* be called and the behavior will be the same as using the default handling
  /// disposition.
  static final URLSession_task_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent if a task requires a new, unopened body stream.  This may be
  /// necessary when authentication has failed for any request that
  /// involves a body stream.
  static final URLSession_task_needNewBodyStream_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStream_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_needNewBodyStream_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Tells the delegate if a task requires a new body stream starting from the given offset. This may be
  /// necessary when resuming a failed upload task.
  ///
  /// - Parameter session: The session containing the task that needs a new body stream from the given offset.
  /// - Parameter task: The task that needs a new body stream.
  /// - Parameter offset: The starting offset required for the body stream.
  /// - Parameter completionHandler: A completion handler that your delegate method should call with the new body stream.
  static final URLSession_task_needNewBodyStreamFromOffset_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent periodically to notify the delegate of upload progress.  This
  /// information is also available as properties of the task.
  static final URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, int, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// Sent for each informational response received except 101 switching protocols.
  static final URLSession_task_didReceiveInformationalResponse_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveInformationalResponse_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_didReceiveInformationalResponse_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSHTTPURLResponse),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent when complete statistics information has been collected for the task.
  static final URLSession_task_didFinishCollectingMetrics_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didFinishCollectingMetrics_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_didFinishCollectingMetrics_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent as the last message related to a specific task.  Error may be
  /// nil, which implies that no error occurred and this task is complete.
  static final URLSession_task_didCompleteWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didCompleteWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_task_didCompleteWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// The last message a session receives.  A session will only become
  /// invalid because of a systemic error or when it has been
  /// explicitly invalidated, in which case the error parameter will be nil.
  static final URLSession_didBecomeInvalidWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didBecomeInvalidWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_didBecomeInvalidWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
            func(arg1, arg2)),
  );

  /// If implemented, when a connection level authentication challenge
  /// has occurred, this delegate will be given the opportunity to
  /// provide authentication credentials to the underlying
  /// connection. Some types of authentication will apply to more than
  /// one request on a given connection to a server (SSL Server Trust
  /// challenges).  If this delegate message is not implemented, the
  /// behavior will be to use the default handling, which may involve user
  /// interaction.
  static final URLSession_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSession_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// If an application has received an
  /// -application:handleEventsForBackgroundURLSession:completionHandler:
  /// message, the session delegate will receive this message to indicate
  /// that all messages previously enqueued for this session have been
  /// delivered.  At this time it is safe to invoke the previously stored
  /// completion handler, or to begin any internal updates that will
  /// result in invoking the completion handler.
  static final URLSessionDidFinishEventsForBackgroundURLSession_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionTaskDelegate,
      _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
  );
}

late final _protocol_NSURLSessionTaskDelegate =
    objc.getProtocol("NSURLSessionTaskDelegate");
late final _sel_URLSession_didCreateTask_ =
    objc.registerName("URLSession:didCreateTask:");
void _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionTask.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true), NSURLSessionTask.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionTask arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer);
}

void
    _ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            int arg0,
            ffi.Pointer<objc.ObjCObject> arg1) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(NSInteger arg0,
                            ffi.Pointer<objc.ObjCObject> arg1)>>()
                .asFunction<void Function(int, ffi.Pointer<objc.ObjCObject>)>()(
            arg0, arg1);
void
    _ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            int arg0,
            ffi.Pointer<objc.ObjCObject> arg1) =>
        (objc.getBlockClosure(block) as void Function(
            int, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSInteger arg0, ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            NSInteger, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest.fromFunction(
      void Function(NSURLSessionDelayedRequestDisposition, NSURLRequest?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            NSInteger, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest_closureTrampoline)
                .cast(),
            (int arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                NSURLSessionDelayedRequestDisposition.fromValue(arg0),
                arg1.address == 0
                    ? null
                    : NSURLRequest.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest.listener(
      void Function(NSURLSessionDelayedRequestDisposition, NSURLRequest?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, NSInteger, ffi.Pointer<objc.ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (int arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    NSURLSessionDelayedRequestDisposition.fromValue(arg0),
                    arg1.address == 0
                        ? null
                        : NSURLRequest.castFromPointer(arg1,
                            retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, NSInteger,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURLSessionDelayedRequestDisposition arg0, NSURLRequest? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                          NSInteger arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(ffi.Pointer<objc.ObjCBlock>, int,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.value, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_URLSession_task_willBeginDelayedRequest_completionHandler_ =
    objc.registerName(
        "URLSession:task:willBeginDelayedRequest:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<objc.ObjCObject> arg3,
                            ffi.Pointer<objc.ObjCBlock> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCBlock>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3,
                      ffi.Pointer<objc.ObjCBlock> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest.fromFunction(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLSessionTask,
              NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCBlock> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                    NSURLRequest.castFromPointer(arg3, retain: true, release: true),
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest.listener(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLSessionTask,
              NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest_closureTrampoline)..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3,
                        ffi.Pointer<objc.ObjCBlock> arg4) =>
                    fn(
                        arg0,
                        NSURLSession.castFromPointer(arg1, retain: false, release: true),
                        NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                        NSURLRequest.castFromPointer(arg3, retain: false, release: true),
                        ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionTask arg2,
          NSURLRequest arg3,
          ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
              arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3,
                          ffi.Pointer<objc.ObjCBlock> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.pointer, arg4.pointer);
}

late final _sel_URLSession_taskIsWaitingForConnectivity_ =
    objc.registerName("URLSession:taskIsWaitingForConnectivity:");

/// NSHTTPURLResponse
class NSHTTPURLResponse extends NSURLResponse {
  NSHTTPURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPURLResponse] that points to the same underlying object as [other].
  NSHTTPURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPURLResponse] that wraps the given raw object pointer.
  NSHTTPURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPURLResponse);
  }

  /// !
  /// @method	initWithURL:statusCode:HTTPVersion:headerFields:
  /// @abstract initializer for NSHTTPURLResponse objects.
  /// @param 	url the URL from which the response was generated.
  /// @param	statusCode an HTTP status code.
  /// @param	HTTPVersion The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1".
  /// @param 	headerFields A dictionary representing the header keys and values of the server response.
  /// @result 	the instance of the object, or NULL if an error occurred during initialization.
  /// @discussion This API was introduced in Mac OS X 10.7.2 and iOS 5.0 and is not available prior to those releases.
  NSHTTPURLResponse? initWithURL_statusCode_HTTPVersion_headerFields_(
      objc.NSURL url,
      DartNSInteger statusCode,
      objc.NSString? HTTPVersion,
      objc.NSDictionary? headerFields) {
    final _ret = _objc_msgSend_189(
        this.pointer,
        _sel_initWithURL_statusCode_HTTPVersion_headerFields_,
        url.pointer,
        statusCode,
        HTTPVersion?.pointer ?? ffi.nullptr,
        headerFields?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSHTTPURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @abstract Returns the HTTP status code of the receiver.
  /// @result The HTTP status code of the receiver.
  DartNSInteger get statusCode {
    return _objc_msgSend_111(this.pointer, _sel_statusCode);
  }

  /// !
  /// @abstract Returns a dictionary containing all the HTTP header fields
  /// of the receiver.
  /// @discussion By examining this header dictionary, clients can see
  /// the "raw" header information which was reported to the protocol
  /// implementation by the HTTP server. This may be of use to
  /// sophisticated or special-purpose HTTP clients.
  /// @result A dictionary containing all the HTTP header fields of the
  /// receiver.
  objc.NSDictionary get allHeaderFields {
    final _ret = _objc_msgSend_80(this.pointer, _sel_allHeaderFields);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method valueForHTTPHeaderField:
  /// @abstract Returns the value which corresponds to the given header
  /// field. Note that, in keeping with the HTTP RFC, HTTP header field
  /// names are case-insensitive.
  /// @param field the header field name to use for the lookup
  /// (case-insensitive).
  /// @result the value associated with the given header field, or nil if
  /// there is no value associated with the given header field.
  objc.NSString? valueForHTTPHeaderField_(objc.NSString field) {
    final _ret = _objc_msgSend_36(
        this.pointer, _sel_valueForHTTPHeaderField_, field.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method localizedStringForStatusCode:
  /// @abstract Convenience method which returns a localized string
  /// corresponding to the status code for this response.
  /// @param statusCode the status code to use to produce a localized string.
  /// @result A localized string corresponding to the given status code.
  static objc.NSString localizedStringForStatusCode_(DartNSInteger statusCode) {
    final _ret = _objc_msgSend_190(_class_NSHTTPURLResponse,
        _sel_localizedStringForStatusCode_, statusCode);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// !
  /// @method initWithURL:MIMEType:expectedContentLength:textEncodingName:
  /// @abstract Initialize an NSURLResponse with the provided values.
  /// @param URL the URL
  /// @param MIMEType the MIME content type of the response
  /// @param length the expected content length of the associated data
  /// @param name the name of the text encoding for the associated data, if applicable, else nil
  /// @result The initialized NSURLResponse.
  /// @discussion This is the designated initializer for NSURLResponse.
  NSHTTPURLResponse
      initWithURL_MIMEType_expectedContentLength_textEncodingName_(
          objc.NSURL URL,
          objc.NSString? MIMEType,
          DartNSInteger length,
          objc.NSString? name) {
    final _ret = _objc_msgSend_16(
        this.pointer,
        _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_,
        URL.pointer,
        MIMEType?.pointer ?? ffi.nullptr,
        length,
        name?.pointer ?? ffi.nullptr);
    return NSHTTPURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSHTTPURLResponse init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSHTTPURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSHTTPURLResponse new1() {
    final _ret = _objc_msgSend_6(_class_NSHTTPURLResponse, _sel_new);
    return NSHTTPURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSHTTPURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSHTTPURLResponse, _sel_allocWithZone_, zone);
    return NSHTTPURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSHTTPURLResponse alloc() {
    final _ret = _objc_msgSend_6(_class_NSHTTPURLResponse, _sel_alloc);
    return NSHTTPURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSHTTPURLResponse = objc.getClass("NSHTTPURLResponse");
late final _sel_initWithURL_statusCode_HTTPVersion_headerFields_ =
    objc.registerName("initWithURL:statusCode:HTTPVersion:headerFields:");
final _objc_msgSend_189 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_statusCode = objc.registerName("statusCode");
late final _sel_allHeaderFields = objc.registerName("allHeaderFields");
late final _sel_localizedStringForStatusCode_ =
    objc.registerName("localizedStringForStatusCode:");
final _objc_msgSend_190 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSInteger)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_NSURLRequest_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSURLRequest_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSURLRequest extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLRequest._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLRequest castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLRequest._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLRequest.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLRequest_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLRequest.fromFunction(void Function(NSURLRequest?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLRequest_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : NSURLRequest.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLRequest.listener(void Function(NSURLRequest?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSURLRequest(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSURLRequest_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSURLRequest.castFromPointer(arg0,
                        retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSURLRequest? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ =
    objc.registerName(
        "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCObject> arg4,
            ffi.Pointer<objc.ObjCBlock> arg5) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<objc.ObjCObject> arg3,
                            ffi.Pointer<objc.ObjCObject> arg4,
                            ffi.Pointer<objc.ObjCBlock> arg5)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCBlock>)>()(
            arg0, arg1, arg2, arg3, arg4, arg5);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCObject> arg4,
            ffi.Pointer<objc.ObjCBlock> arg5) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3, arg4, arg5);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3,
                      ffi.Pointer<objc.ObjCObject> arg4,
                      ffi.Pointer<objc.ObjCBlock> arg5)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask,
              NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCObject> arg4,
                    ffi.Pointer<objc.ObjCBlock> arg5) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                    NSHTTPURLResponse.castFromPointer(arg3, retain: true, release: true),
                    NSURLRequest.castFromPointer(arg4, retain: true, release: true),
                    ObjCBlock_ffiVoid_NSURLRequest.castFromPointer(arg5, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask,
              NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest_closureTrampoline)..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCObject> arg4,
                    ffi.Pointer<objc.ObjCBlock> arg5) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                    NSHTTPURLResponse.castFromPointer(arg3, retain: false, release: true),
                    NSURLRequest.castFromPointer(arg4, retain: false, release: true),
                    ObjCBlock_ffiVoid_NSURLRequest.castFromPointer(arg5, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionTask arg2,
          NSHTTPURLResponse arg3,
          NSURLRequest arg4,
          ObjCBlock_ffiVoid_NSURLRequest arg5) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3,
                          ffi.Pointer<objc.ObjCObject> arg4,
                          ffi.Pointer<objc.ObjCBlock> arg5)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.pointer, arg4.pointer, arg5.pointer);
}

late final _sel_URLSession_task_didReceiveChallenge_completionHandler_ =
    objc.registerName("URLSession:task:didReceiveChallenge:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<objc.ObjCObject> arg3,
                            ffi.Pointer<objc.ObjCBlock> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCBlock>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3,
                      ffi.Pointer<objc.ObjCBlock> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential.fromFunction(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCBlock> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                    NSURLAuthenticationChallenge.castFromPointer(arg3, retain: true, release: true),
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential.listener(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential_closureTrampoline)..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3,
                        ffi.Pointer<objc.ObjCBlock> arg4) =>
                    fn(
                        arg0,
                        NSURLSession.castFromPointer(arg1, retain: false, release: true),
                        NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                        NSURLAuthenticationChallenge.castFromPointer(arg3, retain: false, release: true),
                        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionTask arg2,
          NSURLAuthenticationChallenge arg3,
          ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
              arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3,
                          ffi.Pointer<objc.ObjCBlock> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.pointer, arg4.pointer);
}

void _ObjCBlock_ffiVoid_NSInputStream_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSInputStream_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

class ObjCBlock_ffiVoid_NSInputStream extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSInputStream._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSInputStream castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSInputStream._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSInputStream.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSInputStream_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSInputStream.fromFunction(void Function(NSInputStream?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSInputStream_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                ? null
                : NSInputStream.castFromPointer(arg0,
                    retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSInputStream.listener(void Function(NSInputStream?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSInputStream(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSInputStream_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSInputStream.castFromPointer(arg0,
                        retain: false, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSInputStream? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_URLSession_task_needNewBodyStream_ =
    objc.registerName("URLSession:task:needNewBodyStream:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCBlock> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCBlock> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCBlock>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCBlock> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCBlock> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCBlock> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                ObjCBlock_ffiVoid_NSInputStream.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCBlock> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                    ObjCBlock_ffiVoid_NSInputStream.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionTask arg2, ObjCBlock_ffiVoid_NSInputStream arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCBlock> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_ =
    objc.registerName(
        "URLSession:task:needNewBodyStreamFromOffset:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Int64 arg3,
                            ffi.Pointer<objc.ObjCBlock> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        int,
                        ffi.Pointer<objc.ObjCBlock>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Int64 arg3,
                      ffi.Pointer<objc.ObjCBlock> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, int arg3, ffi.Pointer<objc.ObjCBlock> arg4) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                arg3,
                ObjCBlock_ffiVoid_NSInputStream.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, int,
              ObjCBlock_ffiVoid_NSInputStream)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Int64, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    int arg3,
                    ffi.Pointer<objc.ObjCBlock> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                    arg3,
                    ObjCBlock_ffiVoid_NSInputStream.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Int64,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionTask arg2,
          int arg3,
          ObjCBlock_ffiVoid_NSInputStream arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Int64 arg3,
                          ffi.Pointer<objc.ObjCBlock> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      ffi.Pointer<objc.ObjCBlock>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3, arg4.pointer);
}

late final _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ =
    objc.registerName(
        "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            int arg4,
            int arg5) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Int64 arg3,
                        ffi.Int64 arg4,
                        ffi.Int64 arg5)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    int,
                    int,
                    int)>()(arg0, arg1, arg2, arg3, arg4, arg5);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            int arg4,
            int arg5) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int))(arg0, arg1, arg2, arg3, arg4, arg5);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Int64 arg3,
                      ffi.Int64 arg4,
                      ffi.Int64 arg5)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64,
                            ffi.Int64)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, int, int, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64,
                            ffi.Int64)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, int arg3, int arg4, int arg5) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                arg3,
                arg4,
                arg5)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64.listener(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, int, int, int) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64,
                            ffi.Int64)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    int arg3,
                    int arg4,
                    int arg5) =>
                fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true), NSURLSessionTask.castFromPointer(arg2, retain: false, release: true), arg3, arg4, arg5))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Int64,
          ffi.Int64,
          ffi.Int64)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Int64 arg3,
                          ffi.Int64 arg4,
                          ffi.Int64 arg5)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      int,
                      int)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3, arg4, arg5);
}

late final _sel_URLSession_task_didReceiveInformationalResponse_ =
    objc.registerName("URLSession:task:didReceiveInformationalResponse:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, NSHTTPURLResponse) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                    NSHTTPURLResponse.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, NSHTTPURLResponse)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                    NSHTTPURLResponse.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

/// NSURLSessionTaskMetrics
class NSURLSessionTaskMetrics extends objc.NSObject {
  NSURLSessionTaskMetrics._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionTaskMetrics] that points to the same underlying object as [other].
  NSURLSessionTaskMetrics.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionTaskMetrics] that wraps the given raw object pointer.
  NSURLSessionTaskMetrics.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionTaskMetrics].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionTaskMetrics);
  }

  /// transactionMetrics array contains the metrics collected for every request/response transaction created during the task execution.
  objc.NSArray get transactionMetrics {
    final _ret = _objc_msgSend_103(this.pointer, _sel_transactionMetrics);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Interval from the task creation time to the task completion time.
  /// Task creation time is the time when the task was instantiated.
  /// Task completion time is the time when the task is about to change its internal state to completed.
  NSDateInterval get taskInterval {
    final _ret = _objc_msgSend_191(this.pointer, _sel_taskInterval);
    return NSDateInterval.castFromPointer(_ret, retain: true, release: true);
  }

  /// redirectCount is the number of redirects that were recorded.
  DartNSUInteger get redirectCount {
    return _objc_msgSend_5(this.pointer, _sel_redirectCount);
  }

  /// init
  NSURLSessionTaskMetrics init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionTaskMetrics.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionTaskMetrics new1() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionTaskMetrics, _sel_new);
    return NSURLSessionTaskMetrics.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionTaskMetrics allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionTaskMetrics, _sel_allocWithZone_, zone);
    return NSURLSessionTaskMetrics.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionTaskMetrics alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionTaskMetrics, _sel_alloc);
    return NSURLSessionTaskMetrics.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionTaskMetrics =
    objc.getClass("NSURLSessionTaskMetrics");
late final _sel_transactionMetrics = objc.registerName("transactionMetrics");

/// NSDateInterval
class NSDateInterval extends objc.ObjCObjectBase {
  NSDateInterval._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSDateInterval] that points to the same underlying object as [other].
  NSDateInterval.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDateInterval] that wraps the given raw object pointer.
  NSDateInterval.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDateInterval].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDateInterval);
  }
}

late final _class_NSDateInterval = objc.getClass("NSDateInterval");
late final _sel_taskInterval = objc.registerName("taskInterval");
final _objc_msgSend_191 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_redirectCount = objc.registerName("redirectCount");
late final _sel_URLSession_task_didFinishCollectingMetrics_ =
    objc.registerName("URLSession:task:didFinishCollectingMetrics:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                NSURLSessionTaskMetrics.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                    NSURLSessionTaskMetrics.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSession_task_didCompleteWithError_ =
    objc.registerName("URLSession:task:didCompleteWithError:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionTask.castFromPointer(arg2, retain: true, release: true),
                arg3.address == 0 ? null : objc.NSError.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionTask, objc.NSError?)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionTask.castFromPointer(arg2, retain: false, release: true),
                    arg3.address == 0 ? null : objc.NSError.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionTask arg2, objc.NSError? arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3?.pointer ?? ffi.nullptr);
}

/// Messages related to the operation of a task that delivers data
/// directly to the delegate.
abstract final class NSURLSessionDataDelegate {
  /// Builds an object that implements the NSURLSessionDataDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {void Function(NSURLSession, NSURLSessionDataTask, NSURLResponse,
              ObjCBlock_ffiVoid_NSURLSessionResponseDisposition)?
          URLSession_dataTask_didReceiveResponse_completionHandler_,
      void Function(
              NSURLSession, NSURLSessionDataTask, NSURLSessionDownloadTask)?
          URLSession_dataTask_didBecomeDownloadTask_,
      void Function(NSURLSession, NSURLSessionDataTask, NSURLSessionStreamTask)?
          URLSession_dataTask_didBecomeStreamTask_,
      void Function(NSURLSession, NSURLSessionDataTask, objc.NSData)?
          URLSession_dataTask_didReceiveData_,
      void Function(NSURLSession, NSURLSessionDataTask, NSCachedURLResponse,
              ObjCBlock_ffiVoid_NSCachedURLResponse)?
          URLSession_dataTask_willCacheResponse_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)? URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_dataTask_didReceiveResponse_completionHandler_,
        URLSession_dataTask_didReceiveResponse_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_dataTask_didBecomeDownloadTask_,
        URLSession_dataTask_didBecomeDownloadTask_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_dataTask_didBecomeStreamTask_,
        URLSession_dataTask_didBecomeStreamTask_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_dataTask_didReceiveData_,
        URLSession_dataTask_didReceiveData_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_dataTask_willCacheResponse_completionHandler_,
        URLSession_dataTask_willCacheResponse_completionHandler_);
    builder.implementMethod(NSURLSessionDataDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLSessionDataDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {void Function(NSURLSession, NSURLSessionDataTask, NSURLResponse,
              ObjCBlock_ffiVoid_NSURLSessionResponseDisposition)?
          URLSession_dataTask_didReceiveResponse_completionHandler_,
      void Function(
              NSURLSession, NSURLSessionDataTask, NSURLSessionDownloadTask)?
          URLSession_dataTask_didBecomeDownloadTask_,
      void Function(NSURLSession, NSURLSessionDataTask, NSURLSessionStreamTask)?
          URLSession_dataTask_didBecomeStreamTask_,
      void Function(NSURLSession, NSURLSessionDataTask, objc.NSData)?
          URLSession_dataTask_didReceiveData_,
      void Function(NSURLSession, NSURLSessionDataTask, NSCachedURLResponse,
              ObjCBlock_ffiVoid_NSCachedURLResponse)?
          URLSession_dataTask_willCacheResponse_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)? URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_dataTask_didReceiveResponse_completionHandler_,
        URLSession_dataTask_didReceiveResponse_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_dataTask_didBecomeDownloadTask_,
        URLSession_dataTask_didBecomeDownloadTask_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_dataTask_didBecomeStreamTask_,
        URLSession_dataTask_didBecomeStreamTask_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_dataTask_didReceiveData_,
        URLSession_dataTask_didReceiveData_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_dataTask_willCacheResponse_completionHandler_,
        URLSession_dataTask_willCacheResponse_completionHandler_);
    builder.implementMethod(NSURLSessionDataDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionDataDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDataDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
  }

  /// The task has received a response and no further messages will be
  /// received until the completion block is called. The disposition
  /// allows you to cancel a request or to turn a data task into a
  /// download task. This delegate message is optional - if you do not
  /// implement it, you can get the response as a property of the task.
  ///
  /// This method will not be called for background upload tasks (which cannot be converted to download tasks).
  static final URLSession_dataTask_didReceiveResponse_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_dataTask_didReceiveResponse_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_dataTask_didReceiveResponse_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionDataTask,
        NSURLResponse, ObjCBlock_ffiVoid_NSURLSessionResponseDisposition),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionDataTask arg2,
                    NSURLResponse arg3,
                    ObjCBlock_ffiVoid_NSURLSessionResponseDisposition arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionDataTask arg2,
                    NSURLResponse arg3,
                    ObjCBlock_ffiVoid_NSURLSessionResponseDisposition arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Notification that a data task has become a download task.  No
  /// future messages will be sent to the data task.
  static final URLSession_dataTask_didBecomeDownloadTask_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_dataTask_didBecomeDownloadTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_dataTask_didBecomeDownloadTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionDataTask, NSURLSessionDownloadTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDataTask arg2, NSURLSessionDownloadTask arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDataTask arg2, NSURLSessionDownloadTask arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Notification that a data task has become a bidirectional stream
  /// task.  No future messages will be sent to the data task.  The newly
  /// created streamTask will carry the original request and response as
  /// properties.
  ///
  /// For requests that were pipelined, the stream object will only allow
  /// reading, and the object will immediately issue a
  /// -URLSession:writeClosedForStream:.  Pipelining can be disabled for
  /// all requests in a session, or by the NSURLRequest
  /// HTTPShouldUsePipelining property.
  ///
  /// The underlying connection is no longer considered part of the HTTP
  /// connection cache and won't count against the total number of
  /// connections per host.
  static final URLSession_dataTask_didBecomeStreamTask_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_dataTask_didBecomeStreamTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_dataTask_didBecomeStreamTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionDataTask, NSURLSessionStreamTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDataTask arg2, NSURLSessionStreamTask arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDataTask arg2, NSURLSessionStreamTask arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent when data is available for the delegate to consume.  As the
  /// data may be discontiguous, you should use
  /// [NSData enumerateByteRangesUsingBlock:] to access it.
  static final URLSession_dataTask_didReceiveData_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_dataTask_didReceiveData_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_dataTask_didReceiveData_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionDataTask, objc.NSData),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDataTask arg2, objc.NSData arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDataTask arg2, objc.NSData arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Invoke the completion routine with a valid NSCachedURLResponse to
  /// allow the resulting data to be cached, or pass nil to prevent
  /// caching. Note that there is no guarantee that caching will be
  /// attempted for a given resource, and you should not rely on this
  /// message to receive the resource data.
  static final URLSession_dataTask_willCacheResponse_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_dataTask_willCacheResponse_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_dataTask_willCacheResponse_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionDataTask,
        NSCachedURLResponse, ObjCBlock_ffiVoid_NSCachedURLResponse),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionDataTask arg2,
                    NSCachedURLResponse arg3,
                    ObjCBlock_ffiVoid_NSCachedURLResponse arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionDataTask arg2,
                    NSCachedURLResponse arg3,
                    ObjCBlock_ffiVoid_NSCachedURLResponse arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Notification that a task has been created.  This method is the first message
  /// a task sends, providing a place to configure the task before it is resumed.
  ///
  /// This delegate callback is *NOT* dispatched to the delegate queue.  It is
  /// invoked synchronously before the task creation method returns.
  static final URLSession_didCreateTask_ = objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didCreateTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_didCreateTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// Sent when the system is ready to begin work for a task with a delayed start
  /// time set (using the earliestBeginDate property). The completionHandler must
  /// be invoked in order for loading to proceed. The disposition provided to the
  /// completion handler continues the load with the original request provided to
  /// the task, replaces the request with the specified task, or cancels the task.
  /// If this delegate is not implemented, loading will proceed with the original
  /// request.
  ///
  /// Recommendation: only implement this delegate if tasks that have the
  /// earliestBeginDate property set may become stale and require alteration prior
  /// to starting the network load.
  ///
  /// If a new request is specified, the allowsExpensiveNetworkAccess,
  /// allowsConstrainedNetworkAccess, and allowsCellularAccess properties
  /// from the new request will not be used; the properties from the
  /// original request will continue to be used.
  ///
  /// Canceling the task is equivalent to calling the task's cancel method; the
  /// URLSession:task:didCompleteWithError: task delegate will be called with error
  /// NSURLErrorCancelled.
  static final URLSession_task_willBeginDelayedRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLRequest,
        ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent when a task cannot start the network loading process because the current
  /// network connectivity is not available or sufficient for the task's request.
  ///
  /// This delegate will be called at most one time per task, and is only called if
  /// the waitsForConnectivity property in the NSURLSessionConfiguration has been
  /// set to YES.
  ///
  /// This delegate callback will never be called for background sessions, because
  /// the waitForConnectivity property is ignored by those sessions.
  static final URLSession_taskIsWaitingForConnectivity_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_taskIsWaitingForConnectivity_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_taskIsWaitingForConnectivity_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// An HTTP request is attempting to perform a redirection to a different
  /// URL. You must invoke the completion routine to allow the
  /// redirection, allow the redirection with a modified request, or
  /// pass nil to the completionHandler to cause the body of the redirection
  /// response to be delivered as the payload of this request. The default
  /// is to follow redirections.
  ///
  /// For tasks in background sessions, redirections will always be followed and this method will not be called.
  static final URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask,
        NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// The task has received a request specific authentication challenge.
  /// If this delegate is not implemented, the session specific authentication challenge
  /// will *NOT* be called and the behavior will be the same as using the default handling
  /// disposition.
  static final URLSession_task_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent if a task requires a new, unopened body stream.  This may be
  /// necessary when authentication has failed for any request that
  /// involves a body stream.
  static final URLSession_task_needNewBodyStream_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStream_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_needNewBodyStream_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Tells the delegate if a task requires a new body stream starting from the given offset. This may be
  /// necessary when resuming a failed upload task.
  ///
  /// - Parameter session: The session containing the task that needs a new body stream from the given offset.
  /// - Parameter task: The task that needs a new body stream.
  /// - Parameter offset: The starting offset required for the body stream.
  /// - Parameter completionHandler: A completion handler that your delegate method should call with the new body stream.
  static final URLSession_task_needNewBodyStreamFromOffset_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent periodically to notify the delegate of upload progress.  This
  /// information is also available as properties of the task.
  static final URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, int, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// Sent for each informational response received except 101 switching protocols.
  static final URLSession_task_didReceiveInformationalResponse_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveInformationalResponse_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_didReceiveInformationalResponse_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSHTTPURLResponse),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent when complete statistics information has been collected for the task.
  static final URLSession_task_didFinishCollectingMetrics_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didFinishCollectingMetrics_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_didFinishCollectingMetrics_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent as the last message related to a specific task.  Error may be
  /// nil, which implies that no error occurred and this task is complete.
  static final URLSession_task_didCompleteWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didCompleteWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_task_didCompleteWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// The last message a session receives.  A session will only become
  /// invalid because of a systemic error or when it has been
  /// explicitly invalidated, in which case the error parameter will be nil.
  static final URLSession_didBecomeInvalidWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didBecomeInvalidWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_didBecomeInvalidWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
            func(arg1, arg2)),
  );

  /// If implemented, when a connection level authentication challenge
  /// has occurred, this delegate will be given the opportunity to
  /// provide authentication credentials to the underlying
  /// connection. Some types of authentication will apply to more than
  /// one request on a given connection to a server (SSL Server Trust
  /// challenges).  If this delegate message is not implemented, the
  /// behavior will be to use the default handling, which may involve user
  /// interaction.
  static final URLSession_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSession_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// If an application has received an
  /// -application:handleEventsForBackgroundURLSession:completionHandler:
  /// message, the session delegate will receive this message to indicate
  /// that all messages previously enqueued for this session have been
  /// delivered.  At this time it is safe to invoke the previously stored
  /// completion handler, or to begin any internal updates that will
  /// result in invoking the completion handler.
  static final URLSessionDidFinishEventsForBackgroundURLSession_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDataDelegate,
      _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
  );
}

late final _protocol_NSURLSessionDataDelegate =
    objc.getProtocol("NSURLSessionDataDelegate");
void _ObjCBlock_ffiVoid_NSURLSessionResponseDisposition_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(NSInteger arg0)>>()
        .asFunction<void Function(int)>()(arg0);
void _ObjCBlock_ffiVoid_NSURLSessionResponseDisposition_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, int arg0) =>
    (objc.getBlockClosure(block) as void Function(int))(arg0);

class ObjCBlock_ffiVoid_NSURLSessionResponseDisposition
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLSessionResponseDisposition._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLSessionResponseDisposition castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLSessionResponseDisposition._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionResponseDisposition.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(NSInteger arg0)>> ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, NSInteger)>(
                    _ObjCBlock_ffiVoid_NSURLSessionResponseDisposition_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionResponseDisposition.fromFunction(
      void Function(NSURLSessionResponseDisposition) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, NSInteger)>(
                    _ObjCBlock_ffiVoid_NSURLSessionResponseDisposition_closureTrampoline)
                .cast(),
            (int arg0) => fn(NSURLSessionResponseDisposition.fromValue(arg0))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLSessionResponseDisposition.listener(
      void Function(NSURLSessionResponseDisposition) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, NSInteger)>.listener(
                    _ObjCBlock_ffiVoid_NSURLSessionResponseDisposition_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (int arg0) =>
                fn(NSURLSessionResponseDisposition.fromValue(arg0)))));
  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, NSInteger)>?
      _dartFuncListenerTrampoline;

  void call(NSURLSessionResponseDisposition arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block, NSInteger arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, int)>()(
      pointer, arg0.value);
}

late final _sel_URLSession_dataTask_didReceiveResponse_completionHandler_ = objc
    .registerName("URLSession:dataTask:didReceiveResponse:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<objc.ObjCObject> arg3,
                            ffi.Pointer<objc.ObjCBlock> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCBlock>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3,
                      ffi.Pointer<objc.ObjCBlock> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask,
              NSURLResponse, ObjCBlock_ffiVoid_NSURLSessionResponseDisposition)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCBlock> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionDataTask.castFromPointer(arg2, retain: true, release: true),
                    NSURLResponse.castFromPointer(arg3, retain: true, release: true),
                    ObjCBlock_ffiVoid_NSURLSessionResponseDisposition.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask,
              NSURLResponse, ObjCBlock_ffiVoid_NSURLSessionResponseDisposition)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLResponse_ffiVoidNSURLSessionResponseDisposition_closureTrampoline)..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3,
                        ffi.Pointer<objc.ObjCBlock> arg4) =>
                    fn(
                        arg0,
                        NSURLSession.castFromPointer(arg1, retain: false, release: true),
                        NSURLSessionDataTask.castFromPointer(arg2, retain: false, release: true),
                        NSURLResponse.castFromPointer(arg3, retain: false, release: true),
                        ObjCBlock_ffiVoid_NSURLSessionResponseDisposition.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionDataTask arg2,
          NSURLResponse arg3,
          ObjCBlock_ffiVoid_NSURLSessionResponseDisposition arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3,
                          ffi.Pointer<objc.ObjCBlock> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.pointer, arg4.pointer);
}

late final _sel_URLSession_dataTask_didBecomeDownloadTask_ =
    objc.registerName("URLSession:dataTask:didBecomeDownloadTask:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask, NSURLSessionDownloadTask) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionDataTask.castFromPointer(arg2, retain: true, release: true),
                NSURLSessionDownloadTask.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask, NSURLSessionDownloadTask)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionDownloadTask_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionDataTask.castFromPointer(arg2, retain: false, release: true),
                    NSURLSessionDownloadTask.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionDataTask arg2, NSURLSessionDownloadTask arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSession_dataTask_didBecomeStreamTask_ =
    objc.registerName("URLSession:dataTask:didBecomeStreamTask:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask, NSURLSessionStreamTask) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionDataTask.castFromPointer(arg2, retain: true, release: true),
                NSURLSessionStreamTask.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask, NSURLSessionStreamTask)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSURLSessionStreamTask_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionDataTask.castFromPointer(arg2, retain: false, release: true),
                    NSURLSessionStreamTask.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionDataTask arg2, NSURLSessionStreamTask arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSession_dataTask_didReceiveData_ =
    objc.registerName("URLSession:dataTask:didReceiveData:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask, objc.NSData) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionDataTask.castFromPointer(arg2, retain: true, release: true),
                objc.NSData.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask, objc.NSData)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSData_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionDataTask.castFromPointer(arg2, retain: false, release: true),
                    objc.NSData.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionDataTask arg2, objc.NSData arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSession_dataTask_willCacheResponse_completionHandler_ = objc
    .registerName("URLSession:dataTask:willCacheResponse:completionHandler:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<objc.ObjCObject> arg3,
                            ffi.Pointer<objc.ObjCBlock> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCBlock>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCBlock> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3,
                      ffi.Pointer<objc.ObjCBlock> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask,
              NSCachedURLResponse, ObjCBlock_ffiVoid_NSCachedURLResponse)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCBlock> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionDataTask.castFromPointer(arg2, retain: true, release: true),
                    NSCachedURLResponse.castFromPointer(arg3, retain: true, release: true),
                    ObjCBlock_ffiVoid_NSCachedURLResponse.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDataTask,
              NSCachedURLResponse, ObjCBlock_ffiVoid_NSCachedURLResponse)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDataTask_NSCachedURLResponse_ffiVoidNSCachedURLResponse_closureTrampoline)..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3,
                        ffi.Pointer<objc.ObjCBlock> arg4) =>
                    fn(
                        arg0,
                        NSURLSession.castFromPointer(arg1, retain: false, release: true),
                        NSURLSessionDataTask.castFromPointer(arg2, retain: false, release: true),
                        NSCachedURLResponse.castFromPointer(arg3, retain: false, release: true),
                        ObjCBlock_ffiVoid_NSCachedURLResponse.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCBlock>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionDataTask arg2,
          NSCachedURLResponse arg3,
          ObjCBlock_ffiVoid_NSCachedURLResponse arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3,
                          ffi.Pointer<objc.ObjCBlock> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.pointer, arg4.pointer);
}

/// Messages related to the operation of a task that writes data to a
/// file and notifies the delegate upon completion.
abstract final class NSURLSessionDownloadDelegate {
  /// Builds an object that implements the NSURLSessionDownloadDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required void Function(NSURLSession, NSURLSessionDownloadTask, objc.NSURL)
          URLSession_downloadTask_didFinishDownloadingToURL_,
      void Function(NSURLSession, NSURLSessionDownloadTask, int, int, int)?
          URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_,
      void Function(NSURLSession, NSURLSessionDownloadTask, int, int)?
          URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse,
              NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)?
          URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_downloadTask_didFinishDownloadingToURL_,
        URLSession_downloadTask_didFinishDownloadingToURL_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_,
        URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_,
        URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLSessionDownloadDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required void Function(NSURLSession, NSURLSessionDownloadTask, objc.NSURL)
          URLSession_downloadTask_didFinishDownloadingToURL_,
      void Function(NSURLSession, NSURLSessionDownloadTask, int, int, int)?
          URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_,
      void Function(NSURLSession, NSURLSessionDownloadTask, int, int)?
          URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse,
              NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)?
          URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_downloadTask_didFinishDownloadingToURL_,
        URLSession_downloadTask_didFinishDownloadingToURL_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_,
        URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_,
        URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionDownloadDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
  }

  /// Sent when a download task that has completed a download.  The delegate should
  /// copy or move the file at the given location to a new location as it will be
  /// removed when the delegate message returns. URLSession:task:didCompleteWithError: will
  /// still be called.
  static final URLSession_downloadTask_didFinishDownloadingToURL_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_downloadTask_didFinishDownloadingToURL_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_downloadTask_didFinishDownloadingToURL_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionDownloadTask, objc.NSURL),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDownloadTask arg2, objc.NSURL arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDownloadTask arg2, objc.NSURL arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent periodically to notify the delegate of download progress.
  static final URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionDownloadTask, int, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionDownloadTask arg2,
                    int arg3,
                    int arg4,
                    int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionDownloadTask arg2,
                    int arg3,
                    int arg4,
                    int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// Sent when a download has been resumed. If a download failed with an
  /// error, the -userInfo dictionary of the error will contain an
  /// NSURLSessionDownloadTaskResumeData key, whose value is the resume
  /// data.
  static final URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionDownloadTask, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDownloadTask arg2, int arg3, int arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionDownloadTask arg2, int arg3, int arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Notification that a task has been created.  This method is the first message
  /// a task sends, providing a place to configure the task before it is resumed.
  ///
  /// This delegate callback is *NOT* dispatched to the delegate queue.  It is
  /// invoked synchronously before the task creation method returns.
  static final URLSession_didCreateTask_ = objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didCreateTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_didCreateTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// Sent when the system is ready to begin work for a task with a delayed start
  /// time set (using the earliestBeginDate property). The completionHandler must
  /// be invoked in order for loading to proceed. The disposition provided to the
  /// completion handler continues the load with the original request provided to
  /// the task, replaces the request with the specified task, or cancels the task.
  /// If this delegate is not implemented, loading will proceed with the original
  /// request.
  ///
  /// Recommendation: only implement this delegate if tasks that have the
  /// earliestBeginDate property set may become stale and require alteration prior
  /// to starting the network load.
  ///
  /// If a new request is specified, the allowsExpensiveNetworkAccess,
  /// allowsConstrainedNetworkAccess, and allowsCellularAccess properties
  /// from the new request will not be used; the properties from the
  /// original request will continue to be used.
  ///
  /// Canceling the task is equivalent to calling the task's cancel method; the
  /// URLSession:task:didCompleteWithError: task delegate will be called with error
  /// NSURLErrorCancelled.
  static final URLSession_task_willBeginDelayedRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLRequest,
        ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent when a task cannot start the network loading process because the current
  /// network connectivity is not available or sufficient for the task's request.
  ///
  /// This delegate will be called at most one time per task, and is only called if
  /// the waitsForConnectivity property in the NSURLSessionConfiguration has been
  /// set to YES.
  ///
  /// This delegate callback will never be called for background sessions, because
  /// the waitForConnectivity property is ignored by those sessions.
  static final URLSession_taskIsWaitingForConnectivity_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_taskIsWaitingForConnectivity_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_taskIsWaitingForConnectivity_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// An HTTP request is attempting to perform a redirection to a different
  /// URL. You must invoke the completion routine to allow the
  /// redirection, allow the redirection with a modified request, or
  /// pass nil to the completionHandler to cause the body of the redirection
  /// response to be delivered as the payload of this request. The default
  /// is to follow redirections.
  ///
  /// For tasks in background sessions, redirections will always be followed and this method will not be called.
  static final URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask,
        NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// The task has received a request specific authentication challenge.
  /// If this delegate is not implemented, the session specific authentication challenge
  /// will *NOT* be called and the behavior will be the same as using the default handling
  /// disposition.
  static final URLSession_task_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent if a task requires a new, unopened body stream.  This may be
  /// necessary when authentication has failed for any request that
  /// involves a body stream.
  static final URLSession_task_needNewBodyStream_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStream_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_needNewBodyStream_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Tells the delegate if a task requires a new body stream starting from the given offset. This may be
  /// necessary when resuming a failed upload task.
  ///
  /// - Parameter session: The session containing the task that needs a new body stream from the given offset.
  /// - Parameter task: The task that needs a new body stream.
  /// - Parameter offset: The starting offset required for the body stream.
  /// - Parameter completionHandler: A completion handler that your delegate method should call with the new body stream.
  static final URLSession_task_needNewBodyStreamFromOffset_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent periodically to notify the delegate of upload progress.  This
  /// information is also available as properties of the task.
  static final URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, int, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// Sent for each informational response received except 101 switching protocols.
  static final URLSession_task_didReceiveInformationalResponse_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveInformationalResponse_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_didReceiveInformationalResponse_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSHTTPURLResponse),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent when complete statistics information has been collected for the task.
  static final URLSession_task_didFinishCollectingMetrics_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didFinishCollectingMetrics_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_didFinishCollectingMetrics_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent as the last message related to a specific task.  Error may be
  /// nil, which implies that no error occurred and this task is complete.
  static final URLSession_task_didCompleteWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didCompleteWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_task_didCompleteWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// The last message a session receives.  A session will only become
  /// invalid because of a systemic error or when it has been
  /// explicitly invalidated, in which case the error parameter will be nil.
  static final URLSession_didBecomeInvalidWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didBecomeInvalidWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_didBecomeInvalidWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
            func(arg1, arg2)),
  );

  /// If implemented, when a connection level authentication challenge
  /// has occurred, this delegate will be given the opportunity to
  /// provide authentication credentials to the underlying
  /// connection. Some types of authentication will apply to more than
  /// one request on a given connection to a server (SSL Server Trust
  /// challenges).  If this delegate message is not implemented, the
  /// behavior will be to use the default handling, which may involve user
  /// interaction.
  static final URLSession_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSession_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// If an application has received an
  /// -application:handleEventsForBackgroundURLSession:completionHandler:
  /// message, the session delegate will receive this message to indicate
  /// that all messages previously enqueued for this session have been
  /// delivered.  At this time it is safe to invoke the previously stored
  /// completion handler, or to begin any internal updates that will
  /// result in invoking the completion handler.
  static final URLSessionDidFinishEventsForBackgroundURLSession_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionDownloadDelegate,
      _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
  );
}

late final _protocol_NSURLSessionDownloadDelegate =
    objc.getProtocol("NSURLSessionDownloadDelegate");
late final _sel_URLSession_downloadTask_didFinishDownloadingToURL_ =
    objc.registerName("URLSession:downloadTask:didFinishDownloadingToURL:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDownloadTask, objc.NSURL) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionDownloadTask.castFromPointer(arg2, retain: true, release: true),
                objc.NSURL.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDownloadTask, objc.NSURL)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_NSURL_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionDownloadTask.castFromPointer(arg2, retain: false, release: true),
                    objc.NSURL.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionDownloadTask arg2, objc.NSURL arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3.pointer);
}

late final _sel_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_ =
    objc.registerName(
        "URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            int arg4,
            int arg5) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Int64 arg3,
                        ffi.Int64 arg4,
                        ffi.Int64 arg5)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    int,
                    int,
                    int)>()(arg0, arg1, arg2, arg3, arg4, arg5);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            int arg4,
            int arg5) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int))(arg0, arg1, arg2, arg3, arg4, arg5);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Int64 arg3,
                      ffi.Int64 arg4,
                      ffi.Int64 arg5)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64,
                            ffi.Int64)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDownloadTask, int, int, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64,
                            ffi.Int64)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, int arg3, int arg4, int arg5) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionDownloadTask.castFromPointer(arg2, retain: true, release: true),
                arg3,
                arg4,
                arg5)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64.listener(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDownloadTask, int, int, int) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64,
                            ffi.Int64)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_Int64_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    int arg3,
                    int arg4,
                    int arg5) =>
                fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true), NSURLSessionDownloadTask.castFromPointer(arg2, retain: false, release: true), arg3, arg4, arg5))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Int64,
          ffi.Int64,
          ffi.Int64)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionDownloadTask arg2, int arg3, int arg4, int arg5) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Int64 arg3,
                          ffi.Int64 arg4,
                          ffi.Int64 arg5)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      int,
                      int)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3, arg4, arg5);
}

late final _sel_URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_ =
    objc.registerName(
        "URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            int arg4) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Int64 arg3,
                        ffi.Int64 arg4)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    int,
                    int)>()(arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            int arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Int64 arg3,
                      ffi.Int64 arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDownloadTask, int, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, int arg3, int arg4) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionDownloadTask.castFromPointer(arg2, retain: true, release: true),
                arg3,
                arg4)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64.listener(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionDownloadTask, int, int) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int64,
                            ffi.Int64)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionDownloadTask_Int64_Int64_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2, int arg3, int arg4) =>
                fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true), NSURLSessionDownloadTask.castFromPointer(arg2, retain: false, release: true), arg3, arg4))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Int64,
          ffi.Int64)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionDownloadTask arg2, int arg3, int arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Int64 arg3,
                          ffi.Int64 arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      int)>()(
          pointer, arg0, arg1.pointer, arg2.pointer, arg3, arg4);
}

/// NSURLSessionStreamDelegate
abstract final class NSURLSessionStreamDelegate {
  /// Builds an object that implements the NSURLSessionStreamDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {void Function(NSURLSession, NSURLSessionStreamTask)?
          URLSession_readClosedForStreamTask_,
      void Function(NSURLSession, NSURLSessionStreamTask)?
          URLSession_writeClosedForStreamTask_,
      void Function(NSURLSession, NSURLSessionStreamTask)?
          URLSession_betterRouteDiscoveredForStreamTask_,
      void Function(NSURLSession, NSURLSessionStreamTask, NSInputStream,
              NSOutputStream)?
          URLSession_streamTask_didBecomeInputStream_outputStream_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse,
              NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_readClosedForStreamTask_,
        URLSession_readClosedForStreamTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_writeClosedForStreamTask_,
        URLSession_writeClosedForStreamTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_betterRouteDiscoveredForStreamTask_,
        URLSession_betterRouteDiscoveredForStreamTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_streamTask_didBecomeInputStream_outputStream_,
        URLSession_streamTask_didBecomeInputStream_outputStream_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLSessionStreamDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {void Function(NSURLSession, NSURLSessionStreamTask)?
          URLSession_readClosedForStreamTask_,
      void Function(NSURLSession, NSURLSessionStreamTask)?
          URLSession_writeClosedForStreamTask_,
      void Function(NSURLSession, NSURLSessionStreamTask)?
          URLSession_betterRouteDiscoveredForStreamTask_,
      void Function(NSURLSession, NSURLSessionStreamTask, NSInputStream,
              NSOutputStream)?
          URLSession_streamTask_didBecomeInputStream_outputStream_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse,
              NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_readClosedForStreamTask_,
        URLSession_readClosedForStreamTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_writeClosedForStreamTask_,
        URLSession_writeClosedForStreamTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_betterRouteDiscoveredForStreamTask_,
        URLSession_betterRouteDiscoveredForStreamTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_streamTask_didBecomeInputStream_outputStream_,
        URLSession_streamTask_didBecomeInputStream_outputStream_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionStreamDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionStreamDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
  }

  /// Indicates that the read side of a connection has been closed.  Any
  /// outstanding reads complete, but future reads will immediately fail.
  /// This may be sent even when no reads are in progress. However, when
  /// this delegate message is received, there may still be bytes
  /// available.  You only know that no more bytes are available when you
  /// are able to read until EOF.
  static final URLSession_readClosedForStreamTask_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_readClosedForStreamTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_readClosedForStreamTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionStreamTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionStreamTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionStreamTask arg2) =>
                func(arg1, arg2)),
  );

  /// Indicates that the write side of a connection has been closed.
  /// Any outstanding writes complete, but future writes will immediately
  /// fail.
  static final URLSession_writeClosedForStreamTask_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_writeClosedForStreamTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_writeClosedForStreamTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionStreamTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionStreamTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionStreamTask arg2) =>
                func(arg1, arg2)),
  );

  /// A notification that the system has determined that a better route
  /// to the host has been detected (eg, a wi-fi interface becoming
  /// available.)  This is a hint to the delegate that it may be
  /// desirable to create a new task for subsequent work.  Note that
  /// there is no guarantee that the future task will be able to connect
  /// to the host, so callers should should be prepared for failure of
  /// reads and writes over any new interface.
  static final URLSession_betterRouteDiscoveredForStreamTask_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_betterRouteDiscoveredForStreamTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_betterRouteDiscoveredForStreamTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionStreamTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionStreamTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionStreamTask arg2) =>
                func(arg1, arg2)),
  );

  /// The given task has been completed, and unopened NSInputStream and
  /// NSOutputStream objects are created from the underlying network
  /// connection.  This will only be invoked after all enqueued IO has
  /// completed (including any necessary handshakes.)  The streamTask
  /// will not receive any further delegate messages.
  static final URLSession_streamTask_didBecomeInputStream_outputStream_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_streamTask_didBecomeInputStream_outputStream_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_streamTask_didBecomeInputStream_outputStream_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionStreamTask, NSInputStream, NSOutputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionStreamTask arg2,
                    NSInputStream arg3,
                    NSOutputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionStreamTask arg2,
                    NSInputStream arg3,
                    NSOutputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Notification that a task has been created.  This method is the first message
  /// a task sends, providing a place to configure the task before it is resumed.
  ///
  /// This delegate callback is *NOT* dispatched to the delegate queue.  It is
  /// invoked synchronously before the task creation method returns.
  static final URLSession_didCreateTask_ = objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didCreateTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_didCreateTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// Sent when the system is ready to begin work for a task with a delayed start
  /// time set (using the earliestBeginDate property). The completionHandler must
  /// be invoked in order for loading to proceed. The disposition provided to the
  /// completion handler continues the load with the original request provided to
  /// the task, replaces the request with the specified task, or cancels the task.
  /// If this delegate is not implemented, loading will proceed with the original
  /// request.
  ///
  /// Recommendation: only implement this delegate if tasks that have the
  /// earliestBeginDate property set may become stale and require alteration prior
  /// to starting the network load.
  ///
  /// If a new request is specified, the allowsExpensiveNetworkAccess,
  /// allowsConstrainedNetworkAccess, and allowsCellularAccess properties
  /// from the new request will not be used; the properties from the
  /// original request will continue to be used.
  ///
  /// Canceling the task is equivalent to calling the task's cancel method; the
  /// URLSession:task:didCompleteWithError: task delegate will be called with error
  /// NSURLErrorCancelled.
  static final URLSession_task_willBeginDelayedRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLRequest,
        ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent when a task cannot start the network loading process because the current
  /// network connectivity is not available or sufficient for the task's request.
  ///
  /// This delegate will be called at most one time per task, and is only called if
  /// the waitsForConnectivity property in the NSURLSessionConfiguration has been
  /// set to YES.
  ///
  /// This delegate callback will never be called for background sessions, because
  /// the waitForConnectivity property is ignored by those sessions.
  static final URLSession_taskIsWaitingForConnectivity_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_taskIsWaitingForConnectivity_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_taskIsWaitingForConnectivity_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// An HTTP request is attempting to perform a redirection to a different
  /// URL. You must invoke the completion routine to allow the
  /// redirection, allow the redirection with a modified request, or
  /// pass nil to the completionHandler to cause the body of the redirection
  /// response to be delivered as the payload of this request. The default
  /// is to follow redirections.
  ///
  /// For tasks in background sessions, redirections will always be followed and this method will not be called.
  static final URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask,
        NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// The task has received a request specific authentication challenge.
  /// If this delegate is not implemented, the session specific authentication challenge
  /// will *NOT* be called and the behavior will be the same as using the default handling
  /// disposition.
  static final URLSession_task_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent if a task requires a new, unopened body stream.  This may be
  /// necessary when authentication has failed for any request that
  /// involves a body stream.
  static final URLSession_task_needNewBodyStream_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStream_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_needNewBodyStream_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Tells the delegate if a task requires a new body stream starting from the given offset. This may be
  /// necessary when resuming a failed upload task.
  ///
  /// - Parameter session: The session containing the task that needs a new body stream from the given offset.
  /// - Parameter task: The task that needs a new body stream.
  /// - Parameter offset: The starting offset required for the body stream.
  /// - Parameter completionHandler: A completion handler that your delegate method should call with the new body stream.
  static final URLSession_task_needNewBodyStreamFromOffset_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent periodically to notify the delegate of upload progress.  This
  /// information is also available as properties of the task.
  static final URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, int, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// Sent for each informational response received except 101 switching protocols.
  static final URLSession_task_didReceiveInformationalResponse_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveInformationalResponse_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_didReceiveInformationalResponse_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSHTTPURLResponse),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent when complete statistics information has been collected for the task.
  static final URLSession_task_didFinishCollectingMetrics_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didFinishCollectingMetrics_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_didFinishCollectingMetrics_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent as the last message related to a specific task.  Error may be
  /// nil, which implies that no error occurred and this task is complete.
  static final URLSession_task_didCompleteWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didCompleteWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_task_didCompleteWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// The last message a session receives.  A session will only become
  /// invalid because of a systemic error or when it has been
  /// explicitly invalidated, in which case the error parameter will be nil.
  static final URLSession_didBecomeInvalidWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didBecomeInvalidWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_didBecomeInvalidWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
            func(arg1, arg2)),
  );

  /// If implemented, when a connection level authentication challenge
  /// has occurred, this delegate will be given the opportunity to
  /// provide authentication credentials to the underlying
  /// connection. Some types of authentication will apply to more than
  /// one request on a given connection to a server (SSL Server Trust
  /// challenges).  If this delegate message is not implemented, the
  /// behavior will be to use the default handling, which may involve user
  /// interaction.
  static final URLSession_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSession_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// If an application has received an
  /// -application:handleEventsForBackgroundURLSession:completionHandler:
  /// message, the session delegate will receive this message to indicate
  /// that all messages previously enqueued for this session have been
  /// delivered.  At this time it is safe to invoke the previously stored
  /// completion handler, or to begin any internal updates that will
  /// result in invoking the completion handler.
  static final URLSessionDidFinishEventsForBackgroundURLSession_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionStreamDelegate,
      _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
  );
}

late final _protocol_NSURLSessionStreamDelegate =
    objc.getProtocol("NSURLSessionStreamDelegate");
late final _sel_URLSession_readClosedForStreamTask_ =
    objc.registerName("URLSession:readClosedForStreamTask:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionStreamTask)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(arg0, NSURLSession.castFromPointer(arg1, retain: true, release: true), NSURLSessionStreamTask.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask.listener(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionStreamTask) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(arg0, NSURLSession.castFromPointer(arg1, retain: false, release: true), NSURLSessionStreamTask.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionStreamTask arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer);
}

late final _sel_URLSession_writeClosedForStreamTask_ =
    objc.registerName("URLSession:writeClosedForStreamTask:");
late final _sel_URLSession_betterRouteDiscoveredForStreamTask_ =
    objc.registerName("URLSession:betterRouteDiscoveredForStreamTask:");
late final _sel_URLSession_streamTask_didBecomeInputStream_outputStream_ = objc
    .registerName("URLSession:streamTask:didBecomeInputStream:outputStream:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCObject> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<objc.ObjCObject> arg3,
                            ffi.Pointer<objc.ObjCObject> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<objc.ObjCObject> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3,
                      ffi.Pointer<objc.ObjCObject> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionStreamTask, NSInputStream, NSOutputStream) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3, ffi.Pointer<objc.ObjCObject> arg4) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionStreamTask.castFromPointer(arg2, retain: true, release: true),
                NSInputStream.castFromPointer(arg3, retain: true, release: true),
                NSOutputStream.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionStreamTask,
              NSInputStream, NSOutputStream)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionStreamTask_NSInputStream_NSOutputStream_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3,
                    ffi.Pointer<objc.ObjCObject> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionStreamTask.castFromPointer(arg2, retain: false, release: true),
                    NSInputStream.castFromPointer(arg3, retain: false, release: true),
                    NSOutputStream.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionStreamTask arg2,
          NSInputStream arg3,
          NSOutputStream arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3,
                          ffi.Pointer<objc.ObjCObject> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.pointer, arg4.pointer);
}

/// NSURLSessionWebSocketDelegate
abstract final class NSURLSessionWebSocketDelegate {
  /// Builds an object that implements the NSURLSessionWebSocketDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {void Function(NSURLSession, NSURLSessionWebSocketTask, objc.NSString?)?
          URLSession_webSocketTask_didOpenWithProtocol_,
      void Function(NSURLSession, NSURLSessionWebSocketTask,
              NSURLSessionWebSocketCloseCode, objc.NSData?)?
          URLSession_webSocketTask_didCloseWithCode_reason_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse,
              NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_webSocketTask_didOpenWithProtocol_,
        URLSession_webSocketTask_didOpenWithProtocol_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_webSocketTask_didCloseWithCode_reason_,
        URLSession_webSocketTask_didCloseWithCode_reason_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLSessionWebSocketDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {void Function(NSURLSession, NSURLSessionWebSocketTask, objc.NSString?)?
          URLSession_webSocketTask_didOpenWithProtocol_,
      void Function(NSURLSession, NSURLSessionWebSocketTask,
              NSURLSessionWebSocketCloseCode, objc.NSData?)?
          URLSession_webSocketTask_didCloseWithCode_reason_,
      void Function(NSURLSession, NSURLSessionTask)? URLSession_didCreateTask_,
      void Function(NSURLSession, NSURLSessionTask, NSURLRequest,
              ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest)?
          URLSession_task_willBeginDelayedRequest_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask)?
          URLSession_taskIsWaitingForConnectivity_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse,
              NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest)?
          URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      void Function(
              NSURLSession,
              NSURLSessionTask,
              NSURLAuthenticationChallenge,
              ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)?
          URLSession_task_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStream_,
      void Function(NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream)? URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      void Function(NSURLSession, NSURLSessionTask, int, int, int)? URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      void Function(NSURLSession, NSURLSessionTask, NSHTTPURLResponse)? URLSession_task_didReceiveInformationalResponse_,
      void Function(NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics)? URLSession_task_didFinishCollectingMetrics_,
      void Function(NSURLSession, NSURLSessionTask, objc.NSError?)? URLSession_task_didCompleteWithError_,
      void Function(NSURLSession, objc.NSError?)? URLSession_didBecomeInvalidWithError_,
      void Function(NSURLSession, NSURLAuthenticationChallenge, ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential)? URLSession_didReceiveChallenge_completionHandler_,
      void Function(NSURLSession)? URLSessionDidFinishEventsForBackgroundURLSession_}) {
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_webSocketTask_didOpenWithProtocol_,
        URLSession_webSocketTask_didOpenWithProtocol_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_webSocketTask_didCloseWithCode_reason_,
        URLSession_webSocketTask_didCloseWithCode_reason_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_didCreateTask_,
        URLSession_didCreateTask_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_willBeginDelayedRequest_completionHandler_,
        URLSession_task_willBeginDelayedRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_taskIsWaitingForConnectivity_,
        URLSession_taskIsWaitingForConnectivity_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
        URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didReceiveChallenge_completionHandler_,
        URLSession_task_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_task_needNewBodyStream_,
        URLSession_task_needNewBodyStream_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
        URLSession_task_needNewBodyStreamFromOffset_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
        URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didReceiveInformationalResponse_,
        URLSession_task_didReceiveInformationalResponse_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_task_didFinishCollectingMetrics_,
        URLSession_task_didFinishCollectingMetrics_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_task_didCompleteWithError_,
        URLSession_task_didCompleteWithError_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate.URLSession_didBecomeInvalidWithError_,
        URLSession_didBecomeInvalidWithError_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSession_didReceiveChallenge_completionHandler_,
        URLSession_didReceiveChallenge_completionHandler_);
    builder.implementMethod(
        NSURLSessionWebSocketDelegate
            .URLSessionDidFinishEventsForBackgroundURLSession_,
        URLSessionDidFinishEventsForBackgroundURLSession_);
  }

  /// Indicates that the WebSocket handshake was successful and the connection has been upgraded to webSockets.
  /// It will also provide the protocol that is picked in the handshake. If the handshake fails, this delegate will not be invoked.
  static final URLSession_webSocketTask_didOpenWithProtocol_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_webSocketTask_didOpenWithProtocol_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_webSocketTask_didOpenWithProtocol_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionWebSocketTask, objc.NSString?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionWebSocketTask arg2, objc.NSString? arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionWebSocketTask arg2, objc.NSString? arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Indicates that the WebSocket has received a close frame from the server endpoint.
  /// The close code and the close reason may be provided by the delegate if the server elects to send
  /// this information in the close frame
  static final URLSession_webSocketTask_didCloseWithCode_reason_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_webSocketTask_didCloseWithCode_reason_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_webSocketTask_didCloseWithCode_reason_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionWebSocketTask,
        NSURLSessionWebSocketCloseCode,
        objc.NSData?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionWebSocketTask arg2,
                    NSURLSessionWebSocketCloseCode arg3,
                    objc.NSData? arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionWebSocketTask arg2,
                    NSURLSessionWebSocketCloseCode arg3,
                    objc.NSData? arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Notification that a task has been created.  This method is the first message
  /// a task sends, providing a place to configure the task before it is resumed.
  ///
  /// This delegate callback is *NOT* dispatched to the delegate queue.  It is
  /// invoked synchronously before the task creation method returns.
  static final URLSession_didCreateTask_ = objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didCreateTask_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_didCreateTask_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// Sent when the system is ready to begin work for a task with a delayed start
  /// time set (using the earliestBeginDate property). The completionHandler must
  /// be invoked in order for loading to proceed. The disposition provided to the
  /// completion handler continues the load with the original request provided to
  /// the task, replaces the request with the specified task, or cancels the task.
  /// If this delegate is not implemented, loading will proceed with the original
  /// request.
  ///
  /// Recommendation: only implement this delegate if tasks that have the
  /// earliestBeginDate property set may become stale and require alteration prior
  /// to starting the network load.
  ///
  /// If a new request is specified, the allowsExpensiveNetworkAccess,
  /// allowsConstrainedNetworkAccess, and allowsCellularAccess properties
  /// from the new request will not be used; the properties from the
  /// original request will continue to be used.
  ///
  /// Canceling the task is equivalent to calling the task's cancel method; the
  /// URLSession:task:didCompleteWithError: task delegate will be called with error
  /// NSURLErrorCancelled.
  static final URLSession_task_willBeginDelayedRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_willBeginDelayedRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLRequest,
        ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLRequest_ffiVoidNSURLSessionDelayedRequestDispositionNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLRequest arg3,
                    ObjCBlock_ffiVoid_NSURLSessionDelayedRequestDisposition_NSURLRequest
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent when a task cannot start the network loading process because the current
  /// network connectivity is not available or sufficient for the task's request.
  ///
  /// This delegate will be called at most one time per task, and is only called if
  /// the waitsForConnectivity property in the NSURLSessionConfiguration has been
  /// set to YES.
  ///
  /// This delegate callback will never be called for background sessions, because
  /// the waitForConnectivity property is ignored by those sessions.
  static final URLSession_taskIsWaitingForConnectivity_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_taskIsWaitingForConnectivity_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_taskIsWaitingForConnectivity_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask.listener(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2) =>
                func(arg1, arg2)),
  );

  /// An HTTP request is attempting to perform a redirection to a different
  /// URL. You must invoke the completion routine to allow the
  /// redirection, allow the redirection with a modified request, or
  /// pass nil to the completionHandler to cause the body of the redirection
  /// response to be delivered as the payload of this request. The default
  /// is to follow redirections.
  ///
  /// For tasks in background sessions, redirections will always be followed and this method will not be called.
  static final URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, NSURLSessionTask,
        NSHTTPURLResponse, NSURLRequest, ObjCBlock_ffiVoid_NSURLRequest),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse_NSURLRequest_ffiVoidNSURLRequest
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSHTTPURLResponse arg3,
                    NSURLRequest arg4,
                    ObjCBlock_ffiVoid_NSURLRequest arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// The task has received a request specific authentication challenge.
  /// If this delegate is not implemented, the session specific authentication challenge
  /// will *NOT* be called and the behavior will be the same as using the default handling
  /// disposition.
  static final URLSession_task_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLSessionTask,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    NSURLAuthenticationChallenge arg3,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent if a task requires a new, unopened body stream.  This may be
  /// necessary when authentication has failed for any request that
  /// involves a body stream.
  static final URLSession_task_needNewBodyStream_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStream_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_needNewBodyStream_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    ObjCBlock_ffiVoid_NSInputStream arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Tells the delegate if a task requires a new body stream starting from the given offset. This may be
  /// necessary when resuming a failed upload task.
  ///
  /// - Parameter session: The session containing the task that needs a new body stream from the given offset.
  /// - Parameter task: The task that needs a new body stream.
  /// - Parameter offset: The starting offset required for the body stream.
  /// - Parameter completionHandler: A completion handler that your delegate method should call with the new body stream.
  static final URLSession_task_needNewBodyStreamFromOffset_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, int, ObjCBlock_ffiVoid_NSInputStream),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_ffiVoidNSInputStream
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLSessionTask arg2,
                    int arg3,
                    ObjCBlock_ffiVoid_NSInputStream arg4) =>
                func(arg1, arg2, arg3, arg4)),
  );

  /// Sent periodically to notify the delegate of upload progress.  This
  /// information is also available as properties of the task.
  static final URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, int, int, int),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_Int64_Int64_Int64
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, int arg3, int arg4, int arg5) =>
                func(arg1, arg2, arg3, arg4, arg5)),
  );

  /// Sent for each informational response received except 101 switching protocols.
  static final URLSession_task_didReceiveInformationalResponse_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didReceiveInformationalResponse_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_didReceiveInformationalResponse_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSHTTPURLResponse),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSHTTPURLResponse
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSHTTPURLResponse arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent when complete statistics information has been collected for the task.
  static final URLSession_task_didFinishCollectingMetrics_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didFinishCollectingMetrics_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_didFinishCollectingMetrics_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession, NSURLSessionTask, NSURLSessionTaskMetrics),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSURLSessionTaskMetrics
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, NSURLSessionTaskMetrics arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// Sent as the last message related to a specific task.  Error may be
  /// nil, which implies that no error occurred and this task is complete.
  static final URLSession_task_didCompleteWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_task_didCompleteWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_task_didCompleteWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is void Function(NSURLSession, NSURLSessionTask, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .fromFunction((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionTask_NSError
            .listener((ffi.Pointer<ffi.Void> _, NSURLSession arg1,
                    NSURLSessionTask arg2, objc.NSError? arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// The last message a session receives.  A session will only become
  /// invalid because of a systemic error or when it has been
  /// explicitly invalidated, in which case the error parameter will be nil.
  static final URLSession_didBecomeInvalidWithError_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didBecomeInvalidWithError_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_didBecomeInvalidWithError_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession, objc.NSError?),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSError.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1, objc.NSError? arg2) =>
            func(arg1, arg2)),
  );

  /// If implemented, when a connection level authentication challenge
  /// has occurred, this delegate will be given the opportunity to
  /// provide authentication credentials to the underlying
  /// connection. Some types of authentication will apply to more than
  /// one request on a given connection to a server (SSL Server Trust
  /// challenges).  If this delegate message is not implemented, the
  /// behavior will be to use the default handling, which may involve user
  /// interaction.
  static final URLSession_didReceiveChallenge_completionHandler_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSession_didReceiveChallenge_completionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSession_didReceiveChallenge_completionHandler_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(
        NSURLSession,
        NSURLAuthenticationChallenge,
        ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLAuthenticationChallenge_ffiVoidNSURLSessionAuthChallengeDispositionNSURLCredential
            .listener((ffi.Pointer<ffi.Void> _,
                    NSURLSession arg1,
                    NSURLAuthenticationChallenge arg2,
                    ObjCBlock_ffiVoid_NSURLSessionAuthChallengeDisposition_NSURLCredential
                        arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// If an application has received an
  /// -application:handleEventsForBackgroundURLSession:completionHandler:
  /// message, the session delegate will receive this message to indicate
  /// that all messages previously enqueued for this session have been
  /// delivered.  At this time it is safe to invoke the previously stored
  /// completion handler, or to begin any internal updates that will
  /// result in invoking the completion handler.
  static final URLSessionDidFinishEventsForBackgroundURLSession_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLSessionWebSocketDelegate,
      _sel_URLSessionDidFinishEventsForBackgroundURLSession_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSURLSession),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.fromFunction(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLSession.listener(
        (ffi.Pointer<ffi.Void> _, NSURLSession arg1) => func(arg1)),
  );
}

late final _protocol_NSURLSessionWebSocketDelegate =
    objc.getProtocol("NSURLSessionWebSocketDelegate");
late final _sel_URLSession_webSocketTask_didOpenWithProtocol_ =
    objc.registerName("URLSession:webSocketTask:didOpenWithProtocol:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        ffi.Pointer<objc.ObjCObject> arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<objc.ObjCObject> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString.fromFunction(void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionWebSocketTask, objc.NSString?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<objc.ObjCObject> arg3) => fn(
                arg0,
                NSURLSession.castFromPointer(arg1, retain: true, release: true),
                NSURLSessionWebSocketTask.castFromPointer(arg2, retain: true, release: true),
                arg3.address == 0 ? null : objc.NSString.castFromPointer(arg3, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString.listener(
      void Function(ffi.Pointer<ffi.Void>, NSURLSession, NSURLSessionWebSocketTask, objc.NSString?)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSString_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<objc.ObjCObject> arg3) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: false, release: true),
                    NSURLSessionWebSocketTask.castFromPointer(arg2, retain: false, release: true),
                    arg3.address == 0 ? null : objc.NSString.castFromPointer(arg3, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSURLSession arg1,
          NSURLSessionWebSocketTask arg2, objc.NSString? arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<objc.ObjCObject> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3?.pointer ?? ffi.nullptr);
}

late final _sel_URLSession_webSocketTask_didCloseWithCode_reason_ =
    objc.registerName("URLSession:webSocketTask:didCloseWithCode:reason:");
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            ffi.Pointer<objc.ObjCObject> arg4) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            NSInteger arg3,
                            ffi.Pointer<objc.ObjCObject> arg4)>>()
                .asFunction<
                    void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        int,
                        ffi.Pointer<objc.ObjCObject>)>()(
            arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            int arg3,
            ffi.Pointer<objc.ObjCObject> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2, arg3, arg4);

class ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      NSInteger arg3,
                      ffi.Pointer<objc.ObjCObject> arg4)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            NSInteger,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData.fromFunction(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLSessionWebSocketTask,
              NSURLSessionWebSocketCloseCode,
              objc.NSData?)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, NSInteger, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData_closureTrampoline)
                    .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    int arg3,
                    ffi.Pointer<objc.ObjCObject> arg4) =>
                fn(
                    arg0,
                    NSURLSession.castFromPointer(arg1, retain: true, release: true),
                    NSURLSessionWebSocketTask.castFromPointer(arg2, retain: true, release: true),
                    NSURLSessionWebSocketCloseCode.fromValue(arg3),
                    arg4.address == 0 ? null : objc.NSData.castFromPointer(arg4, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData.listener(
      void Function(
              ffi.Pointer<ffi.Void>,
              NSURLSession,
              NSURLSessionWebSocketTask,
              NSURLSessionWebSocketCloseCode,
              objc.NSData?)
          fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, NSInteger, ffi.Pointer<objc.ObjCObject>)>.listener(_ObjCBlock_ffiVoid_ffiVoid_NSURLSession_NSURLSessionWebSocketTask_NSURLSessionWebSocketCloseCode_NSData_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2,
                        int arg3,
                        ffi.Pointer<objc.ObjCObject> arg4) =>
                    fn(
                        arg0,
                        NSURLSession.castFromPointer(arg1, retain: false, release: true),
                        NSURLSessionWebSocketTask.castFromPointer(arg2, retain: false, release: true),
                        NSURLSessionWebSocketCloseCode.fromValue(arg3),
                        arg4.address == 0 ? null : objc.NSData.castFromPointer(arg4, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          NSInteger,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(
          ffi.Pointer<ffi.Void> arg0,
          NSURLSession arg1,
          NSURLSessionWebSocketTask arg2,
          NSURLSessionWebSocketCloseCode arg3,
          objc.NSData? arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          NSInteger arg3,
                          ffi.Pointer<objc.ObjCObject> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0,
          arg1.pointer, arg2.pointer, arg3.value, arg4?.pointer ?? ffi.nullptr);
}

/// The resource fetch type.
enum NSURLSessionTaskMetricsResourceFetchType {
  NSURLSessionTaskMetricsResourceFetchTypeUnknown(0),

  /// The resource was loaded over the network.
  NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad(1),

  /// The resource was pushed by the server to the client.
  NSURLSessionTaskMetricsResourceFetchTypeServerPush(2),

  /// The resource was retrieved from the local storage.
  NSURLSessionTaskMetricsResourceFetchTypeLocalCache(3);

  final int value;
  const NSURLSessionTaskMetricsResourceFetchType(this.value);

  static NSURLSessionTaskMetricsResourceFetchType fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionTaskMetricsResourceFetchTypeUnknown,
        1 => NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad,
        2 => NSURLSessionTaskMetricsResourceFetchTypeServerPush,
        3 => NSURLSessionTaskMetricsResourceFetchTypeLocalCache,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionTaskMetricsResourceFetchType: $value"),
      };
}

/// DNS protocol used for domain resolution.
enum NSURLSessionTaskMetricsDomainResolutionProtocol {
  NSURLSessionTaskMetricsDomainResolutionProtocolUnknown(0),

  /// Resolution used DNS over UDP.
  NSURLSessionTaskMetricsDomainResolutionProtocolUDP(1),

  /// Resolution used DNS over TCP.
  NSURLSessionTaskMetricsDomainResolutionProtocolTCP(2),

  /// Resolution used DNS over TLS.
  NSURLSessionTaskMetricsDomainResolutionProtocolTLS(3),

  /// Resolution used DNS over HTTPS.
  NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS(4);

  final int value;
  const NSURLSessionTaskMetricsDomainResolutionProtocol(this.value);

  static NSURLSessionTaskMetricsDomainResolutionProtocol fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionTaskMetricsDomainResolutionProtocolUnknown,
        1 => NSURLSessionTaskMetricsDomainResolutionProtocolUDP,
        2 => NSURLSessionTaskMetricsDomainResolutionProtocolTCP,
        3 => NSURLSessionTaskMetricsDomainResolutionProtocolTLS,
        4 => NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionTaskMetricsDomainResolutionProtocol: $value"),
      };
}

/// This class defines the performance metrics collected for a request/response transaction during the task execution.
class NSURLSessionTaskTransactionMetrics extends objc.NSObject {
  NSURLSessionTaskTransactionMetrics._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionTaskTransactionMetrics] that points to the same underlying object as [other].
  NSURLSessionTaskTransactionMetrics.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionTaskTransactionMetrics] that wraps the given raw object pointer.
  NSURLSessionTaskTransactionMetrics.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionTaskTransactionMetrics].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_NSURLSessionTaskTransactionMetrics);
  }

  /// Represents the transaction request.
  NSURLRequest get request {
    final _ret = _objc_msgSend_192(this.pointer, _sel_request);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// Represents the transaction response. Can be nil if error occurred and no response was generated.
  NSURLResponse? get response {
    final _ret = _objc_msgSend_64(this.pointer, _sel_response);
    return _ret.address == 0
        ? null
        : NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// fetchStartDate returns the time when the user agent started fetching the resource, whether or not the resource was retrieved from the server or local resources.
  ///
  /// The following metrics will be set to nil, if a persistent connection was used or the resource was retrieved from local resources:
  ///
  /// domainLookupStartDate
  /// domainLookupEndDate
  /// connectStartDate
  /// connectEndDate
  /// secureConnectionStartDate
  /// secureConnectionEndDate
  objc.NSDate? get fetchStartDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_fetchStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// domainLookupStartDate returns the time immediately before the user agent started the name lookup for the resource.
  objc.NSDate? get domainLookupStartDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_domainLookupStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// domainLookupEndDate returns the time after the name lookup was completed.
  objc.NSDate? get domainLookupEndDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_domainLookupEndDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectStartDate is the time immediately before the user agent started establishing the connection to the server.
  ///
  /// For example, this would correspond to the time immediately before the user agent started trying to establish the TCP connection.
  objc.NSDate? get connectStartDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_connectStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// If an encrypted connection was used, secureConnectionStartDate is the time immediately before the user agent started the security handshake to secure the current connection.
  ///
  /// For example, this would correspond to the time immediately before the user agent started the TLS handshake.
  ///
  /// If an encrypted connection was not used, this attribute is set to nil.
  objc.NSDate? get secureConnectionStartDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_secureConnectionStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// If an encrypted connection was used, secureConnectionEndDate is the time immediately after the security handshake completed.
  ///
  /// If an encrypted connection was not used, this attribute is set to nil.
  objc.NSDate? get secureConnectionEndDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_secureConnectionEndDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectEndDate is the time immediately after the user agent finished establishing the connection to the server, including completion of security-related and other handshakes.
  objc.NSDate? get connectEndDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_connectEndDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestStartDate is the time immediately before the user agent started requesting the source, regardless of whether the resource was retrieved from the server or local resources.
  ///
  /// For example, this would correspond to the time immediately before the user agent sent an HTTP GET request.
  objc.NSDate? get requestStartDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_requestStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestEndDate is the time immediately after the user agent finished requesting the source, regardless of whether the resource was retrieved from the server or local resources.
  ///
  /// For example, this would correspond to the time immediately after the user agent finished sending the last byte of the request.
  objc.NSDate? get requestEndDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_requestEndDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// responseStartDate is the time immediately after the user agent received the first byte of the response from the server or from local resources.
  ///
  /// For example, this would correspond to the time immediately after the user agent received the first byte of an HTTP response.
  objc.NSDate? get responseStartDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_responseStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// responseEndDate is the time immediately after the user agent received the last byte of the resource.
  objc.NSDate? get responseEndDate {
    final _ret = _objc_msgSend_87(this.pointer, _sel_responseEndDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// The network protocol used to fetch the resource, as identified by the ALPN Protocol ID Identification Sequence [RFC7301].
  /// E.g., h3, h2, http/1.1.
  ///
  /// When a proxy is configured AND a tunnel connection is established, then this attribute returns the value for the tunneled protocol.
  ///
  /// For example:
  /// If no proxy were used, and HTTP/2 was negotiated, then h2 would be returned.
  /// If HTTP/1.1 were used to the proxy, and the tunneled connection was HTTP/2, then h2 would be returned.
  /// If HTTP/1.1 were used to the proxy, and there were no tunnel, then http/1.1 would be returned.
  objc.NSString? get networkProtocolName {
    final _ret = _objc_msgSend_18(this.pointer, _sel_networkProtocolName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// This property is set to YES if a proxy connection was used to fetch the resource.
  bool get proxyConnection {
    return _objc_msgSend_13(this.pointer, _sel_isProxyConnection);
  }

  /// This property is set to YES if a persistent connection was used to fetch the resource.
  bool get reusedConnection {
    return _objc_msgSend_13(this.pointer, _sel_isReusedConnection);
  }

  /// Indicates whether the resource was loaded, pushed or retrieved from the local cache.
  NSURLSessionTaskMetricsResourceFetchType get resourceFetchType {
    final _ret = _objc_msgSend_193(this.pointer, _sel_resourceFetchType);
    return NSURLSessionTaskMetricsResourceFetchType.fromValue(_ret);
  }

  /// countOfRequestHeaderBytesSent is the number of bytes transferred for request header.
  int get countOfRequestHeaderBytesSent {
    return _objc_msgSend_72(this.pointer, _sel_countOfRequestHeaderBytesSent);
  }

  /// countOfRequestBodyBytesSent is the number of bytes transferred for request body.
  /// It includes protocol-specific framing, transfer encoding, and content encoding.
  int get countOfRequestBodyBytesSent {
    return _objc_msgSend_72(this.pointer, _sel_countOfRequestBodyBytesSent);
  }

  /// countOfRequestBodyBytesBeforeEncoding is the size of upload body data, file, or stream.
  int get countOfRequestBodyBytesBeforeEncoding {
    return _objc_msgSend_72(
        this.pointer, _sel_countOfRequestBodyBytesBeforeEncoding);
  }

  /// countOfResponseHeaderBytesReceived is the number of bytes transferred for response header.
  int get countOfResponseHeaderBytesReceived {
    return _objc_msgSend_72(
        this.pointer, _sel_countOfResponseHeaderBytesReceived);
  }

  /// countOfResponseBodyBytesReceived is the number of bytes transferred for response header.
  /// It includes protocol-specific framing, transfer encoding, and content encoding.
  int get countOfResponseBodyBytesReceived {
    return _objc_msgSend_72(
        this.pointer, _sel_countOfResponseBodyBytesReceived);
  }

  /// countOfResponseBodyBytesAfterDecoding is the size of data delivered to your delegate or completion handler.
  int get countOfResponseBodyBytesAfterDecoding {
    return _objc_msgSend_72(
        this.pointer, _sel_countOfResponseBodyBytesAfterDecoding);
  }

  /// localAddress is the IP address string of the local interface for the connection.
  ///
  /// For multipath protocols, this is the local address of the initial flow.
  ///
  /// If a connection was not used, this attribute is set to nil.
  objc.NSString? get localAddress {
    final _ret = _objc_msgSend_18(this.pointer, _sel_localAddress);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localPort is the port number of the local interface for the connection.
  ///
  /// For multipath protocols, this is the local port of the initial flow.
  ///
  /// If a connection was not used, this attribute is set to nil.
  objc.NSNumber? get localPort {
    final _ret = _objc_msgSend_81(this.pointer, _sel_localPort);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// remoteAddress is the IP address string of the remote interface for the connection.
  ///
  /// For multipath protocols, this is the remote address of the initial flow.
  ///
  /// If a connection was not used, this attribute is set to nil.
  objc.NSString? get remoteAddress {
    final _ret = _objc_msgSend_18(this.pointer, _sel_remoteAddress);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// remotePort is the port number of the remote interface for the connection.
  ///
  /// For multipath protocols, this is the remote port of the initial flow.
  ///
  /// If a connection was not used, this attribute is set to nil.
  objc.NSNumber? get remotePort {
    final _ret = _objc_msgSend_81(this.pointer, _sel_remotePort);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// negotiatedTLSProtocolVersion is the TLS protocol version negotiated for the connection.
  /// It is a 2-byte sequence in host byte order.
  ///
  /// Please refer to tls_protocol_version_t enum in Security/SecProtocolTypes.h
  ///
  /// If an encrypted connection was not used, this attribute is set to nil.
  objc.NSNumber? get negotiatedTLSProtocolVersion {
    final _ret =
        _objc_msgSend_81(this.pointer, _sel_negotiatedTLSProtocolVersion);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// negotiatedTLSCipherSuite is the TLS cipher suite negotiated for the connection.
  /// It is a 2-byte sequence in host byte order.
  ///
  /// Please refer to tls_ciphersuite_t enum in Security/SecProtocolTypes.h
  ///
  /// If an encrypted connection was not used, this attribute is set to nil.
  objc.NSNumber? get negotiatedTLSCipherSuite {
    final _ret = _objc_msgSend_81(this.pointer, _sel_negotiatedTLSCipherSuite);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// Whether the connection is established over a cellular interface.
  bool get cellular {
    return _objc_msgSend_13(this.pointer, _sel_isCellular);
  }

  /// Whether the connection is established over an expensive interface.
  bool get expensive {
    return _objc_msgSend_13(this.pointer, _sel_isExpensive);
  }

  /// Whether the connection is established over a constrained interface.
  bool get constrained {
    return _objc_msgSend_13(this.pointer, _sel_isConstrained);
  }

  /// Whether a multipath protocol is successfully negotiated for the connection.
  bool get multipath {
    return _objc_msgSend_13(this.pointer, _sel_isMultipath);
  }

  /// DNS protocol used for domain resolution.
  NSURLSessionTaskMetricsDomainResolutionProtocol get domainResolutionProtocol {
    final _ret = _objc_msgSend_194(this.pointer, _sel_domainResolutionProtocol);
    return NSURLSessionTaskMetricsDomainResolutionProtocol.fromValue(_ret);
  }

  /// init
  NSURLSessionTaskTransactionMetrics init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLSessionTaskTransactionMetrics.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionTaskTransactionMetrics new1() {
    final _ret =
        _objc_msgSend_6(_class_NSURLSessionTaskTransactionMetrics, _sel_new);
    return NSURLSessionTaskTransactionMetrics.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionTaskTransactionMetrics allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSURLSessionTaskTransactionMetrics, _sel_allocWithZone_, zone);
    return NSURLSessionTaskTransactionMetrics.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionTaskTransactionMetrics alloc() {
    final _ret =
        _objc_msgSend_6(_class_NSURLSessionTaskTransactionMetrics, _sel_alloc);
    return NSURLSessionTaskTransactionMetrics.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSURLSessionTaskTransactionMetrics =
    objc.getClass("NSURLSessionTaskTransactionMetrics");
late final _sel_request = objc.registerName("request");
final _objc_msgSend_192 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_fetchStartDate = objc.registerName("fetchStartDate");
late final _sel_domainLookupStartDate =
    objc.registerName("domainLookupStartDate");
late final _sel_domainLookupEndDate = objc.registerName("domainLookupEndDate");
late final _sel_connectStartDate = objc.registerName("connectStartDate");
late final _sel_secureConnectionStartDate =
    objc.registerName("secureConnectionStartDate");
late final _sel_secureConnectionEndDate =
    objc.registerName("secureConnectionEndDate");
late final _sel_connectEndDate = objc.registerName("connectEndDate");
late final _sel_requestStartDate = objc.registerName("requestStartDate");
late final _sel_requestEndDate = objc.registerName("requestEndDate");
late final _sel_responseStartDate = objc.registerName("responseStartDate");
late final _sel_responseEndDate = objc.registerName("responseEndDate");
late final _sel_networkProtocolName = objc.registerName("networkProtocolName");
late final _sel_isProxyConnection = objc.registerName("isProxyConnection");
late final _sel_isReusedConnection = objc.registerName("isReusedConnection");
late final _sel_resourceFetchType = objc.registerName("resourceFetchType");
final _objc_msgSend_193 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_countOfRequestHeaderBytesSent =
    objc.registerName("countOfRequestHeaderBytesSent");
late final _sel_countOfRequestBodyBytesSent =
    objc.registerName("countOfRequestBodyBytesSent");
late final _sel_countOfRequestBodyBytesBeforeEncoding =
    objc.registerName("countOfRequestBodyBytesBeforeEncoding");
late final _sel_countOfResponseHeaderBytesReceived =
    objc.registerName("countOfResponseHeaderBytesReceived");
late final _sel_countOfResponseBodyBytesReceived =
    objc.registerName("countOfResponseBodyBytesReceived");
late final _sel_countOfResponseBodyBytesAfterDecoding =
    objc.registerName("countOfResponseBodyBytesAfterDecoding");
late final _sel_localAddress = objc.registerName("localAddress");
late final _sel_localPort = objc.registerName("localPort");
late final _sel_remoteAddress = objc.registerName("remoteAddress");
late final _sel_remotePort = objc.registerName("remotePort");
late final _sel_negotiatedTLSProtocolVersion =
    objc.registerName("negotiatedTLSProtocolVersion");
late final _sel_negotiatedTLSCipherSuite =
    objc.registerName("negotiatedTLSCipherSuite");
late final _sel_isCellular = objc.registerName("isCellular");
late final _sel_isExpensive = objc.registerName("isExpensive");
late final _sel_isConstrained = objc.registerName("isConstrained");
late final _sel_isMultipath = objc.registerName("isMultipath");
late final _sel_domainResolutionProtocol =
    objc.registerName("domainResolutionProtocol");
final _objc_msgSend_194 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum NSItemProviderRepresentationVisibility {
  NSItemProviderRepresentationVisibilityAll(0),
  NSItemProviderRepresentationVisibilityTeam(1),
  NSItemProviderRepresentationVisibilityGroup(2),
  NSItemProviderRepresentationVisibilityOwnProcess(3);

  final int value;
  const NSItemProviderRepresentationVisibility(this.value);

  static NSItemProviderRepresentationVisibility fromValue(int value) =>
      switch (value) {
        0 => NSItemProviderRepresentationVisibilityAll,
        1 => NSItemProviderRepresentationVisibilityTeam,
        2 => NSItemProviderRepresentationVisibilityGroup,
        3 => NSItemProviderRepresentationVisibilityOwnProcess,
        _ => throw ArgumentError(
            "Unknown value for NSItemProviderRepresentationVisibility: $value"),
      };
}

enum NSItemProviderFileOptions {
  NSItemProviderFileOptionOpenInPlace(1);

  final int value;
  const NSItemProviderFileOptions(this.value);

  static NSItemProviderFileOptions fromValue(int value) => switch (value) {
        1 => NSItemProviderFileOptionOpenInPlace,
        _ => throw ArgumentError(
            "Unknown value for NSItemProviderFileOptions: $value"),
      };
}

/// NSItemProviderWriting
abstract final class NSItemProviderWriting {
  /// Builds an object that implements the NSItemProviderWriting protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {NSItemProviderRepresentationVisibility Function(objc.NSString)?
          itemProviderVisibilityForRepresentationWithTypeIdentifier_,
      required NSProgress? Function(
              objc.NSString, ObjCBlock_ffiVoid_NSData_NSError)
          loadDataWithTypeIdentifier_forItemProviderCompletionHandler_,
      objc.NSArray Function()? writableTypeIdentifiersForItemProvider}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSItemProviderWriting
            .itemProviderVisibilityForRepresentationWithTypeIdentifier_,
        itemProviderVisibilityForRepresentationWithTypeIdentifier_);
    builder.implementMethod(
        NSItemProviderWriting
            .loadDataWithTypeIdentifier_forItemProviderCompletionHandler_,
        loadDataWithTypeIdentifier_forItemProviderCompletionHandler_);
    builder.implementMethod(
        NSItemProviderWriting.writableTypeIdentifiersForItemProvider,
        writableTypeIdentifiersForItemProvider);
    return builder.build();
  }

  /// Adds the implementation of the NSItemProviderWriting protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {NSItemProviderRepresentationVisibility Function(objc.NSString)?
          itemProviderVisibilityForRepresentationWithTypeIdentifier_,
      required NSProgress? Function(
              objc.NSString, ObjCBlock_ffiVoid_NSData_NSError)
          loadDataWithTypeIdentifier_forItemProviderCompletionHandler_,
      objc.NSArray Function()? writableTypeIdentifiersForItemProvider}) {
    builder.implementMethod(
        NSItemProviderWriting
            .itemProviderVisibilityForRepresentationWithTypeIdentifier_,
        itemProviderVisibilityForRepresentationWithTypeIdentifier_);
    builder.implementMethod(
        NSItemProviderWriting
            .loadDataWithTypeIdentifier_forItemProviderCompletionHandler_,
        loadDataWithTypeIdentifier_forItemProviderCompletionHandler_);
    builder.implementMethod(
        NSItemProviderWriting.writableTypeIdentifiersForItemProvider,
        writableTypeIdentifiersForItemProvider);
  }

  /// itemProviderVisibilityForRepresentationWithTypeIdentifier:
  static final itemProviderVisibilityForRepresentationWithTypeIdentifier_ =
      objc.ObjCProtocolMethod(
    _sel_itemProviderVisibilityForRepresentationWithTypeIdentifier_,
    objc.getProtocolMethodSignature(
      _protocol_NSItemProviderWriting,
      _sel_itemProviderVisibilityForRepresentationWithTypeIdentifier_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) =>
        func is NSItemProviderRepresentationVisibility Function(objc.NSString),
    (Function func) =>
        ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString
            .fromFunction(
                (ffi.Pointer<ffi.Void> _, objc.NSString arg1) => func(arg1)),
  );

  /// loadDataWithTypeIdentifier:forItemProviderCompletionHandler:
  static final loadDataWithTypeIdentifier_forItemProviderCompletionHandler_ =
      objc.ObjCProtocolMethod(
    _sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_,
    objc.getProtocolMethodSignature(
      _protocol_NSItemProviderWriting,
      _sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is NSProgress? Function(
        objc.NSString, ObjCBlock_ffiVoid_NSData_NSError),
    (Function func) =>
        ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.NSString arg1,
                    ObjCBlock_ffiVoid_NSData_NSError arg2) =>
                func(arg1, arg2)),
  );

  /// writableTypeIdentifiersForItemProvider
  static final writableTypeIdentifiersForItemProvider = objc.ObjCProtocolMethod(
    _sel_writableTypeIdentifiersForItemProvider,
    objc.getProtocolMethodSignature(
      _protocol_NSItemProviderWriting,
      _sel_writableTypeIdentifiersForItemProvider,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is objc.NSArray Function(),
    (Function func) => ObjCBlock_NSArray_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );
}

late final _protocol_NSItemProviderWriting =
    objc.getProtocol("NSItemProviderWriting");
late final _sel_itemProviderVisibilityForRepresentationWithTypeIdentifier_ =
    objc.registerName(
        "itemProviderVisibilityForRepresentationWithTypeIdentifier:");
int _ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                NSInteger Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            int Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
int _ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as int Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString
    extends objc.ObjCBlockBase {
  ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSInteger Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString_fnPtrTrampoline,
                    0)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString.fromFunction(
      NSItemProviderRepresentationVisibility Function(
              ffi.Pointer<ffi.Void>, objc.NSString)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        NSInteger Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSItemProviderRepresentationVisibility_ffiVoid_NSString_closureTrampoline, 0)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                fn(arg0, objc.NSString.castFromPointer(arg1, retain: true, release: true)).value));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSItemProviderRepresentationVisibility call(
          ffi.Pointer<ffi.Void> arg0, objc.NSString arg1) =>
      NSItemProviderRepresentationVisibility.fromValue(pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      NSInteger Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  int Function(ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer));
}

void _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSData_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunction(
      void Function(objc.NSData?, objc.NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : objc.NSData.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSError.listener(
      void Function(objc.NSData?, objc.NSError?) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSError(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : objc.NSData.castFromPointer(arg0,
                        retain: false, release: true),
                arg1.address == 0
                    ? null
                    : objc.NSError.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSData? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_ =
    objc.registerName(
        "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCBlock> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCBlock> arg2)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCBlock>)>()(arg0, arg1, arg2);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCBlock> arg2) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>))(arg0, arg1, arg2);

class ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError
    extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCBlock> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError.fromFunction(
      NSProgress? Function(ffi.Pointer<ffi.Void>, objc.NSString, ObjCBlock_ffiVoid_NSData_NSError)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoid_NSString_ffiVoidNSDataNSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCBlock> arg2) =>
                fn(arg0, objc.NSString.castFromPointer(arg1, retain: true, release: true), ObjCBlock_ffiVoid_NSData_NSError.castFromPointer(arg2, retain: true, release: true))?.retainAndReturnPointer() ?? ffi.nullptr));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ffi.Pointer<ffi.Void> arg0, objc.NSString arg1,
          ObjCBlock_ffiVoid_NSData_NSError arg2) =>
      pointer.ref.invoke
                  .cast<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlock> block,
                              ffi.Pointer<ffi.Void> arg0,
                              ffi.Pointer<objc.ObjCObject> arg1,
                              ffi.Pointer<objc.ObjCBlock> arg2)>>()
                  .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>()
                  (pointer, arg0, arg1.pointer, arg2.pointer)
                  .address ==
              0
          ? null
          : NSProgress.castFromPointer(
              pointer.ref.invoke
                  .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCBlock> arg2)>>()
                  .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0, arg1.pointer, arg2.pointer),
              retain: false,
              release: true);
}

late final _sel_writableTypeIdentifiersForItemProvider =
    objc.registerName("writableTypeIdentifiersForItemProvider");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSArray_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSArray_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<ffi.Void>))(arg0);

class ObjCBlock_NSArray_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_NSArray_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSArray_ffiVoid castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSArray_ffiVoid._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSArray_ffiVoid.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSArray_ffiVoid_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSArray_ffiVoid.fromFunction(
      objc.NSArray Function(ffi.Pointer<ffi.Void>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>)>(
                    _ObjCBlock_NSArray_ffiVoid_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0) => fn(arg0).retainAndReturnPointer()));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  objc.NSArray call(ffi.Pointer<ffi.Void> arg0) => objc.NSArray.castFromPointer(
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<ffi.Void>)>()(pointer, arg0),
      retain: false,
      release: true);
}

/// NSItemProviderReading
abstract final class NSItemProviderReading {
  /// Builds an object that implements the NSItemProviderReading protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required Dartinstancetype? Function(objc.NSData, objc.NSString,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)
          objectWithItemProviderData_typeIdentifier_error_,
      required objc.NSArray Function()
          readableTypeIdentifiersForItemProvider}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSItemProviderReading.objectWithItemProviderData_typeIdentifier_error_,
        objectWithItemProviderData_typeIdentifier_error_);
    builder.implementMethod(
        NSItemProviderReading.readableTypeIdentifiersForItemProvider,
        readableTypeIdentifiersForItemProvider);
    return builder.build();
  }

  /// Adds the implementation of the NSItemProviderReading protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required Dartinstancetype? Function(objc.NSData, objc.NSString,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)
          objectWithItemProviderData_typeIdentifier_error_,
      required objc.NSArray Function()
          readableTypeIdentifiersForItemProvider}) {
    builder.implementMethod(
        NSItemProviderReading.objectWithItemProviderData_typeIdentifier_error_,
        objectWithItemProviderData_typeIdentifier_error_);
    builder.implementMethod(
        NSItemProviderReading.readableTypeIdentifiersForItemProvider,
        readableTypeIdentifiersForItemProvider);
  }

  /// objectWithItemProviderData:typeIdentifier:error:
  static final objectWithItemProviderData_typeIdentifier_error_ =
      objc.ObjCProtocolMethod(
    _sel_objectWithItemProviderData_typeIdentifier_error_,
    objc.getProtocolMethodSignature(
      _protocol_NSItemProviderReading,
      _sel_objectWithItemProviderData_typeIdentifier_error_,
      isRequired: true,
      isInstanceMethod: false,
    ),
    (Function func) => func is Dartinstancetype? Function(
        objc.NSData, objc.NSString, ffi.Pointer<ffi.Pointer<objc.ObjCObject>>),
    (Function func) =>
        ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.NSData arg1, objc.NSString arg2,
                    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3) =>
                func(arg1, arg2, arg3)),
  );

  /// readableTypeIdentifiersForItemProvider
  static final readableTypeIdentifiersForItemProvider = objc.ObjCProtocolMethod(
    _sel_readableTypeIdentifiersForItemProvider,
    objc.getProtocolMethodSignature(
      _protocol_NSItemProviderReading,
      _sel_readableTypeIdentifiersForItemProvider,
      isRequired: true,
      isInstanceMethod: false,
    ),
    (Function func) => func is objc.NSArray Function(),
    (Function func) => ObjCBlock_NSArray_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );
}

late final _protocol_NSItemProviderReading =
    objc.getProtocol("NSItemProviderReading");
late final _sel_objectWithItemProviderData_typeIdentifier_error_ =
    objc.registerName("objectWithItemProviderData:typeIdentifier:error:");
instancetype
    _ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        instancetype Function(
                            ffi.Pointer<ffi.Void> arg0,
                            ffi.Pointer<objc.ObjCObject> arg1,
                            ffi.Pointer<objc.ObjCObject> arg2,
                            ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3)>>()
                .asFunction<
                    instancetype Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>()(
            arg0, arg1, arg2, arg3);
instancetype
    _ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3) =>
        (objc.getBlockClosure(block) as instancetype Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>))(arg0, arg1, arg2, arg3);

class ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  instancetype Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2,
                      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        instancetype Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>(
                    _ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError.fromFunction(
      Dartinstancetype? Function(ffi.Pointer<ffi.Void>, objc.NSData, objc.NSString, ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        instancetype Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>(
                    _ObjCBlock_instancetype_ffiVoid_NSData_NSString_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2,
                    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3) =>
                fn(arg0, objc.NSData.castFromPointer(arg1, retain: true, release: true), objc.NSString.castFromPointer(arg2, retain: true, release: true), arg3)?.retainAndReturnPointer() ?? ffi.nullptr));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  Dartinstancetype? call(ffi.Pointer<ffi.Void> arg0, objc.NSData arg1, objc.NSString arg2, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3) => pointer
              .ref.invoke
              .cast<
                  ffi.NativeFunction<
                      instancetype Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2,
                          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3)>>()
              .asFunction<
                  instancetype Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>()
              (pointer, arg0, arg1.pointer, arg2.pointer, arg3)
              .address ==
          0
      ? null
      : objc.ObjCObjectBase(
          pointer.ref.invoke.cast<ffi.NativeFunction<instancetype Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> arg3)>>().asFunction<instancetype Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>()(pointer, arg0, arg1.pointer, arg2.pointer, arg3),
          retain: false,
          release: true);
}

late final _sel_readableTypeIdentifiersForItemProvider =
    objc.registerName("readableTypeIdentifiersForItemProvider");

enum NSItemProviderErrorCode {
  NSItemProviderUnknownError(-1),
  NSItemProviderItemUnavailableError(-1000),
  NSItemProviderUnexpectedValueClassError(-1100),
  NSItemProviderUnavailableCoercionError(-1200);

  final int value;
  const NSItemProviderErrorCode(this.value);

  static NSItemProviderErrorCode fromValue(int value) => switch (value) {
        -1 => NSItemProviderUnknownError,
        -1000 => NSItemProviderItemUnavailableError,
        -1100 => NSItemProviderUnexpectedValueClassError,
        -1200 => NSItemProviderUnavailableCoercionError,
        _ => throw ArgumentError(
            "Unknown value for NSItemProviderErrorCode: $value"),
      };
}

enum NSStringCompareOptions {
  NSCaseInsensitiveSearch(1),
  NSLiteralSearch(2),
  NSBackwardsSearch(4),
  NSAnchoredSearch(8),
  NSNumericSearch(64),
  NSDiacriticInsensitiveSearch(128),
  NSWidthInsensitiveSearch(256),
  NSForcedOrderingSearch(512),
  NSRegularExpressionSearch(1024);

  final int value;
  const NSStringCompareOptions(this.value);

  static NSStringCompareOptions fromValue(int value) => switch (value) {
        1 => NSCaseInsensitiveSearch,
        2 => NSLiteralSearch,
        4 => NSBackwardsSearch,
        8 => NSAnchoredSearch,
        64 => NSNumericSearch,
        128 => NSDiacriticInsensitiveSearch,
        256 => NSWidthInsensitiveSearch,
        512 => NSForcedOrderingSearch,
        1024 => NSRegularExpressionSearch,
        _ => throw ArgumentError(
            "Unknown value for NSStringCompareOptions: $value"),
      };
}

typedef NSStringEncoding = NSUInteger;

enum NSStringEncodingConversionOptions {
  NSStringEncodingConversionAllowLossy(1),
  NSStringEncodingConversionExternalRepresentation(2);

  final int value;
  const NSStringEncodingConversionOptions(this.value);

  static NSStringEncodingConversionOptions fromValue(int value) =>
      switch (value) {
        1 => NSStringEncodingConversionAllowLossy,
        2 => NSStringEncodingConversionExternalRepresentation,
        _ => throw ArgumentError(
            "Unknown value for NSStringEncodingConversionOptions: $value"),
      };
}

enum NSStringEnumerationOptions {
  NSStringEnumerationByLines(0),
  NSStringEnumerationByParagraphs(1),
  NSStringEnumerationByComposedCharacterSequences(2),
  NSStringEnumerationByWords(3),
  NSStringEnumerationBySentences(4),
  NSStringEnumerationByCaretPositions(5),
  NSStringEnumerationByDeletionClusters(6),
  NSStringEnumerationReverse(256),
  NSStringEnumerationSubstringNotRequired(512),
  NSStringEnumerationLocalized(1024);

  final int value;
  const NSStringEnumerationOptions(this.value);

  static NSStringEnumerationOptions fromValue(int value) => switch (value) {
        0 => NSStringEnumerationByLines,
        1 => NSStringEnumerationByParagraphs,
        2 => NSStringEnumerationByComposedCharacterSequences,
        3 => NSStringEnumerationByWords,
        4 => NSStringEnumerationBySentences,
        5 => NSStringEnumerationByCaretPositions,
        6 => NSStringEnumerationByDeletionClusters,
        256 => NSStringEnumerationReverse,
        512 => NSStringEnumerationSubstringNotRequired,
        1024 => NSStringEnumerationLocalized,
        _ => throw ArgumentError(
            "Unknown value for NSStringEnumerationOptions: $value"),
      };
}

typedef NSStringTransform = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStringTransform = objc.NSString;
typedef NSStringEncodingDetectionOptionsKey = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStringEncodingDetectionOptionsKey = objc.NSString;
typedef NSExceptionName = ffi.Pointer<objc.ObjCObject>;
typedef DartNSExceptionName = objc.NSString;

/// NSSimpleCString
class NSSimpleCString extends objc.NSString {
  NSSimpleCString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSSimpleCString] that points to the same underlying object as [other].
  NSSimpleCString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSSimpleCString] that wraps the given raw object pointer.
  NSSimpleCString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSSimpleCString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSSimpleCString);
  }

  /// init
  NSSimpleCString init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSSimpleCString? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_195(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableStringEncodings
  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings() {
    return _objc_msgSend_196(
        _class_NSSimpleCString, _sel_availableStringEncodings);
  }

  /// localizedNameOfStringEncoding:
  static objc.NSString localizedNameOfStringEncoding_(DartNSUInteger encoding) {
    final _ret = _objc_msgSend_197(
        _class_NSSimpleCString, _sel_localizedNameOfStringEncoding_, encoding);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultCStringEncoding
  static DartNSUInteger getDefaultCStringEncoding() {
    return _objc_msgSend_5(_class_NSSimpleCString, _sel_defaultCStringEncoding);
  }

  /// initWithCharactersNoCopy:length:freeWhenDone:
  NSSimpleCString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, DartNSUInteger length, bool freeBuffer) {
    final _ret = _objc_msgSend_198(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_freeWhenDone_,
        characters,
        length,
        freeBuffer);
    return NSSimpleCString.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCharactersNoCopy:length:deallocator:
  NSSimpleCString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars,
      DartNSUInteger len,
      ObjCBlock_ffiVoid_unichar_NSUInteger? deallocator) {
    final _ret = _objc_msgSend_199(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_deallocator_,
        chars,
        len,
        deallocator?.pointer ?? ffi.nullptr);
    return NSSimpleCString.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCharacters:length:
  NSSimpleCString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _objc_msgSend_200(
        this.pointer, _sel_initWithCharacters_length_, characters, length);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithUTF8String:
  NSSimpleCString? initWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_201(
        this.pointer, _sel_initWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithString:
  NSSimpleCString initWithString_(objc.NSString aString) {
    final _ret =
        _objc_msgSend_171(this.pointer, _sel_initWithString_, aString.pointer);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:
  NSSimpleCString initWithFormat_(objc.NSString format) {
    final _ret =
        _objc_msgSend_171(this.pointer, _sel_initWithFormat_, format.pointer);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:arguments:
  NSSimpleCString initWithFormat_arguments_(
      objc.NSString format, va_list argList) {
    final _ret = _objc_msgSend_202(
        this.pointer, _sel_initWithFormat_arguments_, format.pointer, argList);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:locale:
  NSSimpleCString initWithFormat_locale_(
      objc.NSString format, objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_203(this.pointer, _sel_initWithFormat_locale_,
        format.pointer, locale?.pointer ?? ffi.nullptr);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:locale:arguments:
  NSSimpleCString initWithFormat_locale_arguments_(
      objc.NSString format, objc.ObjCObjectBase? locale, va_list argList) {
    final _ret = _objc_msgSend_204(
        this.pointer,
        _sel_initWithFormat_locale_arguments_,
        format.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:error:
  NSSimpleCString? initWithValidatedFormat_validFormatSpecifiers_error_(
      objc.NSString format,
      objc.NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_205(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:locale:error:
  NSSimpleCString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      objc.NSString format,
      objc.NSString validFormatSpecifiers,
      objc.ObjCObjectBase? locale,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_206(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:arguments:error:
  NSSimpleCString?
      initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          va_list argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_207(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:
  NSSimpleCString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          objc.ObjCObjectBase? locale,
          va_list argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_208(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:encoding:
  NSSimpleCString? initWithData_encoding_(
      objc.NSData data, DartNSUInteger encoding) {
    final _ret = _objc_msgSend_209(
        this.pointer, _sel_initWithData_encoding_, data.pointer, encoding);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithBytes:length:encoding:
  NSSimpleCString? initWithBytes_length_encoding_(ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len, DartNSUInteger encoding) {
    final _ret = _objc_msgSend_210(this.pointer,
        _sel_initWithBytes_length_encoding_, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithBytesNoCopy:length:encoding:freeWhenDone:
  NSSimpleCString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      bool freeBuffer) {
    final _ret = _objc_msgSend_211(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithBytesNoCopy:length:encoding:deallocator:
  NSSimpleCString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      ObjCBlock_ffiVoid_ffiVoid_NSUInteger? deallocator) {
    final _ret = _objc_msgSend_212(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_deallocator_,
        bytes,
        len,
        encoding,
        deallocator?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: false, release: true);
  }

  /// string
  static NSSimpleCString string() {
    final _ret = _objc_msgSend_6(_class_NSSimpleCString, _sel_string);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithString:
  static NSSimpleCString stringWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_171(
        _class_NSSimpleCString, _sel_stringWithString_, string.pointer);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithCharacters:length:
  static NSSimpleCString stringWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _objc_msgSend_200(_class_NSSimpleCString,
        _sel_stringWithCharacters_length_, characters, length);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithUTF8String:
  static NSSimpleCString? stringWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_201(_class_NSSimpleCString,
        _sel_stringWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithFormat:
  static NSSimpleCString stringWithFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_171(
        _class_NSSimpleCString, _sel_stringWithFormat_, format.pointer);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringWithFormat:
  static NSSimpleCString localizedStringWithFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_171(_class_NSSimpleCString,
        _sel_localizedStringWithFormat_, format.pointer);
    return NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithValidatedFormat:validFormatSpecifiers:error:
  static NSSimpleCString?
      stringWithValidatedFormat_validFormatSpecifiers_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_205(
        _class_NSSimpleCString,
        _sel_stringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringWithValidatedFormat:validFormatSpecifiers:error:
  static NSSimpleCString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_205(
        _class_NSSimpleCString,
        _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCString:encoding:
  NSSimpleCString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, DartNSUInteger encoding) {
    final _ret = _objc_msgSend_213(this.pointer, _sel_initWithCString_encoding_,
        nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithCString:encoding:
  static NSSimpleCString? stringWithCString_encoding_(
      ffi.Pointer<ffi.Char> cString, DartNSUInteger enc) {
    final _ret = _objc_msgSend_213(
        _class_NSSimpleCString, _sel_stringWithCString_encoding_, cString, enc);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:encoding:error:
  NSSimpleCString? initWithContentsOfURL_encoding_error_(objc.NSURL url,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_214(this.pointer,
        _sel_initWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfFile:encoding:error:
  NSSimpleCString? initWithContentsOfFile_encoding_error_(objc.NSString path,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_215(this.pointer,
        _sel_initWithContentsOfFile_encoding_error_, path.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfURL:encoding:error:
  static NSSimpleCString? stringWithContentsOfURL_encoding_error_(
      objc.NSURL url,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_214(_class_NSSimpleCString,
        _sel_stringWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfFile:encoding:error:
  static NSSimpleCString? stringWithContentsOfFile_encoding_error_(
      objc.NSString path,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_215(
        _class_NSSimpleCString,
        _sel_stringWithContentsOfFile_encoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:usedEncoding:error:
  NSSimpleCString? initWithContentsOfURL_usedEncoding_error_(
      objc.NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_216(
        this.pointer,
        _sel_initWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfFile:usedEncoding:error:
  NSSimpleCString? initWithContentsOfFile_usedEncoding_error_(
      objc.NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_217(
        this.pointer,
        _sel_initWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfURL:usedEncoding:error:
  static NSSimpleCString? stringWithContentsOfURL_usedEncoding_error_(
      objc.NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_216(
        _class_NSSimpleCString,
        _sel_stringWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfFile:usedEncoding:error:
  static NSSimpleCString? stringWithContentsOfFile_usedEncoding_error_(
      objc.NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_217(
        _class_NSSimpleCString,
        _sel_stringWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:
  static DartNSUInteger
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          objc.NSData data,
          objc.NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _objc_msgSend_218(
        _class_NSSimpleCString,
        _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_,
        data.pointer,
        opts?.pointer ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  /// stringWithContentsOfFile:
  static objc.ObjCObjectBase? stringWithContentsOfFile_(objc.NSString path) {
    final _ret = _objc_msgSend_42(
        _class_NSSimpleCString, _sel_stringWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfURL:
  static objc.ObjCObjectBase? stringWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_41(
        _class_NSSimpleCString, _sel_stringWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// stringWithCString:length:
  static objc.ObjCObjectBase? stringWithCString_length_(
      ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _objc_msgSend_213(
        _class_NSSimpleCString, _sel_stringWithCString_length_, bytes, length);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// stringWithCString:
  static objc.ObjCObjectBase? stringWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret = _objc_msgSend_201(
        _class_NSSimpleCString, _sel_stringWithCString_, bytes);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSSimpleCString = objc.getClass("NSSimpleCString");
final _objc_msgSend_195 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_availableStringEncodings =
    objc.registerName("availableStringEncodings");
final _objc_msgSend_196 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<NSStringEncoding> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<NSStringEncoding> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_localizedNameOfStringEncoding_ =
    objc.registerName("localizedNameOfStringEncoding:");
final _objc_msgSend_197 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSStringEncoding)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_defaultCStringEncoding =
    objc.registerName("defaultCStringEncoding");
typedef unichar = ffi.UnsignedShort;
typedef Dartunichar = int;
late final _sel_initWithCharactersNoCopy_length_freeWhenDone_ =
    objc.registerName("initWithCharactersNoCopy:length:freeWhenDone:");
final _objc_msgSend_198 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<unichar>,
                NSUInteger,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<unichar>, int, bool)>();
void _ObjCBlock_ffiVoid_unichar_NSUInteger_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<unichar> arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
        .asFunction<void Function(ffi.Pointer<unichar>, int)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_unichar_NSUInteger_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<unichar> arg0,
        int arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<unichar>, int))(
        arg0, arg1);

class ObjCBlock_ffiVoid_unichar_NSUInteger extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_unichar_NSUInteger._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_unichar_NSUInteger castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_unichar_NSUInteger._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_unichar_NSUInteger.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<unichar> arg0, NSUInteger arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<unichar>, NSUInteger)>(
                    _ObjCBlock_ffiVoid_unichar_NSUInteger_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_unichar_NSUInteger.fromFunction(
      void Function(ffi.Pointer<unichar>, DartNSUInteger) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<unichar>, NSUInteger)>(
                    _ObjCBlock_ffiVoid_unichar_NSUInteger_closureTrampoline)
                .cast(),
            (ffi.Pointer<unichar> arg0, int arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_unichar_NSUInteger.listener(
      void Function(ffi.Pointer<unichar>, DartNSUInteger) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<unichar>, NSUInteger)>.listener(
                    _ObjCBlock_ffiVoid_unichar_NSUInteger_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<unichar> arg0, int arg1) => fn(arg0, arg1))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<unichar>, NSUInteger)>?
      _dartFuncListenerTrampoline;

  void call(ffi.Pointer<unichar> arg0, DartNSUInteger arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<unichar>,
                  int)>()(pointer, arg0, arg1);
}

late final _sel_initWithCharactersNoCopy_length_deallocator_ =
    objc.registerName("initWithCharactersNoCopy:length:deallocator:");
final _objc_msgSend_199 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<unichar>,
                NSUInteger,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<unichar>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_initWithCharacters_length_ =
    objc.registerName("initWithCharacters:length:");
final _objc_msgSend_200 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<unichar>,
                NSUInteger)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<unichar>, int)>();
late final _sel_initWithUTF8String_ = objc.registerName("initWithUTF8String:");
final _objc_msgSend_201 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>)>();
late final _sel_initWithFormat_ = objc.registerName("initWithFormat:");
late final _sel_initWithFormat_arguments_ =
    objc.registerName("initWithFormat:arguments:");
final _objc_msgSend_202 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                va_list)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            va_list)>();
late final _sel_initWithFormat_locale_ =
    objc.registerName("initWithFormat:locale:");
final _objc_msgSend_203 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFormat_locale_arguments_ =
    objc.registerName("initWithFormat:locale:arguments:");
final _objc_msgSend_204 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                va_list)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            va_list)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_error_ =
    objc.registerName("initWithValidatedFormat:validFormatSpecifiers:error:");
final _objc_msgSend_205 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_ =
    objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:locale:error:");
final _objc_msgSend_206 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_ =
    objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:arguments:error:");
final _objc_msgSend_207 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                va_list,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            va_list,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_ =
    objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
final _objc_msgSend_208 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                va_list,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            va_list,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithData_encoding_ =
    objc.registerName("initWithData:encoding:");
final _objc_msgSend_209 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSStringEncoding)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithBytes_length_encoding_ =
    objc.registerName("initWithBytes:length:encoding:");
final _objc_msgSend_210 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                NSUInteger,
                NSStringEncoding)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, int, int)>();
late final _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_ =
    objc.registerName("initWithBytesNoCopy:length:encoding:freeWhenDone:");
final _objc_msgSend_211 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                NSUInteger,
                NSStringEncoding,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            int,
            bool)>();
void _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
        .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        int arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<ffi.Void>, int))(
        arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_NSUInteger extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSUInteger castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSUInteger._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, NSUInteger)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, DartNSUInteger) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, NSUInteger)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, int arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger.listener(
      void Function(ffi.Pointer<ffi.Void>, DartNSUInteger) fn)
      : this._((objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, NSUInteger)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, int arg1) => fn(arg0, arg1))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, NSUInteger)>?
      _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, DartNSUInteger arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
                  int)>()(pointer, arg0, arg1);
}

late final _sel_initWithBytesNoCopy_length_encoding_deallocator_ =
    objc.registerName("initWithBytesNoCopy:length:encoding:deallocator:");
final _objc_msgSend_212 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                NSUInteger,
                NSStringEncoding,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_stringWithString_ = objc.registerName("stringWithString:");
late final _sel_stringWithCharacters_length_ =
    objc.registerName("stringWithCharacters:length:");
late final _sel_stringWithUTF8String_ =
    objc.registerName("stringWithUTF8String:");
late final _sel_stringWithFormat_ = objc.registerName("stringWithFormat:");
late final _sel_localizedStringWithFormat_ =
    objc.registerName("localizedStringWithFormat:");
late final _sel_stringWithValidatedFormat_validFormatSpecifiers_error_ =
    objc.registerName("stringWithValidatedFormat:validFormatSpecifiers:error:");
late final _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_ =
    objc.registerName(
        "localizedStringWithValidatedFormat:validFormatSpecifiers:error:");
late final _sel_initWithCString_encoding_ =
    objc.registerName("initWithCString:encoding:");
final _objc_msgSend_213 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                NSStringEncoding)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int)>();
late final _sel_stringWithCString_encoding_ =
    objc.registerName("stringWithCString:encoding:");
late final _sel_initWithContentsOfURL_encoding_error_ =
    objc.registerName("initWithContentsOfURL:encoding:error:");
final _objc_msgSend_214 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSStringEncoding,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfFile_encoding_error_ =
    objc.registerName("initWithContentsOfFile:encoding:error:");
final _objc_msgSend_215 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                NSStringEncoding,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_stringWithContentsOfURL_encoding_error_ =
    objc.registerName("stringWithContentsOfURL:encoding:error:");
late final _sel_stringWithContentsOfFile_encoding_error_ =
    objc.registerName("stringWithContentsOfFile:encoding:error:");
late final _sel_initWithContentsOfURL_usedEncoding_error_ =
    objc.registerName("initWithContentsOfURL:usedEncoding:error:");
final _objc_msgSend_216 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<NSStringEncoding>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<NSStringEncoding>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfFile_usedEncoding_error_ =
    objc.registerName("initWithContentsOfFile:usedEncoding:error:");
final _objc_msgSend_217 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<NSStringEncoding>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<NSStringEncoding>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_stringWithContentsOfURL_usedEncoding_error_ =
    objc.registerName("stringWithContentsOfURL:usedEncoding:error:");
late final _sel_stringWithContentsOfFile_usedEncoding_error_ =
    objc.registerName("stringWithContentsOfFile:usedEncoding:error:");
late final _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_ =
    objc.registerName(
        "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
final _objc_msgSend_218 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSStringEncoding Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Bool>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Bool>)>();
late final _sel_stringWithContentsOfFile_ =
    objc.registerName("stringWithContentsOfFile:");
late final _sel_stringWithContentsOfURL_ =
    objc.registerName("stringWithContentsOfURL:");
late final _sel_stringWithCString_length_ =
    objc.registerName("stringWithCString:length:");
late final _sel_stringWithCString_ = objc.registerName("stringWithCString:");

/// NSConstantString
class NSConstantString extends NSSimpleCString {
  NSConstantString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSConstantString] that points to the same underlying object as [other].
  NSConstantString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSConstantString] that wraps the given raw object pointer.
  NSConstantString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSConstantString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSConstantString);
  }

  /// init
  NSConstantString init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSConstantString? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_195(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableStringEncodings
  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings() {
    return _objc_msgSend_196(
        _class_NSConstantString, _sel_availableStringEncodings);
  }

  /// localizedNameOfStringEncoding:
  static objc.NSString localizedNameOfStringEncoding_(DartNSUInteger encoding) {
    final _ret = _objc_msgSend_197(
        _class_NSConstantString, _sel_localizedNameOfStringEncoding_, encoding);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultCStringEncoding
  static DartNSUInteger getDefaultCStringEncoding() {
    return _objc_msgSend_5(
        _class_NSConstantString, _sel_defaultCStringEncoding);
  }

  /// initWithCharactersNoCopy:length:freeWhenDone:
  NSConstantString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, DartNSUInteger length, bool freeBuffer) {
    final _ret = _objc_msgSend_198(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_freeWhenDone_,
        characters,
        length,
        freeBuffer);
    return NSConstantString.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCharactersNoCopy:length:deallocator:
  NSConstantString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars,
      DartNSUInteger len,
      ObjCBlock_ffiVoid_unichar_NSUInteger? deallocator) {
    final _ret = _objc_msgSend_199(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_deallocator_,
        chars,
        len,
        deallocator?.pointer ?? ffi.nullptr);
    return NSConstantString.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCharacters:length:
  NSConstantString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _objc_msgSend_200(
        this.pointer, _sel_initWithCharacters_length_, characters, length);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithUTF8String:
  NSConstantString? initWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_201(
        this.pointer, _sel_initWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithString:
  NSConstantString initWithString_(objc.NSString aString) {
    final _ret =
        _objc_msgSend_171(this.pointer, _sel_initWithString_, aString.pointer);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:
  NSConstantString initWithFormat_(objc.NSString format) {
    final _ret =
        _objc_msgSend_171(this.pointer, _sel_initWithFormat_, format.pointer);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:arguments:
  NSConstantString initWithFormat_arguments_(
      objc.NSString format, va_list argList) {
    final _ret = _objc_msgSend_202(
        this.pointer, _sel_initWithFormat_arguments_, format.pointer, argList);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:locale:
  NSConstantString initWithFormat_locale_(
      objc.NSString format, objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_203(this.pointer, _sel_initWithFormat_locale_,
        format.pointer, locale?.pointer ?? ffi.nullptr);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:locale:arguments:
  NSConstantString initWithFormat_locale_arguments_(
      objc.NSString format, objc.ObjCObjectBase? locale, va_list argList) {
    final _ret = _objc_msgSend_204(
        this.pointer,
        _sel_initWithFormat_locale_arguments_,
        format.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:error:
  NSConstantString? initWithValidatedFormat_validFormatSpecifiers_error_(
      objc.NSString format,
      objc.NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_205(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:locale:error:
  NSConstantString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      objc.NSString format,
      objc.NSString validFormatSpecifiers,
      objc.ObjCObjectBase? locale,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_206(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:arguments:error:
  NSConstantString?
      initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          va_list argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_207(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:
  NSConstantString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          objc.ObjCObjectBase? locale,
          va_list argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_208(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:encoding:
  NSConstantString? initWithData_encoding_(
      objc.NSData data, DartNSUInteger encoding) {
    final _ret = _objc_msgSend_209(
        this.pointer, _sel_initWithData_encoding_, data.pointer, encoding);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithBytes:length:encoding:
  NSConstantString? initWithBytes_length_encoding_(ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len, DartNSUInteger encoding) {
    final _ret = _objc_msgSend_210(this.pointer,
        _sel_initWithBytes_length_encoding_, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithBytesNoCopy:length:encoding:freeWhenDone:
  NSConstantString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      bool freeBuffer) {
    final _ret = _objc_msgSend_211(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithBytesNoCopy:length:encoding:deallocator:
  NSConstantString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      ObjCBlock_ffiVoid_ffiVoid_NSUInteger? deallocator) {
    final _ret = _objc_msgSend_212(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_deallocator_,
        bytes,
        len,
        encoding,
        deallocator?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: false, release: true);
  }

  /// string
  static NSConstantString string() {
    final _ret = _objc_msgSend_6(_class_NSConstantString, _sel_string);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithString:
  static NSConstantString stringWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_171(
        _class_NSConstantString, _sel_stringWithString_, string.pointer);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithCharacters:length:
  static NSConstantString stringWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _objc_msgSend_200(_class_NSConstantString,
        _sel_stringWithCharacters_length_, characters, length);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithUTF8String:
  static NSConstantString? stringWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_201(_class_NSConstantString,
        _sel_stringWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithFormat:
  static NSConstantString stringWithFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_171(
        _class_NSConstantString, _sel_stringWithFormat_, format.pointer);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringWithFormat:
  static NSConstantString localizedStringWithFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_171(_class_NSConstantString,
        _sel_localizedStringWithFormat_, format.pointer);
    return NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithValidatedFormat:validFormatSpecifiers:error:
  static NSConstantString?
      stringWithValidatedFormat_validFormatSpecifiers_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_205(
        _class_NSConstantString,
        _sel_stringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringWithValidatedFormat:validFormatSpecifiers:error:
  static NSConstantString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          objc.NSString format,
          objc.NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_205(
        _class_NSConstantString,
        _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCString:encoding:
  NSConstantString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, DartNSUInteger encoding) {
    final _ret = _objc_msgSend_213(this.pointer, _sel_initWithCString_encoding_,
        nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithCString:encoding:
  static NSConstantString? stringWithCString_encoding_(
      ffi.Pointer<ffi.Char> cString, DartNSUInteger enc) {
    final _ret = _objc_msgSend_213(_class_NSConstantString,
        _sel_stringWithCString_encoding_, cString, enc);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:encoding:error:
  NSConstantString? initWithContentsOfURL_encoding_error_(objc.NSURL url,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_214(this.pointer,
        _sel_initWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfFile:encoding:error:
  NSConstantString? initWithContentsOfFile_encoding_error_(objc.NSString path,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_215(this.pointer,
        _sel_initWithContentsOfFile_encoding_error_, path.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfURL:encoding:error:
  static NSConstantString? stringWithContentsOfURL_encoding_error_(
      objc.NSURL url,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_214(_class_NSConstantString,
        _sel_stringWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfFile:encoding:error:
  static NSConstantString? stringWithContentsOfFile_encoding_error_(
      objc.NSString path,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_215(
        _class_NSConstantString,
        _sel_stringWithContentsOfFile_encoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:usedEncoding:error:
  NSConstantString? initWithContentsOfURL_usedEncoding_error_(
      objc.NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_216(
        this.pointer,
        _sel_initWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfFile:usedEncoding:error:
  NSConstantString? initWithContentsOfFile_usedEncoding_error_(
      objc.NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_217(
        this.pointer,
        _sel_initWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfURL:usedEncoding:error:
  static NSConstantString? stringWithContentsOfURL_usedEncoding_error_(
      objc.NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_216(
        _class_NSConstantString,
        _sel_stringWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfFile:usedEncoding:error:
  static NSConstantString? stringWithContentsOfFile_usedEncoding_error_(
      objc.NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_217(
        _class_NSConstantString,
        _sel_stringWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:
  static DartNSUInteger
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          objc.NSData data,
          objc.NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _objc_msgSend_218(
        _class_NSConstantString,
        _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_,
        data.pointer,
        opts?.pointer ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  /// stringWithContentsOfFile:
  static objc.ObjCObjectBase? stringWithContentsOfFile_(objc.NSString path) {
    final _ret = _objc_msgSend_42(
        _class_NSConstantString, _sel_stringWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// stringWithContentsOfURL:
  static objc.ObjCObjectBase? stringWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_41(
        _class_NSConstantString, _sel_stringWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// stringWithCString:length:
  static objc.ObjCObjectBase? stringWithCString_length_(
      ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _objc_msgSend_213(
        _class_NSConstantString, _sel_stringWithCString_length_, bytes, length);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// stringWithCString:
  static objc.ObjCObjectBase? stringWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret = _objc_msgSend_201(
        _class_NSConstantString, _sel_stringWithCString_, bytes);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSConstantString = objc.getClass("NSConstantString");

/// NSMutableCharacterSet
class NSMutableCharacterSet extends objc.NSCharacterSet {
  NSMutableCharacterSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableCharacterSet] that points to the same underlying object as [other].
  NSMutableCharacterSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableCharacterSet] that wraps the given raw object pointer.
  NSMutableCharacterSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableCharacterSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableCharacterSet);
  }

  /// addCharactersInRange:
  void addCharactersInRange_(NSRange aRange) {
    _objc_msgSend_219(this.pointer, _sel_addCharactersInRange_, aRange);
  }

  /// removeCharactersInRange:
  void removeCharactersInRange_(NSRange aRange) {
    _objc_msgSend_219(this.pointer, _sel_removeCharactersInRange_, aRange);
  }

  /// addCharactersInString:
  void addCharactersInString_(objc.NSString aString) {
    _objc_msgSend_220(
        this.pointer, _sel_addCharactersInString_, aString.pointer);
  }

  /// removeCharactersInString:
  void removeCharactersInString_(objc.NSString aString) {
    _objc_msgSend_220(
        this.pointer, _sel_removeCharactersInString_, aString.pointer);
  }

  /// formUnionWithCharacterSet:
  void formUnionWithCharacterSet_(objc.NSCharacterSet otherSet) {
    _objc_msgSend_221(
        this.pointer, _sel_formUnionWithCharacterSet_, otherSet.pointer);
  }

  /// formIntersectionWithCharacterSet:
  void formIntersectionWithCharacterSet_(objc.NSCharacterSet otherSet) {
    _objc_msgSend_221(
        this.pointer, _sel_formIntersectionWithCharacterSet_, otherSet.pointer);
  }

  /// invert
  void invert() {
    _objc_msgSend_44(this.pointer, _sel_invert);
  }

  /// controlCharacterSet
  static objc.NSCharacterSet getControlCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_controlCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// whitespaceCharacterSet
  static objc.NSCharacterSet getWhitespaceCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_whitespaceCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// whitespaceAndNewlineCharacterSet
  static objc.NSCharacterSet getWhitespaceAndNewlineCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_whitespaceAndNewlineCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// decimalDigitCharacterSet
  static objc.NSCharacterSet getDecimalDigitCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_decimalDigitCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// letterCharacterSet
  static objc.NSCharacterSet getLetterCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_letterCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// lowercaseLetterCharacterSet
  static objc.NSCharacterSet getLowercaseLetterCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_lowercaseLetterCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uppercaseLetterCharacterSet
  static objc.NSCharacterSet getUppercaseLetterCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_uppercaseLetterCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// nonBaseCharacterSet
  static objc.NSCharacterSet getNonBaseCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_nonBaseCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// alphanumericCharacterSet
  static objc.NSCharacterSet getAlphanumericCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_alphanumericCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// decomposableCharacterSet
  static objc.NSCharacterSet getDecomposableCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_decomposableCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// illegalCharacterSet
  static objc.NSCharacterSet getIllegalCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_illegalCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// punctuationCharacterSet
  static objc.NSCharacterSet getPunctuationCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_punctuationCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// capitalizedLetterCharacterSet
  static objc.NSCharacterSet getCapitalizedLetterCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_capitalizedLetterCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// symbolCharacterSet
  static objc.NSCharacterSet getSymbolCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_symbolCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// newlineCharacterSet
  static objc.NSCharacterSet getNewlineCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_newlineCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// characterSetWithRange:
  static objc.NSCharacterSet characterSetWithRange_(NSRange aRange) {
    final _ret = _objc_msgSend_228(
        _class_NSMutableCharacterSet, _sel_characterSetWithRange_, aRange);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// characterSetWithCharactersInString:
  static objc.NSCharacterSet characterSetWithCharactersInString_(
      objc.NSString aString) {
    final _ret = _objc_msgSend_229(_class_NSMutableCharacterSet,
        _sel_characterSetWithCharactersInString_, aString.pointer);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// characterSetWithBitmapRepresentation:
  static objc.NSCharacterSet characterSetWithBitmapRepresentation_(
      objc.NSData data) {
    final _ret = _objc_msgSend_230(_class_NSMutableCharacterSet,
        _sel_characterSetWithBitmapRepresentation_, data.pointer);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// characterSetWithContentsOfFile:
  static objc.NSCharacterSet? characterSetWithContentsOfFile_(
      objc.NSString fName) {
    final _ret = _objc_msgSend_231(_class_NSMutableCharacterSet,
        _sel_characterSetWithContentsOfFile_, fName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSCharacterSet.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithCoder:
  NSMutableCharacterSet initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_232(this.pointer, _sel_initWithCoder_, coder.pointer);
    return NSMutableCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a character set containing the characters allowed in a URL's user subcomponent.
  static objc.NSCharacterSet getURLUserAllowedCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_URLUserAllowedCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a character set containing the characters allowed in a URL's password subcomponent.
  static objc.NSCharacterSet getURLPasswordAllowedCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_URLPasswordAllowedCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a character set containing the characters allowed in a URL's host subcomponent.
  static objc.NSCharacterSet getURLHostAllowedCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_URLHostAllowedCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a character set containing the characters allowed in a URL's path component. ';' is a legal path character, but it is recommended that it be percent-encoded for best compatibility with NSURL (-stringByAddingPercentEncodingWithAllowedCharacters: will percent-encode any ';' characters if you pass the URLPathAllowedCharacterSet).
  static objc.NSCharacterSet getURLPathAllowedCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_URLPathAllowedCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a character set containing the characters allowed in a URL's query component.
  static objc.NSCharacterSet getURLQueryAllowedCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_URLQueryAllowedCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a character set containing the characters allowed in a URL's fragment component.
  static objc.NSCharacterSet getURLFragmentAllowedCharacterSet() {
    final _ret = _objc_msgSend_227(
        _class_NSMutableCharacterSet, _sel_URLFragmentAllowedCharacterSet);
    return objc.NSCharacterSet.castFromPointer(_ret,
        retain: true, release: true);
  }
}

late final _class_NSMutableCharacterSet =
    objc.getClass("NSMutableCharacterSet");
late final _sel_addCharactersInRange_ =
    objc.registerName("addCharactersInRange:");
final _objc_msgSend_219 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, NSRange)>();
late final _sel_removeCharactersInRange_ =
    objc.registerName("removeCharactersInRange:");
late final _sel_addCharactersInString_ =
    objc.registerName("addCharactersInString:");
final _objc_msgSend_220 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCharactersInString_ =
    objc.registerName("removeCharactersInString:");
late final _sel_formUnionWithCharacterSet_ =
    objc.registerName("formUnionWithCharacterSet:");
final _objc_msgSend_221 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_formIntersectionWithCharacterSet_ =
    objc.registerName("formIntersectionWithCharacterSet:");
late final _sel_invert = objc.registerName("invert");
late final _sel_controlCharacterSet = objc.registerName("controlCharacterSet");
final _objc_msgSend_222 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_whitespaceCharacterSet =
    objc.registerName("whitespaceCharacterSet");
late final _sel_whitespaceAndNewlineCharacterSet =
    objc.registerName("whitespaceAndNewlineCharacterSet");
late final _sel_decimalDigitCharacterSet =
    objc.registerName("decimalDigitCharacterSet");
late final _sel_letterCharacterSet = objc.registerName("letterCharacterSet");
late final _sel_lowercaseLetterCharacterSet =
    objc.registerName("lowercaseLetterCharacterSet");
late final _sel_uppercaseLetterCharacterSet =
    objc.registerName("uppercaseLetterCharacterSet");
late final _sel_nonBaseCharacterSet = objc.registerName("nonBaseCharacterSet");
late final _sel_alphanumericCharacterSet =
    objc.registerName("alphanumericCharacterSet");
late final _sel_decomposableCharacterSet =
    objc.registerName("decomposableCharacterSet");
late final _sel_illegalCharacterSet = objc.registerName("illegalCharacterSet");
late final _sel_punctuationCharacterSet =
    objc.registerName("punctuationCharacterSet");
late final _sel_capitalizedLetterCharacterSet =
    objc.registerName("capitalizedLetterCharacterSet");
late final _sel_symbolCharacterSet = objc.registerName("symbolCharacterSet");
late final _sel_newlineCharacterSet = objc.registerName("newlineCharacterSet");
late final _sel_characterSetWithRange_ =
    objc.registerName("characterSetWithRange:");
final _objc_msgSend_223 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, NSRange)>();
late final _sel_characterSetWithCharactersInString_ =
    objc.registerName("characterSetWithCharactersInString:");
final _objc_msgSend_224 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_characterSetWithBitmapRepresentation_ =
    objc.registerName("characterSetWithBitmapRepresentation:");
final _objc_msgSend_225 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_characterSetWithContentsOfFile_ =
    objc.registerName("characterSetWithContentsOfFile:");
final _objc_msgSend_226 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_227 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_228 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, NSRange)>();
final _objc_msgSend_229 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_230 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_231 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_232 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLUserAllowedCharacterSet =
    objc.registerName("URLUserAllowedCharacterSet");
late final _sel_URLPasswordAllowedCharacterSet =
    objc.registerName("URLPasswordAllowedCharacterSet");
late final _sel_URLHostAllowedCharacterSet =
    objc.registerName("URLHostAllowedCharacterSet");
late final _sel_URLPathAllowedCharacterSet =
    objc.registerName("URLPathAllowedCharacterSet");
late final _sel_URLQueryAllowedCharacterSet =
    objc.registerName("URLQueryAllowedCharacterSet");
late final _sel_URLFragmentAllowedCharacterSet =
    objc.registerName("URLFragmentAllowedCharacterSet");

enum NSURLHandleStatus {
  NSURLHandleNotLoaded(0),
  NSURLHandleLoadSucceeded(1),
  NSURLHandleLoadInProgress(2),
  NSURLHandleLoadFailed(3);

  final int value;
  const NSURLHandleStatus(this.value);

  static NSURLHandleStatus fromValue(int value) => switch (value) {
        0 => NSURLHandleNotLoaded,
        1 => NSURLHandleLoadSucceeded,
        2 => NSURLHandleLoadInProgress,
        3 => NSURLHandleLoadFailed,
        _ => throw ArgumentError("Unknown value for NSURLHandleStatus: $value"),
      };
}

/// NSURLHandleClient
abstract final class NSURLHandleClient {
  /// Builds an object that implements the NSURLHandleClient protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required void Function(objc.NSURLHandle, objc.NSData)
          URLHandle_resourceDataDidBecomeAvailable_,
      required void Function(objc.NSURLHandle)
          URLHandleResourceDidBeginLoading_,
      required void Function(objc.NSURLHandle)
          URLHandleResourceDidFinishLoading_,
      required void Function(objc.NSURLHandle)
          URLHandleResourceDidCancelLoading_,
      required void Function(objc.NSURLHandle, objc.NSString)
          URLHandle_resourceDidFailLoadingWithReason_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSURLHandleClient.URLHandle_resourceDataDidBecomeAvailable_,
        URLHandle_resourceDataDidBecomeAvailable_);
    builder.implementMethod(NSURLHandleClient.URLHandleResourceDidBeginLoading_,
        URLHandleResourceDidBeginLoading_);
    builder.implementMethod(
        NSURLHandleClient.URLHandleResourceDidFinishLoading_,
        URLHandleResourceDidFinishLoading_);
    builder.implementMethod(
        NSURLHandleClient.URLHandleResourceDidCancelLoading_,
        URLHandleResourceDidCancelLoading_);
    builder.implementMethod(
        NSURLHandleClient.URLHandle_resourceDidFailLoadingWithReason_,
        URLHandle_resourceDidFailLoadingWithReason_);
    return builder.build();
  }

  /// Adds the implementation of the NSURLHandleClient protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required void Function(objc.NSURLHandle, objc.NSData)
          URLHandle_resourceDataDidBecomeAvailable_,
      required void Function(objc.NSURLHandle)
          URLHandleResourceDidBeginLoading_,
      required void Function(objc.NSURLHandle)
          URLHandleResourceDidFinishLoading_,
      required void Function(objc.NSURLHandle)
          URLHandleResourceDidCancelLoading_,
      required void Function(objc.NSURLHandle, objc.NSString)
          URLHandle_resourceDidFailLoadingWithReason_}) {
    builder.implementMethod(
        NSURLHandleClient.URLHandle_resourceDataDidBecomeAvailable_,
        URLHandle_resourceDataDidBecomeAvailable_);
    builder.implementMethod(NSURLHandleClient.URLHandleResourceDidBeginLoading_,
        URLHandleResourceDidBeginLoading_);
    builder.implementMethod(
        NSURLHandleClient.URLHandleResourceDidFinishLoading_,
        URLHandleResourceDidFinishLoading_);
    builder.implementMethod(
        NSURLHandleClient.URLHandleResourceDidCancelLoading_,
        URLHandleResourceDidCancelLoading_);
    builder.implementMethod(
        NSURLHandleClient.URLHandle_resourceDidFailLoadingWithReason_,
        URLHandle_resourceDidFailLoadingWithReason_);
  }

  /// URLHandle:resourceDataDidBecomeAvailable:
  static final URLHandle_resourceDataDidBecomeAvailable_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLHandle_resourceDataDidBecomeAvailable_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLHandleClient,
      _sel_URLHandle_resourceDataDidBecomeAvailable_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSURLHandle, objc.NSData),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1,
                    objc.NSData arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1, objc.NSData arg2) =>
            func(arg1, arg2)),
  );

  /// URLHandleResourceDidBeginLoading:
  static final URLHandleResourceDidBeginLoading_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLHandleResourceDidBeginLoading_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLHandleClient,
      _sel_URLHandleResourceDidBeginLoading_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSURLHandle),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1) => func(arg1)),
  );

  /// URLHandleResourceDidFinishLoading:
  static final URLHandleResourceDidFinishLoading_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLHandleResourceDidFinishLoading_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLHandleClient,
      _sel_URLHandleResourceDidFinishLoading_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSURLHandle),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1) => func(arg1)),
  );

  /// URLHandleResourceDidCancelLoading:
  static final URLHandleResourceDidCancelLoading_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLHandleResourceDidCancelLoading_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLHandleClient,
      _sel_URLHandleResourceDidCancelLoading_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSURLHandle),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.fromFunction(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1) => func(arg1)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1) => func(arg1)),
  );

  /// URLHandle:resourceDidFailLoadingWithReason:
  static final URLHandle_resourceDidFailLoadingWithReason_ =
      objc.ObjCProtocolListenableMethod(
    _sel_URLHandle_resourceDidFailLoadingWithReason_,
    objc.getProtocolMethodSignature(
      _protocol_NSURLHandleClient,
      _sel_URLHandle_resourceDidFailLoadingWithReason_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(objc.NSURLHandle, objc.NSString),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1,
                    objc.NSString arg2) =>
                func(arg1, arg2)),
    (Function func) => ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString.listener(
        (ffi.Pointer<ffi.Void> _, objc.NSURLHandle arg1, objc.NSString arg2) =>
            func(arg1, arg2)),
  );
}

late final _protocol_NSURLHandleClient = objc.getProtocol("NSURLHandleClient");
late final _sel_URLHandle_resourceDataDidBecomeAvailable_ =
    objc.registerName("URLHandle:resourceDataDidBecomeAvailable:");
void _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, objc.NSURLHandle, objc.NSData) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0,
                objc.NSURLHandle.castFromPointer(arg1, retain: true, release: true),
                objc.NSData.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData.listener(
      void Function(ffi.Pointer<ffi.Void>, objc.NSURLHandle, objc.NSData) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSData_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(arg0, objc.NSURLHandle.castFromPointer(arg1, retain: false, release: true), objc.NSData.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, objc.NSURLHandle arg1,
          objc.NSData arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer);
}

late final _sel_URLHandleResourceDidBeginLoading_ =
    objc.registerName("URLHandleResourceDidBeginLoading:");
void _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_NSURLHandle extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLHandle castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLHandle._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, objc.NSURLHandle) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0,
                objc.NSURLHandle.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle.listener(
      void Function(ffi.Pointer<ffi.Void>, objc.NSURLHandle) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLHandle(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1) =>
                    fn(arg0, objc.NSURLHandle.castFromPointer(arg1, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, objc.NSURLHandle arg1) => pointer
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0,
                  ffi.Pointer<objc.ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0, arg1.pointer);
}

late final _sel_URLHandleResourceDidFinishLoading_ =
    objc.registerName("URLHandleResourceDidFinishLoading:");
late final _sel_URLHandleResourceDidCancelLoading_ =
    objc.registerName("URLHandleResourceDidCancelLoading:");
late final _sel_URLHandle_resourceDidFailLoadingWithReason_ =
    objc.registerName("URLHandle:resourceDidFailLoadingWithReason:");
void _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, objc.NSURLHandle, objc.NSString) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0,
                objc.NSURLHandle.castFromPointer(arg1, retain: true, release: true),
                objc.NSString.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString.listener(
      void Function(ffi.Pointer<ffi.Void>, objc.NSURLHandle, objc.NSString) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSURLHandle_NSString_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(arg0, objc.NSURLHandle.castFromPointer(arg1, retain: false, release: true), objc.NSString.castFromPointer(arg2, retain: false, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, objc.NSURLHandle arg1,
          objc.NSString arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1.pointer, arg2.pointer);
}

typedef NSURLResourceKey = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLResourceKey = objc.NSString;
typedef NSURLFileResourceType = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLFileResourceType = objc.NSString;
typedef NSURLThumbnailDictionaryItem = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLThumbnailDictionaryItem = objc.NSString;
typedef NSURLFileProtectionType = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLFileProtectionType = objc.NSString;
typedef NSURLUbiquitousItemDownloadingStatus = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLUbiquitousItemDownloadingStatus = objc.NSString;
typedef NSURLUbiquitousSharedItemRole = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLUbiquitousSharedItemRole = objc.NSString;
typedef NSURLUbiquitousSharedItemPermissions = ffi.Pointer<objc.ObjCObject>;
typedef DartNSURLUbiquitousSharedItemPermissions = objc.NSString;

/// Working with Bookmarks and alias (bookmark) files
enum NSURLBookmarkCreationOptions {
  /// This option does nothing and has no effect on bookmark resolution
  NSURLBookmarkCreationPreferFileIDResolution(256),

  /// creates bookmark data with "less" information, which may be smaller but still be able to resolve in certain ways
  NSURLBookmarkCreationMinimalBookmark(512),

  /// include the properties required by writeBookmarkData:toURL:options: in the bookmark data created
  NSURLBookmarkCreationSuitableForBookmarkFile(1024),

  /// include information in the bookmark data which allows the same sandboxed process to access the resource after being relaunched
  NSURLBookmarkCreationWithSecurityScope(2048),

  /// if used with kCFURLBookmarkCreationWithSecurityScope, at resolution time only read access to the resource will be granted
  NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess(4096),

  /// Disable automatic embedding of an implicit security scope. The resolving process will not be able gain access to the resource by security scope, either implicitly or explicitly, through the returned URL. Not applicable to security-scoped bookmarks.
  NSURLBookmarkCreationWithoutImplicitSecurityScope(536870912);

  final int value;
  const NSURLBookmarkCreationOptions(this.value);

  static NSURLBookmarkCreationOptions fromValue(int value) => switch (value) {
        256 => NSURLBookmarkCreationPreferFileIDResolution,
        512 => NSURLBookmarkCreationMinimalBookmark,
        1024 => NSURLBookmarkCreationSuitableForBookmarkFile,
        2048 => NSURLBookmarkCreationWithSecurityScope,
        4096 => NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess,
        536870912 => NSURLBookmarkCreationWithoutImplicitSecurityScope,
        _ => throw ArgumentError(
            "Unknown value for NSURLBookmarkCreationOptions: $value"),
      };
}

enum NSURLBookmarkResolutionOptions {
  /// don't perform any user interaction during bookmark resolution
  NSURLBookmarkResolutionWithoutUI(256),

  /// don't mount a volume during bookmark resolution
  NSURLBookmarkResolutionWithoutMounting(512),

  /// use the secure information included at creation time to provide the ability to access the resource in a sandboxed process
  NSURLBookmarkResolutionWithSecurityScope(1024),

  /// Disable implicitly starting access of the ephemeral security-scoped resource during resolution. Instead, call `-[NSURL startAccessingSecurityScopedResource]` on the returned URL when ready to use the resource. Not applicable to security-scoped bookmarks.
  NSURLBookmarkResolutionWithoutImplicitStartAccessing(32768);

  final int value;
  const NSURLBookmarkResolutionOptions(this.value);

  static NSURLBookmarkResolutionOptions fromValue(int value) => switch (value) {
        256 => NSURLBookmarkResolutionWithoutUI,
        512 => NSURLBookmarkResolutionWithoutMounting,
        1024 => NSURLBookmarkResolutionWithSecurityScope,
        32768 => NSURLBookmarkResolutionWithoutImplicitStartAccessing,
        _ => throw ArgumentError(
            "Unknown value for NSURLBookmarkResolutionOptions: $value"),
      };
}

/// NSURLQueryItem encapsulates a single query name-value pair. The name and value strings of a query name-value pair are not percent encoded. For use with the NSURLComponents queryItems property.
class NSURLQueryItem extends objc.NSObject {
  NSURLQueryItem._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLQueryItem] that points to the same underlying object as [other].
  NSURLQueryItem.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLQueryItem] that wraps the given raw object pointer.
  NSURLQueryItem.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLQueryItem].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLQueryItem);
  }

  /// initWithName:value:
  NSURLQueryItem initWithName_value_(objc.NSString name, objc.NSString? value) {
    final _ret = _objc_msgSend_233(this.pointer, _sel_initWithName_value_,
        name.pointer, value?.pointer ?? ffi.nullptr);
    return NSURLQueryItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// queryItemWithName:value:
  static NSURLQueryItem queryItemWithName_value_(
      objc.NSString name, objc.NSString? value) {
    final _ret = _objc_msgSend_233(
        _class_NSURLQueryItem,
        _sel_queryItemWithName_value_,
        name.pointer,
        value?.pointer ?? ffi.nullptr);
    return NSURLQueryItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_74(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// value
  objc.NSString? get value {
    final _ret = _objc_msgSend_18(this.pointer, _sel_value);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLQueryItem init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLQueryItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLQueryItem new1() {
    final _ret = _objc_msgSend_6(_class_NSURLQueryItem, _sel_new);
    return NSURLQueryItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLQueryItem allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLQueryItem, _sel_allocWithZone_, zone);
    return NSURLQueryItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLQueryItem alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLQueryItem, _sel_alloc);
    return NSURLQueryItem.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLQueryItem = objc.getClass("NSURLQueryItem");
late final _sel_initWithName_value_ = objc.registerName("initWithName:value:");
final _objc_msgSend_233 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_queryItemWithName_value_ =
    objc.registerName("queryItemWithName:value:");
late final _sel_value = objc.registerName("value");

/// NSURLComponents
class NSURLComponents extends objc.NSObject {
  NSURLComponents._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLComponents] that points to the same underlying object as [other].
  NSURLComponents.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLComponents] that wraps the given raw object pointer.
  NSURLComponents.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLComponents].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLComponents);
  }

  /// init
  NSURLComponents init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Initialize a NSURLComponents with the components of a URL. If resolvingAgainstBaseURL is YES and url is a relative URL, the components of [url absoluteURL] are used. If the url string from the NSURL is malformed, nil is returned.
  NSURLComponents? initWithURL_resolvingAgainstBaseURL_(
      objc.NSURL url, bool resolve) {
    final _ret = _objc_msgSend_51(this.pointer,
        _sel_initWithURL_resolvingAgainstBaseURL_, url.pointer, resolve);
    return _ret.address == 0
        ? null
        : NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Initializes and returns a newly created NSURLComponents with the components of a URL. If resolvingAgainstBaseURL is YES and url is a relative URL, the components of [url absoluteURL] are used. If the url string from the NSURL is malformed, nil is returned.
  static NSURLComponents? componentsWithURL_resolvingAgainstBaseURL_(
      objc.NSURL url, bool resolve) {
    final _ret = _objc_msgSend_51(_class_NSURLComponents,
        _sel_componentsWithURL_resolvingAgainstBaseURL_, url.pointer, resolve);
    return _ret.address == 0
        ? null
        : NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Initialize a NSURLComponents with a URL string. If the URLString is malformed, nil is returned.
  NSURLComponents? initWithString_(objc.NSString URLString) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithString_, URLString.pointer);
    return _ret.address == 0
        ? null
        : NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Initializes and returns a newly created NSURLComponents with a URL string. If the URLString is malformed, nil is returned.
  static NSURLComponents? componentsWithString_(objc.NSString URLString) {
    final _ret = _objc_msgSend_42(
        _class_NSURLComponents, _sel_componentsWithString_, URLString.pointer);
    return _ret.address == 0
        ? null
        : NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Initializes an `NSURLComponents` with a URL string and the option to add (or skip) IDNA- and percent-encoding of invalid characters.
  /// If `encodingInvalidCharacters` is false, and the URL string is invalid according to RFC 3986, `nil` is returned.
  /// If `encodingInvalidCharacters` is true, `NSURLComponents` will try to encode the string to create a valid URL.
  /// If the URL string is still invalid after encoding, `nil` is returned.
  ///
  /// - Parameter URLString: The URL string.
  /// - Parameter encodingInvalidCharacters: True if `NSURLComponents` should try to encode an invalid URL string, false otherwise.
  /// - Returns: An `NSURLComponents` instance for a valid URL, or `nil` if the URL is invalid.
  NSURLComponents? initWithString_encodingInvalidCharacters_(
      objc.NSString URLString, bool encodingInvalidCharacters) {
    final _ret = _objc_msgSend_52(
        this.pointer,
        _sel_initWithString_encodingInvalidCharacters_,
        URLString.pointer,
        encodingInvalidCharacters);
    return _ret.address == 0
        ? null
        : NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Initializes and returns a newly created `NSURLComponents` with a URL string and the option to add (or skip) IDNA- and percent-encoding of invalid characters.
  /// If `encodingInvalidCharacters` is false, and the URL string is invalid according to RFC 3986, `nil` is returned.
  /// If `encodingInvalidCharacters` is true, `NSURLComponents` will try to encode the string to create a valid URL.
  /// If the URL string is still invalid after encoding, nil is returned.
  ///
  /// - Parameter URLString: The URL string.
  /// - Parameter encodingInvalidCharacters: True if `NSURLComponents` should try to encode an invalid URL string, false otherwise.
  /// - Returns: An `NSURLComponents` instance for a valid URL, or `nil` if the URL is invalid.
  static NSURLComponents? componentsWithString_encodingInvalidCharacters_(
      objc.NSString URLString, bool encodingInvalidCharacters) {
    final _ret = _objc_msgSend_52(
        _class_NSURLComponents,
        _sel_componentsWithString_encodingInvalidCharacters_,
        URLString.pointer,
        encodingInvalidCharacters);
    return _ret.address == 0
        ? null
        : NSURLComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a URL created from the NSURLComponents. If the NSURLComponents has an authority component (user, password, host or port) and a path component, then the path must either begin with "/" or be an empty string. If the NSURLComponents does not have an authority component (user, password, host or port) and has a path component, the path component must not start with "//". If those requirements are not met, nil is returned.
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_17(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a URL created from the NSURLComponents relative to a base URL. If the NSURLComponents has an authority component (user, password, host or port) and a path component, then the path must either begin with "/" or be an empty string. If the NSURLComponents does not have an authority component (user, password, host or port) and has a path component, the path component must not start with "//". If those requirements are not met, nil is returned.
  objc.NSURL? URLRelativeToURL_(objc.NSURL? baseURL) {
    final _ret = _objc_msgSend_234(
        this.pointer, _sel_URLRelativeToURL_, baseURL?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a URL string created from the NSURLComponents. If the NSURLComponents has an authority component (user, password, host or port) and a path component, then the path must either begin with "/" or be an empty string. If the NSURLComponents does not have an authority component (user, password, host or port) and has a path component, the path component must not start with "//". If those requirements are not met, nil is returned.
  objc.NSString? get string {
    final _ret = _objc_msgSend_18(this.pointer, _sel_string);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// Attempting to set the scheme with an invalid scheme string will cause an exception.
  objc.NSString? get scheme {
    final _ret = _objc_msgSend_18(this.pointer, _sel_scheme);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// Attempting to set the scheme with an invalid scheme string will cause an exception.
  set scheme(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setScheme_, value?.pointer ?? ffi.nullptr);
  }

  /// user
  objc.NSString? get user {
    final _ret = _objc_msgSend_18(this.pointer, _sel_user);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUser:
  set user(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setUser_, value?.pointer ?? ffi.nullptr);
  }

  /// password
  objc.NSString? get password {
    final _ret = _objc_msgSend_18(this.pointer, _sel_password);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPassword:
  set password(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setPassword_, value?.pointer ?? ffi.nullptr);
  }

  /// host
  objc.NSString? get host {
    final _ret = _objc_msgSend_18(this.pointer, _sel_host);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHost:
  set host(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setHost_, value?.pointer ?? ffi.nullptr);
  }

  /// Attempting to set a negative port number will cause an exception.
  objc.NSNumber? get port {
    final _ret = _objc_msgSend_81(this.pointer, _sel_port);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// Attempting to set a negative port number will cause an exception.
  set port(objc.NSNumber? value) {
    return _objc_msgSend_82(
        this.pointer, _sel_setPort_, value?.pointer ?? ffi.nullptr);
  }

  /// path
  objc.NSString? get path {
    final _ret = _objc_msgSend_18(this.pointer, _sel_path);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPath:
  set path(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setPath_, value?.pointer ?? ffi.nullptr);
  }

  /// query
  objc.NSString? get query {
    final _ret = _objc_msgSend_18(this.pointer, _sel_query);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setQuery:
  set query(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setQuery_, value?.pointer ?? ffi.nullptr);
  }

  /// fragment
  objc.NSString? get fragment {
    final _ret = _objc_msgSend_18(this.pointer, _sel_fragment);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFragment:
  set fragment(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setFragment_, value?.pointer ?? ffi.nullptr);
  }

  /// Getting these properties retains any percent encoding these components may have. Setting these properties assumes the component string is already correctly percent encoded. Attempting to set an incorrectly percent encoded string will cause an exception. Although ';' is a legal path character, it is recommended that it be percent-encoded for best compatibility with NSURL (-stringByAddingPercentEncodingWithAllowedCharacters: will percent-encode any ';' characters if you pass the URLPathAllowedCharacterSet).
  objc.NSString? get percentEncodedUser {
    final _ret = _objc_msgSend_18(this.pointer, _sel_percentEncodedUser);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// Getting these properties retains any percent encoding these components may have. Setting these properties assumes the component string is already correctly percent encoded. Attempting to set an incorrectly percent encoded string will cause an exception. Although ';' is a legal path character, it is recommended that it be percent-encoded for best compatibility with NSURL (-stringByAddingPercentEncodingWithAllowedCharacters: will percent-encode any ';' characters if you pass the URLPathAllowedCharacterSet).
  set percentEncodedUser(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setPercentEncodedUser_,
        value?.pointer ?? ffi.nullptr);
  }

  /// percentEncodedPassword
  objc.NSString? get percentEncodedPassword {
    final _ret = _objc_msgSend_18(this.pointer, _sel_percentEncodedPassword);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPercentEncodedPassword:
  set percentEncodedPassword(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setPercentEncodedPassword_,
        value?.pointer ?? ffi.nullptr);
  }

  /// percentEncodedHost
  objc.NSString? get percentEncodedHost {
    final _ret = _objc_msgSend_18(this.pointer, _sel_percentEncodedHost);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPercentEncodedHost:
  set percentEncodedHost(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setPercentEncodedHost_,
        value?.pointer ?? ffi.nullptr);
  }

  /// percentEncodedPath
  objc.NSString? get percentEncodedPath {
    final _ret = _objc_msgSend_18(this.pointer, _sel_percentEncodedPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPercentEncodedPath:
  set percentEncodedPath(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setPercentEncodedPath_,
        value?.pointer ?? ffi.nullptr);
  }

  /// percentEncodedQuery
  objc.NSString? get percentEncodedQuery {
    final _ret = _objc_msgSend_18(this.pointer, _sel_percentEncodedQuery);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPercentEncodedQuery:
  set percentEncodedQuery(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setPercentEncodedQuery_,
        value?.pointer ?? ffi.nullptr);
  }

  /// percentEncodedFragment
  objc.NSString? get percentEncodedFragment {
    final _ret = _objc_msgSend_18(this.pointer, _sel_percentEncodedFragment);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPercentEncodedFragment:
  set percentEncodedFragment(objc.NSString? value) {
    return _objc_msgSend_89(this.pointer, _sel_setPercentEncodedFragment_,
        value?.pointer ?? ffi.nullptr);
  }

  /// encodedHost
  objc.NSString? get encodedHost {
    final _ret = _objc_msgSend_18(this.pointer, _sel_encodedHost);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEncodedHost:
  set encodedHost(objc.NSString? value) {
    return _objc_msgSend_89(
        this.pointer, _sel_setEncodedHost_, value?.pointer ?? ffi.nullptr);
  }

  /// These properties return the character range of a component in the URL string returned by -[NSURLComponents string]. If the component does not exist in the NSURLComponents object, {NSNotFound, 0} is returned. Note: Zero length components are legal. For example, the URL string "scheme://:@/?#" has a zero length user, password, host, query and fragment; the URL strings "scheme:" and "" both have a zero length path.
  NSRange get rangeOfScheme {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfScheme);
  }

  /// rangeOfUser
  NSRange get rangeOfUser {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfUser);
  }

  /// rangeOfPassword
  NSRange get rangeOfPassword {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfPassword);
  }

  /// rangeOfHost
  NSRange get rangeOfHost {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfHost);
  }

  /// rangeOfPort
  NSRange get rangeOfPort {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfPort);
  }

  /// rangeOfPath
  NSRange get rangeOfPath {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfPath);
  }

  /// rangeOfQuery
  NSRange get rangeOfQuery {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfQuery);
  }

  /// rangeOfFragment
  NSRange get rangeOfFragment {
    return _objc_msgSend_235(this.pointer, _sel_rangeOfFragment);
  }

  /// The query component as an array of NSURLQueryItems for this NSURLComponents.
  ///
  /// Each NSURLQueryItem represents a single key-value pair,
  ///
  /// Note that a name may appear more than once in a single query string, so the name values are not guaranteed to be unique. If the NSURLComponents has an empty query component, returns an empty array. If the NSURLComponents has no query component, returns nil.
  ///
  /// The queryItems getter returns an array of NSURLQueryItems in the order in which they appear in the original query string. Any percent-encoding in a NSURLQueryItem name or value is removed.
  ///
  /// The queryItems setter combines an array containing any number of NSURLQueryItems, each of which represents a single key-value pair, into a query string and sets the NSURLComponents query property. If the NSURLQueryItems name or value strings contain any characters not allowed in a URL's query component, those characters are percent-encoded. In addition, any '&' and '=' characters in a NSURLQueryItem name are percent-encoded. Passing an empty array sets the query component of the NSURLComponents to an empty string. Passing nil removes the query component of the NSURLComponents.
  ///
  /// - note: If a NSURLQueryItem name-value pair is empty (i.e. the query string starts with '&', ends with '&', or has "&&" within it), you get a NSURLQueryItem with a zero-length name and a nil value. If a NSURLQueryItem name-value pair has nothing before the equals sign, you get a zero-length name. If a NSURLQueryItem name-value pair has nothing after the equals sign, you get a zero-length value. If a NSURLQueryItem name-value pair has no equals sign, the NSURLQueryItem name-value pair string is the name and you get a nil value.
  objc.NSArray? get queryItems {
    final _ret = _objc_msgSend_128(this.pointer, _sel_queryItems);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// The query component as an array of NSURLQueryItems for this NSURLComponents.
  ///
  /// Each NSURLQueryItem represents a single key-value pair,
  ///
  /// Note that a name may appear more than once in a single query string, so the name values are not guaranteed to be unique. If the NSURLComponents has an empty query component, returns an empty array. If the NSURLComponents has no query component, returns nil.
  ///
  /// The queryItems getter returns an array of NSURLQueryItems in the order in which they appear in the original query string. Any percent-encoding in a NSURLQueryItem name or value is removed.
  ///
  /// The queryItems setter combines an array containing any number of NSURLQueryItems, each of which represents a single key-value pair, into a query string and sets the NSURLComponents query property. If the NSURLQueryItems name or value strings contain any characters not allowed in a URL's query component, those characters are percent-encoded. In addition, any '&' and '=' characters in a NSURLQueryItem name are percent-encoded. Passing an empty array sets the query component of the NSURLComponents to an empty string. Passing nil removes the query component of the NSURLComponents.
  ///
  /// - note: If a NSURLQueryItem name-value pair is empty (i.e. the query string starts with '&', ends with '&', or has "&&" within it), you get a NSURLQueryItem with a zero-length name and a nil value. If a NSURLQueryItem name-value pair has nothing before the equals sign, you get a zero-length name. If a NSURLQueryItem name-value pair has nothing after the equals sign, you get a zero-length value. If a NSURLQueryItem name-value pair has no equals sign, the NSURLQueryItem name-value pair string is the name and you get a nil value.
  set queryItems(objc.NSArray? value) {
    return _objc_msgSend_150(
        this.pointer, _sel_setQueryItems_, value?.pointer ?? ffi.nullptr);
  }

  /// The percentEncodedQueryItems getter returns an array of NSURLQueryItems in the order in which they appear in the original query string. Any percent-encoding in a NSURLQueryItem name or value is retained.
  ///
  /// The percentEncodedQueryItems setter combines an array containing any number of NSURLQueryItems, each of which represents a single key-value pair, into a query string and sets the NSURLComponents query property. This property assumes the NSURLQueryItem names and values are already correctly percent-encoded, and that the NSURLQueryItem names do not contain the query item delimiter characters '&' and '='. Attempting to set an incorrectly percent-encoded NSURLQueryItem or a NSURLQueryItem name with the query item delimiter characters '&' and '=' will cause an exception.
  objc.NSArray? get percentEncodedQueryItems {
    final _ret = _objc_msgSend_128(this.pointer, _sel_percentEncodedQueryItems);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// The percentEncodedQueryItems getter returns an array of NSURLQueryItems in the order in which they appear in the original query string. Any percent-encoding in a NSURLQueryItem name or value is retained.
  ///
  /// The percentEncodedQueryItems setter combines an array containing any number of NSURLQueryItems, each of which represents a single key-value pair, into a query string and sets the NSURLComponents query property. This property assumes the NSURLQueryItem names and values are already correctly percent-encoded, and that the NSURLQueryItem names do not contain the query item delimiter characters '&' and '='. Attempting to set an incorrectly percent-encoded NSURLQueryItem or a NSURLQueryItem name with the query item delimiter characters '&' and '=' will cause an exception.
  set percentEncodedQueryItems(objc.NSArray? value) {
    return _objc_msgSend_150(this.pointer, _sel_setPercentEncodedQueryItems_,
        value?.pointer ?? ffi.nullptr);
  }

  /// new
  static NSURLComponents new1() {
    final _ret = _objc_msgSend_6(_class_NSURLComponents, _sel_new);
    return NSURLComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLComponents allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSURLComponents, _sel_allocWithZone_, zone);
    return NSURLComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLComponents alloc() {
    final _ret = _objc_msgSend_6(_class_NSURLComponents, _sel_alloc);
    return NSURLComponents.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLComponents = objc.getClass("NSURLComponents");
late final _sel_initWithURL_resolvingAgainstBaseURL_ =
    objc.registerName("initWithURL:resolvingAgainstBaseURL:");
late final _sel_componentsWithURL_resolvingAgainstBaseURL_ =
    objc.registerName("componentsWithURL:resolvingAgainstBaseURL:");
late final _sel_componentsWithString_ =
    objc.registerName("componentsWithString:");
late final _sel_initWithString_encodingInvalidCharacters_ =
    objc.registerName("initWithString:encodingInvalidCharacters:");
late final _sel_componentsWithString_encodingInvalidCharacters_ =
    objc.registerName("componentsWithString:encodingInvalidCharacters:");
late final _sel_URLRelativeToURL_ = objc.registerName("URLRelativeToURL:");
final _objc_msgSend_234 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scheme = objc.registerName("scheme");
late final _sel_setScheme_ = objc.registerName("setScheme:");
late final _sel_user = objc.registerName("user");
late final _sel_setUser_ = objc.registerName("setUser:");
late final _sel_password = objc.registerName("password");
late final _sel_setPassword_ = objc.registerName("setPassword:");
late final _sel_host = objc.registerName("host");
late final _sel_setHost_ = objc.registerName("setHost:");
late final _sel_port = objc.registerName("port");
late final _sel_setPort_ = objc.registerName("setPort:");
late final _sel_path = objc.registerName("path");
late final _sel_setPath_ = objc.registerName("setPath:");
late final _sel_query = objc.registerName("query");
late final _sel_setQuery_ = objc.registerName("setQuery:");
late final _sel_fragment = objc.registerName("fragment");
late final _sel_setFragment_ = objc.registerName("setFragment:");
late final _sel_percentEncodedUser = objc.registerName("percentEncodedUser");
late final _sel_setPercentEncodedUser_ =
    objc.registerName("setPercentEncodedUser:");
late final _sel_percentEncodedPassword =
    objc.registerName("percentEncodedPassword");
late final _sel_setPercentEncodedPassword_ =
    objc.registerName("setPercentEncodedPassword:");
late final _sel_percentEncodedHost = objc.registerName("percentEncodedHost");
late final _sel_setPercentEncodedHost_ =
    objc.registerName("setPercentEncodedHost:");
late final _sel_percentEncodedPath = objc.registerName("percentEncodedPath");
late final _sel_setPercentEncodedPath_ =
    objc.registerName("setPercentEncodedPath:");
late final _sel_percentEncodedQuery = objc.registerName("percentEncodedQuery");
late final _sel_setPercentEncodedQuery_ =
    objc.registerName("setPercentEncodedQuery:");
late final _sel_percentEncodedFragment =
    objc.registerName("percentEncodedFragment");
late final _sel_setPercentEncodedFragment_ =
    objc.registerName("setPercentEncodedFragment:");
late final _sel_encodedHost = objc.registerName("encodedHost");
late final _sel_setEncodedHost_ = objc.registerName("setEncodedHost:");
late final _sel_rangeOfScheme = objc.registerName("rangeOfScheme");
final _objc_msgSend_235 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        NSRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_rangeOfUser = objc.registerName("rangeOfUser");
late final _sel_rangeOfPassword = objc.registerName("rangeOfPassword");
late final _sel_rangeOfHost = objc.registerName("rangeOfHost");
late final _sel_rangeOfPort = objc.registerName("rangeOfPort");
late final _sel_rangeOfPath = objc.registerName("rangeOfPath");
late final _sel_rangeOfQuery = objc.registerName("rangeOfQuery");
late final _sel_rangeOfFragment = objc.registerName("rangeOfFragment");
late final _sel_queryItems = objc.registerName("queryItems");
late final _sel_setQueryItems_ = objc.registerName("setQueryItems:");
late final _sel_percentEncodedQueryItems =
    objc.registerName("percentEncodedQueryItems");
late final _sel_setPercentEncodedQueryItems_ =
    objc.registerName("setPercentEncodedQueryItems:");

/// NSFileSecurity encapsulates a file system object's security information. NSFileSecurity and CFFileSecurity are toll-free bridged. Use the CFFileSecurity API for access to the low-level file security properties encapsulated by NSFileSecurity.
class NSFileSecurity extends objc.NSObject {
  NSFileSecurity._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileSecurity] that points to the same underlying object as [other].
  NSFileSecurity.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileSecurity] that wraps the given raw object pointer.
  NSFileSecurity.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileSecurity].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileSecurity);
  }

  /// initWithCoder:
  NSFileSecurity? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_195(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSFileSecurity.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSFileSecurity init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSFileSecurity.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSFileSecurity new1() {
    final _ret = _objc_msgSend_6(_class_NSFileSecurity, _sel_new);
    return NSFileSecurity.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSFileSecurity allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSFileSecurity, _sel_allocWithZone_, zone);
    return NSFileSecurity.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSFileSecurity alloc() {
    final _ret = _objc_msgSend_6(_class_NSFileSecurity, _sel_alloc);
    return NSFileSecurity.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSFileSecurity = objc.getClass("NSFileSecurity");

/// NSException
class NSException extends objc.NSObject {
  NSException._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSException] that points to the same underlying object as [other].
  NSException.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSException] that wraps the given raw object pointer.
  NSException.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSException].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSException);
  }

  /// exceptionWithName:reason:userInfo:
  static NSException exceptionWithName_reason_userInfo_(
      DartNSExceptionName name,
      objc.NSString? reason,
      objc.NSDictionary? userInfo) {
    final _ret = _objc_msgSend_236(
        _class_NSException,
        _sel_exceptionWithName_reason_userInfo_,
        name.pointer,
        reason?.pointer ?? ffi.nullptr,
        userInfo?.pointer ?? ffi.nullptr);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithName:reason:userInfo:
  NSException initWithName_reason_userInfo_(DartNSExceptionName aName,
      objc.NSString? aReason, objc.NSDictionary? aUserInfo) {
    final _ret = _objc_msgSend_237(
        this.pointer,
        _sel_initWithName_reason_userInfo_,
        aName.pointer,
        aReason?.pointer ?? ffi.nullptr,
        aUserInfo?.pointer ?? ffi.nullptr);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  DartNSExceptionName get name {
    final _ret = _objc_msgSend_74(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// reason
  objc.NSString? get reason {
    final _ret = _objc_msgSend_18(this.pointer, _sel_reason);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_24(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// callStackReturnAddresses
  objc.NSArray get callStackReturnAddresses {
    final _ret = _objc_msgSend_103(this.pointer, _sel_callStackReturnAddresses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// callStackSymbols
  objc.NSArray get callStackSymbols {
    final _ret = _objc_msgSend_103(this.pointer, _sel_callStackSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// raise
  void raise() {
    _objc_msgSend_44(this.pointer, _sel_raise);
  }

  /// raise:format:
  static void raise_format_(DartNSExceptionName name, objc.NSString format) {
    _objc_msgSend_123(
        _class_NSException, _sel_raise_format_, name.pointer, format.pointer);
  }

  /// raise:format:arguments:
  static void raise_format_arguments_(
      DartNSExceptionName name, objc.NSString format, va_list argList) {
    _objc_msgSend_238(_class_NSException, _sel_raise_format_arguments_,
        name.pointer, format.pointer, argList);
  }

  /// init
  NSException init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSException new1() {
    final _ret = _objc_msgSend_6(_class_NSException, _sel_new);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSException allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSException, _sel_allocWithZone_, zone);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSException alloc() {
    final _ret = _objc_msgSend_6(_class_NSException, _sel_alloc);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSException = objc.getClass("NSException");
late final _sel_exceptionWithName_reason_userInfo_ =
    objc.registerName("exceptionWithName:reason:userInfo:");
final _objc_msgSend_236 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSExceptionName,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSExceptionName,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_reason_userInfo_ =
    objc.registerName("initWithName:reason:userInfo:");
final _objc_msgSend_237 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSExceptionName,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSExceptionName,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_reason = objc.registerName("reason");
late final _sel_callStackReturnAddresses =
    objc.registerName("callStackReturnAddresses");
late final _sel_callStackSymbols = objc.registerName("callStackSymbols");
late final _sel_raise = objc.registerName("raise");
late final _sel_raise_format_ = objc.registerName("raise:format:");
late final _sel_raise_format_arguments_ =
    objc.registerName("raise:format:arguments:");
final _objc_msgSend_238 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                NSExceptionName,
                ffi.Pointer<objc.ObjCObject>,
                va_list)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            NSExceptionName,
            ffi.Pointer<objc.ObjCObject>,
            va_list)>();
typedef NSUncaughtExceptionHandler = ffi
    .NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> exception)>;

/// NSAssertionHandler
class NSAssertionHandler extends objc.NSObject {
  NSAssertionHandler._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAssertionHandler] that points to the same underlying object as [other].
  NSAssertionHandler.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAssertionHandler] that wraps the given raw object pointer.
  NSAssertionHandler.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAssertionHandler].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSAssertionHandler);
  }

  /// currentHandler
  static NSAssertionHandler getCurrentHandler() {
    final _ret =
        _objc_msgSend_239(_class_NSAssertionHandler, _sel_currentHandler);
    return NSAssertionHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// handleFailureInMethod:object:file:lineNumber:description:
  void handleFailureInMethod_object_file_lineNumber_description_(
      ffi.Pointer<objc.ObjCSelector> selector,
      objc.ObjCObjectBase object,
      objc.NSString fileName,
      DartNSInteger line,
      objc.NSString? format) {
    _objc_msgSend_240(
        this.pointer,
        _sel_handleFailureInMethod_object_file_lineNumber_description_,
        selector,
        object.pointer,
        fileName.pointer,
        line,
        format?.pointer ?? ffi.nullptr);
  }

  /// handleFailureInFunction:file:lineNumber:description:
  void handleFailureInFunction_file_lineNumber_description_(
      objc.NSString functionName,
      objc.NSString fileName,
      DartNSInteger line,
      objc.NSString? format) {
    _objc_msgSend_241(
        this.pointer,
        _sel_handleFailureInFunction_file_lineNumber_description_,
        functionName.pointer,
        fileName.pointer,
        line,
        format?.pointer ?? ffi.nullptr);
  }

  /// init
  NSAssertionHandler init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSAssertionHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSAssertionHandler new1() {
    final _ret = _objc_msgSend_6(_class_NSAssertionHandler, _sel_new);
    return NSAssertionHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSAssertionHandler allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSAssertionHandler, _sel_allocWithZone_, zone);
    return NSAssertionHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSAssertionHandler alloc() {
    final _ret = _objc_msgSend_6(_class_NSAssertionHandler, _sel_alloc);
    return NSAssertionHandler.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSAssertionHandler = objc.getClass("NSAssertionHandler");
late final _sel_currentHandler = objc.registerName("currentHandler");
final _objc_msgSend_239 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_handleFailureInMethod_object_file_lineNumber_description_ = objc
    .registerName("handleFailureInMethod:object:file:lineNumber:description:");
final _objc_msgSend_240 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_handleFailureInFunction_file_lineNumber_description_ =
    objc.registerName("handleFailureInFunction:file:lineNumber:description:");
final _objc_msgSend_241 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSBlockOperation
class NSBlockOperation extends NSOperation {
  NSBlockOperation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSBlockOperation] that points to the same underlying object as [other].
  NSBlockOperation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSBlockOperation] that wraps the given raw object pointer.
  NSBlockOperation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSBlockOperation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSBlockOperation);
  }

  /// blockOperationWithBlock:
  static NSBlockOperation blockOperationWithBlock_(ObjCBlock_ffiVoid block) {
    final _ret = _objc_msgSend_242(
        _class_NSBlockOperation, _sel_blockOperationWithBlock_, block.pointer);
    return NSBlockOperation.castFromPointer(_ret, retain: true, release: true);
  }

  /// addExecutionBlock:
  void addExecutionBlock_(ObjCBlock_ffiVoid block) {
    _objc_msgSend_110(this.pointer, _sel_addExecutionBlock_, block.pointer);
  }

  /// executionBlocks
  objc.NSArray get executionBlocks {
    final _ret = _objc_msgSend_103(this.pointer, _sel_executionBlocks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSBlockOperation init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSBlockOperation.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSBlockOperation new1() {
    final _ret = _objc_msgSend_6(_class_NSBlockOperation, _sel_new);
    return NSBlockOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSBlockOperation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSBlockOperation, _sel_allocWithZone_, zone);
    return NSBlockOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSBlockOperation alloc() {
    final _ret = _objc_msgSend_6(_class_NSBlockOperation, _sel_alloc);
    return NSBlockOperation.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSBlockOperation = objc.getClass("NSBlockOperation");
late final _sel_blockOperationWithBlock_ =
    objc.registerName("blockOperationWithBlock:");
final _objc_msgSend_242 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_addExecutionBlock_ = objc.registerName("addExecutionBlock:");
late final _sel_executionBlocks = objc.registerName("executionBlocks");

/// NSInvocationOperation
class NSInvocationOperation extends NSOperation {
  NSInvocationOperation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInvocationOperation] that points to the same underlying object as [other].
  NSInvocationOperation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInvocationOperation] that wraps the given raw object pointer.
  NSInvocationOperation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInvocationOperation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInvocationOperation);
  }

  /// initWithTarget:selector:object:
  NSInvocationOperation? initWithTarget_selector_object_(
      objc.ObjCObjectBase target,
      ffi.Pointer<objc.ObjCSelector> sel,
      objc.ObjCObjectBase? arg) {
    final _ret = _objc_msgSend_243(
        this.pointer,
        _sel_initWithTarget_selector_object_,
        target.pointer,
        sel,
        arg?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSInvocationOperation.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithInvocation:
  NSInvocationOperation initWithInvocation_(objc.NSInvocation inv) {
    final _ret =
        _objc_msgSend_244(this.pointer, _sel_initWithInvocation_, inv.pointer);
    return NSInvocationOperation.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// invocation
  objc.NSInvocation get invocation {
    final _ret = _objc_msgSend_245(this.pointer, _sel_invocation);
    return objc.NSInvocation.castFromPointer(_ret, retain: true, release: true);
  }

  /// result
  objc.ObjCObjectBase? get result {
    final _ret = _objc_msgSend_3(this.pointer, _sel_result);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// init
  NSInvocationOperation init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return NSInvocationOperation.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSInvocationOperation new1() {
    final _ret = _objc_msgSend_6(_class_NSInvocationOperation, _sel_new);
    return NSInvocationOperation.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSInvocationOperation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_NSInvocationOperation, _sel_allocWithZone_, zone);
    return NSInvocationOperation.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSInvocationOperation alloc() {
    final _ret = _objc_msgSend_6(_class_NSInvocationOperation, _sel_alloc);
    return NSInvocationOperation.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSInvocationOperation =
    objc.getClass("NSInvocationOperation");
late final _sel_initWithTarget_selector_object_ =
    objc.registerName("initWithTarget:selector:object:");
final _objc_msgSend_243 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithInvocation_ = objc.registerName("initWithInvocation:");
final _objc_msgSend_244 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_invocation = objc.registerName("invocation");
final _objc_msgSend_245 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_result = objc.registerName("result");
typedef NSErrorDomain = ffi.Pointer<objc.ObjCObject>;
typedef DartNSErrorDomain = objc.NSString;
typedef NSErrorUserInfoKey = ffi.Pointer<objc.ObjCObject>;
typedef DartNSErrorUserInfoKey = objc.NSString;

final class _Dart_Isolate extends ffi.Opaque {}

final class _Dart_IsolateGroup extends ffi.Opaque {}

final class _Dart_Handle extends ffi.Opaque {}

final class _Dart_WeakPersistentHandle extends ffi.Opaque {}

final class _Dart_FinalizableHandle extends ffi.Opaque {}

typedef Dart_WeakPersistentHandle = ffi.Pointer<_Dart_WeakPersistentHandle>;

/// These structs are versioned by DART_API_DL_MAJOR_VERSION, bump the
/// version when changing this struct.
typedef Dart_HandleFinalizer
    = ffi.Pointer<ffi.NativeFunction<Dart_HandleFinalizerFunction>>;
typedef Dart_HandleFinalizerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> isolate_callback_data, ffi.Pointer<ffi.Void> peer);
typedef DartDart_HandleFinalizerFunction = void Function(
    ffi.Pointer<ffi.Void> isolate_callback_data, ffi.Pointer<ffi.Void> peer);
typedef Dart_FinalizableHandle = ffi.Pointer<_Dart_FinalizableHandle>;

final class Dart_IsolateFlags extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Bool()
  external bool enable_asserts;

  @ffi.Bool()
  external bool use_field_guards;

  @ffi.Bool()
  external bool use_osr;

  @ffi.Bool()
  external bool obfuscate;

  @ffi.Bool()
  external bool load_vmservice_library;

  @ffi.Bool()
  external bool copy_parent_code;

  @ffi.Bool()
  external bool null_safety;

  @ffi.Bool()
  external bool is_system_isolate;
}

/// Forward declaration
final class Dart_CodeObserver extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external Dart_OnNewCodeCallback on_new_code;
}

/// Callback provided by the embedder that is used by the VM to notify on code
/// object creation, *before* it is invoked the first time.
/// This is useful for embedders wanting to e.g. keep track of PCs beyond
/// the lifetime of the garbage collected code objects.
/// Note that an address range may be used by more than one code object over the
/// lifecycle of a process. Clients of this function should record timestamps for
/// these compilation events and when collecting PCs to disambiguate reused
/// address ranges.
typedef Dart_OnNewCodeCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_OnNewCodeCallbackFunction>>;
typedef Dart_OnNewCodeCallbackFunction = ffi.Void Function(
    ffi.Pointer<Dart_CodeObserver> observer,
    ffi.Pointer<ffi.Char> name,
    ffi.UintPtr base,
    ffi.UintPtr size);
typedef DartDart_OnNewCodeCallbackFunction = void Function(
    ffi.Pointer<Dart_CodeObserver> observer,
    ffi.Pointer<ffi.Char> name,
    int base,
    int size);

/// Describes how to initialize the VM. Used with Dart_Initialize.
///
/// \param version Identifies the version of the struct used by the client.
/// should be initialized to DART_INITIALIZE_PARAMS_CURRENT_VERSION.
/// \param vm_isolate_snapshot A buffer containing a snapshot of the VM isolate
/// or NULL if no snapshot is provided. If provided, the buffer must remain
/// valid until Dart_Cleanup returns.
/// \param instructions_snapshot A buffer containing a snapshot of precompiled
/// instructions, or NULL if no snapshot is provided. If provided, the buffer
/// must remain valid until Dart_Cleanup returns.
/// \param initialize_isolate A function to be called during isolate
/// initialization inside an existing isolate group.
/// See Dart_InitializeIsolateCallback.
/// \param create_group A function to be called during isolate group creation.
/// See Dart_IsolateGroupCreateCallback.
/// \param shutdown A function to be called right before an isolate is shutdown.
/// See Dart_IsolateShutdownCallback.
/// \param cleanup A function to be called after an isolate was shutdown.
/// See Dart_IsolateCleanupCallback.
/// \param cleanup_group A function to be called after an isolate group is shutdown.
/// See Dart_IsolateGroupCleanupCallback.
/// \param get_service_assets A function to be called by the service isolate when
/// it requires the vmservice assets archive.
/// See Dart_GetVMServiceAssetsArchive.
/// \param code_observer An external code observer callback function.
/// The observer can be invoked as early as during the Dart_Initialize() call.
final class Dart_InitializeParams extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_data;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_instructions;

  external Dart_IsolateGroupCreateCallback create_group;

  external Dart_InitializeIsolateCallback initialize_isolate;

  external Dart_IsolateShutdownCallback shutdown_isolate;

  external Dart_IsolateCleanupCallback cleanup_isolate;

  external Dart_IsolateGroupCleanupCallback cleanup_group;

  external Dart_ThreadExitCallback thread_exit;

  external Dart_FileOpenCallback file_open;

  external Dart_FileReadCallback file_read;

  external Dart_FileWriteCallback file_write;

  external Dart_FileCloseCallback file_close;

  external Dart_EntropySource entropy_source;

  external Dart_GetVMServiceAssetsArchive get_service_assets;

  @ffi.Bool()
  external bool start_kernel_isolate;

  external ffi.Pointer<Dart_CodeObserver> code_observer;
}

/// An isolate creation and initialization callback function.
///
/// This callback, provided by the embedder, is called when the VM
/// needs to create an isolate. The callback should create an isolate
/// by calling Dart_CreateIsolateGroup and load any scripts required for
/// execution.
///
/// This callback may be called on a different thread than the one
/// running the parent isolate.
///
/// When the function returns NULL, it is the responsibility of this
/// function to ensure that Dart_ShutdownIsolate has been called if
/// required (for example, if the isolate was created successfully by
/// Dart_CreateIsolateGroup() but the root library fails to load
/// successfully, then the function should call Dart_ShutdownIsolate
/// before returning).
///
/// When the function returns NULL, the function should set *error to
/// a malloc-allocated buffer containing a useful error message.  The
/// caller of this function (the VM) will make sure that the buffer is
/// freed.
///
/// \param script_uri The uri of the main source file or snapshot to load.
/// Either the URI of the parent isolate set in Dart_CreateIsolateGroup for
/// Isolate.spawn, or the argument to Isolate.spawnUri canonicalized by the
/// library tag handler of the parent isolate.
/// The callback is responsible for loading the program by a call to
/// Dart_LoadScriptFromKernel.
/// \param main The name of the main entry point this isolate will
/// eventually run.  This is provided for advisory purposes only to
/// improve debugging messages.  The main function is not invoked by
/// this function.
/// \param package_root Ignored.
/// \param package_config Uri of the package configuration file (either in format
/// of .packages or .dart_tool/package_config.json) for this isolate
/// to resolve package imports against. If this parameter is not passed the
/// package resolution of the parent isolate should be used.
/// \param flags Default flags for this isolate being spawned. Either inherited
/// from the spawning isolate or passed as parameters when spawning the
/// isolate from Dart code.
/// \param isolate_data The isolate data which was passed to the
/// parent isolate when it was created by calling Dart_CreateIsolateGroup().
/// \param error A structure into which the embedder can place a
/// C string containing an error message in the case of failures.
///
/// \return The embedder returns NULL if the creation and
/// initialization was not successful and the isolate if successful.
typedef Dart_IsolateGroupCreateCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_IsolateGroupCreateCallbackFunction>>;
typedef Dart_IsolateGroupCreateCallbackFunction = Dart_Isolate Function(
    ffi.Pointer<ffi.Char> script_uri,
    ffi.Pointer<ffi.Char> main,
    ffi.Pointer<ffi.Char> package_root,
    ffi.Pointer<ffi.Char> package_config,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error);

/// An isolate is the unit of concurrency in Dart. Each isolate has
/// its own memory and thread of control. No state is shared between
/// isolates. Instead, isolates communicate by message passing.
///
/// Each thread keeps track of its current isolate, which is the
/// isolate which is ready to execute on the current thread. The
/// current isolate may be NULL, in which case no isolate is ready to
/// execute. Most of the Dart apis require there to be a current
/// isolate in order to function without error. The current isolate is
/// set by any call to Dart_CreateIsolateGroup or Dart_EnterIsolate.
typedef Dart_Isolate = ffi.Pointer<_Dart_Isolate>;

/// An isolate initialization callback function.
///
/// This callback, provided by the embedder, is called when the VM has created an
/// isolate within an existing isolate group (i.e. from the same source as an
/// existing isolate).
///
/// The callback should setup native resolvers and might want to set a custom
/// message handler via [Dart_SetMessageNotifyCallback] and mark the isolate as
/// runnable.
///
/// This callback may be called on a different thread than the one
/// running the parent isolate.
///
/// When the function returns `false`, it is the responsibility of this
/// function to ensure that `Dart_ShutdownIsolate` has been called.
///
/// When the function returns `false`, the function should set *error to
/// a malloc-allocated buffer containing a useful error message.  The
/// caller of this function (the VM) will make sure that the buffer is
/// freed.
///
/// \param child_isolate_data The callback data to associate with the new
/// child isolate.
/// \param error A structure into which the embedder can place a
/// C string containing an error message in the case the initialization fails.
///
/// \return The embedder returns true if the initialization was successful and
/// false otherwise (in which case the VM will terminate the isolate).
typedef Dart_InitializeIsolateCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_InitializeIsolateCallbackFunction>>;
typedef Dart_InitializeIsolateCallbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> child_isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error);
typedef DartDart_InitializeIsolateCallbackFunction = bool Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> child_isolate_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error);

/// An isolate shutdown callback function.
///
/// This callback, provided by the embedder, is called before the vm
/// shuts down an isolate.  The isolate being shutdown will be the current
/// isolate. It is safe to run Dart code.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
/// \param isolate_data The same callback data which was passed to the isolate
/// when it was created.
typedef Dart_IsolateShutdownCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_IsolateShutdownCallbackFunction>>;
typedef Dart_IsolateShutdownCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data);
typedef DartDart_IsolateShutdownCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data);

/// An isolate cleanup callback function.
///
/// This callback, provided by the embedder, is called after the vm
/// shuts down an isolate. There will be no current isolate and it is *not*
/// safe to run Dart code.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
/// \param isolate_data The same callback data which was passed to the isolate
/// when it was created.
typedef Dart_IsolateCleanupCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_IsolateCleanupCallbackFunction>>;
typedef Dart_IsolateCleanupCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data);
typedef DartDart_IsolateCleanupCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data);

/// An isolate group cleanup callback function.
///
/// This callback, provided by the embedder, is called after the vm
/// shuts down an isolate group.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
typedef Dart_IsolateGroupCleanupCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_IsolateGroupCleanupCallbackFunction>>;
typedef Dart_IsolateGroupCleanupCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> isolate_group_data);
typedef DartDart_IsolateGroupCleanupCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> isolate_group_data);

/// A thread death callback function.
/// This callback, provided by the embedder, is called before a thread in the
/// vm thread pool exits.
/// This function could be used to dispose of native resources that
/// are associated and attached to the thread, in order to avoid leaks.
typedef Dart_ThreadExitCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_ThreadExitCallbackFunction>>;
typedef Dart_ThreadExitCallbackFunction = ffi.Void Function();
typedef DartDart_ThreadExitCallbackFunction = void Function();

/// Callbacks provided by the embedder for file operations. If the
/// embedder does not allow file operations these callbacks can be
/// NULL.
///
/// Dart_FileOpenCallback - opens a file for reading or writing.
/// \param name The name of the file to open.
/// \param write A boolean variable which indicates if the file is to
/// opened for writing. If there is an existing file it needs to truncated.
///
/// Dart_FileReadCallback - Read contents of file.
/// \param data Buffer allocated in the callback into which the contents
/// of the file are read into. It is the responsibility of the caller to
/// free this buffer.
/// \param file_length A variable into which the length of the file is returned.
/// In the case of an error this value would be -1.
/// \param stream Handle to the opened file.
///
/// Dart_FileWriteCallback - Write data into file.
/// \param data Buffer which needs to be written into the file.
/// \param length Length of the buffer.
/// \param stream Handle to the opened file.
///
/// Dart_FileCloseCallback - Closes the opened file.
/// \param stream Handle to the opened file.
typedef Dart_FileOpenCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_FileOpenCallbackFunction>>;
typedef Dart_FileOpenCallbackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> name, ffi.Bool write);
typedef DartDart_FileOpenCallbackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> name, bool write);
typedef Dart_FileReadCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_FileReadCallbackFunction>>;
typedef Dart_FileReadCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.IntPtr> file_length,
    ffi.Pointer<ffi.Void> stream);
typedef DartDart_FileReadCallbackFunction = void Function(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.IntPtr> file_length,
    ffi.Pointer<ffi.Void> stream);
typedef Dart_FileWriteCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_FileWriteCallbackFunction>>;
typedef Dart_FileWriteCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> data,
    ffi.IntPtr length,
    ffi.Pointer<ffi.Void> stream);
typedef DartDart_FileWriteCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> data, int length, ffi.Pointer<ffi.Void> stream);
typedef Dart_FileCloseCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_FileCloseCallbackFunction>>;
typedef Dart_FileCloseCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> stream);
typedef DartDart_FileCloseCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> stream);
typedef Dart_EntropySource
    = ffi.Pointer<ffi.NativeFunction<Dart_EntropySourceFunction>>;
typedef Dart_EntropySourceFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Uint8> buffer, ffi.IntPtr length);
typedef DartDart_EntropySourceFunction = bool Function(
    ffi.Pointer<ffi.Uint8> buffer, int length);

/// Callback provided by the embedder that is used by the vmservice isolate
/// to request the asset archive. The asset archive must be an uncompressed tar
/// archive that is stored in a Uint8List.
///
/// If the embedder has no vmservice isolate assets, the callback can be NULL.
///
/// \return The embedder must return a handle to a Uint8List containing an
/// uncompressed tar archive or null.
typedef Dart_GetVMServiceAssetsArchive
    = ffi.Pointer<ffi.NativeFunction<Dart_GetVMServiceAssetsArchiveFunction>>;
typedef Dart_GetVMServiceAssetsArchiveFunction = ffi.Handle Function();
typedef DartDart_GetVMServiceAssetsArchiveFunction = Object Function();
typedef Dart_IsolateGroup = ffi.Pointer<_Dart_IsolateGroup>;

/// A message notification callback.
///
/// This callback allows the embedder to provide an alternate wakeup
/// mechanism for the delivery of inter-isolate messages.  It is the
/// responsibility of the embedder to call Dart_HandleMessage to
/// process the message.
typedef Dart_MessageNotifyCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_MessageNotifyCallbackFunction>>;
typedef Dart_MessageNotifyCallbackFunction = ffi.Void Function(
    Dart_Isolate dest_isolate);
typedef DartDart_MessageNotifyCallbackFunction = void Function(
    Dart_Isolate dest_isolate);

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
typedef DartDart_Port = int;

enum Dart_CoreType_Id {
  Dart_CoreType_Dynamic(0),
  Dart_CoreType_Int(1),
  Dart_CoreType_String(2);

  final int value;
  const Dart_CoreType_Id(this.value);

  static Dart_CoreType_Id fromValue(int value) => switch (value) {
        0 => Dart_CoreType_Dynamic,
        1 => Dart_CoreType_Int,
        2 => Dart_CoreType_String,
        _ => throw ArgumentError("Unknown value for Dart_CoreType_Id: $value"),
      };
}

/// ==========
/// Typed Data
/// ==========
enum Dart_TypedData_Type {
  Dart_TypedData_kByteData(0),
  Dart_TypedData_kInt8(1),
  Dart_TypedData_kUint8(2),
  Dart_TypedData_kUint8Clamped(3),
  Dart_TypedData_kInt16(4),
  Dart_TypedData_kUint16(5),
  Dart_TypedData_kInt32(6),
  Dart_TypedData_kUint32(7),
  Dart_TypedData_kInt64(8),
  Dart_TypedData_kUint64(9),
  Dart_TypedData_kFloat32(10),
  Dart_TypedData_kFloat64(11),
  Dart_TypedData_kInt32x4(12),
  Dart_TypedData_kFloat32x4(13),
  Dart_TypedData_kFloat64x2(14),
  Dart_TypedData_kInvalid(15);

  final int value;
  const Dart_TypedData_Type(this.value);

  static Dart_TypedData_Type fromValue(int value) => switch (value) {
        0 => Dart_TypedData_kByteData,
        1 => Dart_TypedData_kInt8,
        2 => Dart_TypedData_kUint8,
        3 => Dart_TypedData_kUint8Clamped,
        4 => Dart_TypedData_kInt16,
        5 => Dart_TypedData_kUint16,
        6 => Dart_TypedData_kInt32,
        7 => Dart_TypedData_kUint32,
        8 => Dart_TypedData_kInt64,
        9 => Dart_TypedData_kUint64,
        10 => Dart_TypedData_kFloat32,
        11 => Dart_TypedData_kFloat64,
        12 => Dart_TypedData_kInt32x4,
        13 => Dart_TypedData_kFloat32x4,
        14 => Dart_TypedData_kFloat64x2,
        15 => Dart_TypedData_kInvalid,
        _ =>
          throw ArgumentError("Unknown value for Dart_TypedData_Type: $value"),
      };
}

final class _Dart_NativeArguments extends ffi.Opaque {}

/// The arguments to a native function.
///
/// This object is passed to a native function to represent its
/// arguments and return value. It allows access to the arguments to a
/// native function by index. It also allows the return value of a
/// native function to be set.
typedef Dart_NativeArguments = ffi.Pointer<_Dart_NativeArguments>;

enum Dart_NativeArgument_Type {
  Dart_NativeArgument_kBool(0),
  Dart_NativeArgument_kInt32(1),
  Dart_NativeArgument_kUint32(2),
  Dart_NativeArgument_kInt64(3),
  Dart_NativeArgument_kUint64(4),
  Dart_NativeArgument_kDouble(5),
  Dart_NativeArgument_kString(6),
  Dart_NativeArgument_kInstance(7),
  Dart_NativeArgument_kNativeFields(8);

  final int value;
  const Dart_NativeArgument_Type(this.value);

  static Dart_NativeArgument_Type fromValue(int value) => switch (value) {
        0 => Dart_NativeArgument_kBool,
        1 => Dart_NativeArgument_kInt32,
        2 => Dart_NativeArgument_kUint32,
        3 => Dart_NativeArgument_kInt64,
        4 => Dart_NativeArgument_kUint64,
        5 => Dart_NativeArgument_kDouble,
        6 => Dart_NativeArgument_kString,
        7 => Dart_NativeArgument_kInstance,
        8 => Dart_NativeArgument_kNativeFields,
        _ => throw ArgumentError(
            "Unknown value for Dart_NativeArgument_Type: $value"),
      };
}

final class _Dart_NativeArgument_Descriptor extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int index;
}

final class _Dart_NativeArgument_Value extends ffi.Opaque {}

typedef Dart_NativeArgument_Descriptor = _Dart_NativeArgument_Descriptor;
typedef Dart_NativeArgument_Value = _Dart_NativeArgument_Value;

/// An environment lookup callback function.
///
/// \param name The name of the value to lookup in the environment.
///
/// \return A valid handle to a string if the name exists in the
/// current environment or Dart_Null() if not.
typedef Dart_EnvironmentCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_EnvironmentCallbackFunction>>;
typedef Dart_EnvironmentCallbackFunction = ffi.Handle Function(ffi.Handle name);
typedef DartDart_EnvironmentCallbackFunction = Object Function(Object name);

/// Native entry resolution callback.
///
/// For libraries and scripts which have native functions, the embedder
/// can provide a native entry resolver. This callback is used to map a
/// name/arity to a Dart_NativeFunction. If no function is found, the
/// callback should return NULL.
///
/// The parameters to the native resolver function are:
/// \param name a Dart string which is the name of the native function.
/// \param num_of_arguments is the number of arguments expected by the
/// native function.
/// \param auto_setup_scope is a boolean flag that can be set by the resolver
/// to indicate if this function needs a Dart API scope (see Dart_EnterScope/
/// Dart_ExitScope) to be setup automatically by the VM before calling into
/// the native function. By default most native functions would require this
/// to be true but some light weight native functions which do not call back
/// into the VM through the Dart API may not require a Dart scope to be
/// setup automatically.
///
/// \return A valid Dart_NativeFunction which resolves to a native entry point
/// for the native function.
///
/// See Dart_SetNativeResolver.
typedef Dart_NativeEntryResolver
    = ffi.Pointer<ffi.NativeFunction<Dart_NativeEntryResolverFunction>>;
typedef Dart_NativeEntryResolverFunction = Dart_NativeFunction Function(
    ffi.Handle name,
    ffi.Int num_of_arguments,
    ffi.Pointer<ffi.Bool> auto_setup_scope);
typedef DartDart_NativeEntryResolverFunction = Dart_NativeFunction Function(
    Object name, int num_of_arguments, ffi.Pointer<ffi.Bool> auto_setup_scope);

/// A native function.
typedef Dart_NativeFunction
    = ffi.Pointer<ffi.NativeFunction<Dart_NativeFunctionFunction>>;
typedef Dart_NativeFunctionFunction = ffi.Void Function(
    Dart_NativeArguments arguments);
typedef DartDart_NativeFunctionFunction = void Function(
    Dart_NativeArguments arguments);

/// Native entry symbol lookup callback.
///
/// For libraries and scripts which have native functions, the embedder
/// can provide a callback for mapping a native entry to a symbol. This callback
/// maps a native function entry PC to the native function name. If no native
/// entry symbol can be found, the callback should return NULL.
///
/// The parameters to the native reverse resolver function are:
/// \param nf A Dart_NativeFunction.
///
/// \return A const UTF-8 string containing the symbol name or NULL.
///
/// See Dart_SetNativeResolver.
typedef Dart_NativeEntrySymbol
    = ffi.Pointer<ffi.NativeFunction<Dart_NativeEntrySymbolFunction>>;
typedef Dart_NativeEntrySymbolFunction = ffi.Pointer<ffi.Uint8> Function(
    Dart_NativeFunction nf);

/// FFI Native C function pointer resolver callback.
///
/// See Dart_SetFfiNativeResolver.
typedef Dart_FfiNativeResolver
    = ffi.Pointer<ffi.NativeFunction<Dart_FfiNativeResolverFunction>>;
typedef Dart_FfiNativeResolverFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> name, ffi.UintPtr args_n);
typedef DartDart_FfiNativeResolverFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> name, int args_n);

/// =====================
/// Scripts and Libraries
/// =====================
enum Dart_LibraryTag {
  Dart_kCanonicalizeUrl(0),
  Dart_kImportTag(1),
  Dart_kKernelTag(2);

  final int value;
  const Dart_LibraryTag(this.value);

  static Dart_LibraryTag fromValue(int value) => switch (value) {
        0 => Dart_kCanonicalizeUrl,
        1 => Dart_kImportTag,
        2 => Dart_kKernelTag,
        _ => throw ArgumentError("Unknown value for Dart_LibraryTag: $value"),
      };
}

/// The library tag handler is a multi-purpose callback provided by the
/// embedder to the Dart VM. The embedder implements the tag handler to
/// provide the ability to load Dart scripts and imports.
///
/// -- TAGS --
///
/// Dart_kCanonicalizeUrl
///
/// This tag indicates that the embedder should canonicalize 'url' with
/// respect to 'library'.  For most embedders, the
/// Dart_DefaultCanonicalizeUrl function is a sufficient implementation
/// of this tag.  The return value should be a string holding the
/// canonicalized url.
///
/// Dart_kImportTag
///
/// This tag is used to load a library from IsolateMirror.loadUri. The embedder
/// should call Dart_LoadLibraryFromKernel to provide the library to the VM. The
/// return value should be an error or library (the result from
/// Dart_LoadLibraryFromKernel).
///
/// Dart_kKernelTag
///
/// This tag is used to load the intermediate file (kernel) generated by
/// the Dart front end. This tag is typically used when a 'hot-reload'
/// of an application is needed and the VM is 'use dart front end' mode.
/// The dart front end typically compiles all the scripts, imports and part
/// files into one intermediate file hence we don't use the source/import or
/// script tags. The return value should be an error or a TypedData containing
/// the kernel bytes.
typedef Dart_LibraryTagHandler
    = ffi.Pointer<ffi.NativeFunction<Dart_LibraryTagHandlerFunction>>;
typedef Dart_LibraryTagHandlerFunction = ffi.Handle Function(
    ffi.UnsignedInt tag, ffi.Handle library_or_package_map_url, ffi.Handle url);
typedef DartDart_LibraryTagHandlerFunction = Object Function(
    Dart_LibraryTag tag, Object library_or_package_map_url, Object url);

/// Handles deferred loading requests. When this handler is invoked, it should
/// eventually load the deferred loading unit with the given id and call
/// Dart_DeferredLoadComplete or Dart_DeferredLoadCompleteError. It is
/// recommended that the loading occur asynchronously, but it is permitted to
/// call Dart_DeferredLoadComplete or Dart_DeferredLoadCompleteError before the
/// handler returns.
///
/// If an error is returned, it will be propogated through
/// `prefix.loadLibrary()`. This is useful for synchronous
/// implementations, which must propogate any unwind errors from
/// Dart_DeferredLoadComplete or Dart_DeferredLoadComplete. Otherwise the handler
/// should return a non-error such as `Dart_Null()`.
typedef Dart_DeferredLoadHandler
    = ffi.Pointer<ffi.NativeFunction<Dart_DeferredLoadHandlerFunction>>;
typedef Dart_DeferredLoadHandlerFunction = ffi.Handle Function(
    ffi.IntPtr loading_unit_id);
typedef DartDart_DeferredLoadHandlerFunction = Object Function(
    int loading_unit_id);

/// TODO(33433): Remove kernel service from the embedding API.
enum Dart_KernelCompilationStatus {
  Dart_KernelCompilationStatus_Unknown(-1),
  Dart_KernelCompilationStatus_Ok(0),
  Dart_KernelCompilationStatus_Error(1),
  Dart_KernelCompilationStatus_Crash(2),
  Dart_KernelCompilationStatus_MsgFailed(3);

  final int value;
  const Dart_KernelCompilationStatus(this.value);

  static Dart_KernelCompilationStatus fromValue(int value) => switch (value) {
        -1 => Dart_KernelCompilationStatus_Unknown,
        0 => Dart_KernelCompilationStatus_Ok,
        1 => Dart_KernelCompilationStatus_Error,
        2 => Dart_KernelCompilationStatus_Crash,
        3 => Dart_KernelCompilationStatus_MsgFailed,
        _ => throw ArgumentError(
            "Unknown value for Dart_KernelCompilationStatus: $value"),
      };
}

final class Dart_KernelCompilationResult extends ffi.Struct {
  @ffi.Int()
  external int status;

  @ffi.Bool()
  external bool null_safety;

  external ffi.Pointer<ffi.Char> error;

  external ffi.Pointer<ffi.Uint8> kernel;

  @ffi.IntPtr()
  external int kernel_size;
}

enum Dart_KernelCompilationVerbosityLevel {
  Dart_KernelCompilationVerbosityLevel_Error(0),
  Dart_KernelCompilationVerbosityLevel_Warning(1),
  Dart_KernelCompilationVerbosityLevel_Info(2),
  Dart_KernelCompilationVerbosityLevel_All(3);

  final int value;
  const Dart_KernelCompilationVerbosityLevel(this.value);

  static Dart_KernelCompilationVerbosityLevel fromValue(int value) =>
      switch (value) {
        0 => Dart_KernelCompilationVerbosityLevel_Error,
        1 => Dart_KernelCompilationVerbosityLevel_Warning,
        2 => Dart_KernelCompilationVerbosityLevel_Info,
        3 => Dart_KernelCompilationVerbosityLevel_All,
        _ => throw ArgumentError(
            "Unknown value for Dart_KernelCompilationVerbosityLevel: $value"),
      };
}

final class Dart_SourceFile extends ffi.Struct {
  external ffi.Pointer<ffi.Char> uri;

  external ffi.Pointer<ffi.Char> source;
}

typedef Dart_StreamingWriteCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_StreamingWriteCallbackFunction>>;
typedef Dart_StreamingWriteCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> callback_data,
    ffi.Pointer<ffi.Uint8> buffer,
    ffi.IntPtr size);
typedef DartDart_StreamingWriteCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> callback_data,
    ffi.Pointer<ffi.Uint8> buffer,
    int size);
typedef Dart_CreateLoadingUnitCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_CreateLoadingUnitCallbackFunction>>;
typedef Dart_CreateLoadingUnitCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> callback_data,
    ffi.IntPtr loading_unit_id,
    ffi.Pointer<ffi.Pointer<ffi.Void>> write_callback_data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> write_debug_callback_data);
typedef DartDart_CreateLoadingUnitCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> callback_data,
    int loading_unit_id,
    ffi.Pointer<ffi.Pointer<ffi.Void>> write_callback_data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> write_debug_callback_data);
typedef Dart_StreamingCloseCallback
    = ffi.Pointer<ffi.NativeFunction<Dart_StreamingCloseCallbackFunction>>;
typedef Dart_StreamingCloseCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> callback_data);
typedef DartDart_StreamingCloseCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> callback_data);

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_HandleFinalizer callback; a non-NULL callback must be provided.
enum Dart_CObject_Type {
  Dart_CObject_kNull(0),
  Dart_CObject_kBool(1),
  Dart_CObject_kInt32(2),
  Dart_CObject_kInt64(3),
  Dart_CObject_kDouble(4),
  Dart_CObject_kString(5),
  Dart_CObject_kArray(6),
  Dart_CObject_kTypedData(7),
  Dart_CObject_kExternalTypedData(8),
  Dart_CObject_kSendPort(9),
  Dart_CObject_kCapability(10),
  Dart_CObject_kNativePointer(11),
  Dart_CObject_kUnsupported(12),
  Dart_CObject_kNumberOfTypes(13);

  final int value;
  const Dart_CObject_Type(this.value);

  static Dart_CObject_Type fromValue(int value) => switch (value) {
        0 => Dart_CObject_kNull,
        1 => Dart_CObject_kBool,
        2 => Dart_CObject_kInt32,
        3 => Dart_CObject_kInt64,
        4 => Dart_CObject_kDouble,
        5 => Dart_CObject_kString,
        6 => Dart_CObject_kArray,
        7 => Dart_CObject_kTypedData,
        8 => Dart_CObject_kExternalTypedData,
        9 => Dart_CObject_kSendPort,
        10 => Dart_CObject_kCapability,
        11 => Dart_CObject_kNativePointer,
        12 => Dart_CObject_kUnsupported,
        13 => Dart_CObject_kNumberOfTypes,
        _ => throw ArgumentError("Unknown value for Dart_CObject_Type: $value"),
      };
}

final class _Dart_CObject extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  external UnnamedUnion6 value;
}

final class UnnamedUnion6 extends ffi.Union {
  @ffi.Bool()
  external bool as_bool;

  @ffi.Int32()
  external int as_int32;

  @ffi.Int64()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<ffi.Char> as_string;

  external UnnamedStruct5 as_send_port;

  external UnnamedStruct6 as_capability;

  external UnnamedStruct7 as_array;

  external UnnamedStruct8 as_typed_data;

  external UnnamedStruct9 as_external_typed_data;

  external UnnamedStruct10 as_native_pointer;
}

final class UnnamedStruct5 extends ffi.Struct {
  @Dart_Port()
  external int id;

  @Dart_Port()
  external int origin_id;
}

final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Int64()
  external int id;
}

final class UnnamedStruct7 extends ffi.Struct {
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Pointer<_Dart_CObject>> values;
}

final class UnnamedStruct8 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  /// in elements, not bytes
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> values;
}

final class UnnamedStruct9 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  /// in elements, not bytes
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Void> peer;

  external Dart_HandleFinalizer callback;
}

final class UnnamedStruct10 extends ffi.Struct {
  @ffi.IntPtr()
  external int ptr;

  @ffi.IntPtr()
  external int size;

  external Dart_HandleFinalizer callback;
}

typedef Dart_CObject = _Dart_CObject;

/// A native message handler.
///
/// This handler is associated with a native port by calling
/// Dart_NewNativePort.
///
/// The message received is decoded into the message structure. The
/// lifetime of the message data is controlled by the caller. All the
/// data references from the message are allocated by the caller and
/// will be reclaimed when returning to it.
typedef Dart_NativeMessageHandler
    = ffi.Pointer<ffi.NativeFunction<Dart_NativeMessageHandlerFunction>>;
typedef Dart_NativeMessageHandlerFunction = ffi.Void Function(
    Dart_Port dest_port_id, ffi.Pointer<Dart_CObject> message);
typedef DartDart_NativeMessageHandlerFunction = void Function(
    DartDart_Port dest_port_id, ffi.Pointer<Dart_CObject> message);
typedef Dart_PostCObject_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_PostCObject_TypeFunction>>;
typedef Dart_PostCObject_TypeFunction = ffi.Bool Function(
    Dart_Port_DL port_id, ffi.Pointer<Dart_CObject> message);
typedef DartDart_PostCObject_TypeFunction = bool Function(
    DartDart_Port_DL port_id, ffi.Pointer<Dart_CObject> message);

/// ============================================================================
/// IMPORTANT! Never update these signatures without properly updating
/// DART_API_DL_MAJOR_VERSION and DART_API_DL_MINOR_VERSION.
///
/// Verbatim copy of `dart_native_api.h` and `dart_api.h` symbol names and types
/// to trigger compile-time errors if the sybols in those files are updated
/// without updating these.
///
/// Function return and argument types, and typedefs are carbon copied. Structs
/// are typechecked nominally in C/C++, so they are not copied, instead a
/// comment is added to their definition.
typedef Dart_Port_DL = ffi.Int64;
typedef DartDart_Port_DL = int;
typedef Dart_PostInteger_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_PostInteger_TypeFunction>>;
typedef Dart_PostInteger_TypeFunction = ffi.Bool Function(
    Dart_Port_DL port_id, ffi.Int64 message);
typedef DartDart_PostInteger_TypeFunction = bool Function(
    DartDart_Port_DL port_id, int message);
typedef Dart_NewNativePort_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_NewNativePort_TypeFunction>>;
typedef Dart_NewNativePort_TypeFunction = Dart_Port_DL Function(
    ffi.Pointer<ffi.Char> name,
    Dart_NativeMessageHandler_DL handler,
    ffi.Bool handle_concurrently);
typedef DartDart_NewNativePort_TypeFunction = DartDart_Port_DL Function(
    ffi.Pointer<ffi.Char> name,
    Dart_NativeMessageHandler_DL handler,
    bool handle_concurrently);
typedef Dart_NativeMessageHandler_DL
    = ffi.Pointer<ffi.NativeFunction<Dart_NativeMessageHandler_DLFunction>>;
typedef Dart_NativeMessageHandler_DLFunction = ffi.Void Function(
    Dart_Port_DL dest_port_id, ffi.Pointer<Dart_CObject> message);
typedef DartDart_NativeMessageHandler_DLFunction = void Function(
    DartDart_Port_DL dest_port_id, ffi.Pointer<Dart_CObject> message);
typedef Dart_CloseNativePort_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_CloseNativePort_TypeFunction>>;
typedef Dart_CloseNativePort_TypeFunction = ffi.Bool Function(
    Dart_Port_DL native_port_id);
typedef DartDart_CloseNativePort_TypeFunction = bool Function(
    DartDart_Port_DL native_port_id);
typedef Dart_IsError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_IsError_TypeFunction>>;
typedef Dart_IsError_TypeFunction = ffi.Bool Function(ffi.Handle handle);
typedef DartDart_IsError_TypeFunction = bool Function(Object handle);
typedef Dart_IsApiError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_IsApiError_TypeFunction>>;
typedef Dart_IsApiError_TypeFunction = ffi.Bool Function(ffi.Handle handle);
typedef DartDart_IsApiError_TypeFunction = bool Function(Object handle);
typedef Dart_IsUnhandledExceptionError_Type = ffi
    .Pointer<ffi.NativeFunction<Dart_IsUnhandledExceptionError_TypeFunction>>;
typedef Dart_IsUnhandledExceptionError_TypeFunction = ffi.Bool Function(
    ffi.Handle handle);
typedef DartDart_IsUnhandledExceptionError_TypeFunction = bool Function(
    Object handle);
typedef Dart_IsCompilationError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_IsCompilationError_TypeFunction>>;
typedef Dart_IsCompilationError_TypeFunction = ffi.Bool Function(
    ffi.Handle handle);
typedef DartDart_IsCompilationError_TypeFunction = bool Function(Object handle);
typedef Dart_IsFatalError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_IsFatalError_TypeFunction>>;
typedef Dart_IsFatalError_TypeFunction = ffi.Bool Function(ffi.Handle handle);
typedef DartDart_IsFatalError_TypeFunction = bool Function(Object handle);
typedef Dart_GetError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_GetError_TypeFunction>>;
typedef Dart_GetError_TypeFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Handle handle);
typedef DartDart_GetError_TypeFunction = ffi.Pointer<ffi.Char> Function(
    Object handle);
typedef Dart_ErrorHasException_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_ErrorHasException_TypeFunction>>;
typedef Dart_ErrorHasException_TypeFunction = ffi.Bool Function(
    ffi.Handle handle);
typedef DartDart_ErrorHasException_TypeFunction = bool Function(Object handle);
typedef Dart_ErrorGetException_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetException_TypeFunction>>;
typedef Dart_ErrorGetException_TypeFunction = ffi.Handle Function(
    ffi.Handle handle);
typedef DartDart_ErrorGetException_TypeFunction = Object Function(
    Object handle);
typedef Dart_ErrorGetStackTrace_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetStackTrace_TypeFunction>>;
typedef Dart_ErrorGetStackTrace_TypeFunction = ffi.Handle Function(
    ffi.Handle handle);
typedef DartDart_ErrorGetStackTrace_TypeFunction = Object Function(
    Object handle);
typedef Dart_NewApiError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_NewApiError_TypeFunction>>;
typedef Dart_NewApiError_TypeFunction = ffi.Handle Function(
    ffi.Pointer<ffi.Char> error);
typedef DartDart_NewApiError_TypeFunction = Object Function(
    ffi.Pointer<ffi.Char> error);
typedef Dart_NewCompilationError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_NewCompilationError_TypeFunction>>;
typedef Dart_NewCompilationError_TypeFunction = ffi.Handle Function(
    ffi.Pointer<ffi.Char> error);
typedef DartDart_NewCompilationError_TypeFunction = Object Function(
    ffi.Pointer<ffi.Char> error);
typedef Dart_NewUnhandledExceptionError_Type = ffi
    .Pointer<ffi.NativeFunction<Dart_NewUnhandledExceptionError_TypeFunction>>;
typedef Dart_NewUnhandledExceptionError_TypeFunction = ffi.Handle Function(
    ffi.Handle exception);
typedef DartDart_NewUnhandledExceptionError_TypeFunction = Object Function(
    Object exception);
typedef Dart_PropagateError_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_PropagateError_TypeFunction>>;
typedef Dart_PropagateError_TypeFunction = ffi.Void Function(ffi.Handle handle);
typedef DartDart_PropagateError_TypeFunction = void Function(Object handle);
typedef Dart_HandleFromPersistent_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_HandleFromPersistent_TypeFunction>>;
typedef Dart_HandleFromPersistent_TypeFunction = ffi.Handle Function(
    ffi.Handle object);
typedef DartDart_HandleFromPersistent_TypeFunction = Object Function(
    Object object);
typedef Dart_HandleFromWeakPersistent_Type = ffi
    .Pointer<ffi.NativeFunction<Dart_HandleFromWeakPersistent_TypeFunction>>;
typedef Dart_HandleFromWeakPersistent_TypeFunction = ffi.Handle Function(
    Dart_WeakPersistentHandle object);
typedef DartDart_HandleFromWeakPersistent_TypeFunction = Object Function(
    Dart_WeakPersistentHandle object);
typedef Dart_NewPersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_NewPersistentHandle_TypeFunction>>;
typedef Dart_NewPersistentHandle_TypeFunction = ffi.Handle Function(
    ffi.Handle object);
typedef DartDart_NewPersistentHandle_TypeFunction = Object Function(
    Object object);
typedef Dart_SetPersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_SetPersistentHandle_TypeFunction>>;
typedef Dart_SetPersistentHandle_TypeFunction = ffi.Void Function(
    ffi.Handle obj1, ffi.Handle obj2);
typedef DartDart_SetPersistentHandle_TypeFunction = void Function(
    Object obj1, Object obj2);
typedef Dart_DeletePersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_DeletePersistentHandle_TypeFunction>>;
typedef Dart_DeletePersistentHandle_TypeFunction = ffi.Void Function(
    ffi.Handle object);
typedef DartDart_DeletePersistentHandle_TypeFunction = void Function(
    Object object);
typedef Dart_NewWeakPersistentHandle_Type = ffi
    .Pointer<ffi.NativeFunction<Dart_NewWeakPersistentHandle_TypeFunction>>;
typedef Dart_NewWeakPersistentHandle_TypeFunction
    = Dart_WeakPersistentHandle Function(
        ffi.Handle object,
        ffi.Pointer<ffi.Void> peer,
        ffi.IntPtr external_allocation_size,
        Dart_HandleFinalizer callback);
typedef DartDart_NewWeakPersistentHandle_TypeFunction
    = Dart_WeakPersistentHandle Function(
        Object object,
        ffi.Pointer<ffi.Void> peer,
        int external_allocation_size,
        Dart_HandleFinalizer callback);
typedef Dart_DeleteWeakPersistentHandle_Type = ffi
    .Pointer<ffi.NativeFunction<Dart_DeleteWeakPersistentHandle_TypeFunction>>;
typedef Dart_DeleteWeakPersistentHandle_TypeFunction = ffi.Void Function(
    Dart_WeakPersistentHandle object);
typedef DartDart_DeleteWeakPersistentHandle_TypeFunction = void Function(
    Dart_WeakPersistentHandle object);
typedef Dart_UpdateExternalSize_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_UpdateExternalSize_TypeFunction>>;
typedef Dart_UpdateExternalSize_TypeFunction = ffi.Void Function(
    Dart_WeakPersistentHandle object, ffi.IntPtr external_allocation_size);
typedef DartDart_UpdateExternalSize_TypeFunction = void Function(
    Dart_WeakPersistentHandle object, int external_allocation_size);
typedef Dart_NewFinalizableHandle_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_NewFinalizableHandle_TypeFunction>>;
typedef Dart_NewFinalizableHandle_TypeFunction
    = Dart_FinalizableHandle Function(
        ffi.Handle object,
        ffi.Pointer<ffi.Void> peer,
        ffi.IntPtr external_allocation_size,
        Dart_HandleFinalizer callback);
typedef DartDart_NewFinalizableHandle_TypeFunction
    = Dart_FinalizableHandle Function(Object object, ffi.Pointer<ffi.Void> peer,
        int external_allocation_size, Dart_HandleFinalizer callback);
typedef Dart_DeleteFinalizableHandle_Type = ffi
    .Pointer<ffi.NativeFunction<Dart_DeleteFinalizableHandle_TypeFunction>>;
typedef Dart_DeleteFinalizableHandle_TypeFunction = ffi.Void Function(
    Dart_FinalizableHandle object, ffi.Handle strong_ref_to_object);
typedef DartDart_DeleteFinalizableHandle_TypeFunction = void Function(
    Dart_FinalizableHandle object, Object strong_ref_to_object);
typedef Dart_UpdateFinalizableExternalSize_Type = ffi.Pointer<
    ffi.NativeFunction<Dart_UpdateFinalizableExternalSize_TypeFunction>>;
typedef Dart_UpdateFinalizableExternalSize_TypeFunction = ffi.Void Function(
    Dart_FinalizableHandle object,
    ffi.Handle strong_ref_to_object,
    ffi.IntPtr external_allocation_size);
typedef DartDart_UpdateFinalizableExternalSize_TypeFunction = void Function(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
    int external_allocation_size);
typedef Dart_Post_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_Post_TypeFunction>>;
typedef Dart_Post_TypeFunction = ffi.Bool Function(
    Dart_Port_DL port_id, ffi.Handle object);
typedef DartDart_Post_TypeFunction = bool Function(
    DartDart_Port_DL port_id, Object object);
typedef Dart_NewSendPort_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_NewSendPort_TypeFunction>>;
typedef Dart_NewSendPort_TypeFunction = ffi.Handle Function(
    Dart_Port_DL port_id);
typedef DartDart_NewSendPort_TypeFunction = Object Function(
    DartDart_Port_DL port_id);
typedef Dart_SendPortGetId_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_SendPortGetId_TypeFunction>>;
typedef Dart_SendPortGetId_TypeFunction = ffi.Handle Function(
    ffi.Handle port, ffi.Pointer<Dart_Port_DL> port_id);
typedef DartDart_SendPortGetId_TypeFunction = Object Function(
    Object port, ffi.Pointer<Dart_Port_DL> port_id);
typedef Dart_EnterScope_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_EnterScope_TypeFunction>>;
typedef Dart_EnterScope_TypeFunction = ffi.Void Function();
typedef DartDart_EnterScope_TypeFunction = void Function();
typedef Dart_ExitScope_Type
    = ffi.Pointer<ffi.NativeFunction<Dart_ExitScope_TypeFunction>>;
typedef Dart_ExitScope_TypeFunction = ffi.Void Function();
typedef DartDart_ExitScope_TypeFunction = void Function();

/// The type of message being sent to a Dart port. See CUPHTTPClientDelegate.
enum MessageType {
  ResponseMessage(0),
  DataMessage(1),
  CompletedMessage(2),
  RedirectMessage(3),
  FinishedDownloading(4),
  WebSocketOpened(5),
  WebSocketClosed(6);

  final int value;
  const MessageType(this.value);

  static MessageType fromValue(int value) => switch (value) {
        0 => ResponseMessage,
        1 => DataMessage,
        2 => CompletedMessage,
        3 => RedirectMessage,
        4 => FinishedDownloading,
        5 => WebSocketOpened,
        6 => WebSocketClosed,
        _ => throw ArgumentError("Unknown value for MessageType: $value"),
      };
}

/// The configuration associated with a NSURLSessionTask.
/// See CUPHTTPClientDelegate.
class CUPHTTPTaskConfiguration extends objc.NSObject {
  CUPHTTPTaskConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPTaskConfiguration] that points to the same underlying object as [other].
  CUPHTTPTaskConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPTaskConfiguration] that wraps the given raw object pointer.
  CUPHTTPTaskConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPTaskConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPTaskConfiguration);
  }

  /// initWithPort:
  objc.ObjCObjectBase initWithPort_(DartDart_Port sendPort) {
    final _ret = _objc_msgSend_246(this.pointer, _sel_initWithPort_, sendPort);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// sendPort
  DartDart_Port get sendPort {
    return _objc_msgSend_72(this.pointer, _sel_sendPort);
  }

  /// init
  CUPHTTPTaskConfiguration init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPTaskConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPTaskConfiguration new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPTaskConfiguration, _sel_new);
    return CUPHTTPTaskConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPTaskConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPTaskConfiguration, _sel_allocWithZone_, zone);
    return CUPHTTPTaskConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPTaskConfiguration alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPTaskConfiguration, _sel_alloc);
    return CUPHTTPTaskConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPTaskConfiguration =
    objc.getClass("CUPHTTPTaskConfiguration");
late final _sel_initWithPort_ = objc.registerName("initWithPort:");
final _objc_msgSend_246 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, Dart_Port)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_sendPort = objc.registerName("sendPort");

/// A delegate for NSURLSession that forwards events for registered
/// NSURLSessionTasks and forwards them to a port for consumption in Dart.
///
/// The messages sent to the port are contained in a List with one of 3
/// possible formats:
///
/// 1. When the delegate receives a HTTP redirect response:
/// [MessageType::RedirectMessage, <int: pointer to CUPHTTPForwardedRedirect>]
///
/// 2. When the delegate receives a HTTP response:
/// [MessageType::ResponseMessage, <int: pointer to CUPHTTPForwardedResponse>]
///
/// 3. When the delegate receives some HTTP data:
/// [MessageType::DataMessage, <int: pointer to CUPHTTPForwardedData>]
///
/// 4. When the delegate is informed that the response is complete:
/// [MessageType::CompletedMessage, <int: pointer to CUPHTTPForwardedComplete>]
class CUPHTTPClientDelegate extends objc.NSObject {
  CUPHTTPClientDelegate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPClientDelegate] that points to the same underlying object as [other].
  CUPHTTPClientDelegate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPClientDelegate] that wraps the given raw object pointer.
  CUPHTTPClientDelegate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPClientDelegate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPClientDelegate);
  }

  /// Instruct the delegate to forward events for the given task to the port
  /// specified in the configuration.
  void registerTask_withConfiguration_(
      NSURLSessionTask task, CUPHTTPTaskConfiguration config) {
    _objc_msgSend_247(this.pointer, _sel_registerTask_withConfiguration_,
        task.pointer, config.pointer);
  }

  /// init
  CUPHTTPClientDelegate init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPClientDelegate.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPClientDelegate new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPClientDelegate, _sel_new);
    return CUPHTTPClientDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPClientDelegate allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPClientDelegate, _sel_allocWithZone_, zone);
    return CUPHTTPClientDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPClientDelegate alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPClientDelegate, _sel_alloc);
    return CUPHTTPClientDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPClientDelegate =
    objc.getClass("CUPHTTPClientDelegate");
late final _sel_registerTask_withConfiguration_ =
    objc.registerName("registerTask:withConfiguration:");
final _objc_msgSend_247 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// An object used to communicate redirect information to Dart code.
///
/// The flow is:
/// 1. CUPHTTPClientDelegate receives a message from the URL Loading System.
/// 2. CUPHTTPClientDelegate creates a new CUPHTTPForwardedDelegate subclass.
/// 3. CUPHTTPClientDelegate sends the CUPHTTPForwardedDelegate to the
/// configured Dart_Port.
/// 4. CUPHTTPClientDelegate waits on CUPHTTPForwardedDelegate.lock
/// 5. When the Dart code is done process the message received on the port,
/// it calls [CUPHTTPForwardedDelegate finish*], which releases the lock.
/// 6. CUPHTTPClientDelegate continues running.
class CUPHTTPForwardedDelegate extends objc.NSObject {
  CUPHTTPForwardedDelegate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedDelegate] that points to the same underlying object as [other].
  CUPHTTPForwardedDelegate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedDelegate] that wraps the given raw object pointer.
  CUPHTTPForwardedDelegate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedDelegate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPForwardedDelegate);
  }

  /// initWithSession:task:
  objc.ObjCObjectBase initWithSession_task_(
      NSURLSession session, NSURLSessionTask task) {
    final _ret = _objc_msgSend_248(this.pointer, _sel_initWithSession_task_,
        session.pointer, task.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// Indicates that the task should continue executing using the given request.
  void finish() {
    _objc_msgSend_44(this.pointer, _sel_finish);
  }

  /// session
  NSURLSession get session {
    final _ret = _objc_msgSend_137(this.pointer, _sel_session);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// task
  NSURLSessionTask get task {
    final _ret = _objc_msgSend_249(this.pointer, _sel_task);
    return NSURLSessionTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// This property is meant to be used only by CUPHTTPClientDelegate.
  NSLock get lock {
    final _ret = _objc_msgSend_250(this.pointer, _sel_lock);
    return NSLock.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedDelegate init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedDelegate.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedDelegate new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedDelegate, _sel_new);
    return CUPHTTPForwardedDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedDelegate allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedDelegate, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedDelegate alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedDelegate, _sel_alloc);
    return CUPHTTPForwardedDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedDelegate =
    objc.getClass("CUPHTTPForwardedDelegate");
late final _sel_initWithSession_task_ =
    objc.registerName("initWithSession:task:");
final _objc_msgSend_248 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_finish = objc.registerName("finish");
late final _sel_session = objc.registerName("session");
late final _sel_task = objc.registerName("task");
final _objc_msgSend_249 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSLock
class NSLock extends objc.ObjCObjectBase {
  NSLock._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSLock] that points to the same underlying object as [other].
  NSLock.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSLock] that wraps the given raw object pointer.
  NSLock.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLock].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSLock);
  }
}

late final _class_NSLock = objc.getClass("NSLock");
late final _sel_lock = objc.registerName("lock");
final _objc_msgSend_250 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// CUPHTTPForwardedRedirect
class CUPHTTPForwardedRedirect extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedRedirect._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedRedirect] that points to the same underlying object as [other].
  CUPHTTPForwardedRedirect.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedRedirect] that wraps the given raw object pointer.
  CUPHTTPForwardedRedirect.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedRedirect].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPForwardedRedirect);
  }

  /// initWithSession:task:response:request:
  objc.ObjCObjectBase initWithSession_task_response_request_(
      NSURLSession session,
      NSURLSessionTask task,
      NSHTTPURLResponse response,
      NSURLRequest request) {
    final _ret = _objc_msgSend_251(
        this.pointer,
        _sel_initWithSession_task_response_request_,
        session.pointer,
        task.pointer,
        response.pointer,
        request.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// Indicates that the task should continue executing using the given request.
  /// If the request is NIL then the redirect is not followed and the task is
  /// complete.
  void finishWithRequest_(NSURLRequest? request) {
    _objc_msgSend_252(
        this.pointer, _sel_finishWithRequest_, request?.pointer ?? ffi.nullptr);
  }

  /// response
  NSHTTPURLResponse get response {
    final _ret = _objc_msgSend_253(this.pointer, _sel_response);
    return NSHTTPURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// request
  NSURLRequest get request {
    final _ret = _objc_msgSend_192(this.pointer, _sel_request);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// This property is meant to be used only by CUPHTTPClientDelegate.
  NSURLRequest get redirectRequest {
    final _ret = _objc_msgSend_192(this.pointer, _sel_redirectRequest);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedRedirect init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedRedirect.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedRedirect new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedRedirect, _sel_new);
    return CUPHTTPForwardedRedirect.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedRedirect allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedRedirect, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedRedirect.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedRedirect alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedRedirect, _sel_alloc);
    return CUPHTTPForwardedRedirect.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedRedirect =
    objc.getClass("CUPHTTPForwardedRedirect");
late final _sel_initWithSession_task_response_request_ =
    objc.registerName("initWithSession:task:response:request:");
final _objc_msgSend_251 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_finishWithRequest_ = objc.registerName("finishWithRequest:");
final _objc_msgSend_252 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_253 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_redirectRequest = objc.registerName("redirectRequest");

/// CUPHTTPForwardedResponse
class CUPHTTPForwardedResponse extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedResponse] that points to the same underlying object as [other].
  CUPHTTPForwardedResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedResponse] that wraps the given raw object pointer.
  CUPHTTPForwardedResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPForwardedResponse);
  }

  /// initWithSession:task:response:
  objc.ObjCObjectBase initWithSession_task_response_(
      NSURLSession session, NSURLSessionTask task, NSURLResponse response) {
    final _ret = _objc_msgSend_254(
        this.pointer,
        _sel_initWithSession_task_response_,
        session.pointer,
        task.pointer,
        response.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// finishWithDisposition:
  void finishWithDisposition_(NSURLSessionResponseDisposition disposition) {
    _objc_msgSend_255(
        this.pointer, _sel_finishWithDisposition_, disposition.value);
  }

  /// response
  NSURLResponse get response {
    final _ret = _objc_msgSend_22(this.pointer, _sel_response);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// This property is meant to be used only by CUPHTTPClientDelegate.
  NSURLSessionResponseDisposition get disposition {
    final _ret = _objc_msgSend_256(this.pointer, _sel_disposition);
    return NSURLSessionResponseDisposition.fromValue(_ret);
  }

  /// init
  CUPHTTPForwardedResponse init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedResponse new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedResponse, _sel_new);
    return CUPHTTPForwardedResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedResponse, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedResponse alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedResponse, _sel_alloc);
    return CUPHTTPForwardedResponse.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedResponse =
    objc.getClass("CUPHTTPForwardedResponse");
late final _sel_initWithSession_task_response_ =
    objc.registerName("initWithSession:task:response:");
final _objc_msgSend_254 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_finishWithDisposition_ =
    objc.registerName("finishWithDisposition:");
final _objc_msgSend_255 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSInteger)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_disposition = objc.registerName("disposition");
final _objc_msgSend_256 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSInteger Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// CUPHTTPForwardedData
class CUPHTTPForwardedData extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedData._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedData] that points to the same underlying object as [other].
  CUPHTTPForwardedData.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedData] that wraps the given raw object pointer.
  CUPHTTPForwardedData.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedData].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPForwardedData);
  }

  /// initWithSession:task:data:
  objc.ObjCObjectBase initWithSession_task_data_(
      NSURLSession session, NSURLSessionTask task, objc.NSData data) {
    final _ret = _objc_msgSend_257(
        this.pointer,
        _sel_initWithSession_task_data_,
        session.pointer,
        task.pointer,
        data.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// data
  objc.NSData get data {
    final _ret = _objc_msgSend_23(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedData init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedData.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedData new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedData, _sel_new);
    return CUPHTTPForwardedData.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedData allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_CUPHTTPForwardedData, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedData.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedData alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedData, _sel_alloc);
    return CUPHTTPForwardedData.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedData = objc.getClass("CUPHTTPForwardedData");
late final _sel_initWithSession_task_data_ =
    objc.registerName("initWithSession:task:data:");
final _objc_msgSend_257 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// CUPHTTPForwardedComplete
class CUPHTTPForwardedComplete extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedComplete._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedComplete] that points to the same underlying object as [other].
  CUPHTTPForwardedComplete.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedComplete] that wraps the given raw object pointer.
  CUPHTTPForwardedComplete.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedComplete].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CUPHTTPForwardedComplete);
  }

  /// initWithSession:task:error:
  objc.ObjCObjectBase initWithSession_task_error_(
      NSURLSession session, NSURLSessionTask task, objc.NSError? error) {
    final _ret = _objc_msgSend_258(
        this.pointer,
        _sel_initWithSession_task_error_,
        session.pointer,
        task.pointer,
        error?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_49(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedComplete init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedComplete.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedComplete new1() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedComplete, _sel_new);
    return CUPHTTPForwardedComplete.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedComplete allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedComplete, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedComplete.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedComplete alloc() {
    final _ret = _objc_msgSend_6(_class_CUPHTTPForwardedComplete, _sel_alloc);
    return CUPHTTPForwardedComplete.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedComplete =
    objc.getClass("CUPHTTPForwardedComplete");
late final _sel_initWithSession_task_error_ =
    objc.registerName("initWithSession:task:error:");
final _objc_msgSend_258 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// CUPHTTPForwardedFinishedDownloading
class CUPHTTPForwardedFinishedDownloading extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedFinishedDownloading._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedFinishedDownloading] that points to the same underlying object as [other].
  CUPHTTPForwardedFinishedDownloading.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedFinishedDownloading] that wraps the given raw object pointer.
  CUPHTTPForwardedFinishedDownloading.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedFinishedDownloading].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_CUPHTTPForwardedFinishedDownloading);
  }

  /// initWithSession:downloadTask:url:
  objc.ObjCObjectBase initWithSession_downloadTask_url_(NSURLSession session,
      NSURLSessionDownloadTask downloadTask, objc.NSURL location) {
    final _ret = _objc_msgSend_259(
        this.pointer,
        _sel_initWithSession_downloadTask_url_,
        session.pointer,
        downloadTask.pointer,
        location.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// location
  objc.NSURL get location {
    final _ret = _objc_msgSend_260(this.pointer, _sel_location);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedFinishedDownloading init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedFinishedDownloading.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedFinishedDownloading new1() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPForwardedFinishedDownloading, _sel_new);
    return CUPHTTPForwardedFinishedDownloading.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedFinishedDownloading allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedFinishedDownloading, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedFinishedDownloading.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedFinishedDownloading alloc() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPForwardedFinishedDownloading, _sel_alloc);
    return CUPHTTPForwardedFinishedDownloading.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedFinishedDownloading =
    objc.getClass("CUPHTTPForwardedFinishedDownloading");
late final _sel_initWithSession_downloadTask_url_ =
    objc.registerName("initWithSession:downloadTask:url:");
final _objc_msgSend_259 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_location = objc.registerName("location");
final _objc_msgSend_260 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// CUPHTTPForwardedWebSocketOpened
class CUPHTTPForwardedWebSocketOpened extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedWebSocketOpened._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedWebSocketOpened] that points to the same underlying object as [other].
  CUPHTTPForwardedWebSocketOpened.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedWebSocketOpened] that wraps the given raw object pointer.
  CUPHTTPForwardedWebSocketOpened.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedWebSocketOpened].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_CUPHTTPForwardedWebSocketOpened);
  }

  /// initWithSession:webSocketTask:didOpenWithProtocol:
  objc.ObjCObjectBase initWithSession_webSocketTask_didOpenWithProtocol_(
      NSURLSession session,
      NSURLSessionWebSocketTask webSocketTask,
      objc.NSString? protocol) {
    final _ret = _objc_msgSend_261(
        this.pointer,
        _sel_initWithSession_webSocketTask_didOpenWithProtocol_,
        session.pointer,
        webSocketTask.pointer,
        protocol?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// protocol
  objc.NSString? get protocol {
    final _ret = _objc_msgSend_18(this.pointer, _sel_protocol);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedWebSocketOpened init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedWebSocketOpened.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedWebSocketOpened new1() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPForwardedWebSocketOpened, _sel_new);
    return CUPHTTPForwardedWebSocketOpened.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedWebSocketOpened allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedWebSocketOpened, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedWebSocketOpened.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedWebSocketOpened alloc() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPForwardedWebSocketOpened, _sel_alloc);
    return CUPHTTPForwardedWebSocketOpened.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedWebSocketOpened =
    objc.getClass("CUPHTTPForwardedWebSocketOpened");
late final _sel_initWithSession_webSocketTask_didOpenWithProtocol_ =
    objc.registerName("initWithSession:webSocketTask:didOpenWithProtocol:");
final _objc_msgSend_261 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_protocol = objc.registerName("protocol");

/// CUPHTTPForwardedWebSocketClosed
class CUPHTTPForwardedWebSocketClosed extends CUPHTTPForwardedDelegate {
  CUPHTTPForwardedWebSocketClosed._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPForwardedWebSocketClosed] that points to the same underlying object as [other].
  CUPHTTPForwardedWebSocketClosed.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPForwardedWebSocketClosed] that wraps the given raw object pointer.
  CUPHTTPForwardedWebSocketClosed.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPForwardedWebSocketClosed].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_CUPHTTPForwardedWebSocketClosed);
  }

  /// initWithSession:webSocketTask:code:reason:
  objc.ObjCObjectBase initWithSession_webSocketTask_code_reason_(
      NSURLSession session,
      NSURLSessionWebSocketTask webSocketTask,
      NSURLSessionWebSocketCloseCode closeCode,
      objc.NSData reason) {
    final _ret = _objc_msgSend_262(
        this.pointer,
        _sel_initWithSession_webSocketTask_code_reason_,
        session.pointer,
        webSocketTask.pointer,
        closeCode.value,
        reason.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// closeCode
  NSURLSessionWebSocketCloseCode get closeCode {
    final _ret = _objc_msgSend_177(this.pointer, _sel_closeCode);
    return NSURLSessionWebSocketCloseCode.fromValue(_ret);
  }

  /// reason
  objc.NSData? get reason {
    final _ret = _objc_msgSend_37(this.pointer, _sel_reason);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CUPHTTPForwardedWebSocketClosed init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPForwardedWebSocketClosed.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPForwardedWebSocketClosed new1() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPForwardedWebSocketClosed, _sel_new);
    return CUPHTTPForwardedWebSocketClosed.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPForwardedWebSocketClosed allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPForwardedWebSocketClosed, _sel_allocWithZone_, zone);
    return CUPHTTPForwardedWebSocketClosed.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPForwardedWebSocketClosed alloc() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPForwardedWebSocketClosed, _sel_alloc);
    return CUPHTTPForwardedWebSocketClosed.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPForwardedWebSocketClosed =
    objc.getClass("CUPHTTPForwardedWebSocketClosed");
late final _sel_initWithSession_webSocketTask_code_reason_ =
    objc.registerName("initWithSession:webSocketTask:code:reason:");
final _objc_msgSend_262 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                NSInteger,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSStreamEvent {
  NSStreamEventNone(0),
  NSStreamEventOpenCompleted(1),
  NSStreamEventHasBytesAvailable(2),
  NSStreamEventHasSpaceAvailable(4),
  NSStreamEventErrorOccurred(8),
  NSStreamEventEndEncountered(16);

  final int value;
  const NSStreamEvent(this.value);

  static NSStreamEvent fromValue(int value) => switch (value) {
        0 => NSStreamEventNone,
        1 => NSStreamEventOpenCompleted,
        2 => NSStreamEventHasBytesAvailable,
        4 => NSStreamEventHasSpaceAvailable,
        8 => NSStreamEventErrorOccurred,
        16 => NSStreamEventEndEncountered,
        _ => throw ArgumentError("Unknown value for NSStreamEvent: $value"),
      };
}

/// NSStreamDelegate
abstract final class NSStreamDelegate {
  /// Builds an object that implements the NSStreamDelegate protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {void Function(NSStream, NSStreamEvent)? stream_handleEvent_}) {
    final builder = objc.ObjCProtocolBuilder();
    builder.implementMethod(
        NSStreamDelegate.stream_handleEvent_, stream_handleEvent_);
    return builder.build();
  }

  /// Adds the implementation of the NSStreamDelegate protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {void Function(NSStream, NSStreamEvent)? stream_handleEvent_}) {
    builder.implementMethod(
        NSStreamDelegate.stream_handleEvent_, stream_handleEvent_);
  }

  /// stream:handleEvent:
  static final stream_handleEvent_ = objc.ObjCProtocolListenableMethod(
    _sel_stream_handleEvent_,
    objc.getProtocolMethodSignature(
      _protocol_NSStreamDelegate,
      _sel_stream_handleEvent_,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (Function func) => func is void Function(NSStream, NSStreamEvent),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent.fromFunction(
            (ffi.Pointer<ffi.Void> _, NSStream arg1, NSStreamEvent arg2) =>
                func(arg1, arg2)),
    (Function func) =>
        ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent.listener(
            (ffi.Pointer<ffi.Void> _, NSStream arg1, NSStreamEvent arg2) =>
                func(arg1, arg2)),
  );
}

late final _protocol_NSStreamDelegate = objc.getProtocol("NSStreamDelegate");
late final _sel_stream_handleEvent_ = objc.registerName("stream:handleEvent:");
void _ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        int arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1, NSUInteger arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>,
                int)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        int arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>, int))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1, NSUInteger arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            NSUInteger)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, NSStream, NSStreamEvent) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<objc.ObjCObject>,
                            NSUInteger)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1, int arg2) =>
                fn(
                    arg0,
                    NSStream.castFromPointer(arg1, retain: true, release: true),
                    NSStreamEvent.fromValue(arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent.listener(
      void Function(ffi.Pointer<ffi.Void>, NSStream, NSStreamEvent) fn)
      : this._(wrapListenerBlock_ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent(
            objc.newClosureBlock(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<ffi.Void>,
                                ffi.Pointer<objc.ObjCObject>,
                                NSUInteger)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoid_NSStream_NSStreamEvent_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                        int arg2) =>
                    fn(arg0, NSStream.castFromPointer(arg1, retain: false, release: true), NSStreamEvent.fromValue(arg2)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          NSUInteger)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, NSStream arg1, NSStreamEvent arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      NSUInteger arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCObject>,
                  int)>()(pointer, arg0, arg1.pointer, arg2.value);
}

typedef NSStreamSocketSecurityLevel = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStreamSocketSecurityLevel = objc.NSString;
typedef NSStreamSOCKSProxyConfiguration = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStreamSOCKSProxyConfiguration = objc.NSString;
typedef NSStreamSOCKSProxyVersion = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStreamSOCKSProxyVersion = objc.NSString;
typedef NSErrorDomain1 = ffi.Pointer<objc.ObjCObject>;
typedef DartNSErrorDomain1 = objc.NSString;
typedef NSStreamNetworkServiceTypeValue = ffi.Pointer<objc.ObjCObject>;
typedef DartNSStreamNetworkServiceTypeValue = objc.NSString;

/// A helper to convert a Dart Stream<List<int>> into an Objective-C input stream.
class CUPHTTPStreamToNSInputStreamAdapter extends NSInputStream {
  CUPHTTPStreamToNSInputStreamAdapter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CUPHTTPStreamToNSInputStreamAdapter] that points to the same underlying object as [other].
  CUPHTTPStreamToNSInputStreamAdapter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CUPHTTPStreamToNSInputStreamAdapter] that wraps the given raw object pointer.
  CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CUPHTTPStreamToNSInputStreamAdapter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_CUPHTTPStreamToNSInputStreamAdapter);
  }

  /// initWithPort:
  CUPHTTPStreamToNSInputStreamAdapter initWithPort_(DartDart_Port sendPort) {
    final _ret = _objc_msgSend_246(this.pointer, _sel_initWithPort_, sendPort);
    return CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// addData:
  DartNSUInteger addData_(objc.NSData data) {
    return _objc_msgSend_263(this.pointer, _sel_addData_, data.pointer);
  }

  /// setDone
  void setDone() {
    _objc_msgSend_44(this.pointer, _sel_setDone);
  }

  /// setError:
  void setError_(objc.NSError error) {
    _objc_msgSend_264(this.pointer, _sel_setError_, error.pointer);
  }

  /// initWithData:
  CUPHTTPStreamToNSInputStreamAdapter initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_40(this.pointer, _sel_initWithData_, data.pointer);
    return CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithURL:
  CUPHTTPStreamToNSInputStreamAdapter? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_41(this.pointer, _sel_initWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithFileAtPath:
  CUPHTTPStreamToNSInputStreamAdapter? initWithFileAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// inputStreamWithData:
  static CUPHTTPStreamToNSInputStreamAdapter? inputStreamWithData_(
      objc.NSData data) {
    final _ret = _objc_msgSend_43(_class_CUPHTTPStreamToNSInputStreamAdapter,
        _sel_inputStreamWithData_, data.pointer);
    return _ret.address == 0
        ? null
        : CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// inputStreamWithFileAtPath:
  static CUPHTTPStreamToNSInputStreamAdapter? inputStreamWithFileAtPath_(
      objc.NSString path) {
    final _ret = _objc_msgSend_42(_class_CUPHTTPStreamToNSInputStreamAdapter,
        _sel_inputStreamWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// inputStreamWithURL:
  static CUPHTTPStreamToNSInputStreamAdapter? inputStreamWithURL_(
      objc.NSURL url) {
    final _ret = _objc_msgSend_41(_class_CUPHTTPStreamToNSInputStreamAdapter,
        _sel_inputStreamWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_54(
        _class_CUPHTTPStreamToNSInputStreamAdapter,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      DartNSInteger port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_55(
        _class_CUPHTTPStreamToNSInputStreamAdapter,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      DartNSUInteger bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_56(
        _class_CUPHTTPStreamToNSInputStreamAdapter,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  /// init
  CUPHTTPStreamToNSInputStreamAdapter init() {
    final _ret = _objc_msgSend_6(this.pointer, _sel_init);
    return CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CUPHTTPStreamToNSInputStreamAdapter new1() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPStreamToNSInputStreamAdapter, _sel_new);
    return CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CUPHTTPStreamToNSInputStreamAdapter allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CUPHTTPStreamToNSInputStreamAdapter, _sel_allocWithZone_, zone);
    return CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CUPHTTPStreamToNSInputStreamAdapter alloc() {
    final _ret =
        _objc_msgSend_6(_class_CUPHTTPStreamToNSInputStreamAdapter, _sel_alloc);
    return CUPHTTPStreamToNSInputStreamAdapter.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CUPHTTPStreamToNSInputStreamAdapter =
    objc.getClass("CUPHTTPStreamToNSInputStreamAdapter");
late final _sel_addData_ = objc.registerName("addData:");
final _objc_msgSend_263 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSUInteger Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setDone = objc.registerName("setDone");
late final _sel_setError_ = objc.registerName("setError:");
final _objc_msgSend_264 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

const int noErr = 0;

const int kNilOptions = 0;

const int kVariableLengthArray = 1;

const int kUnknownType = 1061109567;

const int normal = 0;

const int bold = 1;

const int italic = 2;

const int underline = 4;

const int outline = 8;

const int shadow = 16;

const int condense = 32;

const int extend = 64;

const int developStage = 32;

const int alphaStage = 64;

const int betaStage = 96;

const int finalStage = 128;

const int NSScannedOption = 1;

const int NSCollectorDisabledOption = 2;

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;

const int errSSLProtocol = -9800;

const int errSSLNegotiation = -9801;

const int errSSLFatalAlert = -9802;

const int errSSLWouldBlock = -9803;

const int errSSLSessionNotFound = -9804;

const int errSSLClosedGraceful = -9805;

const int errSSLClosedAbort = -9806;

const int errSSLXCertChainInvalid = -9807;

const int errSSLBadCert = -9808;

const int errSSLCrypto = -9809;

const int errSSLInternal = -9810;

const int errSSLModuleAttach = -9811;

const int errSSLUnknownRootCert = -9812;

const int errSSLNoRootCert = -9813;

const int errSSLCertExpired = -9814;

const int errSSLCertNotYetValid = -9815;

const int errSSLClosedNoNotify = -9816;

const int errSSLBufferOverflow = -9817;

const int errSSLBadCipherSuite = -9818;

const int errSSLPeerUnexpectedMsg = -9819;

const int errSSLPeerBadRecordMac = -9820;

const int errSSLPeerDecryptionFail = -9821;

const int errSSLPeerRecordOverflow = -9822;

const int errSSLPeerDecompressFail = -9823;

const int errSSLPeerHandshakeFail = -9824;

const int errSSLPeerBadCert = -9825;

const int errSSLPeerUnsupportedCert = -9826;

const int errSSLPeerCertRevoked = -9827;

const int errSSLPeerCertExpired = -9828;

const int errSSLPeerCertUnknown = -9829;

const int errSSLIllegalParam = -9830;

const int errSSLPeerUnknownCA = -9831;

const int errSSLPeerAccessDenied = -9832;

const int errSSLPeerDecodeError = -9833;

const int errSSLPeerDecryptError = -9834;

const int errSSLPeerExportRestriction = -9835;

const int errSSLPeerProtocolVersion = -9836;

const int errSSLPeerInsufficientSecurity = -9837;

const int errSSLPeerInternalError = -9838;

const int errSSLPeerUserCancelled = -9839;

const int errSSLPeerNoRenegotiation = -9840;

const int errSSLPeerAuthCompleted = -9841;

const int errSSLClientCertRequested = -9842;

const int errSSLHostNameMismatch = -9843;

const int errSSLConnectionRefused = -9844;

const int errSSLDecryptionFail = -9845;

const int errSSLBadRecordMac = -9846;

const int errSSLRecordOverflow = -9847;

const int errSSLBadConfiguration = -9848;

const int errSSLUnexpectedRecord = -9849;

const int errSSLWeakPeerEphemeralDHKey = -9850;

const int errSSLClientHelloReceived = -9851;

const int errSSLTransportReset = -9852;

const int errSSLNetworkTimeout = -9853;

const int errSSLConfigurationFailed = -9854;

const int errSSLUnsupportedExtension = -9855;

const int errSSLUnexpectedMessage = -9856;

const int errSSLDecompressFail = -9857;

const int errSSLHandshakeFail = -9858;

const int errSSLDecodeError = -9859;

const int errSSLInappropriateFallback = -9860;

const int errSSLMissingExtension = -9861;

const int errSSLBadCertificateStatusResponse = -9862;

const int errSSLCertificateRequired = -9863;

const int errSSLUnknownPSKIdentity = -9864;

const int errSSLUnrecognizedName = -9865;

const int errSSLATSViolation = -9880;

const int errSSLATSMinimumVersionViolation = -9881;

const int errSSLATSCiphersuiteViolation = -9882;

const int errSSLATSMinimumKeySizeViolation = -9883;

const int errSSLATSLeafCertificateHashAlgorithmViolation = -9884;

const int errSSLATSCertificateHashAlgorithmViolation = -9885;

const int errSSLATSCertificateTrustViolation = -9886;

const int errSSLEarlyDataRejected = -9890;

const int OSUnknownByteOrder = 0;

const int OSLittleEndian = 1;

const int OSBigEndian = 2;

const int kCFNotificationDeliverImmediately = 1;

const int kCFNotificationPostToAllSessions = 2;

const int kCFCalendarComponentsWrap = 1;

const int kCFSocketAutomaticallyReenableReadCallBack = 1;

const int kCFSocketAutomaticallyReenableAcceptCallBack = 2;

const int kCFSocketAutomaticallyReenableDataCallBack = 3;

const int kCFSocketAutomaticallyReenableWriteCallBack = 8;

const int kCFSocketLeaveErrors = 64;

const int kCFSocketCloseOnInvalidate = 128;

const int DISPATCH_WALLTIME_NOW = -2;

const int kCFPropertyListReadCorruptError = 3840;

const int kCFPropertyListReadUnknownVersionError = 3841;

const int kCFPropertyListReadStreamError = 3842;

const int kCFPropertyListWriteStreamError = 3851;

const int kCFBundleExecutableArchitectureI386 = 7;

const int kCFBundleExecutableArchitecturePPC = 18;

const int kCFBundleExecutableArchitectureX86_64 = 16777223;

const int kCFBundleExecutableArchitecturePPC64 = 16777234;

const int kCFBundleExecutableArchitectureARM64 = 16777228;

const int kCFMessagePortSuccess = 0;

const int kCFMessagePortSendTimeout = -1;

const int kCFMessagePortReceiveTimeout = -2;

const int kCFMessagePortIsInvalid = -3;

const int kCFMessagePortTransportError = -4;

const int kCFMessagePortBecameInvalidError = -5;

const int kCFStringTokenizerUnitWord = 0;

const int kCFStringTokenizerUnitSentence = 1;

const int kCFStringTokenizerUnitParagraph = 2;

const int kCFStringTokenizerUnitLineBreak = 3;

const int kCFStringTokenizerUnitWordBoundary = 4;

const int kCFStringTokenizerAttributeLatinTranscription = 65536;

const int kCFStringTokenizerAttributeLanguage = 131072;

const int kCFFileDescriptorReadCallBack = 1;

const int kCFFileDescriptorWriteCallBack = 2;

const int kCFUserNotificationStopAlertLevel = 0;

const int kCFUserNotificationNoteAlertLevel = 1;

const int kCFUserNotificationCautionAlertLevel = 2;

const int kCFUserNotificationPlainAlertLevel = 3;

const int kCFUserNotificationDefaultResponse = 0;

const int kCFUserNotificationAlternateResponse = 1;

const int kCFUserNotificationOtherResponse = 2;

const int kCFUserNotificationCancelResponse = 3;

const int kCFUserNotificationNoDefaultButtonFlag = 32;

const int kCFUserNotificationUseRadioButtonsFlag = 64;

const int kCFXMLNodeCurrentVersion = 1;

const int CSSM_INVALID_HANDLE = 0;

const int CSSM_FALSE = 0;

const int CSSM_TRUE = 1;

const int CSSM_OK = 0;

const int CSSM_MODULE_STRING_SIZE = 64;

const int CSSM_KEY_HIERARCHY_NONE = 0;

const int CSSM_KEY_HIERARCHY_INTEG = 1;

const int CSSM_KEY_HIERARCHY_EXPORT = 2;

const int CSSM_PVC_NONE = 0;

const int CSSM_PVC_APP = 1;

const int CSSM_PVC_SP = 2;

const int CSSM_PRIVILEGE_SCOPE_NONE = 0;

const int CSSM_PRIVILEGE_SCOPE_PROCESS = 1;

const int CSSM_PRIVILEGE_SCOPE_THREAD = 2;

const int CSSM_SERVICE_CSSM = 1;

const int CSSM_SERVICE_CSP = 2;

const int CSSM_SERVICE_DL = 4;

const int CSSM_SERVICE_CL = 8;

const int CSSM_SERVICE_TP = 16;

const int CSSM_SERVICE_AC = 32;

const int CSSM_SERVICE_KR = 64;

const int CSSM_NOTIFY_INSERT = 1;

const int CSSM_NOTIFY_REMOVE = 2;

const int CSSM_NOTIFY_FAULT = 3;

const int CSSM_ATTACH_READ_ONLY = 1;

const int CSSM_USEE_LAST = 255;

const int CSSM_USEE_NONE = 0;

const int CSSM_USEE_DOMESTIC = 1;

const int CSSM_USEE_FINANCIAL = 2;

const int CSSM_USEE_KRLE = 3;

const int CSSM_USEE_KRENT = 4;

const int CSSM_USEE_SSL = 5;

const int CSSM_USEE_AUTHENTICATION = 6;

const int CSSM_USEE_KEYEXCH = 7;

const int CSSM_USEE_MEDICAL = 8;

const int CSSM_USEE_INSURANCE = 9;

const int CSSM_USEE_WEAK = 10;

const int CSSM_ADDR_NONE = 0;

const int CSSM_ADDR_CUSTOM = 1;

const int CSSM_ADDR_URL = 2;

const int CSSM_ADDR_SOCKADDR = 3;

const int CSSM_ADDR_NAME = 4;

const int CSSM_NET_PROTO_NONE = 0;

const int CSSM_NET_PROTO_CUSTOM = 1;

const int CSSM_NET_PROTO_UNSPECIFIED = 2;

const int CSSM_NET_PROTO_LDAP = 3;

const int CSSM_NET_PROTO_LDAPS = 4;

const int CSSM_NET_PROTO_LDAPNS = 5;

const int CSSM_NET_PROTO_X500DAP = 6;

const int CSSM_NET_PROTO_FTP = 7;

const int CSSM_NET_PROTO_FTPS = 8;

const int CSSM_NET_PROTO_OCSP = 9;

const int CSSM_NET_PROTO_CMP = 10;

const int CSSM_NET_PROTO_CMPS = 11;

const int CSSM_WORDID__UNK_ = -1;

const int CSSM_WORDID__NLU_ = 0;

const int CSSM_WORDID__STAR_ = 1;

const int CSSM_WORDID_A = 2;

const int CSSM_WORDID_ACL = 3;

const int CSSM_WORDID_ALPHA = 4;

const int CSSM_WORDID_B = 5;

const int CSSM_WORDID_BER = 6;

const int CSSM_WORDID_BINARY = 7;

const int CSSM_WORDID_BIOMETRIC = 8;

const int CSSM_WORDID_C = 9;

const int CSSM_WORDID_CANCELED = 10;

const int CSSM_WORDID_CERT = 11;

const int CSSM_WORDID_COMMENT = 12;

const int CSSM_WORDID_CRL = 13;

const int CSSM_WORDID_CUSTOM = 14;

const int CSSM_WORDID_D = 15;

const int CSSM_WORDID_DATE = 16;

const int CSSM_WORDID_DB_DELETE = 17;

const int CSSM_WORDID_DB_EXEC_STORED_QUERY = 18;

const int CSSM_WORDID_DB_INSERT = 19;

const int CSSM_WORDID_DB_MODIFY = 20;

const int CSSM_WORDID_DB_READ = 21;

const int CSSM_WORDID_DBS_CREATE = 22;

const int CSSM_WORDID_DBS_DELETE = 23;

const int CSSM_WORDID_DECRYPT = 24;

const int CSSM_WORDID_DELETE = 25;

const int CSSM_WORDID_DELTA_CRL = 26;

const int CSSM_WORDID_DER = 27;

const int CSSM_WORDID_DERIVE = 28;

const int CSSM_WORDID_DISPLAY = 29;

const int CSSM_WORDID_DO = 30;

const int CSSM_WORDID_DSA = 31;

const int CSSM_WORDID_DSA_SHA1 = 32;

const int CSSM_WORDID_E = 33;

const int CSSM_WORDID_ELGAMAL = 34;

const int CSSM_WORDID_ENCRYPT = 35;

const int CSSM_WORDID_ENTRY = 36;

const int CSSM_WORDID_EXPORT_CLEAR = 37;

const int CSSM_WORDID_EXPORT_WRAPPED = 38;

const int CSSM_WORDID_G = 39;

const int CSSM_WORDID_GE = 40;

const int CSSM_WORDID_GENKEY = 41;

const int CSSM_WORDID_HASH = 42;

const int CSSM_WORDID_HASHED_PASSWORD = 43;

const int CSSM_WORDID_HASHED_SUBJECT = 44;

const int CSSM_WORDID_HAVAL = 45;

const int CSSM_WORDID_IBCHASH = 46;

const int CSSM_WORDID_IMPORT_CLEAR = 47;

const int CSSM_WORDID_IMPORT_WRAPPED = 48;

const int CSSM_WORDID_INTEL = 49;

const int CSSM_WORDID_ISSUER = 50;

const int CSSM_WORDID_ISSUER_INFO = 51;

const int CSSM_WORDID_K_OF_N = 52;

const int CSSM_WORDID_KEA = 53;

const int CSSM_WORDID_KEYHOLDER = 54;

const int CSSM_WORDID_L = 55;

const int CSSM_WORDID_LE = 56;

const int CSSM_WORDID_LOGIN = 57;

const int CSSM_WORDID_LOGIN_NAME = 58;

const int CSSM_WORDID_MAC = 59;

const int CSSM_WORDID_MD2 = 60;

const int CSSM_WORDID_MD2WITHRSA = 61;

const int CSSM_WORDID_MD4 = 62;

const int CSSM_WORDID_MD5 = 63;

const int CSSM_WORDID_MD5WITHRSA = 64;

const int CSSM_WORDID_N = 65;

const int CSSM_WORDID_NAME = 66;

const int CSSM_WORDID_NDR = 67;

const int CSSM_WORDID_NHASH = 68;

const int CSSM_WORDID_NOT_AFTER = 69;

const int CSSM_WORDID_NOT_BEFORE = 70;

const int CSSM_WORDID_NULL = 71;

const int CSSM_WORDID_NUMERIC = 72;

const int CSSM_WORDID_OBJECT_HASH = 73;

const int CSSM_WORDID_ONE_TIME = 74;

const int CSSM_WORDID_ONLINE = 75;

const int CSSM_WORDID_OWNER = 76;

const int CSSM_WORDID_P = 77;

const int CSSM_WORDID_PAM_NAME = 78;

const int CSSM_WORDID_PASSWORD = 79;

const int CSSM_WORDID_PGP = 80;

const int CSSM_WORDID_PREFIX = 81;

const int CSSM_WORDID_PRIVATE_KEY = 82;

const int CSSM_WORDID_PROMPTED_BIOMETRIC = 83;

const int CSSM_WORDID_PROMPTED_PASSWORD = 84;

const int CSSM_WORDID_PROPAGATE = 85;

const int CSSM_WORDID_PROTECTED_BIOMETRIC = 86;

const int CSSM_WORDID_PROTECTED_PASSWORD = 87;

const int CSSM_WORDID_PROTECTED_PIN = 88;

const int CSSM_WORDID_PUBLIC_KEY = 89;

const int CSSM_WORDID_PUBLIC_KEY_FROM_CERT = 90;

const int CSSM_WORDID_Q = 91;

const int CSSM_WORDID_RANGE = 92;

const int CSSM_WORDID_REVAL = 93;

const int CSSM_WORDID_RIPEMAC = 94;

const int CSSM_WORDID_RIPEMD = 95;

const int CSSM_WORDID_RIPEMD160 = 96;

const int CSSM_WORDID_RSA = 97;

const int CSSM_WORDID_RSA_ISO9796 = 98;

const int CSSM_WORDID_RSA_PKCS = 99;

const int CSSM_WORDID_RSA_PKCS_MD5 = 100;

const int CSSM_WORDID_RSA_PKCS_SHA1 = 101;

const int CSSM_WORDID_RSA_PKCS1 = 102;

const int CSSM_WORDID_RSA_PKCS1_MD5 = 103;

const int CSSM_WORDID_RSA_PKCS1_SHA1 = 104;

const int CSSM_WORDID_RSA_PKCS1_SIG = 105;

const int CSSM_WORDID_RSA_RAW = 106;

const int CSSM_WORDID_SDSIV1 = 107;

const int CSSM_WORDID_SEQUENCE = 108;

const int CSSM_WORDID_SET = 109;

const int CSSM_WORDID_SEXPR = 110;

const int CSSM_WORDID_SHA1 = 111;

const int CSSM_WORDID_SHA1WITHDSA = 112;

const int CSSM_WORDID_SHA1WITHECDSA = 113;

const int CSSM_WORDID_SHA1WITHRSA = 114;

const int CSSM_WORDID_SIGN = 115;

const int CSSM_WORDID_SIGNATURE = 116;

const int CSSM_WORDID_SIGNED_NONCE = 117;

const int CSSM_WORDID_SIGNED_SECRET = 118;

const int CSSM_WORDID_SPKI = 119;

const int CSSM_WORDID_SUBJECT = 120;

const int CSSM_WORDID_SUBJECT_INFO = 121;

const int CSSM_WORDID_TAG = 122;

const int CSSM_WORDID_THRESHOLD = 123;

const int CSSM_WORDID_TIME = 124;

const int CSSM_WORDID_URI = 125;

const int CSSM_WORDID_VERSION = 126;

const int CSSM_WORDID_X509_ATTRIBUTE = 127;

const int CSSM_WORDID_X509V1 = 128;

const int CSSM_WORDID_X509V2 = 129;

const int CSSM_WORDID_X509V3 = 130;

const int CSSM_WORDID_X9_ATTRIBUTE = 131;

const int CSSM_WORDID_VENDOR_START = 65536;

const int CSSM_WORDID_VENDOR_END = 2147418112;

const int CSSM_LIST_ELEMENT_DATUM = 0;

const int CSSM_LIST_ELEMENT_SUBLIST = 1;

const int CSSM_LIST_ELEMENT_WORDID = 2;

const int CSSM_LIST_TYPE_UNKNOWN = 0;

const int CSSM_LIST_TYPE_CUSTOM = 1;

const int CSSM_LIST_TYPE_SEXPR = 2;

const int CSSM_SAMPLE_TYPE_PASSWORD = 79;

const int CSSM_SAMPLE_TYPE_HASHED_PASSWORD = 43;

const int CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_SAMPLE_TYPE_SIGNED_NONCE = 117;

const int CSSM_SAMPLE_TYPE_SIGNED_SECRET = 118;

const int CSSM_SAMPLE_TYPE_BIOMETRIC = 8;

const int CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_SAMPLE_TYPE_THRESHOLD = 123;

const int CSSM_CERT_UNKNOWN = 0;

const int CSSM_CERT_X_509v1 = 1;

const int CSSM_CERT_X_509v2 = 2;

const int CSSM_CERT_X_509v3 = 3;

const int CSSM_CERT_PGP = 4;

const int CSSM_CERT_SPKI = 5;

const int CSSM_CERT_SDSIv1 = 6;

const int CSSM_CERT_Intel = 8;

const int CSSM_CERT_X_509_ATTRIBUTE = 9;

const int CSSM_CERT_X9_ATTRIBUTE = 10;

const int CSSM_CERT_TUPLE = 11;

const int CSSM_CERT_ACL_ENTRY = 12;

const int CSSM_CERT_MULTIPLE = 32766;

const int CSSM_CERT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_TYPE = 32768;

const int CSSM_CERT_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_ENCODING_CUSTOM = 1;

const int CSSM_CERT_ENCODING_BER = 2;

const int CSSM_CERT_ENCODING_DER = 3;

const int CSSM_CERT_ENCODING_NDR = 4;

const int CSSM_CERT_ENCODING_SEXPR = 5;

const int CSSM_CERT_ENCODING_PGP = 6;

const int CSSM_CERT_ENCODING_MULTIPLE = 32766;

const int CSSM_CERT_ENCODING_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_ENCODING = 32768;

const int CSSM_CERT_PARSE_FORMAT_NONE = 0;

const int CSSM_CERT_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CERT_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CERT_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CERT_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CERT_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CERT_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CERT_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_PARSE_FORMAT = 32768;

const int CSSM_CERTGROUP_DATA = 0;

const int CSSM_CERTGROUP_ENCODED_CERT = 1;

const int CSSM_CERTGROUP_PARSED_CERT = 2;

const int CSSM_CERTGROUP_CERT_PAIR = 3;

const int CSSM_ACL_SUBJECT_TYPE_ANY = 1;

const int CSSM_ACL_SUBJECT_TYPE_THRESHOLD = 123;

const int CSSM_ACL_SUBJECT_TYPE_PASSWORD = 79;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY = 89;

const int CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT = 44;

const int CSSM_ACL_SUBJECT_TYPE_BIOMETRIC = 8;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME = 58;

const int CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME = 78;

const int CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START = 65536;

const int CSSM_ACL_AUTHORIZATION_ANY = 1;

const int CSSM_ACL_AUTHORIZATION_LOGIN = 57;

const int CSSM_ACL_AUTHORIZATION_GENKEY = 41;

const int CSSM_ACL_AUTHORIZATION_DELETE = 25;

const int CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED = 38;

const int CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR = 37;

const int CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED = 48;

const int CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR = 47;

const int CSSM_ACL_AUTHORIZATION_SIGN = 115;

const int CSSM_ACL_AUTHORIZATION_ENCRYPT = 35;

const int CSSM_ACL_AUTHORIZATION_DECRYPT = 24;

const int CSSM_ACL_AUTHORIZATION_MAC = 59;

const int CSSM_ACL_AUTHORIZATION_DERIVE = 28;

const int CSSM_ACL_AUTHORIZATION_DBS_CREATE = 22;

const int CSSM_ACL_AUTHORIZATION_DBS_DELETE = 23;

const int CSSM_ACL_AUTHORIZATION_DB_READ = 21;

const int CSSM_ACL_AUTHORIZATION_DB_INSERT = 19;

const int CSSM_ACL_AUTHORIZATION_DB_MODIFY = 20;

const int CSSM_ACL_AUTHORIZATION_DB_DELETE = 17;

const int CSSM_ACL_EDIT_MODE_ADD = 1;

const int CSSM_ACL_EDIT_MODE_DELETE = 2;

const int CSSM_ACL_EDIT_MODE_REPLACE = 3;

const int CSSM_KEYHEADER_VERSION = 2;

const int CSSM_KEYBLOB_RAW = 0;

const int CSSM_KEYBLOB_REFERENCE = 2;

const int CSSM_KEYBLOB_WRAPPED = 3;

const int CSSM_KEYBLOB_OTHER = -1;

const int CSSM_KEYBLOB_RAW_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS1 = 1;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS3 = 2;

const int CSSM_KEYBLOB_RAW_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_RAW_FORMAT_PGP = 4;

const int CSSM_KEYBLOB_RAW_FORMAT_FIPS186 = 5;

const int CSSM_KEYBLOB_RAW_FORMAT_BSAFE = 6;

const int CSSM_KEYBLOB_RAW_FORMAT_CCA = 9;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS8 = 10;

const int CSSM_KEYBLOB_RAW_FORMAT_SPKI = 11;

const int CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING = 12;

const int CSSM_KEYBLOB_RAW_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8 = 1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7 = 2;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_REF_FORMAT_INTEGER = 0;

const int CSSM_KEYBLOB_REF_FORMAT_STRING = 1;

const int CSSM_KEYBLOB_REF_FORMAT_SPKI = 2;

const int CSSM_KEYBLOB_REF_FORMAT_OTHER = -1;

const int CSSM_KEYCLASS_PUBLIC_KEY = 0;

const int CSSM_KEYCLASS_PRIVATE_KEY = 1;

const int CSSM_KEYCLASS_SESSION_KEY = 2;

const int CSSM_KEYCLASS_SECRET_PART = 3;

const int CSSM_KEYCLASS_OTHER = -1;

const int CSSM_KEYATTR_RETURN_DEFAULT = 0;

const int CSSM_KEYATTR_RETURN_DATA = 268435456;

const int CSSM_KEYATTR_RETURN_REF = 536870912;

const int CSSM_KEYATTR_RETURN_NONE = 1073741824;

const int CSSM_KEYATTR_PERMANENT = 1;

const int CSSM_KEYATTR_PRIVATE = 2;

const int CSSM_KEYATTR_MODIFIABLE = 4;

const int CSSM_KEYATTR_SENSITIVE = 8;

const int CSSM_KEYATTR_EXTRACTABLE = 32;

const int CSSM_KEYATTR_ALWAYS_SENSITIVE = 16;

const int CSSM_KEYATTR_NEVER_EXTRACTABLE = 64;

const int CSSM_KEYUSE_ANY = -2147483648;

const int CSSM_KEYUSE_ENCRYPT = 1;

const int CSSM_KEYUSE_DECRYPT = 2;

const int CSSM_KEYUSE_SIGN = 4;

const int CSSM_KEYUSE_VERIFY = 8;

const int CSSM_KEYUSE_SIGN_RECOVER = 16;

const int CSSM_KEYUSE_VERIFY_RECOVER = 32;

const int CSSM_KEYUSE_WRAP = 64;

const int CSSM_KEYUSE_UNWRAP = 128;

const int CSSM_KEYUSE_DERIVE = 256;

const int CSSM_ALGID_NONE = 0;

const int CSSM_ALGID_CUSTOM = 1;

const int CSSM_ALGID_DH = 2;

const int CSSM_ALGID_PH = 3;

const int CSSM_ALGID_KEA = 4;

const int CSSM_ALGID_MD2 = 5;

const int CSSM_ALGID_MD4 = 6;

const int CSSM_ALGID_MD5 = 7;

const int CSSM_ALGID_SHA1 = 8;

const int CSSM_ALGID_NHASH = 9;

const int CSSM_ALGID_HAVAL = 10;

const int CSSM_ALGID_RIPEMD = 11;

const int CSSM_ALGID_IBCHASH = 12;

const int CSSM_ALGID_RIPEMAC = 13;

const int CSSM_ALGID_DES = 14;

const int CSSM_ALGID_DESX = 15;

const int CSSM_ALGID_RDES = 16;

const int CSSM_ALGID_3DES_3KEY_EDE = 17;

const int CSSM_ALGID_3DES_2KEY_EDE = 18;

const int CSSM_ALGID_3DES_1KEY_EEE = 19;

const int CSSM_ALGID_3DES_3KEY = 17;

const int CSSM_ALGID_3DES_3KEY_EEE = 20;

const int CSSM_ALGID_3DES_2KEY = 18;

const int CSSM_ALGID_3DES_2KEY_EEE = 21;

const int CSSM_ALGID_3DES_1KEY = 20;

const int CSSM_ALGID_IDEA = 22;

const int CSSM_ALGID_RC2 = 23;

const int CSSM_ALGID_RC5 = 24;

const int CSSM_ALGID_RC4 = 25;

const int CSSM_ALGID_SEAL = 26;

const int CSSM_ALGID_CAST = 27;

const int CSSM_ALGID_BLOWFISH = 28;

const int CSSM_ALGID_SKIPJACK = 29;

const int CSSM_ALGID_LUCIFER = 30;

const int CSSM_ALGID_MADRYGA = 31;

const int CSSM_ALGID_FEAL = 32;

const int CSSM_ALGID_REDOC = 33;

const int CSSM_ALGID_REDOC3 = 34;

const int CSSM_ALGID_LOKI = 35;

const int CSSM_ALGID_KHUFU = 36;

const int CSSM_ALGID_KHAFRE = 37;

const int CSSM_ALGID_MMB = 38;

const int CSSM_ALGID_GOST = 39;

const int CSSM_ALGID_SAFER = 40;

const int CSSM_ALGID_CRAB = 41;

const int CSSM_ALGID_RSA = 42;

const int CSSM_ALGID_DSA = 43;

const int CSSM_ALGID_MD5WithRSA = 44;

const int CSSM_ALGID_MD2WithRSA = 45;

const int CSSM_ALGID_ElGamal = 46;

const int CSSM_ALGID_MD2Random = 47;

const int CSSM_ALGID_MD5Random = 48;

const int CSSM_ALGID_SHARandom = 49;

const int CSSM_ALGID_DESRandom = 50;

const int CSSM_ALGID_SHA1WithRSA = 51;

const int CSSM_ALGID_CDMF = 52;

const int CSSM_ALGID_CAST3 = 53;

const int CSSM_ALGID_CAST5 = 54;

const int CSSM_ALGID_GenericSecret = 55;

const int CSSM_ALGID_ConcatBaseAndKey = 56;

const int CSSM_ALGID_ConcatKeyAndBase = 57;

const int CSSM_ALGID_ConcatBaseAndData = 58;

const int CSSM_ALGID_ConcatDataAndBase = 59;

const int CSSM_ALGID_XORBaseAndData = 60;

const int CSSM_ALGID_ExtractFromKey = 61;

const int CSSM_ALGID_SSL3PrePrimaryGen = 62;

const int CSSM_ALGID_SSL3PreMasterGen = 62;

const int CSSM_ALGID_SSL3PrimaryDerive = 63;

const int CSSM_ALGID_SSL3MasterDerive = 63;

const int CSSM_ALGID_SSL3KeyAndMacDerive = 64;

const int CSSM_ALGID_SSL3MD5_MAC = 65;

const int CSSM_ALGID_SSL3SHA1_MAC = 66;

const int CSSM_ALGID_PKCS5_PBKDF1_MD5 = 67;

const int CSSM_ALGID_PKCS5_PBKDF1_MD2 = 68;

const int CSSM_ALGID_PKCS5_PBKDF1_SHA1 = 69;

const int CSSM_ALGID_WrapLynks = 70;

const int CSSM_ALGID_WrapSET_OAEP = 71;

const int CSSM_ALGID_BATON = 72;

const int CSSM_ALGID_ECDSA = 73;

const int CSSM_ALGID_MAYFLY = 74;

const int CSSM_ALGID_JUNIPER = 75;

const int CSSM_ALGID_FASTHASH = 76;

const int CSSM_ALGID_3DES = 77;

const int CSSM_ALGID_SSL3MD5 = 78;

const int CSSM_ALGID_SSL3SHA1 = 79;

const int CSSM_ALGID_FortezzaTimestamp = 80;

const int CSSM_ALGID_SHA1WithDSA = 81;

const int CSSM_ALGID_SHA1WithECDSA = 82;

const int CSSM_ALGID_DSA_BSAFE = 83;

const int CSSM_ALGID_ECDH = 84;

const int CSSM_ALGID_ECMQV = 85;

const int CSSM_ALGID_PKCS12_SHA1_PBE = 86;

const int CSSM_ALGID_ECNRA = 87;

const int CSSM_ALGID_SHA1WithECNRA = 88;

const int CSSM_ALGID_ECES = 89;

const int CSSM_ALGID_ECAES = 90;

const int CSSM_ALGID_SHA1HMAC = 91;

const int CSSM_ALGID_FIPS186Random = 92;

const int CSSM_ALGID_ECC = 93;

const int CSSM_ALGID_MQV = 94;

const int CSSM_ALGID_NRA = 95;

const int CSSM_ALGID_IntelPlatformRandom = 96;

const int CSSM_ALGID_UTC = 97;

const int CSSM_ALGID_HAVAL3 = 98;

const int CSSM_ALGID_HAVAL4 = 99;

const int CSSM_ALGID_HAVAL5 = 100;

const int CSSM_ALGID_TIGER = 101;

const int CSSM_ALGID_MD5HMAC = 102;

const int CSSM_ALGID_PKCS5_PBKDF2 = 103;

const int CSSM_ALGID_RUNNING_COUNTER = 104;

const int CSSM_ALGID_LAST = 2147483647;

const int CSSM_ALGID_VENDOR_DEFINED = -2147483648;

const int CSSM_ALGMODE_NONE = 0;

const int CSSM_ALGMODE_CUSTOM = 1;

const int CSSM_ALGMODE_ECB = 2;

const int CSSM_ALGMODE_ECBPad = 3;

const int CSSM_ALGMODE_CBC = 4;

const int CSSM_ALGMODE_CBC_IV8 = 5;

const int CSSM_ALGMODE_CBCPadIV8 = 6;

const int CSSM_ALGMODE_CFB = 7;

const int CSSM_ALGMODE_CFB_IV8 = 8;

const int CSSM_ALGMODE_CFBPadIV8 = 9;

const int CSSM_ALGMODE_OFB = 10;

const int CSSM_ALGMODE_OFB_IV8 = 11;

const int CSSM_ALGMODE_OFBPadIV8 = 12;

const int CSSM_ALGMODE_COUNTER = 13;

const int CSSM_ALGMODE_BC = 14;

const int CSSM_ALGMODE_PCBC = 15;

const int CSSM_ALGMODE_CBCC = 16;

const int CSSM_ALGMODE_OFBNLF = 17;

const int CSSM_ALGMODE_PBC = 18;

const int CSSM_ALGMODE_PFB = 19;

const int CSSM_ALGMODE_CBCPD = 20;

const int CSSM_ALGMODE_PUBLIC_KEY = 21;

const int CSSM_ALGMODE_PRIVATE_KEY = 22;

const int CSSM_ALGMODE_SHUFFLE = 23;

const int CSSM_ALGMODE_ECB64 = 24;

const int CSSM_ALGMODE_CBC64 = 25;

const int CSSM_ALGMODE_OFB64 = 26;

const int CSSM_ALGMODE_CFB32 = 28;

const int CSSM_ALGMODE_CFB16 = 29;

const int CSSM_ALGMODE_CFB8 = 30;

const int CSSM_ALGMODE_WRAP = 31;

const int CSSM_ALGMODE_PRIVATE_WRAP = 32;

const int CSSM_ALGMODE_RELAYX = 33;

const int CSSM_ALGMODE_ECB128 = 34;

const int CSSM_ALGMODE_ECB96 = 35;

const int CSSM_ALGMODE_CBC128 = 36;

const int CSSM_ALGMODE_OAEP_HASH = 37;

const int CSSM_ALGMODE_PKCS1_EME_V15 = 38;

const int CSSM_ALGMODE_PKCS1_EME_OAEP = 39;

const int CSSM_ALGMODE_PKCS1_EMSA_V15 = 40;

const int CSSM_ALGMODE_ISO_9796 = 41;

const int CSSM_ALGMODE_X9_31 = 42;

const int CSSM_ALGMODE_LAST = 2147483647;

const int CSSM_ALGMODE_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_SOFTWARE = 1;

const int CSSM_CSP_HARDWARE = 2;

const int CSSM_CSP_HYBRID = 3;

const int CSSM_ALGCLASS_NONE = 0;

const int CSSM_ALGCLASS_CUSTOM = 1;

const int CSSM_ALGCLASS_SIGNATURE = 2;

const int CSSM_ALGCLASS_SYMMETRIC = 3;

const int CSSM_ALGCLASS_DIGEST = 4;

const int CSSM_ALGCLASS_RANDOMGEN = 5;

const int CSSM_ALGCLASS_UNIQUEGEN = 6;

const int CSSM_ALGCLASS_MAC = 7;

const int CSSM_ALGCLASS_ASYMMETRIC = 8;

const int CSSM_ALGCLASS_KEYGEN = 9;

const int CSSM_ALGCLASS_DERIVEKEY = 10;

const int CSSM_ATTRIBUTE_DATA_NONE = 0;

const int CSSM_ATTRIBUTE_DATA_UINT32 = 268435456;

const int CSSM_ATTRIBUTE_DATA_CSSM_DATA = 536870912;

const int CSSM_ATTRIBUTE_DATA_CRYPTO_DATA = 805306368;

const int CSSM_ATTRIBUTE_DATA_KEY = 1073741824;

const int CSSM_ATTRIBUTE_DATA_STRING = 1342177280;

const int CSSM_ATTRIBUTE_DATA_DATE = 1610612736;

const int CSSM_ATTRIBUTE_DATA_RANGE = 1879048192;

const int CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS = -2147483648;

const int CSSM_ATTRIBUTE_DATA_VERSION = 16777216;

const int CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE = 33554432;

const int CSSM_ATTRIBUTE_DATA_KR_PROFILE = 50331648;

const int CSSM_ATTRIBUTE_TYPE_MASK = -16777216;

const int CSSM_ATTRIBUTE_NONE = 0;

const int CSSM_ATTRIBUTE_CUSTOM = 536870913;

const int CSSM_ATTRIBUTE_DESCRIPTION = 1342177282;

const int CSSM_ATTRIBUTE_KEY = 1073741827;

const int CSSM_ATTRIBUTE_INIT_VECTOR = 536870916;

const int CSSM_ATTRIBUTE_SALT = 536870917;

const int CSSM_ATTRIBUTE_PADDING = 268435462;

const int CSSM_ATTRIBUTE_RANDOM = 536870919;

const int CSSM_ATTRIBUTE_SEED = 805306376;

const int CSSM_ATTRIBUTE_PASSPHRASE = 805306377;

const int CSSM_ATTRIBUTE_KEY_LENGTH = 268435466;

const int CSSM_ATTRIBUTE_KEY_LENGTH_RANGE = 1879048203;

const int CSSM_ATTRIBUTE_BLOCK_SIZE = 268435468;

const int CSSM_ATTRIBUTE_OUTPUT_SIZE = 268435469;

const int CSSM_ATTRIBUTE_ROUNDS = 268435470;

const int CSSM_ATTRIBUTE_IV_SIZE = 268435471;

const int CSSM_ATTRIBUTE_ALG_PARAMS = 536870928;

const int CSSM_ATTRIBUTE_LABEL = 536870929;

const int CSSM_ATTRIBUTE_KEY_TYPE = 268435474;

const int CSSM_ATTRIBUTE_MODE = 268435475;

const int CSSM_ATTRIBUTE_EFFECTIVE_BITS = 268435476;

const int CSSM_ATTRIBUTE_START_DATE = 1610612757;

const int CSSM_ATTRIBUTE_END_DATE = 1610612758;

const int CSSM_ATTRIBUTE_KEYUSAGE = 268435479;

const int CSSM_ATTRIBUTE_KEYATTR = 268435480;

const int CSSM_ATTRIBUTE_VERSION = 16777241;

const int CSSM_ATTRIBUTE_PRIME = 536870938;

const int CSSM_ATTRIBUTE_BASE = 536870939;

const int CSSM_ATTRIBUTE_SUBPRIME = 536870940;

const int CSSM_ATTRIBUTE_ALG_ID = 268435485;

const int CSSM_ATTRIBUTE_ITERATION_COUNT = 268435486;

const int CSSM_ATTRIBUTE_ROUNDS_RANGE = 1879048223;

const int CSSM_ATTRIBUTE_KRPROFILE_LOCAL = 50331680;

const int CSSM_ATTRIBUTE_KRPROFILE_REMOTE = 50331681;

const int CSSM_ATTRIBUTE_CSP_HANDLE = 268435490;

const int CSSM_ATTRIBUTE_DL_DB_HANDLE = 33554467;

const int CSSM_ATTRIBUTE_ACCESS_CREDENTIALS = -2147483612;

const int CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT = 268435493;

const int CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT = 268435494;

const int CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT = 268435495;

const int CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT = 268435496;

const int CSSM_PADDING_NONE = 0;

const int CSSM_PADDING_CUSTOM = 1;

const int CSSM_PADDING_ZERO = 2;

const int CSSM_PADDING_ONE = 3;

const int CSSM_PADDING_ALTERNATE = 4;

const int CSSM_PADDING_FF = 5;

const int CSSM_PADDING_PKCS5 = 6;

const int CSSM_PADDING_PKCS7 = 7;

const int CSSM_PADDING_CIPHERSTEALING = 8;

const int CSSM_PADDING_RANDOM = 9;

const int CSSM_PADDING_PKCS1 = 10;

const int CSSM_PADDING_SIGRAW = 11;

const int CSSM_PADDING_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_TOK_RNG = 1;

const int CSSM_CSP_TOK_CLOCK_EXISTS = 64;

const int CSSM_CSP_RDR_TOKENPRESENT = 1;

const int CSSM_CSP_RDR_EXISTS = 2;

const int CSSM_CSP_RDR_HW = 4;

const int CSSM_CSP_TOK_WRITE_PROTECTED = 2;

const int CSSM_CSP_TOK_LOGIN_REQUIRED = 4;

const int CSSM_CSP_TOK_USER_PIN_INITIALIZED = 8;

const int CSSM_CSP_TOK_PROT_AUTHENTICATION = 256;

const int CSSM_CSP_TOK_USER_PIN_EXPIRED = 1048576;

const int CSSM_CSP_TOK_SESSION_KEY_PASSWORD = 2097152;

const int CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD = 4194304;

const int CSSM_CSP_STORES_PRIVATE_KEYS = 16777216;

const int CSSM_CSP_STORES_PUBLIC_KEYS = 33554432;

const int CSSM_CSP_STORES_SESSION_KEYS = 67108864;

const int CSSM_CSP_STORES_CERTIFICATES = 134217728;

const int CSSM_CSP_STORES_GENERIC = 268435456;

const int CSSM_PKCS_OAEP_MGF_NONE = 0;

const int CSSM_PKCS_OAEP_MGF1_SHA1 = 1;

const int CSSM_PKCS_OAEP_MGF1_MD5 = 2;

const int CSSM_PKCS_OAEP_PSOURCE_NONE = 0;

const int CSSM_PKCS_OAEP_PSOURCE_Pspecified = 1;

const int CSSM_VALUE_NOT_AVAILABLE = -1;

const int CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1 = 0;

const int CSSM_TP_AUTHORITY_REQUEST_CERTISSUE = 1;

const int CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE = 2;

const int CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND = 3;

const int CSSM_TP_AUTHORITY_REQUEST_CERTRESUME = 4;

const int CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY = 5;

const int CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE = 6;

const int CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER = 7;

const int CSSM_TP_AUTHORITY_REQUEST_CRLISSUE = 256;

const int CSSM_TP_KEY_ARCHIVE = 1;

const int CSSM_TP_CERT_PUBLISH = 2;

const int CSSM_TP_CERT_NOTIFY_RENEW = 4;

const int CSSM_TP_CERT_DIR_UPDATE = 8;

const int CSSM_TP_CRL_DISTRIBUTE = 16;

const int CSSM_TP_ACTION_DEFAULT = 0;

const int CSSM_TP_STOP_ON_POLICY = 0;

const int CSSM_TP_STOP_ON_NONE = 1;

const int CSSM_TP_STOP_ON_FIRST_PASS = 2;

const int CSSM_TP_STOP_ON_FIRST_FAIL = 3;

const int CSSM_CRL_PARSE_FORMAT_NONE = 0;

const int CSSM_CRL_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CRL_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CRL_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CRL_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CRL_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CRL_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CRL_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CRL_PARSE_FORMAT = 32768;

const int CSSM_CRL_TYPE_UNKNOWN = 0;

const int CSSM_CRL_TYPE_X_509v1 = 1;

const int CSSM_CRL_TYPE_X_509v2 = 2;

const int CSSM_CRL_TYPE_SPKI = 3;

const int CSSM_CRL_TYPE_MULTIPLE = 32766;

const int CSSM_CRL_ENCODING_UNKNOWN = 0;

const int CSSM_CRL_ENCODING_CUSTOM = 1;

const int CSSM_CRL_ENCODING_BER = 2;

const int CSSM_CRL_ENCODING_DER = 3;

const int CSSM_CRL_ENCODING_BLOOM = 4;

const int CSSM_CRL_ENCODING_SEXPR = 5;

const int CSSM_CRL_ENCODING_MULTIPLE = 32766;

const int CSSM_CRLGROUP_DATA = 0;

const int CSSM_CRLGROUP_ENCODED_CRL = 1;

const int CSSM_CRLGROUP_PARSED_CRL = 2;

const int CSSM_CRLGROUP_CRL_PAIR = 3;

const int CSSM_EVIDENCE_FORM_UNSPECIFIC = 0;

const int CSSM_EVIDENCE_FORM_CERT = 1;

const int CSSM_EVIDENCE_FORM_CRL = 2;

const int CSSM_EVIDENCE_FORM_CERT_ID = 3;

const int CSSM_EVIDENCE_FORM_CRL_ID = 4;

const int CSSM_EVIDENCE_FORM_VERIFIER_TIME = 5;

const int CSSM_EVIDENCE_FORM_CRL_THISTIME = 6;

const int CSSM_EVIDENCE_FORM_CRL_NEXTTIME = 7;

const int CSSM_EVIDENCE_FORM_POLICYINFO = 8;

const int CSSM_EVIDENCE_FORM_TUPLEGROUP = 9;

const int CSSM_TP_CONFIRM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CONFIRM_ACCEPT = 1;

const int CSSM_TP_CONFIRM_REJECT = 2;

const int CSSM_ESTIMATED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_COMPLETE = -2;

const int CSSM_TP_CERTISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTISSUE_OK = 1;

const int CSSM_TP_CERTISSUE_OKWITHCERTMODS = 2;

const int CSSM_TP_CERTISSUE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTISSUE_REJECTED = 4;

const int CSSM_TP_CERTISSUE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTISSUE_WILL_BE_REVOKED = 6;

const int CSSM_TP_CERTCHANGE_NONE = 0;

const int CSSM_TP_CERTCHANGE_REVOKE = 1;

const int CSSM_TP_CERTCHANGE_HOLD = 2;

const int CSSM_TP_CERTCHANGE_RELEASE = 3;

const int CSSM_TP_CERTCHANGE_REASON_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE = 1;

const int CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE = 2;

const int CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION = 3;

const int CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE = 4;

const int CSSM_TP_CERTCHANGE_REASON_SUPERCEDED = 5;

const int CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE = 6;

const int CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE = 7;

const int CSSM_TP_CERTCHANGE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_OK = 1;

const int CSSM_TP_CERTCHANGE_OKWITHNEWTIME = 2;

const int CSSM_TP_CERTCHANGE_WRONGCA = 3;

const int CSSM_TP_CERTCHANGE_REJECTED = 4;

const int CSSM_TP_CERTCHANGE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTVERIFY_UNKNOWN = 0;

const int CSSM_TP_CERTVERIFY_VALID = 1;

const int CSSM_TP_CERTVERIFY_INVALID = 2;

const int CSSM_TP_CERTVERIFY_REVOKED = 3;

const int CSSM_TP_CERTVERIFY_SUSPENDED = 4;

const int CSSM_TP_CERTVERIFY_EXPIRED = 5;

const int CSSM_TP_CERTVERIFY_NOT_VALID_YET = 6;

const int CSSM_TP_CERTVERIFY_INVALID_AUTHORITY = 7;

const int CSSM_TP_CERTVERIFY_INVALID_SIGNATURE = 8;

const int CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE = 9;

const int CSSM_TP_CERTVERIFY_INVALID_CERTGROUP = 10;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY = 11;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS = 12;

const int CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS = 13;

const int CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT = 14;

const int CSSM_TP_CERTVERIFY_INVALID_NAME_TREE = 15;

const int CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT = 16;

const int CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTNOTARIZE_OK = 1;

const int CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS = 2;

const int CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTNOTARIZE_REJECTED = 4;

const int CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTRECLAIM_OK = 1;

const int CSSM_TP_CERTRECLAIM_NOMATCH = 2;

const int CSSM_TP_CERTRECLAIM_REJECTED = 3;

const int CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED = 4;

const int CSSM_TP_CRLISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CRLISSUE_OK = 1;

const int CSSM_TP_CRLISSUE_NOT_CURRENT = 2;

const int CSSM_TP_CRLISSUE_INVALID_DOMAIN = 3;

const int CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER = 4;

const int CSSM_TP_CRLISSUE_REJECTED = 5;

const int CSSM_TP_CRLISSUE_NOT_AUTHORIZED = 6;

const int CSSM_TP_FORM_TYPE_GENERIC = 0;

const int CSSM_TP_FORM_TYPE_REGISTRATION = 1;

const int CSSM_CL_TEMPLATE_INTERMEDIATE_CERT = 1;

const int CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE = 2;

const int CSSM_CERT_BUNDLE_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA = 2;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA = 3;

const int CSSM_CERT_BUNDLE_PKCS12 = 4;

const int CSSM_CERT_BUNDLE_PFX = 5;

const int CSSM_CERT_BUNDLE_SPKI_SEQUENCE = 6;

const int CSSM_CERT_BUNDLE_PGP_KEYRING = 7;

const int CSSM_CERT_BUNDLE_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE = 32768;

const int CSSM_CERT_BUNDLE_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_ENCODING_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_ENCODING_BER = 2;

const int CSSM_CERT_BUNDLE_ENCODING_DER = 3;

const int CSSM_CERT_BUNDLE_ENCODING_SEXPR = 4;

const int CSSM_CERT_BUNDLE_ENCODING_PGP = 5;

const int CSSM_FIELDVALUE_COMPLEX_DATA_TYPE = -1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_STRING = 0;

const int CSSM_DB_ATTRIBUTE_NAME_AS_OID = 1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_STRING = 0;

const int CSSM_DB_ATTRIBUTE_FORMAT_SINT32 = 1;

const int CSSM_DB_ATTRIBUTE_FORMAT_UINT32 = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM = 3;

const int CSSM_DB_ATTRIBUTE_FORMAT_REAL = 4;

const int CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE = 5;

const int CSSM_DB_ATTRIBUTE_FORMAT_BLOB = 6;

const int CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32 = 7;

const int CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX = 8;

const int CSSM_DB_RECORDTYPE_SCHEMA_START = 0;

const int CSSM_DB_RECORDTYPE_SCHEMA_END = 4;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_START = 10;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_END = 18;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_START = -2147483648;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_END = -1;

const int CSSM_DL_DB_SCHEMA_INFO = 0;

const int CSSM_DL_DB_SCHEMA_INDEXES = 1;

const int CSSM_DL_DB_SCHEMA_ATTRIBUTES = 2;

const int CSSM_DL_DB_SCHEMA_PARSING_MODULE = 3;

const int CSSM_DL_DB_RECORD_ANY = 10;

const int CSSM_DL_DB_RECORD_CERT = 11;

const int CSSM_DL_DB_RECORD_CRL = 12;

const int CSSM_DL_DB_RECORD_POLICY = 13;

const int CSSM_DL_DB_RECORD_GENERIC = 14;

const int CSSM_DL_DB_RECORD_PUBLIC_KEY = 15;

const int CSSM_DL_DB_RECORD_PRIVATE_KEY = 16;

const int CSSM_DL_DB_RECORD_SYMMETRIC_KEY = 17;

const int CSSM_DL_DB_RECORD_ALL_KEYS = 18;

const int CSSM_DB_CERT_USE_TRUSTED = 1;

const int CSSM_DB_CERT_USE_SYSTEM = 2;

const int CSSM_DB_CERT_USE_OWNER = 4;

const int CSSM_DB_CERT_USE_REVOKED = 8;

const int CSSM_DB_CERT_USE_SIGNING = 16;

const int CSSM_DB_CERT_USE_PRIVACY = 32;

const int CSSM_DB_INDEX_UNIQUE = 0;

const int CSSM_DB_INDEX_NONUNIQUE = 1;

const int CSSM_DB_INDEX_ON_UNKNOWN = 0;

const int CSSM_DB_INDEX_ON_ATTRIBUTE = 1;

const int CSSM_DB_INDEX_ON_RECORD = 2;

const int CSSM_DB_ACCESS_READ = 1;

const int CSSM_DB_ACCESS_WRITE = 2;

const int CSSM_DB_ACCESS_PRIVILEGED = 4;

const int CSSM_DB_MODIFY_ATTRIBUTE_NONE = 0;

const int CSSM_DB_MODIFY_ATTRIBUTE_ADD = 1;

const int CSSM_DB_MODIFY_ATTRIBUTE_DELETE = 2;

const int CSSM_DB_MODIFY_ATTRIBUTE_REPLACE = 3;

const int CSSM_DB_EQUAL = 0;

const int CSSM_DB_NOT_EQUAL = 1;

const int CSSM_DB_LESS_THAN = 2;

const int CSSM_DB_GREATER_THAN = 3;

const int CSSM_DB_CONTAINS = 4;

const int CSSM_DB_CONTAINS_INITIAL_SUBSTRING = 5;

const int CSSM_DB_CONTAINS_FINAL_SUBSTRING = 6;

const int CSSM_DB_NONE = 0;

const int CSSM_DB_AND = 1;

const int CSSM_DB_OR = 2;

const int CSSM_QUERY_TIMELIMIT_NONE = 0;

const int CSSM_QUERY_SIZELIMIT_NONE = 0;

const int CSSM_QUERY_RETURN_DATA = 1;

const int CSSM_DL_UNKNOWN = 0;

const int CSSM_DL_CUSTOM = 1;

const int CSSM_DL_LDAP = 2;

const int CSSM_DL_ODBC = 3;

const int CSSM_DL_PKCS11 = 4;

const int CSSM_DL_FFS = 5;

const int CSSM_DL_MEMORY = 6;

const int CSSM_DL_REMOTEDIR = 7;

const int CSSM_DB_DATASTORES_UNKNOWN = -1;

const int CSSM_DB_TRANSACTIONAL_MODE = 0;

const int CSSM_DB_FILESYSTEMSCAN_MODE = 1;

const int CSSM_BASE_ERROR = -2147418112;

const int CSSM_ERRORCODE_MODULE_EXTENT = 2048;

const int CSSM_ERRORCODE_CUSTOM_OFFSET = 1024;

const int CSSM_ERRORCODE_COMMON_EXTENT = 256;

const int CSSM_CSSM_BASE_ERROR = -2147418112;

const int CSSM_CSSM_PRIVATE_ERROR = -2147417088;

const int CSSM_CSP_BASE_ERROR = -2147416064;

const int CSSM_CSP_PRIVATE_ERROR = -2147415040;

const int CSSM_DL_BASE_ERROR = -2147414016;

const int CSSM_DL_PRIVATE_ERROR = -2147412992;

const int CSSM_CL_BASE_ERROR = -2147411968;

const int CSSM_CL_PRIVATE_ERROR = -2147410944;

const int CSSM_TP_BASE_ERROR = -2147409920;

const int CSSM_TP_PRIVATE_ERROR = -2147408896;

const int CSSM_KR_BASE_ERROR = -2147407872;

const int CSSM_KR_PRIVATE_ERROR = -2147406848;

const int CSSM_AC_BASE_ERROR = -2147405824;

const int CSSM_AC_PRIVATE_ERROR = -2147404800;

const int CSSM_MDS_BASE_ERROR = -2147414016;

const int CSSM_MDS_PRIVATE_ERROR = -2147412992;

const int CSSMERR_CSSM_INVALID_ADDIN_HANDLE = -2147417855;

const int CSSMERR_CSSM_NOT_INITIALIZED = -2147417854;

const int CSSMERR_CSSM_INVALID_HANDLE_USAGE = -2147417853;

const int CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND = -2147417852;

const int CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL = -2147417851;

const int CSSM_ERRCODE_INTERNAL_ERROR = 1;

const int CSSM_ERRCODE_MEMORY_ERROR = 2;

const int CSSM_ERRCODE_MDS_ERROR = 3;

const int CSSM_ERRCODE_INVALID_POINTER = 4;

const int CSSM_ERRCODE_INVALID_INPUT_POINTER = 5;

const int CSSM_ERRCODE_INVALID_OUTPUT_POINTER = 6;

const int CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED = 7;

const int CSSM_ERRCODE_SELF_CHECK_FAILED = 8;

const int CSSM_ERRCODE_OS_ACCESS_DENIED = 9;

const int CSSM_ERRCODE_FUNCTION_FAILED = 10;

const int CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED = 11;

const int CSSM_ERRCODE_INVALID_GUID = 12;

const int CSSM_ERRCODE_OPERATION_AUTH_DENIED = 32;

const int CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED = 33;

const int CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED = 34;

const int CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED = 35;

const int CSSM_ERRCODE_OBJECT_ACL_REQUIRED = 36;

const int CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS = 37;

const int CSSM_ERRCODE_INVALID_ACL_BASE_CERTS = 38;

const int CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED = 39;

const int CSSM_ERRCODE_INVALID_SAMPLE_VALUE = 40;

const int CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED = 41;

const int CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE = 42;

const int CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED = 43;

const int CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK = 44;

const int CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED = 45;

const int CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG = 46;

const int CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND = 47;

const int CSSM_ERRCODE_INVALID_ACL_EDIT_MODE = 48;

const int CSSM_ERRCODE_ACL_CHANGE_FAILED = 49;

const int CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY = 50;

const int CSSM_ERRCODE_INVALID_NEW_ACL_OWNER = 51;

const int CSSM_ERRCODE_ACL_DELETE_FAILED = 52;

const int CSSM_ERRCODE_ACL_REPLACE_FAILED = 53;

const int CSSM_ERRCODE_ACL_ADD_FAILED = 54;

const int CSSM_ERRCODE_INVALID_CONTEXT_HANDLE = 64;

const int CSSM_ERRCODE_INCOMPATIBLE_VERSION = 65;

const int CSSM_ERRCODE_INVALID_CERTGROUP_POINTER = 66;

const int CSSM_ERRCODE_INVALID_CERT_POINTER = 67;

const int CSSM_ERRCODE_INVALID_CRL_POINTER = 68;

const int CSSM_ERRCODE_INVALID_FIELD_POINTER = 69;

const int CSSM_ERRCODE_INVALID_DATA = 70;

const int CSSM_ERRCODE_CRL_ALREADY_SIGNED = 71;

const int CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS = 72;

const int CSSM_ERRCODE_VERIFICATION_FAILURE = 73;

const int CSSM_ERRCODE_INVALID_DB_HANDLE = 74;

const int CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED = 75;

const int CSSM_ERRCODE_INVALID_DB_LIST = 76;

const int CSSM_ERRCODE_INVALID_DB_LIST_POINTER = 77;

const int CSSM_ERRCODE_UNKNOWN_FORMAT = 78;

const int CSSM_ERRCODE_UNKNOWN_TAG = 79;

const int CSSM_ERRCODE_INVALID_CSP_HANDLE = 80;

const int CSSM_ERRCODE_INVALID_DL_HANDLE = 81;

const int CSSM_ERRCODE_INVALID_CL_HANDLE = 82;

const int CSSM_ERRCODE_INVALID_TP_HANDLE = 83;

const int CSSM_ERRCODE_INVALID_KR_HANDLE = 84;

const int CSSM_ERRCODE_INVALID_AC_HANDLE = 85;

const int CSSM_ERRCODE_INVALID_PASSTHROUGH_ID = 86;

const int CSSM_ERRCODE_INVALID_NETWORK_ADDR = 87;

const int CSSM_ERRCODE_INVALID_CRYPTO_DATA = 88;

const int CSSMERR_CSSM_INTERNAL_ERROR = -2147418111;

const int CSSMERR_CSSM_MEMORY_ERROR = -2147418110;

const int CSSMERR_CSSM_MDS_ERROR = -2147418109;

const int CSSMERR_CSSM_INVALID_POINTER = -2147418108;

const int CSSMERR_CSSM_INVALID_INPUT_POINTER = -2147418107;

const int CSSMERR_CSSM_INVALID_OUTPUT_POINTER = -2147418106;

const int CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED = -2147418105;

const int CSSMERR_CSSM_SELF_CHECK_FAILED = -2147418104;

const int CSSMERR_CSSM_OS_ACCESS_DENIED = -2147418103;

const int CSSMERR_CSSM_FUNCTION_FAILED = -2147418102;

const int CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED = -2147418101;

const int CSSMERR_CSSM_INVALID_GUID = -2147418100;

const int CSSMERR_CSSM_INVALID_CONTEXT_HANDLE = -2147418048;

const int CSSMERR_CSSM_INCOMPATIBLE_VERSION = -2147418047;

const int CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED = -2147418037;

const int CSSM_CSSM_BASE_CSSM_ERROR = -2147417840;

const int CSSMERR_CSSM_SCOPE_NOT_SUPPORTED = -2147417839;

const int CSSMERR_CSSM_PVC_ALREADY_CONFIGURED = -2147417838;

const int CSSMERR_CSSM_INVALID_PVC = -2147417837;

const int CSSMERR_CSSM_EMM_LOAD_FAILED = -2147417836;

const int CSSMERR_CSSM_EMM_UNLOAD_FAILED = -2147417835;

const int CSSMERR_CSSM_ADDIN_LOAD_FAILED = -2147417834;

const int CSSMERR_CSSM_INVALID_KEY_HIERARCHY = -2147417833;

const int CSSMERR_CSSM_ADDIN_UNLOAD_FAILED = -2147417832;

const int CSSMERR_CSSM_LIB_REF_NOT_FOUND = -2147417831;

const int CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE = -2147417830;

const int CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED = -2147417829;

const int CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED = -2147417828;

const int CSSMERR_CSSM_INVALID_SERVICE_MASK = -2147417827;

const int CSSMERR_CSSM_MODULE_NOT_LOADED = -2147417826;

const int CSSMERR_CSSM_INVALID_SUBSERVICEID = -2147417825;

const int CSSMERR_CSSM_BUFFER_TOO_SMALL = -2147417824;

const int CSSMERR_CSSM_INVALID_ATTRIBUTE = -2147417823;

const int CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT = -2147417822;

const int CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL = -2147417821;

const int CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND = -2147417820;

const int CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND = -2147417819;

const int CSSMERR_CSP_INTERNAL_ERROR = -2147416063;

const int CSSMERR_CSP_MEMORY_ERROR = -2147416062;

const int CSSMERR_CSP_MDS_ERROR = -2147416061;

const int CSSMERR_CSP_INVALID_POINTER = -2147416060;

const int CSSMERR_CSP_INVALID_INPUT_POINTER = -2147416059;

const int CSSMERR_CSP_INVALID_OUTPUT_POINTER = -2147416058;

const int CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED = -2147416057;

const int CSSMERR_CSP_SELF_CHECK_FAILED = -2147416056;

const int CSSMERR_CSP_OS_ACCESS_DENIED = -2147416055;

const int CSSMERR_CSP_FUNCTION_FAILED = -2147416054;

const int CSSMERR_CSP_OPERATION_AUTH_DENIED = -2147416032;

const int CSSMERR_CSP_OBJECT_USE_AUTH_DENIED = -2147416031;

const int CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED = -2147416030;

const int CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED = -2147416029;

const int CSSMERR_CSP_OBJECT_ACL_REQUIRED = -2147416028;

const int CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS = -2147416027;

const int CSSMERR_CSP_INVALID_ACL_BASE_CERTS = -2147416026;

const int CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED = -2147416025;

const int CSSMERR_CSP_INVALID_SAMPLE_VALUE = -2147416024;

const int CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED = -2147416023;

const int CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE = -2147416022;

const int CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147416021;

const int CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK = -2147416020;

const int CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED = -2147416019;

const int CSSMERR_CSP_INVALID_ACL_ENTRY_TAG = -2147416018;

const int CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND = -2147416017;

const int CSSMERR_CSP_INVALID_ACL_EDIT_MODE = -2147416016;

const int CSSMERR_CSP_ACL_CHANGE_FAILED = -2147416015;

const int CSSMERR_CSP_INVALID_NEW_ACL_ENTRY = -2147416014;

const int CSSMERR_CSP_INVALID_NEW_ACL_OWNER = -2147416013;

const int CSSMERR_CSP_ACL_DELETE_FAILED = -2147416012;

const int CSSMERR_CSP_ACL_REPLACE_FAILED = -2147416011;

const int CSSMERR_CSP_ACL_ADD_FAILED = -2147416010;

const int CSSMERR_CSP_INVALID_CONTEXT_HANDLE = -2147416000;

const int CSSMERR_CSP_PRIVILEGE_NOT_GRANTED = -2147415989;

const int CSSMERR_CSP_INVALID_DATA = -2147415994;

const int CSSMERR_CSP_INVALID_PASSTHROUGH_ID = -2147415978;

const int CSSMERR_CSP_INVALID_CRYPTO_DATA = -2147415976;

const int CSSM_CSP_BASE_CSP_ERROR = -2147415808;

const int CSSMERR_CSP_INPUT_LENGTH_ERROR = -2147415807;

const int CSSMERR_CSP_OUTPUT_LENGTH_ERROR = -2147415806;

const int CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED = -2147415805;

const int CSSMERR_CSP_DEVICE_ERROR = -2147415804;

const int CSSMERR_CSP_DEVICE_MEMORY_ERROR = -2147415803;

const int CSSMERR_CSP_ATTACH_HANDLE_BUSY = -2147415802;

const int CSSMERR_CSP_NOT_LOGGED_IN = -2147415801;

const int CSSMERR_CSP_INVALID_KEY = -2147415792;

const int CSSMERR_CSP_INVALID_KEY_REFERENCE = -2147415791;

const int CSSMERR_CSP_INVALID_KEY_CLASS = -2147415790;

const int CSSMERR_CSP_ALGID_MISMATCH = -2147415789;

const int CSSMERR_CSP_KEY_USAGE_INCORRECT = -2147415788;

const int CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT = -2147415787;

const int CSSMERR_CSP_KEY_HEADER_INCONSISTENT = -2147415786;

const int CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT = -2147415785;

const int CSSMERR_CSP_UNSUPPORTED_KEY_SIZE = -2147415784;

const int CSSMERR_CSP_INVALID_KEY_POINTER = -2147415783;

const int CSSMERR_CSP_INVALID_KEYUSAGE_MASK = -2147415782;

const int CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK = -2147415781;

const int CSSMERR_CSP_INVALID_KEYATTR_MASK = -2147415780;

const int CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK = -2147415779;

const int CSSMERR_CSP_INVALID_KEY_LABEL = -2147415778;

const int CSSMERR_CSP_UNSUPPORTED_KEY_LABEL = -2147415777;

const int CSSMERR_CSP_INVALID_KEY_FORMAT = -2147415776;

const int CSSMERR_CSP_INVALID_DATA_COUNT = -2147415768;

const int CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED = -2147415767;

const int CSSMERR_CSP_INVALID_INPUT_VECTOR = -2147415766;

const int CSSMERR_CSP_INVALID_OUTPUT_VECTOR = -2147415765;

const int CSSMERR_CSP_INVALID_CONTEXT = -2147415760;

const int CSSMERR_CSP_INVALID_ALGORITHM = -2147415759;

const int CSSMERR_CSP_INVALID_ATTR_KEY = -2147415754;

const int CSSMERR_CSP_MISSING_ATTR_KEY = -2147415753;

const int CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR = -2147415752;

const int CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR = -2147415751;

const int CSSMERR_CSP_INVALID_ATTR_SALT = -2147415750;

const int CSSMERR_CSP_MISSING_ATTR_SALT = -2147415749;

const int CSSMERR_CSP_INVALID_ATTR_PADDING = -2147415748;

const int CSSMERR_CSP_MISSING_ATTR_PADDING = -2147415747;

const int CSSMERR_CSP_INVALID_ATTR_RANDOM = -2147415746;

const int CSSMERR_CSP_MISSING_ATTR_RANDOM = -2147415745;

const int CSSMERR_CSP_INVALID_ATTR_SEED = -2147415744;

const int CSSMERR_CSP_MISSING_ATTR_SEED = -2147415743;

const int CSSMERR_CSP_INVALID_ATTR_PASSPHRASE = -2147415742;

const int CSSMERR_CSP_MISSING_ATTR_PASSPHRASE = -2147415741;

const int CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH = -2147415740;

const int CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH = -2147415739;

const int CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE = -2147415738;

const int CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE = -2147415737;

const int CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE = -2147415708;

const int CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE = -2147415707;

const int CSSMERR_CSP_INVALID_ATTR_ROUNDS = -2147415706;

const int CSSMERR_CSP_MISSING_ATTR_ROUNDS = -2147415705;

const int CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS = -2147415704;

const int CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS = -2147415703;

const int CSSMERR_CSP_INVALID_ATTR_LABEL = -2147415702;

const int CSSMERR_CSP_MISSING_ATTR_LABEL = -2147415701;

const int CSSMERR_CSP_INVALID_ATTR_KEY_TYPE = -2147415700;

const int CSSMERR_CSP_MISSING_ATTR_KEY_TYPE = -2147415699;

const int CSSMERR_CSP_INVALID_ATTR_MODE = -2147415698;

const int CSSMERR_CSP_MISSING_ATTR_MODE = -2147415697;

const int CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS = -2147415696;

const int CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS = -2147415695;

const int CSSMERR_CSP_INVALID_ATTR_START_DATE = -2147415694;

const int CSSMERR_CSP_MISSING_ATTR_START_DATE = -2147415693;

const int CSSMERR_CSP_INVALID_ATTR_END_DATE = -2147415692;

const int CSSMERR_CSP_MISSING_ATTR_END_DATE = -2147415691;

const int CSSMERR_CSP_INVALID_ATTR_VERSION = -2147415690;

const int CSSMERR_CSP_MISSING_ATTR_VERSION = -2147415689;

const int CSSMERR_CSP_INVALID_ATTR_PRIME = -2147415688;

const int CSSMERR_CSP_MISSING_ATTR_PRIME = -2147415687;

const int CSSMERR_CSP_INVALID_ATTR_BASE = -2147415686;

const int CSSMERR_CSP_MISSING_ATTR_BASE = -2147415685;

const int CSSMERR_CSP_INVALID_ATTR_SUBPRIME = -2147415684;

const int CSSMERR_CSP_MISSING_ATTR_SUBPRIME = -2147415683;

const int CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT = -2147415682;

const int CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT = -2147415681;

const int CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE = -2147415680;

const int CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE = -2147415679;

const int CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS = -2147415678;

const int CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS = -2147415677;

const int CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT = -2147415676;

const int CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT = -2147415675;

const int CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT = -2147415674;

const int CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT = -2147415673;

const int CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT = -2147415672;

const int CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT = -2147415671;

const int CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT = -2147415670;

const int CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT = -2147415669;

const int CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS = -2147415736;

const int CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED = -2147415735;

const int CSSMERR_CSP_VERIFY_FAILED = -2147415734;

const int CSSMERR_CSP_INVALID_SIGNATURE = -2147415733;

const int CSSMERR_CSP_QUERY_SIZE_UNKNOWN = -2147415732;

const int CSSMERR_CSP_BLOCK_SIZE_MISMATCH = -2147415731;

const int CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND = -2147415730;

const int CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT = -2147415729;

const int CSSMERR_CSP_DEVICE_VERIFY_FAILED = -2147415728;

const int CSSMERR_CSP_INVALID_LOGIN_NAME = -2147415727;

const int CSSMERR_CSP_ALREADY_LOGGED_IN = -2147415726;

const int CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS = -2147415725;

const int CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS = -2147415724;

const int CSSMERR_CSP_INVALID_DIGEST_ALGORITHM = -2147415723;

const int CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED = -2147415722;

const int CSSMERR_TP_INTERNAL_ERROR = -2147409919;

const int CSSMERR_TP_MEMORY_ERROR = -2147409918;

const int CSSMERR_TP_MDS_ERROR = -2147409917;

const int CSSMERR_TP_INVALID_POINTER = -2147409916;

const int CSSMERR_TP_INVALID_INPUT_POINTER = -2147409915;

const int CSSMERR_TP_INVALID_OUTPUT_POINTER = -2147409914;

const int CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED = -2147409913;

const int CSSMERR_TP_SELF_CHECK_FAILED = -2147409912;

const int CSSMERR_TP_OS_ACCESS_DENIED = -2147409911;

const int CSSMERR_TP_FUNCTION_FAILED = -2147409910;

const int CSSMERR_TP_INVALID_CONTEXT_HANDLE = -2147409856;

const int CSSMERR_TP_INVALID_DATA = -2147409850;

const int CSSMERR_TP_INVALID_DB_LIST = -2147409844;

const int CSSMERR_TP_INVALID_CERTGROUP_POINTER = -2147409854;

const int CSSMERR_TP_INVALID_CERT_POINTER = -2147409853;

const int CSSMERR_TP_INVALID_CRL_POINTER = -2147409852;

const int CSSMERR_TP_INVALID_FIELD_POINTER = -2147409851;

const int CSSMERR_TP_INVALID_NETWORK_ADDR = -2147409833;

const int CSSMERR_TP_CRL_ALREADY_SIGNED = -2147409849;

const int CSSMERR_TP_INVALID_NUMBER_OF_FIELDS = -2147409848;

const int CSSMERR_TP_VERIFICATION_FAILURE = -2147409847;

const int CSSMERR_TP_INVALID_DB_HANDLE = -2147409846;

const int CSSMERR_TP_UNKNOWN_FORMAT = -2147409842;

const int CSSMERR_TP_UNKNOWN_TAG = -2147409841;

const int CSSMERR_TP_INVALID_PASSTHROUGH_ID = -2147409834;

const int CSSMERR_TP_INVALID_CSP_HANDLE = -2147409840;

const int CSSMERR_TP_INVALID_DL_HANDLE = -2147409839;

const int CSSMERR_TP_INVALID_CL_HANDLE = -2147409838;

const int CSSMERR_TP_INVALID_DB_LIST_POINTER = -2147409843;

const int CSSM_TP_BASE_TP_ERROR = -2147409664;

const int CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER = -2147409663;

const int CSSMERR_TP_INVALID_IDENTIFIER_POINTER = -2147409662;

const int CSSMERR_TP_INVALID_KEYCACHE_HANDLE = -2147409661;

const int CSSMERR_TP_INVALID_CERTGROUP = -2147409660;

const int CSSMERR_TP_INVALID_CRLGROUP = -2147409659;

const int CSSMERR_TP_INVALID_CRLGROUP_POINTER = -2147409658;

const int CSSMERR_TP_AUTHENTICATION_FAILED = -2147409657;

const int CSSMERR_TP_CERTGROUP_INCOMPLETE = -2147409656;

const int CSSMERR_TP_CERTIFICATE_CANT_OPERATE = -2147409655;

const int CSSMERR_TP_CERT_EXPIRED = -2147409654;

const int CSSMERR_TP_CERT_NOT_VALID_YET = -2147409653;

const int CSSMERR_TP_CERT_REVOKED = -2147409652;

const int CSSMERR_TP_CERT_SUSPENDED = -2147409651;

const int CSSMERR_TP_INSUFFICIENT_CREDENTIALS = -2147409650;

const int CSSMERR_TP_INVALID_ACTION = -2147409649;

const int CSSMERR_TP_INVALID_ACTION_DATA = -2147409648;

const int CSSMERR_TP_INVALID_ANCHOR_CERT = -2147409646;

const int CSSMERR_TP_INVALID_AUTHORITY = -2147409645;

const int CSSMERR_TP_VERIFY_ACTION_FAILED = -2147409644;

const int CSSMERR_TP_INVALID_CERTIFICATE = -2147409643;

const int CSSMERR_TP_INVALID_CERT_AUTHORITY = -2147409642;

const int CSSMERR_TP_INVALID_CRL_AUTHORITY = -2147409641;

const int CSSMERR_TP_INVALID_CRL_ENCODING = -2147409640;

const int CSSMERR_TP_INVALID_CRL_TYPE = -2147409639;

const int CSSMERR_TP_INVALID_CRL = -2147409638;

const int CSSMERR_TP_INVALID_FORM_TYPE = -2147409637;

const int CSSMERR_TP_INVALID_ID = -2147409636;

const int CSSMERR_TP_INVALID_IDENTIFIER = -2147409635;

const int CSSMERR_TP_INVALID_INDEX = -2147409634;

const int CSSMERR_TP_INVALID_NAME = -2147409633;

const int CSSMERR_TP_INVALID_POLICY_IDENTIFIERS = -2147409632;

const int CSSMERR_TP_INVALID_TIMESTRING = -2147409631;

const int CSSMERR_TP_INVALID_REASON = -2147409630;

const int CSSMERR_TP_INVALID_REQUEST_INPUTS = -2147409629;

const int CSSMERR_TP_INVALID_RESPONSE_VECTOR = -2147409628;

const int CSSMERR_TP_INVALID_SIGNATURE = -2147409627;

const int CSSMERR_TP_INVALID_STOP_ON_POLICY = -2147409626;

const int CSSMERR_TP_INVALID_CALLBACK = -2147409625;

const int CSSMERR_TP_INVALID_TUPLE = -2147409624;

const int CSSMERR_TP_NOT_SIGNER = -2147409623;

const int CSSMERR_TP_NOT_TRUSTED = -2147409622;

const int CSSMERR_TP_NO_DEFAULT_AUTHORITY = -2147409621;

const int CSSMERR_TP_REJECTED_FORM = -2147409620;

const int CSSMERR_TP_REQUEST_LOST = -2147409619;

const int CSSMERR_TP_REQUEST_REJECTED = -2147409618;

const int CSSMERR_TP_UNSUPPORTED_ADDR_TYPE = -2147409617;

const int CSSMERR_TP_UNSUPPORTED_SERVICE = -2147409616;

const int CSSMERR_TP_INVALID_TUPLEGROUP_POINTER = -2147409615;

const int CSSMERR_TP_INVALID_TUPLEGROUP = -2147409614;

const int CSSMERR_AC_INTERNAL_ERROR = -2147405823;

const int CSSMERR_AC_MEMORY_ERROR = -2147405822;

const int CSSMERR_AC_MDS_ERROR = -2147405821;

const int CSSMERR_AC_INVALID_POINTER = -2147405820;

const int CSSMERR_AC_INVALID_INPUT_POINTER = -2147405819;

const int CSSMERR_AC_INVALID_OUTPUT_POINTER = -2147405818;

const int CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED = -2147405817;

const int CSSMERR_AC_SELF_CHECK_FAILED = -2147405816;

const int CSSMERR_AC_OS_ACCESS_DENIED = -2147405815;

const int CSSMERR_AC_FUNCTION_FAILED = -2147405814;

const int CSSMERR_AC_INVALID_CONTEXT_HANDLE = -2147405760;

const int CSSMERR_AC_INVALID_DATA = -2147405754;

const int CSSMERR_AC_INVALID_DB_LIST = -2147405748;

const int CSSMERR_AC_INVALID_PASSTHROUGH_ID = -2147405738;

const int CSSMERR_AC_INVALID_DL_HANDLE = -2147405743;

const int CSSMERR_AC_INVALID_CL_HANDLE = -2147405742;

const int CSSMERR_AC_INVALID_TP_HANDLE = -2147405741;

const int CSSMERR_AC_INVALID_DB_HANDLE = -2147405750;

const int CSSMERR_AC_INVALID_DB_LIST_POINTER = -2147405747;

const int CSSM_AC_BASE_AC_ERROR = -2147405568;

const int CSSMERR_AC_INVALID_BASE_ACLS = -2147405567;

const int CSSMERR_AC_INVALID_TUPLE_CREDENTIALS = -2147405566;

const int CSSMERR_AC_INVALID_ENCODING = -2147405565;

const int CSSMERR_AC_INVALID_VALIDITY_PERIOD = -2147405564;

const int CSSMERR_AC_INVALID_REQUESTOR = -2147405563;

const int CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR = -2147405562;

const int CSSMERR_CL_INTERNAL_ERROR = -2147411967;

const int CSSMERR_CL_MEMORY_ERROR = -2147411966;

const int CSSMERR_CL_MDS_ERROR = -2147411965;

const int CSSMERR_CL_INVALID_POINTER = -2147411964;

const int CSSMERR_CL_INVALID_INPUT_POINTER = -2147411963;

const int CSSMERR_CL_INVALID_OUTPUT_POINTER = -2147411962;

const int CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED = -2147411961;

const int CSSMERR_CL_SELF_CHECK_FAILED = -2147411960;

const int CSSMERR_CL_OS_ACCESS_DENIED = -2147411959;

const int CSSMERR_CL_FUNCTION_FAILED = -2147411958;

const int CSSMERR_CL_INVALID_CONTEXT_HANDLE = -2147411904;

const int CSSMERR_CL_INVALID_CERTGROUP_POINTER = -2147411902;

const int CSSMERR_CL_INVALID_CERT_POINTER = -2147411901;

const int CSSMERR_CL_INVALID_CRL_POINTER = -2147411900;

const int CSSMERR_CL_INVALID_FIELD_POINTER = -2147411899;

const int CSSMERR_CL_INVALID_DATA = -2147411898;

const int CSSMERR_CL_CRL_ALREADY_SIGNED = -2147411897;

const int CSSMERR_CL_INVALID_NUMBER_OF_FIELDS = -2147411896;

const int CSSMERR_CL_VERIFICATION_FAILURE = -2147411895;

const int CSSMERR_CL_UNKNOWN_FORMAT = -2147411890;

const int CSSMERR_CL_UNKNOWN_TAG = -2147411889;

const int CSSMERR_CL_INVALID_PASSTHROUGH_ID = -2147411882;

const int CSSM_CL_BASE_CL_ERROR = -2147411712;

const int CSSMERR_CL_INVALID_BUNDLE_POINTER = -2147411711;

const int CSSMERR_CL_INVALID_CACHE_HANDLE = -2147411710;

const int CSSMERR_CL_INVALID_RESULTS_HANDLE = -2147411709;

const int CSSMERR_CL_INVALID_BUNDLE_INFO = -2147411708;

const int CSSMERR_CL_INVALID_CRL_INDEX = -2147411707;

const int CSSMERR_CL_INVALID_SCOPE = -2147411706;

const int CSSMERR_CL_NO_FIELD_VALUES = -2147411705;

const int CSSMERR_CL_SCOPE_NOT_SUPPORTED = -2147411704;

const int CSSMERR_DL_INTERNAL_ERROR = -2147414015;

const int CSSMERR_DL_MEMORY_ERROR = -2147414014;

const int CSSMERR_DL_MDS_ERROR = -2147414013;

const int CSSMERR_DL_INVALID_POINTER = -2147414012;

const int CSSMERR_DL_INVALID_INPUT_POINTER = -2147414011;

const int CSSMERR_DL_INVALID_OUTPUT_POINTER = -2147414010;

const int CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED = -2147414009;

const int CSSMERR_DL_SELF_CHECK_FAILED = -2147414008;

const int CSSMERR_DL_OS_ACCESS_DENIED = -2147414007;

const int CSSMERR_DL_FUNCTION_FAILED = -2147414006;

const int CSSMERR_DL_INVALID_CSP_HANDLE = -2147413936;

const int CSSMERR_DL_INVALID_DL_HANDLE = -2147413935;

const int CSSMERR_DL_INVALID_CL_HANDLE = -2147413934;

const int CSSMERR_DL_INVALID_DB_LIST_POINTER = -2147413939;

const int CSSMERR_DL_OPERATION_AUTH_DENIED = -2147413984;

const int CSSMERR_DL_OBJECT_USE_AUTH_DENIED = -2147413983;

const int CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED = -2147413982;

const int CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED = -2147413981;

const int CSSMERR_DL_OBJECT_ACL_REQUIRED = -2147413980;

const int CSSMERR_DL_INVALID_ACCESS_CREDENTIALS = -2147413979;

const int CSSMERR_DL_INVALID_ACL_BASE_CERTS = -2147413978;

const int CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED = -2147413977;

const int CSSMERR_DL_INVALID_SAMPLE_VALUE = -2147413976;

const int CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED = -2147413975;

const int CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE = -2147413974;

const int CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147413973;

const int CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK = -2147413972;

const int CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED = -2147413971;

const int CSSMERR_DL_INVALID_ACL_ENTRY_TAG = -2147413970;

const int CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND = -2147413969;

const int CSSMERR_DL_INVALID_ACL_EDIT_MODE = -2147413968;

const int CSSMERR_DL_ACL_CHANGE_FAILED = -2147413967;

const int CSSMERR_DL_INVALID_NEW_ACL_ENTRY = -2147413966;

const int CSSMERR_DL_INVALID_NEW_ACL_OWNER = -2147413965;

const int CSSMERR_DL_ACL_DELETE_FAILED = -2147413964;

const int CSSMERR_DL_ACL_REPLACE_FAILED = -2147413963;

const int CSSMERR_DL_ACL_ADD_FAILED = -2147413962;

const int CSSMERR_DL_INVALID_DB_HANDLE = -2147413942;

const int CSSMERR_DL_INVALID_PASSTHROUGH_ID = -2147413930;

const int CSSMERR_DL_INVALID_NETWORK_ADDR = -2147413929;

const int CSSM_DL_BASE_DL_ERROR = -2147413760;

const int CSSMERR_DL_DATABASE_CORRUPT = -2147413759;

const int CSSMERR_DL_INVALID_RECORD_INDEX = -2147413752;

const int CSSMERR_DL_INVALID_RECORDTYPE = -2147413751;

const int CSSMERR_DL_INVALID_FIELD_NAME = -2147413750;

const int CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT = -2147413749;

const int CSSMERR_DL_UNSUPPORTED_INDEX_INFO = -2147413748;

const int CSSMERR_DL_UNSUPPORTED_LOCALITY = -2147413747;

const int CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES = -2147413746;

const int CSSMERR_DL_UNSUPPORTED_NUM_INDEXES = -2147413745;

const int CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES = -2147413744;

const int CSSMERR_DL_UNSUPPORTED_RECORDTYPE = -2147413743;

const int CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE = -2147413742;

const int CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT = -2147413741;

const int CSSMERR_DL_INVALID_PARSING_MODULE = -2147413740;

const int CSSMERR_DL_INVALID_DB_NAME = -2147413738;

const int CSSMERR_DL_DATASTORE_DOESNOT_EXIST = -2147413737;

const int CSSMERR_DL_DATASTORE_ALREADY_EXISTS = -2147413736;

const int CSSMERR_DL_DB_LOCKED = -2147413735;

const int CSSMERR_DL_DATASTORE_IS_OPEN = -2147413734;

const int CSSMERR_DL_RECORD_NOT_FOUND = -2147413733;

const int CSSMERR_DL_MISSING_VALUE = -2147413732;

const int CSSMERR_DL_UNSUPPORTED_QUERY = -2147413731;

const int CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS = -2147413730;

const int CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS = -2147413729;

const int CSSMERR_DL_UNSUPPORTED_OPERATOR = -2147413727;

const int CSSMERR_DL_INVALID_RESULTS_HANDLE = -2147413726;

const int CSSMERR_DL_INVALID_DB_LOCATION = -2147413725;

const int CSSMERR_DL_INVALID_ACCESS_REQUEST = -2147413724;

const int CSSMERR_DL_INVALID_INDEX_INFO = -2147413723;

const int CSSMERR_DL_INVALID_SELECTION_TAG = -2147413722;

const int CSSMERR_DL_INVALID_NEW_OWNER = -2147413721;

const int CSSMERR_DL_INVALID_RECORD_UID = -2147413720;

const int CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA = -2147413719;

const int CSSMERR_DL_INVALID_MODIFY_MODE = -2147413718;

const int CSSMERR_DL_INVALID_OPEN_PARAMETERS = -2147413717;

const int CSSMERR_DL_RECORD_MODIFIED = -2147413716;

const int CSSMERR_DL_ENDOFDATA = -2147413715;

const int CSSMERR_DL_INVALID_QUERY = -2147413714;

const int CSSMERR_DL_INVALID_VALUE = -2147413713;

const int CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED = -2147413712;

const int CSSMERR_DL_STALE_UNIQUE_RECORD = -2147413711;

const int CSSM_WORDID_KEYCHAIN_PROMPT = 65536;

const int CSSM_WORDID_KEYCHAIN_LOCK = 65537;

const int CSSM_WORDID_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_WORDID_PROCESS = 65539;

const int CSSM_WORDID__RESERVED_1 = 65540;

const int CSSM_WORDID_SYMMETRIC_KEY = 65541;

const int CSSM_WORDID_SYSTEM = 65542;

const int CSSM_WORDID_KEY = 65543;

const int CSSM_WORDID_PIN = 65544;

const int CSSM_WORDID_PREAUTH = 65545;

const int CSSM_WORDID_PREAUTH_SOURCE = 65546;

const int CSSM_WORDID_ASYMMETRIC_KEY = 65547;

const int CSSM_WORDID_PARTITION = 65548;

const int CSSM_WORDID_KEYBAG_KEY = 65549;

const int CSSM_WORDID__FIRST_UNUSED = 65550;

const int CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_ACL_SUBJECT_TYPE_PROCESS = 65539;

const int CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE = 116;

const int CSSM_ACL_SUBJECT_TYPE_COMMENT = 12;

const int CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH = 65545;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE = 65546;

const int CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_ACL_SUBJECT_TYPE_PARTITION = 65548;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK = 65537;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_SAMPLE_TYPE_PROCESS = 65539;

const int CSSM_SAMPLE_TYPE_COMMENT = 12;

const int CSSM_SAMPLE_TYPE_RETRY_ID = 85;

const int CSSM_SAMPLE_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_SAMPLE_TYPE_PREAUTH = 65545;

const int CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_SAMPLE_TYPE_KEYBAG_KEY = 65549;

const int CSSM_ACL_AUTHORIZATION_CHANGE_ACL = 65536;

const int CSSM_ACL_AUTHORIZATION_CHANGE_OWNER = 65537;

const int CSSM_ACL_AUTHORIZATION_PARTITION_ID = 65538;

const int CSSM_ACL_AUTHORIZATION_INTEGRITY = 65539;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_BASE = 16842752;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_END = 16908288;

const int CSSM_ACL_CODE_SIGNATURE_INVALID = 0;

const int CSSM_ACL_CODE_SIGNATURE_OSX = 1;

const int CSSM_ACL_MATCH_UID = 1;

const int CSSM_ACL_MATCH_GID = 2;

const int CSSM_ACL_MATCH_HONOR_ROOT = 256;

const int CSSM_ACL_MATCH_BITS = 3;

const int CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE = 1;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED = 16;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT = 32;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID = 64;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT = 128;

const int CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK = 255;

const int CSSM_ACL_PREAUTH_TRACKING_BLOCKED = 0;

const int CSSM_ACL_PREAUTH_TRACKING_UNKNOWN = 1073741824;

const int CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED = -2147483648;

const int CSSM_DB_ACCESS_RESET = 65536;

const int CSSM_ALGID_APPLE_YARROW = -2147483648;

const int CSSM_ALGID_AES = -2147483647;

const int CSSM_ALGID_FEE = -2147483646;

const int CSSM_ALGID_FEE_MD5 = -2147483645;

const int CSSM_ALGID_FEE_SHA1 = -2147483644;

const int CSSM_ALGID_FEED = -2147483643;

const int CSSM_ALGID_FEEDEXP = -2147483642;

const int CSSM_ALGID_ASC = -2147483641;

const int CSSM_ALGID_SHA1HMAC_LEGACY = -2147483640;

const int CSSM_ALGID_KEYCHAIN_KEY = -2147483639;

const int CSSM_ALGID_PKCS12_PBE_ENCR = -2147483638;

const int CSSM_ALGID_PKCS12_PBE_MAC = -2147483637;

const int CSSM_ALGID_SECURE_PASSPHRASE = -2147483636;

const int CSSM_ALGID_PBE_OPENSSL_MD5 = -2147483635;

const int CSSM_ALGID_SHA256 = -2147483634;

const int CSSM_ALGID_SHA384 = -2147483633;

const int CSSM_ALGID_SHA512 = -2147483632;

const int CSSM_ALGID_ENTROPY_DEFAULT = -2147483631;

const int CSSM_ALGID_SHA224 = -2147483630;

const int CSSM_ALGID_SHA224WithRSA = -2147483629;

const int CSSM_ALGID_SHA256WithRSA = -2147483628;

const int CSSM_ALGID_SHA384WithRSA = -2147483627;

const int CSSM_ALGID_SHA512WithRSA = -2147483626;

const int CSSM_ALGID_OPENSSH1 = -2147483625;

const int CSSM_ALGID_SHA224WithECDSA = -2147483624;

const int CSSM_ALGID_SHA256WithECDSA = -2147483623;

const int CSSM_ALGID_SHA384WithECDSA = -2147483622;

const int CSSM_ALGID_SHA512WithECDSA = -2147483621;

const int CSSM_ALGID_ECDSA_SPECIFIED = -2147483620;

const int CSSM_ALGID_ECDH_X963_KDF = -2147483619;

const int CSSM_ALGID__FIRST_UNUSED = -2147483618;

const int CSSM_PADDING_APPLE_SSLv2 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_X509 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH = -2147483647;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSL = -2147483646;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2 = -2147483645;

const int CSSM_CUSTOM_COMMON_ERROR_EXTENT = 224;

const int CSSM_ERRCODE_NO_USER_INTERACTION = 224;

const int CSSM_ERRCODE_USER_CANCELED = 225;

const int CSSM_ERRCODE_SERVICE_NOT_AVAILABLE = 226;

const int CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION = 227;

const int CSSM_ERRCODE_DEVICE_RESET = 228;

const int CSSM_ERRCODE_DEVICE_FAILED = 229;

const int CSSM_ERRCODE_IN_DARK_WAKE = 230;

const int CSSMERR_CSSM_NO_USER_INTERACTION = -2147417888;

const int CSSMERR_AC_NO_USER_INTERACTION = -2147405600;

const int CSSMERR_CSP_NO_USER_INTERACTION = -2147415840;

const int CSSMERR_CL_NO_USER_INTERACTION = -2147411744;

const int CSSMERR_DL_NO_USER_INTERACTION = -2147413792;

const int CSSMERR_TP_NO_USER_INTERACTION = -2147409696;

const int CSSMERR_CSSM_USER_CANCELED = -2147417887;

const int CSSMERR_AC_USER_CANCELED = -2147405599;

const int CSSMERR_CSP_USER_CANCELED = -2147415839;

const int CSSMERR_CL_USER_CANCELED = -2147411743;

const int CSSMERR_DL_USER_CANCELED = -2147413791;

const int CSSMERR_TP_USER_CANCELED = -2147409695;

const int CSSMERR_CSSM_SERVICE_NOT_AVAILABLE = -2147417886;

const int CSSMERR_AC_SERVICE_NOT_AVAILABLE = -2147405598;

const int CSSMERR_CSP_SERVICE_NOT_AVAILABLE = -2147415838;

const int CSSMERR_CL_SERVICE_NOT_AVAILABLE = -2147411742;

const int CSSMERR_DL_SERVICE_NOT_AVAILABLE = -2147413790;

const int CSSMERR_TP_SERVICE_NOT_AVAILABLE = -2147409694;

const int CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147417885;

const int CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147405597;

const int CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147415837;

const int CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147411741;

const int CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147413789;

const int CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147409693;

const int CSSMERR_CSSM_DEVICE_RESET = -2147417884;

const int CSSMERR_AC_DEVICE_RESET = -2147405596;

const int CSSMERR_CSP_DEVICE_RESET = -2147415836;

const int CSSMERR_CL_DEVICE_RESET = -2147411740;

const int CSSMERR_DL_DEVICE_RESET = -2147413788;

const int CSSMERR_TP_DEVICE_RESET = -2147409692;

const int CSSMERR_CSSM_DEVICE_FAILED = -2147417883;

const int CSSMERR_AC_DEVICE_FAILED = -2147405595;

const int CSSMERR_CSP_DEVICE_FAILED = -2147415835;

const int CSSMERR_CL_DEVICE_FAILED = -2147411739;

const int CSSMERR_DL_DEVICE_FAILED = -2147413787;

const int CSSMERR_TP_DEVICE_FAILED = -2147409691;

const int CSSMERR_CSSM_IN_DARK_WAKE = -2147417882;

const int CSSMERR_AC_IN_DARK_WAKE = -2147405594;

const int CSSMERR_CSP_IN_DARK_WAKE = -2147415834;

const int CSSMERR_CL_IN_DARK_WAKE = -2147411738;

const int CSSMERR_DL_IN_DARK_WAKE = -2147413786;

const int CSSMERR_TP_IN_DARK_WAKE = -2147409690;

const int CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT = -2147415040;

const int CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE = -2147415039;

const int CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH = -2147415038;

const int CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE = -2147415037;

const int CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE = -2147415036;

const int CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR = -2147415035;

const int CSSMERR_CSP_APPLE_SSLv2_ROLLBACK = -2147415034;

const int CSSM_DL_DB_RECORD_GENERIC_PASSWORD = -2147483648;

const int CSSM_DL_DB_RECORD_INTERNET_PASSWORD = -2147483647;

const int CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD = -2147483646;

const int CSSM_DL_DB_RECORD_X509_CERTIFICATE = -2147479552;

const int CSSM_DL_DB_RECORD_USER_TRUST = -2147479551;

const int CSSM_DL_DB_RECORD_X509_CRL = -2147479550;

const int CSSM_DL_DB_RECORD_UNLOCK_REFERRAL = -2147479549;

const int CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE = -2147479548;

const int CSSM_DL_DB_RECORD_METADATA = -2147450880;

const int CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT = 0;

const int CSSM_APPLEFILEDL_COMMIT = 1;

const int CSSM_APPLEFILEDL_ROLLBACK = 2;

const int CSSM_APPLEFILEDL_TAKE_FILE_LOCK = 3;

const int CSSM_APPLEFILEDL_MAKE_BACKUP = 4;

const int CSSM_APPLEFILEDL_MAKE_COPY = 5;

const int CSSM_APPLEFILEDL_DELETE_FILE = 6;

const int CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT = 1;

const int CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE = 2;

const int CSSM_APPLE_UNLOCK_TYPE_KEYBAG = 3;

const int CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS = -2147412992;

const int CSSMERR_APPLEDL_DISK_FULL = -2147412991;

const int CSSMERR_APPLEDL_QUOTA_EXCEEDED = -2147412990;

const int CSSMERR_APPLEDL_FILE_TOO_BIG = -2147412989;

const int CSSMERR_APPLEDL_INVALID_DATABASE_BLOB = -2147412988;

const int CSSMERR_APPLEDL_INVALID_KEY_BLOB = -2147412987;

const int CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB = -2147412986;

const int CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB = -2147412985;

const int CSSMERR_APPLETP_HOSTNAME_MISMATCH = -2147408896;

const int CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN = -2147408895;

const int CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS = -2147408894;

const int CSSMERR_APPLETP_INVALID_CA = -2147408893;

const int CSSMERR_APPLETP_INVALID_AUTHORITY_ID = -2147408892;

const int CSSMERR_APPLETP_INVALID_SUBJECT_ID = -2147408891;

const int CSSMERR_APPLETP_INVALID_KEY_USAGE = -2147408890;

const int CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE = -2147408889;

const int CSSMERR_APPLETP_INVALID_ID_LINKAGE = -2147408888;

const int CSSMERR_APPLETP_PATH_LEN_CONSTRAINT = -2147408887;

const int CSSMERR_APPLETP_INVALID_ROOT = -2147408886;

const int CSSMERR_APPLETP_CRL_EXPIRED = -2147408885;

const int CSSMERR_APPLETP_CRL_NOT_VALID_YET = -2147408884;

const int CSSMERR_APPLETP_CRL_NOT_FOUND = -2147408883;

const int CSSMERR_APPLETP_CRL_SERVER_DOWN = -2147408882;

const int CSSMERR_APPLETP_CRL_BAD_URI = -2147408881;

const int CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN = -2147408880;

const int CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN = -2147408879;

const int CSSMERR_APPLETP_CRL_NOT_TRUSTED = -2147408878;

const int CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT = -2147408877;

const int CSSMERR_APPLETP_CRL_POLICY_FAIL = -2147408876;

const int CSSMERR_APPLETP_IDP_FAIL = -2147408875;

const int CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER = -2147408874;

const int CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER = -2147408873;

const int CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND = -2147408872;

const int CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE = -2147408871;

const int CSSMERR_APPLETP_SMIME_BAD_KEY_USE = -2147408870;

const int CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL = -2147408869;

const int CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS = -2147408868;

const int CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT = -2147408867;

const int CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE = -2147408866;

const int CSSMERR_APPLETP_OCSP_BAD_RESPONSE = -2147408865;

const int CSSMERR_APPLETP_OCSP_BAD_REQUEST = -2147408864;

const int CSSMERR_APPLETP_OCSP_UNAVAILABLE = -2147408863;

const int CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED = -2147408862;

const int CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK = -2147408861;

const int CSSMERR_APPLETP_NETWORK_FAILURE = -2147408860;

const int CSSMERR_APPLETP_OCSP_NOT_TRUSTED = -2147408859;

const int CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT = -2147408858;

const int CSSMERR_APPLETP_OCSP_SIG_ERROR = -2147408857;

const int CSSMERR_APPLETP_OCSP_NO_SIGNER = -2147408856;

const int CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ = -2147408855;

const int CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR = -2147408854;

const int CSSMERR_APPLETP_OCSP_RESP_TRY_LATER = -2147408853;

const int CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED = -2147408852;

const int CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED = -2147408851;

const int CSSMERR_APPLETP_OCSP_NONCE_MISMATCH = -2147408850;

const int CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH = -2147408849;

const int CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS = -2147408848;

const int CSSMERR_APPLETP_CS_BAD_PATH_LENGTH = -2147408847;

const int CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE = -2147408846;

const int CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT = -2147408845;

const int CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH = -2147408844;

const int CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE = -2147408843;

const int CSSMERR_APPLETP_TRUST_SETTING_DENY = -2147408842;

const int CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT = -2147408841;

const int CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT = -2147408840;

const int CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION = -2147408839;

const int CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL = -2147408838;

const int CSSMERR_APPLETP_IDENTIFIER_MISSING = -2147408837;

const int CSSMERR_APPLETP_CA_PIN_MISMATCH = -2147408836;

const int CSSMERR_APPLETP_LEAF_PIN_MISMATCH = -2147408835;

const int CSSMERR_APPLE_DOTMAC_REQ_QUEUED = -2147408796;

const int CSSMERR_APPLE_DOTMAC_REQ_REDIRECT = -2147408795;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR = -2147408794;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM = -2147408793;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH = -2147408792;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL = -2147408791;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL = -2147408790;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST = -2147408789;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR = -2147408788;

const int CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING = -2147408787;

const int CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING = -2147408786;

const int CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL = -2147408785;

const int CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK = -2147408784;

const int CSSM_APPLEDL_OPEN_PARAMETERS_VERSION = 1;

const int CSSM_APPLECSPDL_DB_LOCK = 0;

const int CSSM_APPLECSPDL_DB_UNLOCK = 1;

const int CSSM_APPLECSPDL_DB_GET_SETTINGS = 2;

const int CSSM_APPLECSPDL_DB_SET_SETTINGS = 3;

const int CSSM_APPLECSPDL_DB_IS_LOCKED = 4;

const int CSSM_APPLECSPDL_DB_CHANGE_PASSWORD = 5;

const int CSSM_APPLECSPDL_DB_GET_HANDLE = 6;

const int CSSM_APPLESCPDL_CSP_GET_KEYHANDLE = 7;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_8 = 8;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_9 = 9;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_10 = 10;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_11 = 11;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_12 = 12;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_13 = 13;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_14 = 14;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_15 = 15;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_16 = 16;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_17 = 17;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_18 = 18;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_19 = 19;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_20 = 20;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_21 = 21;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_22 = 22;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_23 = 23;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_24 = 24;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_25 = 25;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_26 = 26;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_27 = 27;

const int CSSM_APPLECSP_KEYDIGEST = 256;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM = 100;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL = 101;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1 = 102;

const int CSSM_ATTRIBUTE_VENDOR_DEFINED = 8388608;

const int CSSM_ATTRIBUTE_PUBLIC_KEY = 1082130432;

const int CSSM_ATTRIBUTE_FEE_PRIME_TYPE = 276824065;

const int CSSM_ATTRIBUTE_FEE_CURVE_TYPE = 276824066;

const int CSSM_ATTRIBUTE_ASC_OPTIMIZATION = 276824067;

const int CSSM_ATTRIBUTE_RSA_BLINDING = 276824068;

const int CSSM_ATTRIBUTE_PARAM_KEY = 1082130437;

const int CSSM_ATTRIBUTE_PROMPT = 545259526;

const int CSSM_ATTRIBUTE_ALERT_TITLE = 545259527;

const int CSSM_ATTRIBUTE_VERIFY_PASSPHRASE = 276824072;

const int CSSM_FEE_PRIME_TYPE_DEFAULT = 0;

const int CSSM_FEE_PRIME_TYPE_MERSENNE = 1;

const int CSSM_FEE_PRIME_TYPE_FEE = 2;

const int CSSM_FEE_PRIME_TYPE_GENERAL = 3;

const int CSSM_FEE_CURVE_TYPE_DEFAULT = 0;

const int CSSM_FEE_CURVE_TYPE_MONTGOMERY = 1;

const int CSSM_FEE_CURVE_TYPE_WEIERSTRASS = 2;

const int CSSM_FEE_CURVE_TYPE_ANSI_X9_62 = 3;

const int CSSM_ASC_OPTIMIZE_DEFAULT = 0;

const int CSSM_ASC_OPTIMIZE_SIZE = 1;

const int CSSM_ASC_OPTIMIZE_SECURITY = 2;

const int CSSM_ASC_OPTIMIZE_TIME = 3;

const int CSSM_ASC_OPTIMIZE_TIME_SIZE = 4;

const int CSSM_ASC_OPTIMIZE_ASCII = 5;

const int CSSM_KEYATTR_PARTIAL = 65536;

const int CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT = 131072;

const int CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT = 1;

const int CSSM_TP_ACTION_FETCH_CRL_FROM_NET = 2;

const int CSSM_TP_ACTION_CRL_SUFFICIENT = 4;

const int CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT = 8;

const int CSSM_TP_ACTION_ALLOW_EXPIRED = 1;

const int CSSM_TP_ACTION_LEAF_IS_CA = 2;

const int CSSM_TP_ACTION_FETCH_CERT_FROM_NET = 4;

const int CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT = 8;

const int CSSM_TP_ACTION_REQUIRE_REV_PER_CERT = 16;

const int CSSM_TP_ACTION_TRUST_SETTINGS = 32;

const int CSSM_TP_ACTION_IMPLICIT_ANCHORS = 64;

const int CSSM_CERT_STATUS_EXPIRED = 1;

const int CSSM_CERT_STATUS_NOT_VALID_YET = 2;

const int CSSM_CERT_STATUS_IS_IN_INPUT_CERTS = 4;

const int CSSM_CERT_STATUS_IS_IN_ANCHORS = 8;

const int CSSM_CERT_STATUS_IS_ROOT = 16;

const int CSSM_CERT_STATUS_IS_FROM_NET = 32;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER = 64;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN = 128;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM = 256;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST = 512;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_DENY = 1024;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR = 2048;

const int CSSM_EVIDENCE_FORM_APPLE_HEADER = -2147483648;

const int CSSM_EVIDENCE_FORM_APPLE_CERTGROUP = -2147483647;

const int CSSM_EVIDENCE_FORM_APPLE_CERT_INFO = -2147483646;

const int CSSM_APPLEX509CL_OBTAIN_CSR = 0;

const int CSSM_APPLEX509CL_VERIFY_CSR = 1;

const int kSecSubjectItemAttr = 1937072746;

const int kSecIssuerItemAttr = 1769173877;

const int kSecSerialNumberItemAttr = 1936614002;

const int kSecPublicKeyHashItemAttr = 1752198009;

const int kSecSubjectKeyIdentifierItemAttr = 1936419172;

const int kSecCertTypeItemAttr = 1668577648;

const int kSecCertEncodingItemAttr = 1667591779;

const int SSL_NULL_WITH_NULL_NULL = 0;

const int SSL_RSA_WITH_NULL_MD5 = 1;

const int SSL_RSA_WITH_NULL_SHA = 2;

const int SSL_RSA_EXPORT_WITH_RC4_40_MD5 = 3;

const int SSL_RSA_WITH_RC4_128_MD5 = 4;

const int SSL_RSA_WITH_RC4_128_SHA = 5;

const int SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6;

const int SSL_RSA_WITH_IDEA_CBC_SHA = 7;

const int SSL_RSA_EXPORT_WITH_DES40_CBC_SHA = 8;

const int SSL_RSA_WITH_DES_CBC_SHA = 9;

const int SSL_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11;

const int SSL_DH_DSS_WITH_DES_CBC_SHA = 12;

const int SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14;

const int SSL_DH_RSA_WITH_DES_CBC_SHA = 15;

const int SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17;

const int SSL_DHE_DSS_WITH_DES_CBC_SHA = 18;

const int SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20;

const int SSL_DHE_RSA_WITH_DES_CBC_SHA = 21;

const int SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23;

const int SSL_DH_anon_WITH_RC4_128_MD5 = 24;

const int SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25;

const int SSL_DH_anon_WITH_DES_CBC_SHA = 26;

const int SSL_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int SSL_FORTEZZA_DMS_WITH_NULL_SHA = 28;

const int SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA = 29;

const int TLS_RSA_WITH_AES_128_CBC_SHA = 47;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA = 52;

const int TLS_RSA_WITH_AES_256_CBC_SHA = 53;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA = 58;

const int TLS_ECDH_ECDSA_WITH_NULL_SHA = -16383;

const int TLS_ECDH_ECDSA_WITH_RC4_128_SHA = -16382;

const int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = -16381;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = -16380;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = -16379;

const int TLS_ECDHE_ECDSA_WITH_NULL_SHA = -16378;

const int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = -16377;

const int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = -16376;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = -16375;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = -16374;

const int TLS_ECDH_RSA_WITH_NULL_SHA = -16373;

const int TLS_ECDH_RSA_WITH_RC4_128_SHA = -16372;

const int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = -16371;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = -16370;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = -16369;

const int TLS_ECDHE_RSA_WITH_NULL_SHA = -16368;

const int TLS_ECDHE_RSA_WITH_RC4_128_SHA = -16367;

const int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = -16366;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = -16365;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = -16364;

const int TLS_ECDH_anon_WITH_NULL_SHA = -16363;

const int TLS_ECDH_anon_WITH_RC4_128_SHA = -16362;

const int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = -16361;

const int TLS_ECDH_anon_WITH_AES_128_CBC_SHA = -16360;

const int TLS_ECDH_anon_WITH_AES_256_CBC_SHA = -16359;

const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = -16331;

const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = -16330;

const int TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = -13141;

const int TLS_NULL_WITH_NULL_NULL = 0;

const int TLS_RSA_WITH_NULL_MD5 = 1;

const int TLS_RSA_WITH_NULL_SHA = 2;

const int TLS_RSA_WITH_RC4_128_MD5 = 4;

const int TLS_RSA_WITH_RC4_128_SHA = 5;

const int TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int TLS_RSA_WITH_NULL_SHA256 = 59;

const int TLS_RSA_WITH_AES_128_CBC_SHA256 = 60;

const int TLS_RSA_WITH_AES_256_CBC_SHA256 = 61;

const int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107;

const int TLS_DH_anon_WITH_RC4_128_MD5 = 24;

const int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109;

const int TLS_PSK_WITH_RC4_128_SHA = 138;

const int TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139;

const int TLS_PSK_WITH_AES_128_CBC_SHA = 140;

const int TLS_PSK_WITH_AES_256_CBC_SHA = 141;

const int TLS_DHE_PSK_WITH_RC4_128_SHA = 142;

const int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145;

const int TLS_RSA_PSK_WITH_RC4_128_SHA = 146;

const int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149;

const int TLS_PSK_WITH_NULL_SHA = 44;

const int TLS_DHE_PSK_WITH_NULL_SHA = 45;

const int TLS_RSA_PSK_WITH_NULL_SHA = 46;

const int TLS_RSA_WITH_AES_128_GCM_SHA256 = 156;

const int TLS_RSA_WITH_AES_256_GCM_SHA384 = 157;

const int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158;

const int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159;

const int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160;

const int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161;

const int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162;

const int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163;

const int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164;

const int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165;

const int TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166;

const int TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167;

const int TLS_PSK_WITH_AES_128_GCM_SHA256 = 168;

const int TLS_PSK_WITH_AES_256_GCM_SHA384 = 169;

const int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170;

const int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171;

const int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172;

const int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173;

const int TLS_PSK_WITH_AES_128_CBC_SHA256 = 174;

const int TLS_PSK_WITH_AES_256_CBC_SHA384 = 175;

const int TLS_PSK_WITH_NULL_SHA256 = 176;

const int TLS_PSK_WITH_NULL_SHA384 = 177;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179;

const int TLS_DHE_PSK_WITH_NULL_SHA256 = 180;

const int TLS_DHE_PSK_WITH_NULL_SHA384 = 181;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183;

const int TLS_RSA_PSK_WITH_NULL_SHA256 = 184;

const int TLS_RSA_PSK_WITH_NULL_SHA384 = 185;

const int TLS_AES_128_GCM_SHA256 = 4865;

const int TLS_AES_256_GCM_SHA384 = 4866;

const int TLS_CHACHA20_POLY1305_SHA256 = 4867;

const int TLS_AES_128_CCM_SHA256 = 4868;

const int TLS_AES_128_CCM_8_SHA256 = 4869;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = -16349;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = -16348;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = -16347;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = -16346;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = -16345;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = -16344;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = -16343;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = -16342;

const int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = -16341;

const int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = -16340;

const int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = -16339;

const int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = -16338;

const int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = -16337;

const int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = -16336;

const int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = -16335;

const int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = -16334;

const int TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = -13144;

const int TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = -13143;

const int TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255;

const int SSL_RSA_WITH_RC2_CBC_MD5 = -128;

const int SSL_RSA_WITH_IDEA_CBC_MD5 = -127;

const int SSL_RSA_WITH_DES_CBC_MD5 = -126;

const int SSL_RSA_WITH_3DES_EDE_CBC_MD5 = -125;

const int SSL_NO_SUCH_CIPHERSUITE = -1;

const int NSASCIIStringEncoding = 1;

const int NSNEXTSTEPStringEncoding = 2;

const int NSJapaneseEUCStringEncoding = 3;

const int NSUTF8StringEncoding = 4;

const int NSISOLatin1StringEncoding = 5;

const int NSSymbolStringEncoding = 6;

const int NSNonLossyASCIIStringEncoding = 7;

const int NSShiftJISStringEncoding = 8;

const int NSISOLatin2StringEncoding = 9;

const int NSUnicodeStringEncoding = 10;

const int NSWindowsCP1251StringEncoding = 11;

const int NSWindowsCP1252StringEncoding = 12;

const int NSWindowsCP1253StringEncoding = 13;

const int NSWindowsCP1254StringEncoding = 14;

const int NSWindowsCP1250StringEncoding = 15;

const int NSISO2022JPStringEncoding = 21;

const int NSMacOSRomanStringEncoding = 30;

const int NSUTF16StringEncoding = 10;

const int NSUTF16BigEndianStringEncoding = 2415919360;

const int NSUTF16LittleEndianStringEncoding = 2483028224;

const int NSUTF32StringEncoding = 2348810496;

const int NSUTF32BigEndianStringEncoding = 2550137088;

const int NSUTF32LittleEndianStringEncoding = 2617245952;

const int NSProprietaryStringEncoding = 65536;

const int NSOpenStepUnicodeReservedBase = 62464;

const int kNativeArgNumberPos = 0;

const int kNativeArgNumberSize = 8;

const int kNativeArgTypePos = 8;

const int kNativeArgTypeSize = 8;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __VISIONOS_1_0 = 10000;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 140200;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int DYNAMIC_TARGETS_ENABLED = 0;

const int TARGET_OS_WIN32 = 0;

const int TARGET_OS_WINDOWS = 0;

const int TARGET_OS_UNIX = 0;

const int TARGET_OS_LINUX = 0;

const int TARGET_OS_MAC = 1;

const int TARGET_OS_OSX = 1;

const int TARGET_OS_IPHONE = 0;

const int TARGET_OS_IOS = 0;

const int TARGET_OS_WATCH = 0;

const int TARGET_OS_TV = 0;

const int TARGET_OS_MACCATALYST = 0;

const int TARGET_OS_VISION = 0;

const int TARGET_OS_UIKITFORMAC = 0;

const int TARGET_OS_SIMULATOR = 0;

const int TARGET_OS_EMBEDDED = 0;

const int TARGET_OS_RTKIT = 0;

const int TARGET_OS_DRIVERKIT = 0;

const int TARGET_IPHONE_SIMULATOR = 0;

const int TARGET_OS_NANO = 0;

const int TARGET_ABI_USES_IOS_VALUES = 1;

const int TARGET_CPU_PPC = 0;

const int TARGET_CPU_PPC64 = 0;

const int TARGET_CPU_68K = 0;

const int TARGET_CPU_X86 = 0;

const int TARGET_CPU_X86_64 = 0;

const int TARGET_CPU_ARM = 0;

const int TARGET_CPU_ARM64 = 1;

const int TARGET_CPU_MIPS = 0;

const int TARGET_CPU_SPARC = 0;

const int TARGET_CPU_ALPHA = 0;

const int TARGET_RT_MAC_CFM = 0;

const int TARGET_RT_MAC_MACHO = 1;

const int TARGET_RT_LITTLE_ENDIAN = 1;

const int TARGET_RT_BIG_ENDIAN = 0;

const int TARGET_RT_64_BIT = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __GNUC_VA_LIST = 1;

const int __DARWIN_CLK_TCK = 100;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int CHAR_BIT = 8;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int API_TO_BE_DEPRECATED = 100000;

const int API_TO_BE_DEPRECATED_MACOS = 100000;

const int API_TO_BE_DEPRECATED_IOS = 100000;

const int API_TO_BE_DEPRECATED_TVOS = 100000;

const int API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int TRUE = 1;

const int FALSE = 0;

const int OS_OBJECT_HAVE_OBJC_SUPPORT = 0;

const int OS_OBJECT_USE_OBJC = 0;

const int OS_OBJECT_SWIFT3 = 0;

const int OS_OBJECT_USE_OBJC_RETAIN_RELEASE = 0;

const String __ASSERT_FILE_NAME = 'temp_for_macros.hpp';

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const String __PRI_8_LENGTH_MODIFIER__ = 'hh';

const String __PRI_64_LENGTH_MODIFIER__ = 'll';

const String __SCN_64_LENGTH_MODIFIER__ = 'll';

const String __PRI_MAX_LENGTH_MODIFIER__ = 'j';

const String __SCN_MAX_LENGTH_MODIFIER__ = 'j';

const String PRId8 = 'hhd';

const String PRIi8 = 'hhi';

const String PRIo8 = 'hho';

const String PRIu8 = 'hhu';

const String PRIx8 = 'hhx';

const String PRIX8 = 'hhX';

const String PRId16 = 'hd';

const String PRIi16 = 'hi';

const String PRIo16 = 'ho';

const String PRIu16 = 'hu';

const String PRIx16 = 'hx';

const String PRIX16 = 'hX';

const String PRId32 = 'd';

const String PRIi32 = 'i';

const String PRIo32 = 'o';

const String PRIu32 = 'u';

const String PRIx32 = 'x';

const String PRIX32 = 'X';

const String PRId64 = 'lld';

const String PRIi64 = 'lli';

const String PRIo64 = 'llo';

const String PRIu64 = 'llu';

const String PRIx64 = 'llx';

const String PRIX64 = 'llX';

const String PRIdLEAST8 = 'hhd';

const String PRIiLEAST8 = 'hhi';

const String PRIoLEAST8 = 'hho';

const String PRIuLEAST8 = 'hhu';

const String PRIxLEAST8 = 'hhx';

const String PRIXLEAST8 = 'hhX';

const String PRIdLEAST16 = 'hd';

const String PRIiLEAST16 = 'hi';

const String PRIoLEAST16 = 'ho';

const String PRIuLEAST16 = 'hu';

const String PRIxLEAST16 = 'hx';

const String PRIXLEAST16 = 'hX';

const String PRIdLEAST32 = 'd';

const String PRIiLEAST32 = 'i';

const String PRIoLEAST32 = 'o';

const String PRIuLEAST32 = 'u';

const String PRIxLEAST32 = 'x';

const String PRIXLEAST32 = 'X';

const String PRIdLEAST64 = 'lld';

const String PRIiLEAST64 = 'lli';

const String PRIoLEAST64 = 'llo';

const String PRIuLEAST64 = 'llu';

const String PRIxLEAST64 = 'llx';

const String PRIXLEAST64 = 'llX';

const String PRIdFAST8 = 'hhd';

const String PRIiFAST8 = 'hhi';

const String PRIoFAST8 = 'hho';

const String PRIuFAST8 = 'hhu';

const String PRIxFAST8 = 'hhx';

const String PRIXFAST8 = 'hhX';

const String PRIdFAST16 = 'hd';

const String PRIiFAST16 = 'hi';

const String PRIoFAST16 = 'ho';

const String PRIuFAST16 = 'hu';

const String PRIxFAST16 = 'hx';

const String PRIXFAST16 = 'hX';

const String PRIdFAST32 = 'd';

const String PRIiFAST32 = 'i';

const String PRIoFAST32 = 'o';

const String PRIuFAST32 = 'u';

const String PRIxFAST32 = 'x';

const String PRIXFAST32 = 'X';

const String PRIdFAST64 = 'lld';

const String PRIiFAST64 = 'lli';

const String PRIoFAST64 = 'llo';

const String PRIuFAST64 = 'llu';

const String PRIxFAST64 = 'llx';

const String PRIXFAST64 = 'llX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String PRIdMAX = 'jd';

const String PRIiMAX = 'ji';

const String PRIoMAX = 'jo';

const String PRIuMAX = 'ju';

const String PRIxMAX = 'jx';

const String PRIXMAX = 'jX';

const String SCNd8 = 'hhd';

const String SCNi8 = 'hhi';

const String SCNo8 = 'hho';

const String SCNu8 = 'hhu';

const String SCNx8 = 'hhx';

const String SCNd16 = 'hd';

const String SCNi16 = 'hi';

const String SCNo16 = 'ho';

const String SCNu16 = 'hu';

const String SCNx16 = 'hx';

const String SCNd32 = 'd';

const String SCNi32 = 'i';

const String SCNo32 = 'o';

const String SCNu32 = 'u';

const String SCNx32 = 'x';

const String SCNd64 = 'lld';

const String SCNi64 = 'lli';

const String SCNo64 = 'llo';

const String SCNu64 = 'llu';

const String SCNx64 = 'llx';

const String SCNdLEAST8 = 'hhd';

const String SCNiLEAST8 = 'hhi';

const String SCNoLEAST8 = 'hho';

const String SCNuLEAST8 = 'hhu';

const String SCNxLEAST8 = 'hhx';

const String SCNdLEAST16 = 'hd';

const String SCNiLEAST16 = 'hi';

const String SCNoLEAST16 = 'ho';

const String SCNuLEAST16 = 'hu';

const String SCNxLEAST16 = 'hx';

const String SCNdLEAST32 = 'd';

const String SCNiLEAST32 = 'i';

const String SCNoLEAST32 = 'o';

const String SCNuLEAST32 = 'u';

const String SCNxLEAST32 = 'x';

const String SCNdLEAST64 = 'lld';

const String SCNiLEAST64 = 'lli';

const String SCNoLEAST64 = 'llo';

const String SCNuLEAST64 = 'llu';

const String SCNxLEAST64 = 'llx';

const String SCNdFAST8 = 'hhd';

const String SCNiFAST8 = 'hhi';

const String SCNoFAST8 = 'hho';

const String SCNuFAST8 = 'hhu';

const String SCNxFAST8 = 'hhx';

const String SCNdFAST16 = 'hd';

const String SCNiFAST16 = 'hi';

const String SCNoFAST16 = 'ho';

const String SCNuFAST16 = 'hu';

const String SCNxFAST16 = 'hx';

const String SCNdFAST32 = 'd';

const String SCNiFAST32 = 'i';

const String SCNoFAST32 = 'o';

const String SCNuFAST32 = 'u';

const String SCNxFAST32 = 'x';

const String SCNdFAST64 = 'lld';

const String SCNiFAST64 = 'lli';

const String SCNoFAST64 = 'llo';

const String SCNuFAST64 = 'llu';

const String SCNxFAST64 = 'llx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const String SCNdMAX = 'jd';

const String SCNiMAX = 'ji';

const String SCNoMAX = 'jo';

const String SCNuMAX = 'ju';

const String SCNxMAX = 'jx';

const int MACH_PORT_NULL = 0;

const int MACH_PORT_DEAD = 4294967295;

const int MACH_PORT_RIGHT_SEND = 0;

const int MACH_PORT_RIGHT_RECEIVE = 1;

const int MACH_PORT_RIGHT_SEND_ONCE = 2;

const int MACH_PORT_RIGHT_PORT_SET = 3;

const int MACH_PORT_RIGHT_DEAD_NAME = 4;

const int MACH_PORT_RIGHT_LABELH = 5;

const int MACH_PORT_RIGHT_NUMBER = 6;

const int MACH_PORT_TYPE_NONE = 0;

const int MACH_PORT_TYPE_SEND = 65536;

const int MACH_PORT_TYPE_RECEIVE = 131072;

const int MACH_PORT_TYPE_SEND_ONCE = 262144;

const int MACH_PORT_TYPE_PORT_SET = 524288;

const int MACH_PORT_TYPE_DEAD_NAME = 1048576;

const int MACH_PORT_TYPE_LABELH = 2097152;

const int MACH_PORT_TYPE_SEND_RECEIVE = 196608;

const int MACH_PORT_TYPE_SEND_RIGHTS = 327680;

const int MACH_PORT_TYPE_PORT_RIGHTS = 458752;

const int MACH_PORT_TYPE_PORT_OR_DEAD = 1507328;

const int MACH_PORT_TYPE_ALL_RIGHTS = 2031616;

const int MACH_PORT_TYPE_DNREQUEST = 2147483648;

const int MACH_PORT_TYPE_SPREQUEST = 1073741824;

const int MACH_PORT_TYPE_SPREQUEST_DELAYED = 536870912;

const int MACH_PORT_SRIGHTS_NONE = 0;

const int MACH_PORT_SRIGHTS_PRESENT = 1;

const int MACH_PORT_QLIMIT_ZERO = 0;

const int MACH_PORT_QLIMIT_BASIC = 5;

const int MACH_PORT_QLIMIT_SMALL = 16;

const int MACH_PORT_QLIMIT_LARGE = 1024;

const int MACH_PORT_QLIMIT_KERNEL = 65534;

const int MACH_PORT_QLIMIT_MIN = 0;

const int MACH_PORT_QLIMIT_DEFAULT = 5;

const int MACH_PORT_QLIMIT_MAX = 1024;

const int MACH_PORT_STATUS_FLAG_TEMPOWNER = 1;

const int MACH_PORT_STATUS_FLAG_GUARDED = 2;

const int MACH_PORT_STATUS_FLAG_STRICT_GUARD = 4;

const int MACH_PORT_STATUS_FLAG_IMP_DONATION = 8;

const int MACH_PORT_STATUS_FLAG_REVIVE = 16;

const int MACH_PORT_STATUS_FLAG_TASKPTR = 32;

const int MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = 64;

const int MACH_PORT_STATUS_FLAG_NO_GRANT = 128;

const int MACH_PORT_LIMITS_INFO = 1;

const int MACH_PORT_RECEIVE_STATUS = 2;

const int MACH_PORT_DNREQUESTS_SIZE = 3;

const int MACH_PORT_TEMPOWNER = 4;

const int MACH_PORT_IMPORTANCE_RECEIVER = 5;

const int MACH_PORT_DENAP_RECEIVER = 6;

const int MACH_PORT_INFO_EXT = 7;

const int MACH_PORT_GUARD_INFO = 8;

const int MACH_PORT_SERVICE_THROTTLED = 9;

const int MACH_PORT_LIMITS_INFO_COUNT = 1;

const int MACH_PORT_RECEIVE_STATUS_COUNT = 10;

const int MACH_PORT_DNREQUESTS_SIZE_COUNT = 1;

const int MACH_PORT_INFO_EXT_COUNT = 17;

const int MACH_PORT_GUARD_INFO_COUNT = 2;

const int MACH_PORT_SERVICE_THROTTLED_COUNT = 1;

const int MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN = 255;

const int MACH_SERVICE_PORT_INFO_COUNT = 0;

const int MPO_CONTEXT_AS_GUARD = 1;

const int MPO_QLIMIT = 2;

const int MPO_TEMPOWNER = 4;

const int MPO_IMPORTANCE_RECEIVER = 8;

const int MPO_INSERT_SEND_RIGHT = 16;

const int MPO_STRICT = 32;

const int MPO_DENAP_RECEIVER = 64;

const int MPO_IMMOVABLE_RECEIVE = 128;

const int MPO_FILTER_MSG = 256;

const int MPO_TG_BLOCK_TRACKING = 512;

const int MPO_SERVICE_PORT = 1024;

const int MPO_CONNECTION_PORT = 2048;

const int MPO_REPLY_PORT = 4096;

const int MPO_ENFORCE_REPLY_PORT_SEMANTICS = 8192;

const int MPO_PROVISIONAL_REPLY_PORT = 16384;

const int MPO_PROVISIONAL_ID_PROT_OPTOUT = 32768;

const int GUARD_TYPE_MACH_PORT = 1;

const int MAX_FATAL_kGUARD_EXC_CODE = 128;

const int MPG_FLAGS_NONE = 0;

const int MAX_OPTIONAL_kGUARD_EXC_CODE = 524288;

const int MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = 72057594037927936;

const int MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = 144115188075855872;

const int MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = 288230376151711744;

const int MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = 576460752303423488;

const int MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = 1152921504606846976;

const int MPG_FLAGS_STRICT_REPLY_MASK = -72057594037927936;

const int MPG_FLAGS_MOD_REFS_PINNED_DEALLOC = 72057594037927936;

const int MPG_FLAGS_MOD_REFS_PINNED_DESTROY = 144115188075855872;

const int MPG_FLAGS_MOD_REFS_PINNED_COPYIN = 288230376151711744;

const int MPG_FLAGS_IMMOVABLE_PINNED = 72057594037927936;

const int MPG_STRICT = 1;

const int MPG_IMMOVABLE_RECEIVE = 2;

const int _POSIX_VERSION = 200112;

const int _POSIX2_VERSION = 200112;

const int _POSIX_VDISABLE = 255;

const int F_OK = 0;

const int X_OK = 1;

const int W_OK = 2;

const int R_OK = 4;

const int _READ_OK = 512;

const int _WRITE_OK = 1024;

const int _EXECUTE_OK = 2048;

const int _DELETE_OK = 4096;

const int _APPEND_OK = 8192;

const int _RMFILE_OK = 16384;

const int _RATTR_OK = 32768;

const int _WATTR_OK = 65536;

const int _REXT_OK = 131072;

const int _WEXT_OK = 262144;

const int _RPERM_OK = 524288;

const int _WPERM_OK = 1048576;

const int _CHOWN_OK = 2097152;

const int _ACCESS_EXTENDED_MASK = 4193792;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int ACCESSX_MAX_DESCRIPTORS = 100;

const int ACCESSX_MAX_TABLESIZE = 16384;

const int _PC_LINK_MAX = 1;

const int _PC_MAX_CANON = 2;

const int _PC_MAX_INPUT = 3;

const int _PC_NAME_MAX = 4;

const int _PC_PATH_MAX = 5;

const int _PC_PIPE_BUF = 6;

const int _PC_CHOWN_RESTRICTED = 7;

const int _PC_NO_TRUNC = 8;

const int _PC_VDISABLE = 9;

const int _PC_NAME_CHARS_MAX = 10;

const int _PC_CASE_SENSITIVE = 11;

const int _PC_CASE_PRESERVING = 12;

const int _PC_EXTENDED_SECURITY_NP = 13;

const int _PC_AUTH_OPAQUE_NP = 14;

const int _PC_2_SYMLINKS = 15;

const int _PC_ALLOC_SIZE_MIN = 16;

const int _PC_ASYNC_IO = 17;

const int _PC_FILESIZEBITS = 18;

const int _PC_PRIO_IO = 19;

const int _PC_REC_INCR_XFER_SIZE = 20;

const int _PC_REC_MAX_XFER_SIZE = 21;

const int _PC_REC_MIN_XFER_SIZE = 22;

const int _PC_REC_XFER_ALIGN = 23;

const int _PC_SYMLINK_MAX = 24;

const int _PC_SYNC_IO = 25;

const int _PC_XATTR_SIZE_BITS = 26;

const int _PC_MIN_HOLE_SIZE = 27;

const int _CS_PATH = 1;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _XOPEN_VERSION = 600;

const int _XOPEN_XCU_VERSION = 4;

const int _POSIX_ADVISORY_INFO = -1;

const int _POSIX_ASYNCHRONOUS_IO = -1;

const int _POSIX_BARRIERS = -1;

const int _POSIX_CHOWN_RESTRICTED = 200112;

const int _POSIX_CLOCK_SELECTION = -1;

const int _POSIX_CPUTIME = -1;

const int _POSIX_FSYNC = 200112;

const int _POSIX_IPV6 = 200112;

const int _POSIX_JOB_CONTROL = 200112;

const int _POSIX_MAPPED_FILES = 200112;

const int _POSIX_MEMLOCK = -1;

const int _POSIX_MEMLOCK_RANGE = -1;

const int _POSIX_MEMORY_PROTECTION = 200112;

const int _POSIX_MESSAGE_PASSING = -1;

const int _POSIX_MONOTONIC_CLOCK = -1;

const int _POSIX_NO_TRUNC = 200112;

const int _POSIX_PRIORITIZED_IO = -1;

const int _POSIX_PRIORITY_SCHEDULING = -1;

const int _POSIX_RAW_SOCKETS = -1;

const int _POSIX_READER_WRITER_LOCKS = 200112;

const int _POSIX_REALTIME_SIGNALS = -1;

const int _POSIX_REGEXP = 200112;

const int _POSIX_SAVED_IDS = 200112;

const int _POSIX_SEMAPHORES = -1;

const int _POSIX_SHARED_MEMORY_OBJECTS = -1;

const int _POSIX_SHELL = 200112;

const int _POSIX_SPAWN = 200112;

const int _POSIX_SPIN_LOCKS = -1;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SYNCHRONIZED_IO = -1;

const int _POSIX_THREAD_ATTR_STACKADDR = 200112;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200112;

const int _POSIX_THREAD_CPUTIME = -1;

const int _POSIX_THREAD_PRIO_INHERIT = -1;

const int _POSIX_THREAD_PRIO_PROTECT = -1;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = -1;

const int _POSIX_THREAD_PROCESS_SHARED = 200112;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200112;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREADS = 200112;

const int _POSIX_TIMEOUTS = -1;

const int _POSIX_TIMERS = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX2_C_BIND = 200112;

const int _POSIX2_C_DEV = 200112;

const int _POSIX2_CHAR_TERM = 200112;

const int _POSIX2_FORT_DEV = -1;

const int _POSIX2_FORT_RUN = 200112;

const int _POSIX2_LOCALEDEF = 200112;

const int _POSIX2_PBS = -1;

const int _POSIX2_PBS_ACCOUNTING = -1;

const int _POSIX2_PBS_CHECKPOINT = -1;

const int _POSIX2_PBS_LOCATE = -1;

const int _POSIX2_PBS_MESSAGE = -1;

const int _POSIX2_PBS_TRACK = -1;

const int _POSIX2_SW_DEV = 200112;

const int _POSIX2_UPE = 200112;

const int __ILP32_OFF32 = -1;

const int __ILP32_OFFBIG = -1;

const int __LP64_OFF64 = 1;

const int __LPBIG_OFFBIG = 1;

const int _POSIX_V6_ILP32_OFF32 = -1;

const int _POSIX_V6_ILP32_OFFBIG = -1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = 1;

const int _POSIX_V7_ILP32_OFF32 = -1;

const int _POSIX_V7_ILP32_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = 1;

const int _V6_ILP32_OFF32 = -1;

const int _V6_ILP32_OFFBIG = -1;

const int _V6_LP64_OFF64 = 1;

const int _V6_LPBIG_OFFBIG = 1;

const int _XBS5_ILP32_OFF32 = -1;

const int _XBS5_ILP32_OFFBIG = -1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = 1;

const int _XOPEN_CRYPT = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = -1;

const int _XOPEN_REALTIME = -1;

const int _XOPEN_REALTIME_THREADS = -1;

const int _XOPEN_SHM = 1;

const int _XOPEN_STREAMS = -1;

const int _XOPEN_UNIX = 1;

const int _SC_ARG_MAX = 1;

const int _SC_CHILD_MAX = 2;

const int _SC_CLK_TCK = 3;

const int _SC_NGROUPS_MAX = 4;

const int _SC_OPEN_MAX = 5;

const int _SC_JOB_CONTROL = 6;

const int _SC_SAVED_IDS = 7;

const int _SC_VERSION = 8;

const int _SC_BC_BASE_MAX = 9;

const int _SC_BC_DIM_MAX = 10;

const int _SC_BC_SCALE_MAX = 11;

const int _SC_BC_STRING_MAX = 12;

const int _SC_COLL_WEIGHTS_MAX = 13;

const int _SC_EXPR_NEST_MAX = 14;

const int _SC_LINE_MAX = 15;

const int _SC_RE_DUP_MAX = 16;

const int _SC_2_VERSION = 17;

const int _SC_2_C_BIND = 18;

const int _SC_2_C_DEV = 19;

const int _SC_2_CHAR_TERM = 20;

const int _SC_2_FORT_DEV = 21;

const int _SC_2_FORT_RUN = 22;

const int _SC_2_LOCALEDEF = 23;

const int _SC_2_SW_DEV = 24;

const int _SC_2_UPE = 25;

const int _SC_STREAM_MAX = 26;

const int _SC_TZNAME_MAX = 27;

const int _SC_ASYNCHRONOUS_IO = 28;

const int _SC_PAGESIZE = 29;

const int _SC_MEMLOCK = 30;

const int _SC_MEMLOCK_RANGE = 31;

const int _SC_MEMORY_PROTECTION = 32;

const int _SC_MESSAGE_PASSING = 33;

const int _SC_PRIORITIZED_IO = 34;

const int _SC_PRIORITY_SCHEDULING = 35;

const int _SC_REALTIME_SIGNALS = 36;

const int _SC_SEMAPHORES = 37;

const int _SC_FSYNC = 38;

const int _SC_SHARED_MEMORY_OBJECTS = 39;

const int _SC_SYNCHRONIZED_IO = 40;

const int _SC_TIMERS = 41;

const int _SC_AIO_LISTIO_MAX = 42;

const int _SC_AIO_MAX = 43;

const int _SC_AIO_PRIO_DELTA_MAX = 44;

const int _SC_DELAYTIMER_MAX = 45;

const int _SC_MQ_OPEN_MAX = 46;

const int _SC_MAPPED_FILES = 47;

const int _SC_RTSIG_MAX = 48;

const int _SC_SEM_NSEMS_MAX = 49;

const int _SC_SEM_VALUE_MAX = 50;

const int _SC_SIGQUEUE_MAX = 51;

const int _SC_TIMER_MAX = 52;

const int _SC_NPROCESSORS_CONF = 57;

const int _SC_NPROCESSORS_ONLN = 58;

const int _SC_2_PBS = 59;

const int _SC_2_PBS_ACCOUNTING = 60;

const int _SC_2_PBS_CHECKPOINT = 61;

const int _SC_2_PBS_LOCATE = 62;

const int _SC_2_PBS_MESSAGE = 63;

const int _SC_2_PBS_TRACK = 64;

const int _SC_ADVISORY_INFO = 65;

const int _SC_BARRIERS = 66;

const int _SC_CLOCK_SELECTION = 67;

const int _SC_CPUTIME = 68;

const int _SC_FILE_LOCKING = 69;

const int _SC_GETGR_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX = 71;

const int _SC_HOST_NAME_MAX = 72;

const int _SC_LOGIN_NAME_MAX = 73;

const int _SC_MONOTONIC_CLOCK = 74;

const int _SC_MQ_PRIO_MAX = 75;

const int _SC_READER_WRITER_LOCKS = 76;

const int _SC_REGEXP = 77;

const int _SC_SHELL = 78;

const int _SC_SPAWN = 79;

const int _SC_SPIN_LOCKS = 80;

const int _SC_SPORADIC_SERVER = 81;

const int _SC_THREAD_ATTR_STACKADDR = 82;

const int _SC_THREAD_ATTR_STACKSIZE = 83;

const int _SC_THREAD_CPUTIME = 84;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;

const int _SC_THREAD_KEYS_MAX = 86;

const int _SC_THREAD_PRIO_INHERIT = 87;

const int _SC_THREAD_PRIO_PROTECT = 88;

const int _SC_THREAD_PRIORITY_SCHEDULING = 89;

const int _SC_THREAD_PROCESS_SHARED = 90;

const int _SC_THREAD_SAFE_FUNCTIONS = 91;

const int _SC_THREAD_SPORADIC_SERVER = 92;

const int _SC_THREAD_STACK_MIN = 93;

const int _SC_THREAD_THREADS_MAX = 94;

const int _SC_TIMEOUTS = 95;

const int _SC_THREADS = 96;

const int _SC_TRACE = 97;

const int _SC_TRACE_EVENT_FILTER = 98;

const int _SC_TRACE_INHERIT = 99;

const int _SC_TRACE_LOG = 100;

const int _SC_TTY_NAME_MAX = 101;

const int _SC_TYPED_MEMORY_OBJECTS = 102;

const int _SC_V6_ILP32_OFF32 = 103;

const int _SC_V6_ILP32_OFFBIG = 104;

const int _SC_V6_LP64_OFF64 = 105;

const int _SC_V6_LPBIG_OFFBIG = 106;

const int _SC_IPV6 = 118;

const int _SC_RAW_SOCKETS = 119;

const int _SC_SYMLOOP_MAX = 120;

const int _SC_ATEXIT_MAX = 107;

const int _SC_IOV_MAX = 56;

const int _SC_PAGE_SIZE = 29;

const int _SC_XOPEN_CRYPT = 108;

const int _SC_XOPEN_ENH_I18N = 109;

const int _SC_XOPEN_LEGACY = 110;

const int _SC_XOPEN_REALTIME = 111;

const int _SC_XOPEN_REALTIME_THREADS = 112;

const int _SC_XOPEN_SHM = 113;

const int _SC_XOPEN_STREAMS = 114;

const int _SC_XOPEN_UNIX = 115;

const int _SC_XOPEN_VERSION = 116;

const int _SC_XOPEN_XCU_VERSION = 121;

const int _SC_XBS5_ILP32_OFF32 = 122;

const int _SC_XBS5_ILP32_OFFBIG = 123;

const int _SC_XBS5_LP64_OFF64 = 124;

const int _SC_XBS5_LPBIG_OFFBIG = 125;

const int _SC_SS_REPL_MAX = 126;

const int _SC_TRACE_EVENT_NAME_MAX = 127;

const int _SC_TRACE_NAME_MAX = 128;

const int _SC_TRACE_SYS_MAX = 129;

const int _SC_TRACE_USER_EVENT_MAX = 130;

const int _SC_PASS_MAX = 131;

const int _SC_PHYS_PAGES = 200;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 10;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 20;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;

const int _CS_XBS5_ILP32_OFF32_LIBS = 22;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 26;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 28;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 29;

const int _CS_XBS5_LP64_OFF64_LIBS = 30;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;

const int _CS_DARWIN_USER_DIR = 65536;

const int _CS_DARWIN_USER_TEMP_DIR = 65537;

const int _CS_DARWIN_USER_CACHE_DIR = 65538;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int SYNC_VOLUME_FULLSYNC = 1;

const int SYNC_VOLUME_WAIT = 2;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_NOFOLLOW_ANY = 536870912;

const int O_EXEC = 1073741824;

const int O_SEARCH = 1074790400;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int AT_SYMLINK_NOFOLLOW_ANY = 2048;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int O_DP_AUTHENTICATE = 4;

const int AUTH_OPEN_NOAUTHFD = -1;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_OFD_SETLK = 90;

const int F_OFD_SETLKW = 91;

const int F_OFD_GETLK = 92;

const int F_OFD_SETLKWTIMEOUT = 93;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int F_ADDFILESIGS_INFO = 103;

const int F_ADDFILESUPPL = 104;

const int F_GETSIGSINFO = 105;

const int F_SETLEASE = 106;

const int F_GETLEASE = 107;

const int F_TRANSFEREXTENTS = 110;

const int F_ATTRIBUTION_TAG = 111;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_ALLOCATEPERSIST = 8;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_FSIGNATURES_CDHASH_LEN = 20;

const int GETSIGSINFO_PLATFORM_BINARY = 1;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int ATTRIBUTION_NAME_MAX = 255;

const int F_CREATE_TAG = 1;

const int F_DELETE_TAG = 2;

const int F_QUERY_TAG = 4;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int FILESEC_GUID = 3;

const int DISPATCH_API_VERSION = 20181008;

const int __OS_WORKGROUP_ATTR_SIZE__ = 60;

const int __OS_WORKGROUP_INTERVAL_DATA_SIZE__ = 56;

const int __OS_WORKGROUP_JOIN_TOKEN_SIZE__ = 36;

const int _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT = 799564724;

const int _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT = 799564740;

const int _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT = 1386695757;

const int DISPATCH_SWIFT3_OVERLAY = 0;

const int TIME_MICROS_MAX = 1000000;

const int SYSTEM_CLOCK = 0;

const int CALENDAR_CLOCK = 1;

const int REALTIME_CLOCK = 0;

const int CLOCK_GET_TIME_RES = 1;

const int CLOCK_ALARM_CURRES = 3;

const int CLOCK_ALARM_MINRES = 4;

const int CLOCK_ALARM_MAXRES = 5;

const int NSEC_PER_USEC = 1000;

const int USEC_PER_SEC = 1000000;

const int NSEC_PER_SEC = 1000000000;

const int NSEC_PER_MSEC = 1000000;

const int ALRMTYPE = 255;

const int TIME_ABSOLUTE = 0;

const int TIME_RELATIVE = 1;

const int MSEC_PER_SEC = 1000;

const int DISPATCH_TIME_NOW = 0;

const int DISPATCH_TIME_FOREVER = -1;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int DISPATCH_APPLY_AUTO_AVAILABLE = 0;

const int DISPATCH_QUEUE_PRIORITY_HIGH = 2;

const int DISPATCH_QUEUE_PRIORITY_DEFAULT = 0;

const int DISPATCH_QUEUE_PRIORITY_LOW = -2;

const int DISPATCH_QUEUE_PRIORITY_BACKGROUND = -32768;

const int DISPATCH_QUEUE_SERIAL = 0;

const int DISPATCH_TARGET_QUEUE_DEFAULT = 0;

const int DISPATCH_CURRENT_QUEUE_LABEL = 0;

const int KERN_SUCCESS = 0;

const int KERN_INVALID_ADDRESS = 1;

const int KERN_PROTECTION_FAILURE = 2;

const int KERN_NO_SPACE = 3;

const int KERN_INVALID_ARGUMENT = 4;

const int KERN_FAILURE = 5;

const int KERN_RESOURCE_SHORTAGE = 6;

const int KERN_NOT_RECEIVER = 7;

const int KERN_NO_ACCESS = 8;

const int KERN_MEMORY_FAILURE = 9;

const int KERN_MEMORY_ERROR = 10;

const int KERN_ALREADY_IN_SET = 11;

const int KERN_NOT_IN_SET = 12;

const int KERN_NAME_EXISTS = 13;

const int KERN_ABORTED = 14;

const int KERN_INVALID_NAME = 15;

const int KERN_INVALID_TASK = 16;

const int KERN_INVALID_RIGHT = 17;

const int KERN_INVALID_VALUE = 18;

const int KERN_UREFS_OVERFLOW = 19;

const int KERN_INVALID_CAPABILITY = 20;

const int KERN_RIGHT_EXISTS = 21;

const int KERN_INVALID_HOST = 22;

const int KERN_MEMORY_PRESENT = 23;

const int KERN_MEMORY_DATA_MOVED = 24;

const int KERN_MEMORY_RESTART_COPY = 25;

const int KERN_INVALID_PROCESSOR_SET = 26;

const int KERN_POLICY_LIMIT = 27;

const int KERN_INVALID_POLICY = 28;

const int KERN_INVALID_OBJECT = 29;

const int KERN_ALREADY_WAITING = 30;

const int KERN_DEFAULT_SET = 31;

const int KERN_EXCEPTION_PROTECTED = 32;

const int KERN_INVALID_LEDGER = 33;

const int KERN_INVALID_MEMORY_CONTROL = 34;

const int KERN_INVALID_SECURITY = 35;

const int KERN_NOT_DEPRESSED = 36;

const int KERN_TERMINATED = 37;

const int KERN_LOCK_SET_DESTROYED = 38;

const int KERN_LOCK_UNSTABLE = 39;

const int KERN_LOCK_OWNED = 40;

const int KERN_LOCK_OWNED_SELF = 41;

const int KERN_SEMAPHORE_DESTROYED = 42;

const int KERN_RPC_SERVER_TERMINATED = 43;

const int KERN_RPC_TERMINATE_ORPHAN = 44;

const int KERN_RPC_CONTINUE_ORPHAN = 45;

const int KERN_NOT_SUPPORTED = 46;

const int KERN_NODE_DOWN = 47;

const int KERN_NOT_WAITING = 48;

const int KERN_OPERATION_TIMED_OUT = 49;

const int KERN_CODESIGN_ERROR = 50;

const int KERN_POLICY_STATIC = 51;

const int KERN_INSUFFICIENT_BUFFER_SIZE = 52;

const int KERN_DENIED = 53;

const int KERN_MISSING_KC = 54;

const int KERN_INVALID_KC = 55;

const int KERN_NOT_FOUND = 56;

const int KERN_RETURN_MAX = 256;

const int MACH_MSG_TIMEOUT_NONE = 0;

const int MACH_MSGH_BITS_ZERO = 0;

const int MACH_MSGH_BITS_REMOTE_MASK = 31;

const int MACH_MSGH_BITS_LOCAL_MASK = 7936;

const int MACH_MSGH_BITS_VOUCHER_MASK = 2031616;

const int MACH_MSGH_BITS_PORTS_MASK = 2039583;

const int MACH_MSGH_BITS_COMPLEX = 2147483648;

const int MACH_MSGH_BITS_USER = 2149523231;

const int MACH_MSGH_BITS_RAISEIMP = 536870912;

const int MACH_MSGH_BITS_DENAP = 536870912;

const int MACH_MSGH_BITS_IMPHOLDASRT = 268435456;

const int MACH_MSGH_BITS_DENAPHOLDASRT = 268435456;

const int MACH_MSGH_BITS_CIRCULAR = 268435456;

const int MACH_MSGH_BITS_USED = 2954829599;

const int MACH_MSG_PRIORITY_UNSPECIFIED = 0;

const int MACH_MSG_TYPE_MOVE_RECEIVE = 16;

const int MACH_MSG_TYPE_MOVE_SEND = 17;

const int MACH_MSG_TYPE_MOVE_SEND_ONCE = 18;

const int MACH_MSG_TYPE_COPY_SEND = 19;

const int MACH_MSG_TYPE_MAKE_SEND = 20;

const int MACH_MSG_TYPE_MAKE_SEND_ONCE = 21;

const int MACH_MSG_TYPE_COPY_RECEIVE = 22;

const int MACH_MSG_TYPE_DISPOSE_RECEIVE = 24;

const int MACH_MSG_TYPE_DISPOSE_SEND = 25;

const int MACH_MSG_TYPE_DISPOSE_SEND_ONCE = 26;

const int MACH_MSG_PHYSICAL_COPY = 0;

const int MACH_MSG_VIRTUAL_COPY = 1;

const int MACH_MSG_ALLOCATE = 2;

const int MACH_MSG_OVERWRITE = 3;

const int MACH_MSG_GUARD_FLAGS_NONE = 0;

const int MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = 1;

const int MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = 2;

const int MACH_MSG_GUARD_FLAGS_MASK = 3;

const int MACH_MSG_PORT_DESCRIPTOR = 0;

const int MACH_MSG_OOL_DESCRIPTOR = 1;

const int MACH_MSG_OOL_PORTS_DESCRIPTOR = 2;

const int MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3;

const int MACH_MSG_GUARDED_PORT_DESCRIPTOR = 4;

const int MACH_MSG_DESCRIPTOR_MAX = 4;

const int MACH_MSG_TRAILER_FORMAT_0 = 0;

const int MACH_MSG_FILTER_POLICY_ALLOW = 0;

const int MACH_MSG_TRAILER_MINIMUM_SIZE = 8;

const int MAX_TRAILER_SIZE = 68;

const int MACH_MSG_TRAILER_FORMAT_0_SIZE = 20;

const int MACH_MSG_SIZE_MAX = 4294967295;

const int MACH_MSG_SIZE_RELIABLE = 262144;

const int MACH_MSGH_KIND_NORMAL = 0;

const int MACH_MSGH_KIND_NOTIFICATION = 1;

const int MACH_MSG_TYPE_PORT_NONE = 0;

const int MACH_MSG_TYPE_PORT_NAME = 15;

const int MACH_MSG_TYPE_PORT_RECEIVE = 16;

const int MACH_MSG_TYPE_PORT_SEND = 17;

const int MACH_MSG_TYPE_PORT_SEND_ONCE = 18;

const int MACH_MSG_TYPE_LAST = 22;

const int MACH_MSG_TYPE_POLYMORPHIC = 4294967295;

const int MACH_MSG_OPTION_NONE = 0;

const int MACH_SEND_MSG = 1;

const int MACH_RCV_MSG = 2;

const int MACH_RCV_LARGE = 4;

const int MACH_RCV_LARGE_IDENTITY = 8;

const int MACH_SEND_TIMEOUT = 16;

const int MACH_SEND_OVERRIDE = 32;

const int MACH_SEND_INTERRUPT = 64;

const int MACH_SEND_NOTIFY = 128;

const int MACH_SEND_ALWAYS = 65536;

const int MACH_SEND_FILTER_NONFATAL = 65536;

const int MACH_SEND_TRAILER = 131072;

const int MACH_SEND_NOIMPORTANCE = 262144;

const int MACH_SEND_NODENAP = 262144;

const int MACH_SEND_IMPORTANCE = 524288;

const int MACH_SEND_SYNC_OVERRIDE = 1048576;

const int MACH_SEND_PROPAGATE_QOS = 2097152;

const int MACH_SEND_SYNC_USE_THRPRI = 2097152;

const int MACH_SEND_KERNEL = 4194304;

const int MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = 8388608;

const int MACH_RCV_TIMEOUT = 256;

const int MACH_RCV_NOTIFY = 0;

const int MACH_RCV_INTERRUPT = 1024;

const int MACH_RCV_VOUCHER = 2048;

const int MACH_RCV_OVERWRITE = 0;

const int MACH_RCV_GUARDED_DESC = 4096;

const int MACH_RCV_SYNC_WAIT = 16384;

const int MACH_RCV_SYNC_PEEK = 32768;

const int MACH_MSG_STRICT_REPLY = 512;

const int MACH_RCV_TRAILER_NULL = 0;

const int MACH_RCV_TRAILER_SEQNO = 1;

const int MACH_RCV_TRAILER_SENDER = 2;

const int MACH_RCV_TRAILER_AUDIT = 3;

const int MACH_RCV_TRAILER_CTX = 4;

const int MACH_RCV_TRAILER_AV = 7;

const int MACH_RCV_TRAILER_LABELS = 8;

const int MACH_RCV_TRAILER_MASK = 251658240;

const int MACH_MSG_SUCCESS = 0;

const int MACH_MSG_MASK = 15872;

const int MACH_MSG_IPC_SPACE = 8192;

const int MACH_MSG_VM_SPACE = 4096;

const int MACH_MSG_IPC_KERNEL = 2048;

const int MACH_MSG_VM_KERNEL = 1024;

const int MACH_SEND_IN_PROGRESS = 268435457;

const int MACH_SEND_INVALID_DATA = 268435458;

const int MACH_SEND_INVALID_DEST = 268435459;

const int MACH_SEND_TIMED_OUT = 268435460;

const int MACH_SEND_INVALID_VOUCHER = 268435461;

const int MACH_SEND_INTERRUPTED = 268435463;

const int MACH_SEND_MSG_TOO_SMALL = 268435464;

const int MACH_SEND_INVALID_REPLY = 268435465;

const int MACH_SEND_INVALID_RIGHT = 268435466;

const int MACH_SEND_INVALID_NOTIFY = 268435467;

const int MACH_SEND_INVALID_MEMORY = 268435468;

const int MACH_SEND_NO_BUFFER = 268435469;

const int MACH_SEND_TOO_LARGE = 268435470;

const int MACH_SEND_INVALID_TYPE = 268435471;

const int MACH_SEND_INVALID_HEADER = 268435472;

const int MACH_SEND_INVALID_TRAILER = 268435473;

const int MACH_SEND_INVALID_CONTEXT = 268435474;

const int MACH_SEND_INVALID_OPTIONS = 268435475;

const int MACH_SEND_INVALID_RT_OOL_SIZE = 268435477;

const int MACH_SEND_NO_GRANT_DEST = 268435478;

const int MACH_SEND_MSG_FILTERED = 268435479;

const int MACH_SEND_AUX_TOO_SMALL = 268435480;

const int MACH_SEND_AUX_TOO_LARGE = 268435481;

const int MACH_RCV_IN_PROGRESS = 268451841;

const int MACH_RCV_INVALID_NAME = 268451842;

const int MACH_RCV_TIMED_OUT = 268451843;

const int MACH_RCV_TOO_LARGE = 268451844;

const int MACH_RCV_INTERRUPTED = 268451845;

const int MACH_RCV_PORT_CHANGED = 268451846;

const int MACH_RCV_INVALID_NOTIFY = 268451847;

const int MACH_RCV_INVALID_DATA = 268451848;

const int MACH_RCV_PORT_DIED = 268451849;

const int MACH_RCV_IN_SET = 268451850;

const int MACH_RCV_HEADER_ERROR = 268451851;

const int MACH_RCV_BODY_ERROR = 268451852;

const int MACH_RCV_INVALID_TYPE = 268451853;

const int MACH_RCV_SCATTER_SMALL = 268451854;

const int MACH_RCV_INVALID_TRAILER = 268451855;

const int MACH_RCV_IN_PROGRESS_TIMED = 268451857;

const int MACH_RCV_INVALID_REPLY = 268451858;

const int MACH_RCV_INVALID_ARGUMENTS = 268451859;

const int DISPATCH_MACH_SEND_DEAD = 1;

const int DISPATCH_MEMORYPRESSURE_NORMAL = 1;

const int DISPATCH_MEMORYPRESSURE_WARN = 2;

const int DISPATCH_MEMORYPRESSURE_CRITICAL = 4;

const int DISPATCH_PROC_EXIT = 2147483648;

const int DISPATCH_PROC_FORK = 1073741824;

const int DISPATCH_PROC_EXEC = 536870912;

const int DISPATCH_PROC_SIGNAL = 134217728;

const int DISPATCH_VNODE_DELETE = 1;

const int DISPATCH_VNODE_WRITE = 2;

const int DISPATCH_VNODE_EXTEND = 4;

const int DISPATCH_VNODE_ATTRIB = 8;

const int DISPATCH_VNODE_LINK = 16;

const int DISPATCH_VNODE_RENAME = 32;

const int DISPATCH_VNODE_REVOKE = 64;

const int DISPATCH_VNODE_FUNLOCK = 256;

const int DISPATCH_TIMER_STRICT = 1;

const int DISPATCH_ONCE_INLINE_FASTPATH = 1;

const int DISPATCH_DATA_DESTRUCTOR_DEFAULT = 0;

const int DISPATCH_IO_STREAM = 0;

const int DISPATCH_IO_RANDOM = 1;

const int DISPATCH_IO_STOP = 1;

const int DISPATCH_IO_STRICT_INTERVAL = 1;

const int NSURLResponseUnknownLength = -1;

const int DART_FLAGS_CURRENT_VERSION = 12;

const int DART_INITIALIZE_PARAMS_CURRENT_VERSION = 4;

const int ILLEGAL_PORT = 0;

const String DART_KERNEL_ISOLATE_NAME = 'kernel-service';

const String DART_VM_SERVICE_ISOLATE_NAME = 'vm-service';

const String kSnapshotBuildIdCSymbol = 'kDartSnapshotBuildId';

const String kVmSnapshotDataCSymbol = 'kDartVmSnapshotData';

const String kVmSnapshotInstructionsCSymbol = 'kDartVmSnapshotInstructions';

const String kVmSnapshotBssCSymbol = 'kDartVmSnapshotBss';

const String kIsolateSnapshotDataCSymbol = 'kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsCSymbol =
    'kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssCSymbol = 'kDartIsolateSnapshotBss';

const String kSnapshotBuildIdAsmSymbol = '_kDartSnapshotBuildId';

const String kVmSnapshotDataAsmSymbol = '_kDartVmSnapshotData';

const String kVmSnapshotInstructionsAsmSymbol = '_kDartVmSnapshotInstructions';

const String kVmSnapshotBssAsmSymbol = '_kDartVmSnapshotBss';

const String kIsolateSnapshotDataAsmSymbol = '_kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsAsmSymbol =
    '_kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssAsmSymbol = '_kDartIsolateSnapshotBss';
